local build = {
  expression(val):
    if std.type(val) == 'object' then
      if std.objectHas(val, '_')
      then
        if std.objectHas(val._, 'ref')
        then val._.ref
        else '"%s"' % [val._.str]
      else '{%s}' % [std.join(',', std.map(function(key) '%s:%s' % [self.expression(key), self.expression(val[key])], std.objectFields(val)))]
    else if std.type(val) == 'array' then '[%s]' % [std.join(',', std.map(function(element) self.expression(element), val))]
    else if std.type(val) == 'string' then '"%s"' % [val]
    else '"%s"' % [val],
  template(val):
    if std.type(val) == 'object' then
      if std.objectHas(val, '_')
      then
        if std.objectHas(val._, 'ref')
        then std.strReplace(self.string(val), '\n', '\\n')
        else val._.str
      else std.mapWithKey(function(key, value) self.template(value), val)
    else if std.type(val) == 'array' then std.map(function(element) self.template(element), val)
    else if std.type(val) == 'string' then std.strReplace(self.string(val), '\n', '\\n')
    else val,
  string(val):
    if std.type(val) == 'object' then
      if std.objectHas(val, '_')
      then
        if std.objectHas(val._, 'ref')
        then '${%s}' % [val._.ref]
        else val._.str
      else '${%s}' % [self.expression(val)]
    else if std.type(val) == 'array' then '${%s}' % [self.expression(val)]
    else if std.type(val) == 'string' then val
    else val,
  providerRequirements(val):
    if std.type(val) == 'object'
    then
      if std.objectHas(val, '_')
      then std.get(val._, 'providerRequirements', {})
      else std.foldl(function(acc, val) std.mergePatch(acc, val), std.map(function(key) build.providerRequirements(val[key]), std.objectFields(val)), {})
    else if std.type(val) == 'array'
    then std.foldl(function(acc, val) std.mergePatch(acc, val), std.map(function(element) build.providerRequirements(element), val), {})
    else {},
};

local providerTemplate(provider, requirements, configuration) = {
  local providerRequirements = { [provider]: requirements },
  local providerAlias = if configuration == null then null else configuration.alias,
  local providerWithAlias = if configuration == null then null else '%s.%s' % [provider, providerAlias],
  local providerConfiguration = if configuration == null then {} else { [providerWithAlias]: { provider: { [provider]: configuration } } },
  local providerReference = if configuration == null then {} else { provider: providerWithAlias },
  blockType(blockType): {
    local blockTypePath = if blockType == 'resource' then [] else ['data'],
    resource(type, name): {
      local resourceType = std.substr(type, std.length(provider) + 1, std.length(type)),
      local resourcePath = blockTypePath + [type, name],
      _(rawBlock, block): {
        local metaBlock = {
          depends_on: build.template(std.get(rawBlock, 'depends_on', null)),
          count: build.template(std.get(rawBlock, 'count', null)),
          for_each: build.template(std.get(rawBlock, 'for_each', null)),
        },
        type: if std.objectHas(rawBlock, 'for_each') then 'map' else if std.objectHas(rawBlock, 'count') then 'list' else 'object',
        providerRequirements: build.providerRequirements(rawBlock) + providerRequirements,
        providerConfiguration: providerConfiguration,
        provider: provider,
        providerAlias: providerAlias,
        resourceType: resourceType,
        name: name,
        ref: std.join('.', resourcePath),
        block: {
          [blockType]: {
            [type]: {
              [name]: std.prune(metaBlock + block + providerReference),
            },
          },
        },
      },
      field(fieldName): {
        local fieldPath = resourcePath + [fieldName],
        _: {
          ref: std.join('.', fieldPath),
        },
      },
    },
  },
  func(name, parameters=[]): {
    local parameterString = std.join(', ', [build.expression(parameter) for parameter in parameters]),
    _: {
      providerRequirements: build.providerRequirements(parameters) + providerRequirements,
      providerConfiguration: providerConfiguration,
      ref: 'provider::%s::%s(%s)' % [provider, name, parameterString],
    },
  },
};

local provider(configuration) = {
  local requirements = {
    source: 'registry.terraform.io/grafana/grafana',
    version: '3.20.0',
  },
  local provider = providerTemplate('grafana', requirements, configuration),
  resource: {
    local blockType = provider.blockType('resource'),
    annotation(name, block): {
      local resource = blockType.resource('grafana_annotation', name),
      _: resource._(block, {
        dashboard_uid: build.template(std.get(block, 'dashboard_uid', null)),
        id: build.template(std.get(block, 'id', null)),
        org_id: build.template(std.get(block, 'org_id', null)),
        panel_id: build.template(std.get(block, 'panel_id', null)),
        tags: build.template(std.get(block, 'tags', null)),
        text: build.template(block.text),
        time: build.template(std.get(block, 'time', null)),
        time_end: build.template(std.get(block, 'time_end', null)),
      }),
      dashboard_uid: resource.field('dashboard_uid'),
      id: resource.field('id'),
      org_id: resource.field('org_id'),
      panel_id: resource.field('panel_id'),
      tags: resource.field('tags'),
      text: resource.field('text'),
      time: resource.field('time'),
      time_end: resource.field('time_end'),
    },
    cloud_access_policy(name, block): {
      local resource = blockType.resource('grafana_cloud_access_policy', name),
      _: resource._(block, {
        created_at: build.template(std.get(block, 'created_at', null)),
        display_name: build.template(std.get(block, 'display_name', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        policy_id: build.template(std.get(block, 'policy_id', null)),
        region: build.template(block.region),
        scopes: build.template(block.scopes),
        updated_at: build.template(std.get(block, 'updated_at', null)),
      }),
      created_at: resource.field('created_at'),
      display_name: resource.field('display_name'),
      id: resource.field('id'),
      name: resource.field('name'),
      policy_id: resource.field('policy_id'),
      region: resource.field('region'),
      scopes: resource.field('scopes'),
      updated_at: resource.field('updated_at'),
    },
    cloud_access_policy_token(name, block): {
      local resource = blockType.resource('grafana_cloud_access_policy_token', name),
      _: resource._(block, {
        access_policy_id: build.template(block.access_policy_id),
        created_at: build.template(std.get(block, 'created_at', null)),
        display_name: build.template(std.get(block, 'display_name', null)),
        expires_at: build.template(std.get(block, 'expires_at', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        region: build.template(block.region),
        token: build.template(std.get(block, 'token', null)),
        updated_at: build.template(std.get(block, 'updated_at', null)),
      }),
      access_policy_id: resource.field('access_policy_id'),
      created_at: resource.field('created_at'),
      display_name: resource.field('display_name'),
      expires_at: resource.field('expires_at'),
      id: resource.field('id'),
      name: resource.field('name'),
      region: resource.field('region'),
      token: resource.field('token'),
      updated_at: resource.field('updated_at'),
    },
    cloud_org_member(name, block): {
      local resource = blockType.resource('grafana_cloud_org_member', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        org: build.template(block.org),
        receive_billing_emails: build.template(std.get(block, 'receive_billing_emails', null)),
        role: build.template(block.role),
        user: build.template(block.user),
      }),
      id: resource.field('id'),
      org: resource.field('org'),
      receive_billing_emails: resource.field('receive_billing_emails'),
      role: resource.field('role'),
      user: resource.field('user'),
    },
    cloud_plugin_installation(name, block): {
      local resource = blockType.resource('grafana_cloud_plugin_installation', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        slug: build.template(block.slug),
        stack_slug: build.template(block.stack_slug),
        version: build.template(block.version),
      }),
      id: resource.field('id'),
      slug: resource.field('slug'),
      stack_slug: resource.field('stack_slug'),
      version: resource.field('version'),
    },
    cloud_private_data_source_connect_network(name, block): {
      local resource = blockType.resource('grafana_cloud_private_data_source_connect_network', name),
      _: resource._(block, {
        created_at: build.template(std.get(block, 'created_at', null)),
        display_name: build.template(std.get(block, 'display_name', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        pdc_network_id: build.template(std.get(block, 'pdc_network_id', null)),
        region: build.template(block.region),
        stack_identifier: build.template(block.stack_identifier),
        updated_at: build.template(std.get(block, 'updated_at', null)),
      }),
      created_at: resource.field('created_at'),
      display_name: resource.field('display_name'),
      id: resource.field('id'),
      name: resource.field('name'),
      pdc_network_id: resource.field('pdc_network_id'),
      region: resource.field('region'),
      stack_identifier: resource.field('stack_identifier'),
      updated_at: resource.field('updated_at'),
    },
    cloud_private_data_source_connect_network_token(name, block): {
      local resource = blockType.resource('grafana_cloud_private_data_source_connect_network_token', name),
      _: resource._(block, {
        created_at: build.template(std.get(block, 'created_at', null)),
        display_name: build.template(std.get(block, 'display_name', null)),
        expires_at: build.template(std.get(block, 'expires_at', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        pdc_network_id: build.template(block.pdc_network_id),
        region: build.template(block.region),
        token: build.template(std.get(block, 'token', null)),
        updated_at: build.template(std.get(block, 'updated_at', null)),
      }),
      created_at: resource.field('created_at'),
      display_name: resource.field('display_name'),
      expires_at: resource.field('expires_at'),
      id: resource.field('id'),
      name: resource.field('name'),
      pdc_network_id: resource.field('pdc_network_id'),
      region: resource.field('region'),
      token: resource.field('token'),
      updated_at: resource.field('updated_at'),
    },
    cloud_provider_aws_account(name, block): {
      local resource = blockType.resource('grafana_cloud_provider_aws_account', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        regions: build.template(block.regions),
        resource_id: build.template(std.get(block, 'resource_id', null)),
        role_arn: build.template(block.role_arn),
        stack_id: build.template(block.stack_id),
      }),
      id: resource.field('id'),
      name: resource.field('name'),
      regions: resource.field('regions'),
      resource_id: resource.field('resource_id'),
      role_arn: resource.field('role_arn'),
      stack_id: resource.field('stack_id'),
    },
    cloud_provider_aws_cloudwatch_scrape_job(name, block): {
      local resource = blockType.resource('grafana_cloud_provider_aws_cloudwatch_scrape_job', name),
      _: resource._(block, {
        aws_account_resource_id: build.template(block.aws_account_resource_id),
        disabled_reason: build.template(std.get(block, 'disabled_reason', null)),
        enabled: build.template(std.get(block, 'enabled', null)),
        export_tags: build.template(std.get(block, 'export_tags', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        regions_subset_override: build.template(std.get(block, 'regions_subset_override', null)),
        stack_id: build.template(block.stack_id),
        static_labels: build.template(std.get(block, 'static_labels', null)),
      }),
      aws_account_resource_id: resource.field('aws_account_resource_id'),
      disabled_reason: resource.field('disabled_reason'),
      enabled: resource.field('enabled'),
      export_tags: resource.field('export_tags'),
      id: resource.field('id'),
      name: resource.field('name'),
      regions_subset_override: resource.field('regions_subset_override'),
      stack_id: resource.field('stack_id'),
      static_labels: resource.field('static_labels'),
    },
    cloud_provider_azure_credential(name, block): {
      local resource = blockType.resource('grafana_cloud_provider_azure_credential', name),
      _: resource._(block, {
        client_id: build.template(block.client_id),
        client_secret: build.template(block.client_secret),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        resource_id: build.template(std.get(block, 'resource_id', null)),
        resource_tags_to_add_to_metrics: build.template(std.get(block, 'resource_tags_to_add_to_metrics', null)),
        stack_id: build.template(block.stack_id),
        tenant_id: build.template(block.tenant_id),
      }),
      client_id: resource.field('client_id'),
      client_secret: resource.field('client_secret'),
      id: resource.field('id'),
      name: resource.field('name'),
      resource_id: resource.field('resource_id'),
      resource_tags_to_add_to_metrics: resource.field('resource_tags_to_add_to_metrics'),
      stack_id: resource.field('stack_id'),
      tenant_id: resource.field('tenant_id'),
    },
    cloud_stack(name, block): {
      local resource = blockType.resource('grafana_cloud_stack', name),
      _: resource._(block, {
        alertmanager_ip_allow_list_cname: build.template(std.get(block, 'alertmanager_ip_allow_list_cname', null)),
        alertmanager_name: build.template(std.get(block, 'alertmanager_name', null)),
        alertmanager_status: build.template(std.get(block, 'alertmanager_status', null)),
        alertmanager_url: build.template(std.get(block, 'alertmanager_url', null)),
        alertmanager_user_id: build.template(std.get(block, 'alertmanager_user_id', null)),
        cluster_slug: build.template(std.get(block, 'cluster_slug', null)),
        description: build.template(std.get(block, 'description', null)),
        fleet_management_name: build.template(std.get(block, 'fleet_management_name', null)),
        fleet_management_status: build.template(std.get(block, 'fleet_management_status', null)),
        fleet_management_url: build.template(std.get(block, 'fleet_management_url', null)),
        fleet_management_user_id: build.template(std.get(block, 'fleet_management_user_id', null)),
        grafanas_ip_allow_list_cname: build.template(std.get(block, 'grafanas_ip_allow_list_cname', null)),
        graphite_ip_allow_list_cname: build.template(std.get(block, 'graphite_ip_allow_list_cname', null)),
        graphite_name: build.template(std.get(block, 'graphite_name', null)),
        graphite_private_connectivity_info_private_dns: build.template(std.get(block, 'graphite_private_connectivity_info_private_dns', null)),
        graphite_private_connectivity_info_service_name: build.template(std.get(block, 'graphite_private_connectivity_info_service_name', null)),
        graphite_status: build.template(std.get(block, 'graphite_status', null)),
        graphite_url: build.template(std.get(block, 'graphite_url', null)),
        graphite_user_id: build.template(std.get(block, 'graphite_user_id', null)),
        id: build.template(std.get(block, 'id', null)),
        influx_url: build.template(std.get(block, 'influx_url', null)),
        labels: build.template(std.get(block, 'labels', null)),
        logs_ip_allow_list_cname: build.template(std.get(block, 'logs_ip_allow_list_cname', null)),
        logs_name: build.template(std.get(block, 'logs_name', null)),
        logs_private_connectivity_info_private_dns: build.template(std.get(block, 'logs_private_connectivity_info_private_dns', null)),
        logs_private_connectivity_info_service_name: build.template(std.get(block, 'logs_private_connectivity_info_service_name', null)),
        logs_status: build.template(std.get(block, 'logs_status', null)),
        logs_url: build.template(std.get(block, 'logs_url', null)),
        logs_user_id: build.template(std.get(block, 'logs_user_id', null)),
        name: build.template(block.name),
        org_id: build.template(std.get(block, 'org_id', null)),
        org_name: build.template(std.get(block, 'org_name', null)),
        org_slug: build.template(std.get(block, 'org_slug', null)),
        otlp_private_connectivity_info_private_dns: build.template(std.get(block, 'otlp_private_connectivity_info_private_dns', null)),
        otlp_private_connectivity_info_service_name: build.template(std.get(block, 'otlp_private_connectivity_info_service_name', null)),
        otlp_url: build.template(std.get(block, 'otlp_url', null)),
        pdc_api_private_connectivity_info_private_dns: build.template(std.get(block, 'pdc_api_private_connectivity_info_private_dns', null)),
        pdc_api_private_connectivity_info_service_name: build.template(std.get(block, 'pdc_api_private_connectivity_info_service_name', null)),
        pdc_gateway_private_connectivity_info_private_dns: build.template(std.get(block, 'pdc_gateway_private_connectivity_info_private_dns', null)),
        pdc_gateway_private_connectivity_info_service_name: build.template(std.get(block, 'pdc_gateway_private_connectivity_info_service_name', null)),
        profiles_ip_allow_list_cname: build.template(std.get(block, 'profiles_ip_allow_list_cname', null)),
        profiles_name: build.template(std.get(block, 'profiles_name', null)),
        profiles_private_connectivity_info_private_dns: build.template(std.get(block, 'profiles_private_connectivity_info_private_dns', null)),
        profiles_private_connectivity_info_service_name: build.template(std.get(block, 'profiles_private_connectivity_info_service_name', null)),
        profiles_status: build.template(std.get(block, 'profiles_status', null)),
        profiles_url: build.template(std.get(block, 'profiles_url', null)),
        profiles_user_id: build.template(std.get(block, 'profiles_user_id', null)),
        prometheus_ip_allow_list_cname: build.template(std.get(block, 'prometheus_ip_allow_list_cname', null)),
        prometheus_name: build.template(std.get(block, 'prometheus_name', null)),
        prometheus_private_connectivity_info_private_dns: build.template(std.get(block, 'prometheus_private_connectivity_info_private_dns', null)),
        prometheus_private_connectivity_info_service_name: build.template(std.get(block, 'prometheus_private_connectivity_info_service_name', null)),
        prometheus_remote_endpoint: build.template(std.get(block, 'prometheus_remote_endpoint', null)),
        prometheus_remote_write_endpoint: build.template(std.get(block, 'prometheus_remote_write_endpoint', null)),
        prometheus_status: build.template(std.get(block, 'prometheus_status', null)),
        prometheus_url: build.template(std.get(block, 'prometheus_url', null)),
        prometheus_user_id: build.template(std.get(block, 'prometheus_user_id', null)),
        region_slug: build.template(std.get(block, 'region_slug', null)),
        slug: build.template(block.slug),
        status: build.template(std.get(block, 'status', null)),
        traces_ip_allow_list_cname: build.template(std.get(block, 'traces_ip_allow_list_cname', null)),
        traces_name: build.template(std.get(block, 'traces_name', null)),
        traces_private_connectivity_info_private_dns: build.template(std.get(block, 'traces_private_connectivity_info_private_dns', null)),
        traces_private_connectivity_info_service_name: build.template(std.get(block, 'traces_private_connectivity_info_service_name', null)),
        traces_status: build.template(std.get(block, 'traces_status', null)),
        traces_url: build.template(std.get(block, 'traces_url', null)),
        traces_user_id: build.template(std.get(block, 'traces_user_id', null)),
        url: build.template(std.get(block, 'url', null)),
        wait_for_readiness: build.template(std.get(block, 'wait_for_readiness', null)),
        wait_for_readiness_timeout: build.template(std.get(block, 'wait_for_readiness_timeout', null)),
      }),
      alertmanager_ip_allow_list_cname: resource.field('alertmanager_ip_allow_list_cname'),
      alertmanager_name: resource.field('alertmanager_name'),
      alertmanager_status: resource.field('alertmanager_status'),
      alertmanager_url: resource.field('alertmanager_url'),
      alertmanager_user_id: resource.field('alertmanager_user_id'),
      cluster_slug: resource.field('cluster_slug'),
      description: resource.field('description'),
      fleet_management_name: resource.field('fleet_management_name'),
      fleet_management_status: resource.field('fleet_management_status'),
      fleet_management_url: resource.field('fleet_management_url'),
      fleet_management_user_id: resource.field('fleet_management_user_id'),
      grafanas_ip_allow_list_cname: resource.field('grafanas_ip_allow_list_cname'),
      graphite_ip_allow_list_cname: resource.field('graphite_ip_allow_list_cname'),
      graphite_name: resource.field('graphite_name'),
      graphite_private_connectivity_info_private_dns: resource.field('graphite_private_connectivity_info_private_dns'),
      graphite_private_connectivity_info_service_name: resource.field('graphite_private_connectivity_info_service_name'),
      graphite_status: resource.field('graphite_status'),
      graphite_url: resource.field('graphite_url'),
      graphite_user_id: resource.field('graphite_user_id'),
      id: resource.field('id'),
      influx_url: resource.field('influx_url'),
      labels: resource.field('labels'),
      logs_ip_allow_list_cname: resource.field('logs_ip_allow_list_cname'),
      logs_name: resource.field('logs_name'),
      logs_private_connectivity_info_private_dns: resource.field('logs_private_connectivity_info_private_dns'),
      logs_private_connectivity_info_service_name: resource.field('logs_private_connectivity_info_service_name'),
      logs_status: resource.field('logs_status'),
      logs_url: resource.field('logs_url'),
      logs_user_id: resource.field('logs_user_id'),
      name: resource.field('name'),
      org_id: resource.field('org_id'),
      org_name: resource.field('org_name'),
      org_slug: resource.field('org_slug'),
      otlp_private_connectivity_info_private_dns: resource.field('otlp_private_connectivity_info_private_dns'),
      otlp_private_connectivity_info_service_name: resource.field('otlp_private_connectivity_info_service_name'),
      otlp_url: resource.field('otlp_url'),
      pdc_api_private_connectivity_info_private_dns: resource.field('pdc_api_private_connectivity_info_private_dns'),
      pdc_api_private_connectivity_info_service_name: resource.field('pdc_api_private_connectivity_info_service_name'),
      pdc_gateway_private_connectivity_info_private_dns: resource.field('pdc_gateway_private_connectivity_info_private_dns'),
      pdc_gateway_private_connectivity_info_service_name: resource.field('pdc_gateway_private_connectivity_info_service_name'),
      profiles_ip_allow_list_cname: resource.field('profiles_ip_allow_list_cname'),
      profiles_name: resource.field('profiles_name'),
      profiles_private_connectivity_info_private_dns: resource.field('profiles_private_connectivity_info_private_dns'),
      profiles_private_connectivity_info_service_name: resource.field('profiles_private_connectivity_info_service_name'),
      profiles_status: resource.field('profiles_status'),
      profiles_url: resource.field('profiles_url'),
      profiles_user_id: resource.field('profiles_user_id'),
      prometheus_ip_allow_list_cname: resource.field('prometheus_ip_allow_list_cname'),
      prometheus_name: resource.field('prometheus_name'),
      prometheus_private_connectivity_info_private_dns: resource.field('prometheus_private_connectivity_info_private_dns'),
      prometheus_private_connectivity_info_service_name: resource.field('prometheus_private_connectivity_info_service_name'),
      prometheus_remote_endpoint: resource.field('prometheus_remote_endpoint'),
      prometheus_remote_write_endpoint: resource.field('prometheus_remote_write_endpoint'),
      prometheus_status: resource.field('prometheus_status'),
      prometheus_url: resource.field('prometheus_url'),
      prometheus_user_id: resource.field('prometheus_user_id'),
      region_slug: resource.field('region_slug'),
      slug: resource.field('slug'),
      status: resource.field('status'),
      traces_ip_allow_list_cname: resource.field('traces_ip_allow_list_cname'),
      traces_name: resource.field('traces_name'),
      traces_private_connectivity_info_private_dns: resource.field('traces_private_connectivity_info_private_dns'),
      traces_private_connectivity_info_service_name: resource.field('traces_private_connectivity_info_service_name'),
      traces_status: resource.field('traces_status'),
      traces_url: resource.field('traces_url'),
      traces_user_id: resource.field('traces_user_id'),
      url: resource.field('url'),
      wait_for_readiness: resource.field('wait_for_readiness'),
      wait_for_readiness_timeout: resource.field('wait_for_readiness_timeout'),
    },
    cloud_stack_service_account(name, block): {
      local resource = blockType.resource('grafana_cloud_stack_service_account', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        is_disabled: build.template(std.get(block, 'is_disabled', null)),
        name: build.template(block.name),
        role: build.template(block.role),
        stack_slug: build.template(block.stack_slug),
      }),
      id: resource.field('id'),
      is_disabled: resource.field('is_disabled'),
      name: resource.field('name'),
      role: resource.field('role'),
      stack_slug: resource.field('stack_slug'),
    },
    cloud_stack_service_account_token(name, block): {
      local resource = blockType.resource('grafana_cloud_stack_service_account_token', name),
      _: resource._(block, {
        expiration: build.template(std.get(block, 'expiration', null)),
        has_expired: build.template(std.get(block, 'has_expired', null)),
        id: build.template(std.get(block, 'id', null)),
        key: build.template(std.get(block, 'key', null)),
        name: build.template(block.name),
        seconds_to_live: build.template(std.get(block, 'seconds_to_live', null)),
        service_account_id: build.template(block.service_account_id),
        stack_slug: build.template(block.stack_slug),
      }),
      expiration: resource.field('expiration'),
      has_expired: resource.field('has_expired'),
      id: resource.field('id'),
      key: resource.field('key'),
      name: resource.field('name'),
      seconds_to_live: resource.field('seconds_to_live'),
      service_account_id: resource.field('service_account_id'),
      stack_slug: resource.field('stack_slug'),
    },
    connections_metrics_endpoint_scrape_job(name, block): {
      local resource = blockType.resource('grafana_connections_metrics_endpoint_scrape_job', name),
      _: resource._(block, {
        authentication_basic_password: build.template(std.get(block, 'authentication_basic_password', null)),
        authentication_basic_username: build.template(std.get(block, 'authentication_basic_username', null)),
        authentication_bearer_token: build.template(std.get(block, 'authentication_bearer_token', null)),
        authentication_method: build.template(block.authentication_method),
        enabled: build.template(std.get(block, 'enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        scrape_interval_seconds: build.template(std.get(block, 'scrape_interval_seconds', null)),
        stack_id: build.template(block.stack_id),
        url: build.template(block.url),
      }),
      authentication_basic_password: resource.field('authentication_basic_password'),
      authentication_basic_username: resource.field('authentication_basic_username'),
      authentication_bearer_token: resource.field('authentication_bearer_token'),
      authentication_method: resource.field('authentication_method'),
      enabled: resource.field('enabled'),
      id: resource.field('id'),
      name: resource.field('name'),
      scrape_interval_seconds: resource.field('scrape_interval_seconds'),
      stack_id: resource.field('stack_id'),
      url: resource.field('url'),
    },
    contact_point(name, block): {
      local resource = blockType.resource('grafana_contact_point', name),
      _: resource._(block, {
        disable_provenance: build.template(std.get(block, 'disable_provenance', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        org_id: build.template(std.get(block, 'org_id', null)),
      }),
      disable_provenance: resource.field('disable_provenance'),
      id: resource.field('id'),
      name: resource.field('name'),
      org_id: resource.field('org_id'),
    },
    dashboard(name, block): {
      local resource = blockType.resource('grafana_dashboard', name),
      _: resource._(block, {
        config_json: build.template(block.config_json),
        dashboard_id: build.template(std.get(block, 'dashboard_id', null)),
        folder: build.template(std.get(block, 'folder', null)),
        id: build.template(std.get(block, 'id', null)),
        message: build.template(std.get(block, 'message', null)),
        org_id: build.template(std.get(block, 'org_id', null)),
        overwrite: build.template(std.get(block, 'overwrite', null)),
        uid: build.template(std.get(block, 'uid', null)),
        url: build.template(std.get(block, 'url', null)),
        version: build.template(std.get(block, 'version', null)),
      }),
      config_json: resource.field('config_json'),
      dashboard_id: resource.field('dashboard_id'),
      folder: resource.field('folder'),
      id: resource.field('id'),
      message: resource.field('message'),
      org_id: resource.field('org_id'),
      overwrite: resource.field('overwrite'),
      uid: resource.field('uid'),
      url: resource.field('url'),
      version: resource.field('version'),
    },
    dashboard_permission(name, block): {
      local resource = blockType.resource('grafana_dashboard_permission', name),
      _: resource._(block, {
        dashboard_uid: build.template(std.get(block, 'dashboard_uid', null)),
        id: build.template(std.get(block, 'id', null)),
        org_id: build.template(std.get(block, 'org_id', null)),
      }),
      dashboard_uid: resource.field('dashboard_uid'),
      id: resource.field('id'),
      org_id: resource.field('org_id'),
    },
    dashboard_permission_item(name, block): {
      local resource = blockType.resource('grafana_dashboard_permission_item', name),
      _: resource._(block, {
        dashboard_uid: build.template(block.dashboard_uid),
        id: build.template(std.get(block, 'id', null)),
        org_id: build.template(std.get(block, 'org_id', null)),
        permission: build.template(block.permission),
        role: build.template(std.get(block, 'role', null)),
        team: build.template(std.get(block, 'team', null)),
        user: build.template(std.get(block, 'user', null)),
      }),
      dashboard_uid: resource.field('dashboard_uid'),
      id: resource.field('id'),
      org_id: resource.field('org_id'),
      permission: resource.field('permission'),
      role: resource.field('role'),
      team: resource.field('team'),
      user: resource.field('user'),
    },
    dashboard_public(name, block): {
      local resource = blockType.resource('grafana_dashboard_public', name),
      _: resource._(block, {
        access_token: build.template(std.get(block, 'access_token', null)),
        annotations_enabled: build.template(std.get(block, 'annotations_enabled', null)),
        dashboard_uid: build.template(block.dashboard_uid),
        id: build.template(std.get(block, 'id', null)),
        is_enabled: build.template(std.get(block, 'is_enabled', null)),
        org_id: build.template(std.get(block, 'org_id', null)),
        share: build.template(std.get(block, 'share', null)),
        time_selection_enabled: build.template(std.get(block, 'time_selection_enabled', null)),
        uid: build.template(std.get(block, 'uid', null)),
      }),
      access_token: resource.field('access_token'),
      annotations_enabled: resource.field('annotations_enabled'),
      dashboard_uid: resource.field('dashboard_uid'),
      id: resource.field('id'),
      is_enabled: resource.field('is_enabled'),
      org_id: resource.field('org_id'),
      share: resource.field('share'),
      time_selection_enabled: resource.field('time_selection_enabled'),
      uid: resource.field('uid'),
    },
    data_source(name, block): {
      local resource = blockType.resource('grafana_data_source', name),
      _: resource._(block, {
        access_mode: build.template(std.get(block, 'access_mode', null)),
        basic_auth_enabled: build.template(std.get(block, 'basic_auth_enabled', null)),
        basic_auth_username: build.template(std.get(block, 'basic_auth_username', null)),
        database_name: build.template(std.get(block, 'database_name', null)),
        http_headers: build.template(std.get(block, 'http_headers', null)),
        id: build.template(std.get(block, 'id', null)),
        is_default: build.template(std.get(block, 'is_default', null)),
        json_data_encoded: build.template(std.get(block, 'json_data_encoded', null)),
        name: build.template(block.name),
        org_id: build.template(std.get(block, 'org_id', null)),
        private_data_source_connect_network_id: build.template(std.get(block, 'private_data_source_connect_network_id', null)),
        secure_json_data_encoded: build.template(std.get(block, 'secure_json_data_encoded', null)),
        type: build.template(block.type),
        uid: build.template(std.get(block, 'uid', null)),
        url: build.template(std.get(block, 'url', null)),
        username: build.template(std.get(block, 'username', null)),
      }),
      access_mode: resource.field('access_mode'),
      basic_auth_enabled: resource.field('basic_auth_enabled'),
      basic_auth_username: resource.field('basic_auth_username'),
      database_name: resource.field('database_name'),
      http_headers: resource.field('http_headers'),
      id: resource.field('id'),
      is_default: resource.field('is_default'),
      json_data_encoded: resource.field('json_data_encoded'),
      name: resource.field('name'),
      org_id: resource.field('org_id'),
      private_data_source_connect_network_id: resource.field('private_data_source_connect_network_id'),
      secure_json_data_encoded: resource.field('secure_json_data_encoded'),
      type: resource.field('type'),
      uid: resource.field('uid'),
      url: resource.field('url'),
      username: resource.field('username'),
    },
    data_source_config(name, block): {
      local resource = blockType.resource('grafana_data_source_config', name),
      _: resource._(block, {
        http_headers: build.template(std.get(block, 'http_headers', null)),
        id: build.template(std.get(block, 'id', null)),
        json_data_encoded: build.template(std.get(block, 'json_data_encoded', null)),
        org_id: build.template(std.get(block, 'org_id', null)),
        secure_json_data_encoded: build.template(std.get(block, 'secure_json_data_encoded', null)),
        uid: build.template(std.get(block, 'uid', null)),
      }),
      http_headers: resource.field('http_headers'),
      id: resource.field('id'),
      json_data_encoded: resource.field('json_data_encoded'),
      org_id: resource.field('org_id'),
      secure_json_data_encoded: resource.field('secure_json_data_encoded'),
      uid: resource.field('uid'),
    },
    data_source_config_lbac_rules(name, block): {
      local resource = blockType.resource('grafana_data_source_config_lbac_rules', name),
      _: resource._(block, {
        datasource_uid: build.template(block.datasource_uid),
        id: build.template(std.get(block, 'id', null)),
        rules: build.template(block.rules),
      }),
      datasource_uid: resource.field('datasource_uid'),
      id: resource.field('id'),
      rules: resource.field('rules'),
    },
    data_source_permission(name, block): {
      local resource = blockType.resource('grafana_data_source_permission', name),
      _: resource._(block, {
        datasource_uid: build.template(block.datasource_uid),
        id: build.template(std.get(block, 'id', null)),
        org_id: build.template(std.get(block, 'org_id', null)),
      }),
      datasource_uid: resource.field('datasource_uid'),
      id: resource.field('id'),
      org_id: resource.field('org_id'),
    },
    data_source_permission_item(name, block): {
      local resource = blockType.resource('grafana_data_source_permission_item', name),
      _: resource._(block, {
        datasource_uid: build.template(block.datasource_uid),
        id: build.template(std.get(block, 'id', null)),
        org_id: build.template(std.get(block, 'org_id', null)),
        permission: build.template(block.permission),
        role: build.template(std.get(block, 'role', null)),
        team: build.template(std.get(block, 'team', null)),
        user: build.template(std.get(block, 'user', null)),
      }),
      datasource_uid: resource.field('datasource_uid'),
      id: resource.field('id'),
      org_id: resource.field('org_id'),
      permission: resource.field('permission'),
      role: resource.field('role'),
      team: resource.field('team'),
      user: resource.field('user'),
    },
    fleet_management_collector(name, block): {
      local resource = blockType.resource('grafana_fleet_management_collector', name),
      _: resource._(block, {
        enabled: build.template(std.get(block, 'enabled', null)),
        id: build.template(block.id),
        remote_attributes: build.template(std.get(block, 'remote_attributes', null)),
      }),
      enabled: resource.field('enabled'),
      id: resource.field('id'),
      remote_attributes: resource.field('remote_attributes'),
    },
    fleet_management_pipeline(name, block): {
      local resource = blockType.resource('grafana_fleet_management_pipeline', name),
      _: resource._(block, {
        contents: build.template(block.contents),
        enabled: build.template(std.get(block, 'enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        matchers: build.template(std.get(block, 'matchers', null)),
        name: build.template(block.name),
      }),
      contents: resource.field('contents'),
      enabled: resource.field('enabled'),
      id: resource.field('id'),
      matchers: resource.field('matchers'),
      name: resource.field('name'),
    },
    folder(name, block): {
      local resource = blockType.resource('grafana_folder', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        org_id: build.template(std.get(block, 'org_id', null)),
        parent_folder_uid: build.template(std.get(block, 'parent_folder_uid', null)),
        prevent_destroy_if_not_empty: build.template(std.get(block, 'prevent_destroy_if_not_empty', null)),
        title: build.template(block.title),
        uid: build.template(std.get(block, 'uid', null)),
        url: build.template(std.get(block, 'url', null)),
      }),
      id: resource.field('id'),
      org_id: resource.field('org_id'),
      parent_folder_uid: resource.field('parent_folder_uid'),
      prevent_destroy_if_not_empty: resource.field('prevent_destroy_if_not_empty'),
      title: resource.field('title'),
      uid: resource.field('uid'),
      url: resource.field('url'),
    },
    folder_permission(name, block): {
      local resource = blockType.resource('grafana_folder_permission', name),
      _: resource._(block, {
        folder_uid: build.template(block.folder_uid),
        id: build.template(std.get(block, 'id', null)),
        org_id: build.template(std.get(block, 'org_id', null)),
      }),
      folder_uid: resource.field('folder_uid'),
      id: resource.field('id'),
      org_id: resource.field('org_id'),
    },
    folder_permission_item(name, block): {
      local resource = blockType.resource('grafana_folder_permission_item', name),
      _: resource._(block, {
        folder_uid: build.template(block.folder_uid),
        id: build.template(std.get(block, 'id', null)),
        org_id: build.template(std.get(block, 'org_id', null)),
        permission: build.template(block.permission),
        role: build.template(std.get(block, 'role', null)),
        team: build.template(std.get(block, 'team', null)),
        user: build.template(std.get(block, 'user', null)),
      }),
      folder_uid: resource.field('folder_uid'),
      id: resource.field('id'),
      org_id: resource.field('org_id'),
      permission: resource.field('permission'),
      role: resource.field('role'),
      team: resource.field('team'),
      user: resource.field('user'),
    },
    frontend_o11y_app(name, block): {
      local resource = blockType.resource('grafana_frontend_o11y_app', name),
      _: resource._(block, {
        allowed_origins: build.template(block.allowed_origins),
        extra_log_attributes: build.template(block.extra_log_attributes),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        settings: build.template(block.settings),
        stack_id: build.template(block.stack_id),
      }),
      allowed_origins: resource.field('allowed_origins'),
      extra_log_attributes: resource.field('extra_log_attributes'),
      id: resource.field('id'),
      name: resource.field('name'),
      settings: resource.field('settings'),
      stack_id: resource.field('stack_id'),
    },
    library_panel(name, block): {
      local resource = blockType.resource('grafana_library_panel', name),
      _: resource._(block, {
        created: build.template(std.get(block, 'created', null)),
        dashboard_ids: build.template(std.get(block, 'dashboard_ids', null)),
        description: build.template(std.get(block, 'description', null)),
        folder_name: build.template(std.get(block, 'folder_name', null)),
        folder_uid: build.template(std.get(block, 'folder_uid', null)),
        id: build.template(std.get(block, 'id', null)),
        model_json: build.template(block.model_json),
        name: build.template(block.name),
        org_id: build.template(std.get(block, 'org_id', null)),
        panel_id: build.template(std.get(block, 'panel_id', null)),
        type: build.template(std.get(block, 'type', null)),
        uid: build.template(std.get(block, 'uid', null)),
        updated: build.template(std.get(block, 'updated', null)),
        version: build.template(std.get(block, 'version', null)),
      }),
      created: resource.field('created'),
      dashboard_ids: resource.field('dashboard_ids'),
      description: resource.field('description'),
      folder_name: resource.field('folder_name'),
      folder_uid: resource.field('folder_uid'),
      id: resource.field('id'),
      model_json: resource.field('model_json'),
      name: resource.field('name'),
      org_id: resource.field('org_id'),
      panel_id: resource.field('panel_id'),
      type: resource.field('type'),
      uid: resource.field('uid'),
      updated: resource.field('updated'),
      version: resource.field('version'),
    },
    machine_learning_alert(name, block): {
      local resource = blockType.resource('grafana_machine_learning_alert', name),
      _: resource._(block, {
        annotations: build.template(std.get(block, 'annotations', null)),
        anomaly_condition: build.template(std.get(block, 'anomaly_condition', null)),
        'for': build.template(std.get(block, 'for', null)),
        id: build.template(std.get(block, 'id', null)),
        job_id: build.template(std.get(block, 'job_id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        no_data_state: build.template(std.get(block, 'no_data_state', null)),
        outlier_id: build.template(std.get(block, 'outlier_id', null)),
        threshold: build.template(std.get(block, 'threshold', null)),
        title: build.template(block.title),
        window: build.template(std.get(block, 'window', null)),
      }),
      annotations: resource.field('annotations'),
      anomaly_condition: resource.field('anomaly_condition'),
      'for': resource.field('for'),
      id: resource.field('id'),
      job_id: resource.field('job_id'),
      labels: resource.field('labels'),
      no_data_state: resource.field('no_data_state'),
      outlier_id: resource.field('outlier_id'),
      threshold: resource.field('threshold'),
      title: resource.field('title'),
      window: resource.field('window'),
    },
    machine_learning_holiday(name, block): {
      local resource = blockType.resource('grafana_machine_learning_holiday', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        ical_timezone: build.template(std.get(block, 'ical_timezone', null)),
        ical_url: build.template(std.get(block, 'ical_url', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
      }),
      description: resource.field('description'),
      ical_timezone: resource.field('ical_timezone'),
      ical_url: resource.field('ical_url'),
      id: resource.field('id'),
      name: resource.field('name'),
    },
    machine_learning_job(name, block): {
      local resource = blockType.resource('grafana_machine_learning_job', name),
      _: resource._(block, {
        custom_labels: build.template(std.get(block, 'custom_labels', null)),
        datasource_type: build.template(block.datasource_type),
        datasource_uid: build.template(block.datasource_uid),
        description: build.template(std.get(block, 'description', null)),
        holidays: build.template(std.get(block, 'holidays', null)),
        hyper_params: build.template(std.get(block, 'hyper_params', null)),
        id: build.template(std.get(block, 'id', null)),
        interval: build.template(std.get(block, 'interval', null)),
        metric: build.template(block.metric),
        name: build.template(block.name),
        query_params: build.template(block.query_params),
        training_window: build.template(std.get(block, 'training_window', null)),
      }),
      custom_labels: resource.field('custom_labels'),
      datasource_type: resource.field('datasource_type'),
      datasource_uid: resource.field('datasource_uid'),
      description: resource.field('description'),
      holidays: resource.field('holidays'),
      hyper_params: resource.field('hyper_params'),
      id: resource.field('id'),
      interval: resource.field('interval'),
      metric: resource.field('metric'),
      name: resource.field('name'),
      query_params: resource.field('query_params'),
      training_window: resource.field('training_window'),
    },
    machine_learning_outlier_detector(name, block): {
      local resource = blockType.resource('grafana_machine_learning_outlier_detector', name),
      _: resource._(block, {
        datasource_type: build.template(block.datasource_type),
        datasource_uid: build.template(block.datasource_uid),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        interval: build.template(std.get(block, 'interval', null)),
        metric: build.template(block.metric),
        name: build.template(block.name),
        query_params: build.template(block.query_params),
      }),
      datasource_type: resource.field('datasource_type'),
      datasource_uid: resource.field('datasource_uid'),
      description: resource.field('description'),
      id: resource.field('id'),
      interval: resource.field('interval'),
      metric: resource.field('metric'),
      name: resource.field('name'),
      query_params: resource.field('query_params'),
    },
    message_template(name, block): {
      local resource = blockType.resource('grafana_message_template', name),
      _: resource._(block, {
        disable_provenance: build.template(std.get(block, 'disable_provenance', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        org_id: build.template(std.get(block, 'org_id', null)),
        template: build.template(block.template),
      }),
      disable_provenance: resource.field('disable_provenance'),
      id: resource.field('id'),
      name: resource.field('name'),
      org_id: resource.field('org_id'),
      template: resource.field('template'),
    },
    mute_timing(name, block): {
      local resource = blockType.resource('grafana_mute_timing', name),
      _: resource._(block, {
        disable_provenance: build.template(std.get(block, 'disable_provenance', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        org_id: build.template(std.get(block, 'org_id', null)),
      }),
      disable_provenance: resource.field('disable_provenance'),
      id: resource.field('id'),
      name: resource.field('name'),
      org_id: resource.field('org_id'),
    },
    notification_policy(name, block): {
      local resource = blockType.resource('grafana_notification_policy', name),
      _: resource._(block, {
        contact_point: build.template(block.contact_point),
        disable_provenance: build.template(std.get(block, 'disable_provenance', null)),
        group_by: build.template(block.group_by),
        group_interval: build.template(std.get(block, 'group_interval', null)),
        group_wait: build.template(std.get(block, 'group_wait', null)),
        id: build.template(std.get(block, 'id', null)),
        org_id: build.template(std.get(block, 'org_id', null)),
        repeat_interval: build.template(std.get(block, 'repeat_interval', null)),
      }),
      contact_point: resource.field('contact_point'),
      disable_provenance: resource.field('disable_provenance'),
      group_by: resource.field('group_by'),
      group_interval: resource.field('group_interval'),
      group_wait: resource.field('group_wait'),
      id: resource.field('id'),
      org_id: resource.field('org_id'),
      repeat_interval: resource.field('repeat_interval'),
    },
    oncall_escalation(name, block): {
      local resource = blockType.resource('grafana_oncall_escalation', name),
      _: resource._(block, {
        action_to_trigger: build.template(std.get(block, 'action_to_trigger', null)),
        duration: build.template(std.get(block, 'duration', null)),
        escalation_chain_id: build.template(block.escalation_chain_id),
        group_to_notify: build.template(std.get(block, 'group_to_notify', null)),
        id: build.template(std.get(block, 'id', null)),
        important: build.template(std.get(block, 'important', null)),
        notify_if_time_from: build.template(std.get(block, 'notify_if_time_from', null)),
        notify_if_time_to: build.template(std.get(block, 'notify_if_time_to', null)),
        notify_on_call_from_schedule: build.template(std.get(block, 'notify_on_call_from_schedule', null)),
        notify_to_team_members: build.template(std.get(block, 'notify_to_team_members', null)),
        persons_to_notify: build.template(std.get(block, 'persons_to_notify', null)),
        persons_to_notify_next_each_time: build.template(std.get(block, 'persons_to_notify_next_each_time', null)),
        position: build.template(block.position),
        severity: build.template(std.get(block, 'severity', null)),
        type: build.template(block.type),
      }),
      action_to_trigger: resource.field('action_to_trigger'),
      duration: resource.field('duration'),
      escalation_chain_id: resource.field('escalation_chain_id'),
      group_to_notify: resource.field('group_to_notify'),
      id: resource.field('id'),
      important: resource.field('important'),
      notify_if_time_from: resource.field('notify_if_time_from'),
      notify_if_time_to: resource.field('notify_if_time_to'),
      notify_on_call_from_schedule: resource.field('notify_on_call_from_schedule'),
      notify_to_team_members: resource.field('notify_to_team_members'),
      persons_to_notify: resource.field('persons_to_notify'),
      persons_to_notify_next_each_time: resource.field('persons_to_notify_next_each_time'),
      position: resource.field('position'),
      severity: resource.field('severity'),
      type: resource.field('type'),
    },
    oncall_escalation_chain(name, block): {
      local resource = blockType.resource('grafana_oncall_escalation_chain', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        team_id: build.template(std.get(block, 'team_id', null)),
      }),
      id: resource.field('id'),
      name: resource.field('name'),
      team_id: resource.field('team_id'),
    },
    oncall_integration(name, block): {
      local resource = blockType.resource('grafana_oncall_integration', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        link: build.template(std.get(block, 'link', null)),
        name: build.template(block.name),
        team_id: build.template(std.get(block, 'team_id', null)),
        type: build.template(block.type),
      }),
      id: resource.field('id'),
      link: resource.field('link'),
      name: resource.field('name'),
      team_id: resource.field('team_id'),
      type: resource.field('type'),
    },
    oncall_on_call_shift(name, block): {
      local resource = blockType.resource('grafana_oncall_on_call_shift', name),
      _: resource._(block, {
        by_day: build.template(std.get(block, 'by_day', null)),
        by_month: build.template(std.get(block, 'by_month', null)),
        by_monthday: build.template(std.get(block, 'by_monthday', null)),
        duration: build.template(block.duration),
        frequency: build.template(std.get(block, 'frequency', null)),
        id: build.template(std.get(block, 'id', null)),
        interval: build.template(std.get(block, 'interval', null)),
        level: build.template(std.get(block, 'level', null)),
        name: build.template(block.name),
        rolling_users: build.template(std.get(block, 'rolling_users', null)),
        start: build.template(block.start),
        start_rotation_from_user_index: build.template(std.get(block, 'start_rotation_from_user_index', null)),
        team_id: build.template(std.get(block, 'team_id', null)),
        time_zone: build.template(std.get(block, 'time_zone', null)),
        type: build.template(block.type),
        until: build.template(std.get(block, 'until', null)),
        users: build.template(std.get(block, 'users', null)),
        week_start: build.template(std.get(block, 'week_start', null)),
      }),
      by_day: resource.field('by_day'),
      by_month: resource.field('by_month'),
      by_monthday: resource.field('by_monthday'),
      duration: resource.field('duration'),
      frequency: resource.field('frequency'),
      id: resource.field('id'),
      interval: resource.field('interval'),
      level: resource.field('level'),
      name: resource.field('name'),
      rolling_users: resource.field('rolling_users'),
      start: resource.field('start'),
      start_rotation_from_user_index: resource.field('start_rotation_from_user_index'),
      team_id: resource.field('team_id'),
      time_zone: resource.field('time_zone'),
      type: resource.field('type'),
      until: resource.field('until'),
      users: resource.field('users'),
      week_start: resource.field('week_start'),
    },
    oncall_outgoing_webhook(name, block): {
      local resource = blockType.resource('grafana_oncall_outgoing_webhook', name),
      _: resource._(block, {
        authorization_header: build.template(std.get(block, 'authorization_header', null)),
        data: build.template(std.get(block, 'data', null)),
        forward_whole_payload: build.template(std.get(block, 'forward_whole_payload', null)),
        headers: build.template(std.get(block, 'headers', null)),
        http_method: build.template(std.get(block, 'http_method', null)),
        id: build.template(std.get(block, 'id', null)),
        integration_filter: build.template(std.get(block, 'integration_filter', null)),
        is_webhook_enabled: build.template(std.get(block, 'is_webhook_enabled', null)),
        name: build.template(block.name),
        password: build.template(std.get(block, 'password', null)),
        team_id: build.template(std.get(block, 'team_id', null)),
        trigger_template: build.template(std.get(block, 'trigger_template', null)),
        trigger_type: build.template(std.get(block, 'trigger_type', null)),
        url: build.template(block.url),
        user: build.template(std.get(block, 'user', null)),
      }),
      authorization_header: resource.field('authorization_header'),
      data: resource.field('data'),
      forward_whole_payload: resource.field('forward_whole_payload'),
      headers: resource.field('headers'),
      http_method: resource.field('http_method'),
      id: resource.field('id'),
      integration_filter: resource.field('integration_filter'),
      is_webhook_enabled: resource.field('is_webhook_enabled'),
      name: resource.field('name'),
      password: resource.field('password'),
      team_id: resource.field('team_id'),
      trigger_template: resource.field('trigger_template'),
      trigger_type: resource.field('trigger_type'),
      url: resource.field('url'),
      user: resource.field('user'),
    },
    oncall_route(name, block): {
      local resource = blockType.resource('grafana_oncall_route', name),
      _: resource._(block, {
        escalation_chain_id: build.template(block.escalation_chain_id),
        id: build.template(std.get(block, 'id', null)),
        integration_id: build.template(block.integration_id),
        position: build.template(block.position),
        routing_regex: build.template(block.routing_regex),
        routing_type: build.template(std.get(block, 'routing_type', null)),
      }),
      escalation_chain_id: resource.field('escalation_chain_id'),
      id: resource.field('id'),
      integration_id: resource.field('integration_id'),
      position: resource.field('position'),
      routing_regex: resource.field('routing_regex'),
      routing_type: resource.field('routing_type'),
    },
    oncall_schedule(name, block): {
      local resource = blockType.resource('grafana_oncall_schedule', name),
      _: resource._(block, {
        enable_web_overrides: build.template(std.get(block, 'enable_web_overrides', null)),
        ical_url_overrides: build.template(std.get(block, 'ical_url_overrides', null)),
        ical_url_primary: build.template(std.get(block, 'ical_url_primary', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        shifts: build.template(std.get(block, 'shifts', null)),
        team_id: build.template(std.get(block, 'team_id', null)),
        time_zone: build.template(std.get(block, 'time_zone', null)),
        type: build.template(block.type),
      }),
      enable_web_overrides: resource.field('enable_web_overrides'),
      ical_url_overrides: resource.field('ical_url_overrides'),
      ical_url_primary: resource.field('ical_url_primary'),
      id: resource.field('id'),
      name: resource.field('name'),
      shifts: resource.field('shifts'),
      team_id: resource.field('team_id'),
      time_zone: resource.field('time_zone'),
      type: resource.field('type'),
    },
    oncall_user_notification_rule(name, block): {
      local resource = blockType.resource('grafana_oncall_user_notification_rule', name),
      _: resource._(block, {
        duration: build.template(std.get(block, 'duration', null)),
        id: build.template(std.get(block, 'id', null)),
        important: build.template(std.get(block, 'important', null)),
        position: build.template(std.get(block, 'position', null)),
        type: build.template(block.type),
        user_id: build.template(block.user_id),
      }),
      duration: resource.field('duration'),
      id: resource.field('id'),
      important: resource.field('important'),
      position: resource.field('position'),
      type: resource.field('type'),
      user_id: resource.field('user_id'),
    },
    organization(name, block): {
      local resource = blockType.resource('grafana_organization', name),
      _: resource._(block, {
        admin_user: build.template(std.get(block, 'admin_user', null)),
        admins: build.template(std.get(block, 'admins', null)),
        create_users: build.template(std.get(block, 'create_users', null)),
        editors: build.template(std.get(block, 'editors', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        org_id: build.template(std.get(block, 'org_id', null)),
        users_without_access: build.template(std.get(block, 'users_without_access', null)),
        viewers: build.template(std.get(block, 'viewers', null)),
      }),
      admin_user: resource.field('admin_user'),
      admins: resource.field('admins'),
      create_users: resource.field('create_users'),
      editors: resource.field('editors'),
      id: resource.field('id'),
      name: resource.field('name'),
      org_id: resource.field('org_id'),
      users_without_access: resource.field('users_without_access'),
      viewers: resource.field('viewers'),
    },
    organization_preferences(name, block): {
      local resource = blockType.resource('grafana_organization_preferences', name),
      _: resource._(block, {
        home_dashboard_uid: build.template(std.get(block, 'home_dashboard_uid', null)),
        id: build.template(std.get(block, 'id', null)),
        org_id: build.template(std.get(block, 'org_id', null)),
        theme: build.template(std.get(block, 'theme', null)),
        timezone: build.template(std.get(block, 'timezone', null)),
        week_start: build.template(std.get(block, 'week_start', null)),
      }),
      home_dashboard_uid: resource.field('home_dashboard_uid'),
      id: resource.field('id'),
      org_id: resource.field('org_id'),
      theme: resource.field('theme'),
      timezone: resource.field('timezone'),
      week_start: resource.field('week_start'),
    },
    playlist(name, block): {
      local resource = blockType.resource('grafana_playlist', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        interval: build.template(block.interval),
        name: build.template(block.name),
        org_id: build.template(std.get(block, 'org_id', null)),
      }),
      id: resource.field('id'),
      interval: resource.field('interval'),
      name: resource.field('name'),
      org_id: resource.field('org_id'),
    },
    report(name, block): {
      local resource = blockType.resource('grafana_report', name),
      _: resource._(block, {
        formats: build.template(std.get(block, 'formats', null)),
        id: build.template(std.get(block, 'id', null)),
        include_dashboard_link: build.template(std.get(block, 'include_dashboard_link', null)),
        include_table_csv: build.template(std.get(block, 'include_table_csv', null)),
        layout: build.template(std.get(block, 'layout', null)),
        message: build.template(std.get(block, 'message', null)),
        name: build.template(block.name),
        org_id: build.template(std.get(block, 'org_id', null)),
        orientation: build.template(std.get(block, 'orientation', null)),
        recipients: build.template(block.recipients),
        reply_to: build.template(std.get(block, 'reply_to', null)),
      }),
      formats: resource.field('formats'),
      id: resource.field('id'),
      include_dashboard_link: resource.field('include_dashboard_link'),
      include_table_csv: resource.field('include_table_csv'),
      layout: resource.field('layout'),
      message: resource.field('message'),
      name: resource.field('name'),
      org_id: resource.field('org_id'),
      orientation: resource.field('orientation'),
      recipients: resource.field('recipients'),
      reply_to: resource.field('reply_to'),
    },
    role(name, block): {
      local resource = blockType.resource('grafana_role', name),
      _: resource._(block, {
        auto_increment_version: build.template(std.get(block, 'auto_increment_version', null)),
        description: build.template(std.get(block, 'description', null)),
        display_name: build.template(std.get(block, 'display_name', null)),
        global: build.template(std.get(block, 'global', null)),
        group: build.template(std.get(block, 'group', null)),
        hidden: build.template(std.get(block, 'hidden', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        org_id: build.template(std.get(block, 'org_id', null)),
        uid: build.template(std.get(block, 'uid', null)),
        version: build.template(std.get(block, 'version', null)),
      }),
      auto_increment_version: resource.field('auto_increment_version'),
      description: resource.field('description'),
      display_name: resource.field('display_name'),
      global: resource.field('global'),
      group: resource.field('group'),
      hidden: resource.field('hidden'),
      id: resource.field('id'),
      name: resource.field('name'),
      org_id: resource.field('org_id'),
      uid: resource.field('uid'),
      version: resource.field('version'),
    },
    role_assignment(name, block): {
      local resource = blockType.resource('grafana_role_assignment', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        org_id: build.template(std.get(block, 'org_id', null)),
        role_uid: build.template(block.role_uid),
        service_accounts: build.template(std.get(block, 'service_accounts', null)),
        teams: build.template(std.get(block, 'teams', null)),
        users: build.template(std.get(block, 'users', null)),
      }),
      id: resource.field('id'),
      org_id: resource.field('org_id'),
      role_uid: resource.field('role_uid'),
      service_accounts: resource.field('service_accounts'),
      teams: resource.field('teams'),
      users: resource.field('users'),
    },
    role_assignment_item(name, block): {
      local resource = blockType.resource('grafana_role_assignment_item', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        org_id: build.template(std.get(block, 'org_id', null)),
        role_uid: build.template(block.role_uid),
        service_account_id: build.template(std.get(block, 'service_account_id', null)),
        team_id: build.template(std.get(block, 'team_id', null)),
        user_id: build.template(std.get(block, 'user_id', null)),
      }),
      id: resource.field('id'),
      org_id: resource.field('org_id'),
      role_uid: resource.field('role_uid'),
      service_account_id: resource.field('service_account_id'),
      team_id: resource.field('team_id'),
      user_id: resource.field('user_id'),
    },
    rule_group(name, block): {
      local resource = blockType.resource('grafana_rule_group', name),
      _: resource._(block, {
        disable_provenance: build.template(std.get(block, 'disable_provenance', null)),
        folder_uid: build.template(block.folder_uid),
        id: build.template(std.get(block, 'id', null)),
        interval_seconds: build.template(block.interval_seconds),
        name: build.template(block.name),
        org_id: build.template(std.get(block, 'org_id', null)),
      }),
      disable_provenance: resource.field('disable_provenance'),
      folder_uid: resource.field('folder_uid'),
      id: resource.field('id'),
      interval_seconds: resource.field('interval_seconds'),
      name: resource.field('name'),
      org_id: resource.field('org_id'),
    },
    service_account(name, block): {
      local resource = blockType.resource('grafana_service_account', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        is_disabled: build.template(std.get(block, 'is_disabled', null)),
        name: build.template(block.name),
        org_id: build.template(std.get(block, 'org_id', null)),
        role: build.template(block.role),
      }),
      id: resource.field('id'),
      is_disabled: resource.field('is_disabled'),
      name: resource.field('name'),
      org_id: resource.field('org_id'),
      role: resource.field('role'),
    },
    service_account_permission(name, block): {
      local resource = blockType.resource('grafana_service_account_permission', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        org_id: build.template(std.get(block, 'org_id', null)),
        service_account_id: build.template(block.service_account_id),
      }),
      id: resource.field('id'),
      org_id: resource.field('org_id'),
      service_account_id: resource.field('service_account_id'),
    },
    service_account_permission_item(name, block): {
      local resource = blockType.resource('grafana_service_account_permission_item', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        org_id: build.template(std.get(block, 'org_id', null)),
        permission: build.template(block.permission),
        service_account_id: build.template(block.service_account_id),
        team: build.template(std.get(block, 'team', null)),
        user: build.template(std.get(block, 'user', null)),
      }),
      id: resource.field('id'),
      org_id: resource.field('org_id'),
      permission: resource.field('permission'),
      service_account_id: resource.field('service_account_id'),
      team: resource.field('team'),
      user: resource.field('user'),
    },
    service_account_token(name, block): {
      local resource = blockType.resource('grafana_service_account_token', name),
      _: resource._(block, {
        expiration: build.template(std.get(block, 'expiration', null)),
        has_expired: build.template(std.get(block, 'has_expired', null)),
        id: build.template(std.get(block, 'id', null)),
        key: build.template(std.get(block, 'key', null)),
        name: build.template(block.name),
        seconds_to_live: build.template(std.get(block, 'seconds_to_live', null)),
        service_account_id: build.template(block.service_account_id),
      }),
      expiration: resource.field('expiration'),
      has_expired: resource.field('has_expired'),
      id: resource.field('id'),
      key: resource.field('key'),
      name: resource.field('name'),
      seconds_to_live: resource.field('seconds_to_live'),
      service_account_id: resource.field('service_account_id'),
    },
    slo(name, block): {
      local resource = blockType.resource('grafana_slo', name),
      _: resource._(block, {
        description: build.template(block.description),
        folder_uid: build.template(std.get(block, 'folder_uid', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        search_expression: build.template(std.get(block, 'search_expression', null)),
      }),
      description: resource.field('description'),
      folder_uid: resource.field('folder_uid'),
      id: resource.field('id'),
      name: resource.field('name'),
      search_expression: resource.field('search_expression'),
    },
    sso_settings(name, block): {
      local resource = blockType.resource('grafana_sso_settings', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        provider_name: build.template(block.provider_name),
      }),
      id: resource.field('id'),
      provider_name: resource.field('provider_name'),
    },
    synthetic_monitoring_check(name, block): {
      local resource = blockType.resource('grafana_synthetic_monitoring_check', name),
      _: resource._(block, {
        alert_sensitivity: build.template(std.get(block, 'alert_sensitivity', null)),
        basic_metrics_only: build.template(std.get(block, 'basic_metrics_only', null)),
        enabled: build.template(std.get(block, 'enabled', null)),
        frequency: build.template(std.get(block, 'frequency', null)),
        id: build.template(std.get(block, 'id', null)),
        job: build.template(block.job),
        labels: build.template(std.get(block, 'labels', null)),
        probes: build.template(block.probes),
        target: build.template(block.target),
        tenant_id: build.template(std.get(block, 'tenant_id', null)),
        timeout: build.template(std.get(block, 'timeout', null)),
      }),
      alert_sensitivity: resource.field('alert_sensitivity'),
      basic_metrics_only: resource.field('basic_metrics_only'),
      enabled: resource.field('enabled'),
      frequency: resource.field('frequency'),
      id: resource.field('id'),
      job: resource.field('job'),
      labels: resource.field('labels'),
      probes: resource.field('probes'),
      target: resource.field('target'),
      tenant_id: resource.field('tenant_id'),
      timeout: resource.field('timeout'),
    },
    synthetic_monitoring_installation(name, block): {
      local resource = blockType.resource('grafana_synthetic_monitoring_installation', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        metrics_publisher_key: build.template(block.metrics_publisher_key),
        sm_access_token: build.template(std.get(block, 'sm_access_token', null)),
        stack_id: build.template(block.stack_id),
        stack_sm_api_url: build.template(std.get(block, 'stack_sm_api_url', null)),
      }),
      id: resource.field('id'),
      metrics_publisher_key: resource.field('metrics_publisher_key'),
      sm_access_token: resource.field('sm_access_token'),
      stack_id: resource.field('stack_id'),
      stack_sm_api_url: resource.field('stack_sm_api_url'),
    },
    synthetic_monitoring_probe(name, block): {
      local resource = blockType.resource('grafana_synthetic_monitoring_probe', name),
      _: resource._(block, {
        auth_token: build.template(std.get(block, 'auth_token', null)),
        disable_browser_checks: build.template(std.get(block, 'disable_browser_checks', null)),
        disable_scripted_checks: build.template(std.get(block, 'disable_scripted_checks', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        latitude: build.template(block.latitude),
        longitude: build.template(block.longitude),
        name: build.template(block.name),
        public: build.template(std.get(block, 'public', null)),
        region: build.template(block.region),
        tenant_id: build.template(std.get(block, 'tenant_id', null)),
      }),
      auth_token: resource.field('auth_token'),
      disable_browser_checks: resource.field('disable_browser_checks'),
      disable_scripted_checks: resource.field('disable_scripted_checks'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      latitude: resource.field('latitude'),
      longitude: resource.field('longitude'),
      name: resource.field('name'),
      public: resource.field('public'),
      region: resource.field('region'),
      tenant_id: resource.field('tenant_id'),
    },
    team(name, block): {
      local resource = blockType.resource('grafana_team', name),
      _: resource._(block, {
        email: build.template(std.get(block, 'email', null)),
        id: build.template(std.get(block, 'id', null)),
        ignore_externally_synced_members: build.template(std.get(block, 'ignore_externally_synced_members', null)),
        members: build.template(std.get(block, 'members', null)),
        name: build.template(block.name),
        org_id: build.template(std.get(block, 'org_id', null)),
        team_id: build.template(std.get(block, 'team_id', null)),
        team_uid: build.template(std.get(block, 'team_uid', null)),
      }),
      email: resource.field('email'),
      id: resource.field('id'),
      ignore_externally_synced_members: resource.field('ignore_externally_synced_members'),
      members: resource.field('members'),
      name: resource.field('name'),
      org_id: resource.field('org_id'),
      team_id: resource.field('team_id'),
      team_uid: resource.field('team_uid'),
    },
    team_external_group(name, block): {
      local resource = blockType.resource('grafana_team_external_group', name),
      _: resource._(block, {
        groups: build.template(block.groups),
        id: build.template(std.get(block, 'id', null)),
        team_id: build.template(block.team_id),
      }),
      groups: resource.field('groups'),
      id: resource.field('id'),
      team_id: resource.field('team_id'),
    },
    user(name, block): {
      local resource = blockType.resource('grafana_user', name),
      _: resource._(block, {
        email: build.template(block.email),
        id: build.template(std.get(block, 'id', null)),
        is_admin: build.template(std.get(block, 'is_admin', null)),
        login: build.template(std.get(block, 'login', null)),
        name: build.template(std.get(block, 'name', null)),
        password: build.template(block.password),
        user_id: build.template(std.get(block, 'user_id', null)),
      }),
      email: resource.field('email'),
      id: resource.field('id'),
      is_admin: resource.field('is_admin'),
      login: resource.field('login'),
      name: resource.field('name'),
      password: resource.field('password'),
      user_id: resource.field('user_id'),
    },
  },
  data: {
    local blockType = provider.blockType('data'),
    cloud_access_policies(name, block): {
      local resource = blockType.resource('grafana_cloud_access_policies', name),
      _: resource._(block, {
        access_policies: build.template(std.get(block, 'access_policies', null)),
        id: build.template(std.get(block, 'id', null)),
        name_filter: build.template(std.get(block, 'name_filter', null)),
        region_filter: build.template(std.get(block, 'region_filter', null)),
      }),
      access_policies: resource.field('access_policies'),
      id: resource.field('id'),
      name_filter: resource.field('name_filter'),
      region_filter: resource.field('region_filter'),
    },
    cloud_ips(name, block): {
      local resource = blockType.resource('grafana_cloud_ips', name),
      _: resource._(block, {
        hosted_alerts: build.template(std.get(block, 'hosted_alerts', null)),
        hosted_grafana: build.template(std.get(block, 'hosted_grafana', null)),
        hosted_logs: build.template(std.get(block, 'hosted_logs', null)),
        hosted_metrics: build.template(std.get(block, 'hosted_metrics', null)),
        hosted_traces: build.template(std.get(block, 'hosted_traces', null)),
        id: build.template(std.get(block, 'id', null)),
      }),
      hosted_alerts: resource.field('hosted_alerts'),
      hosted_grafana: resource.field('hosted_grafana'),
      hosted_logs: resource.field('hosted_logs'),
      hosted_metrics: resource.field('hosted_metrics'),
      hosted_traces: resource.field('hosted_traces'),
      id: resource.field('id'),
    },
    cloud_organization(name, block): {
      local resource = blockType.resource('grafana_cloud_organization', name),
      _: resource._(block, {
        created_at: build.template(std.get(block, 'created_at', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        slug: build.template(std.get(block, 'slug', null)),
        updated_at: build.template(std.get(block, 'updated_at', null)),
        url: build.template(std.get(block, 'url', null)),
      }),
      created_at: resource.field('created_at'),
      id: resource.field('id'),
      name: resource.field('name'),
      slug: resource.field('slug'),
      updated_at: resource.field('updated_at'),
      url: resource.field('url'),
    },
    cloud_private_data_source_connect_networks(name, block): {
      local resource = blockType.resource('grafana_cloud_private_data_source_connect_networks', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name_filter: build.template(std.get(block, 'name_filter', null)),
        private_data_source_connect_networks: build.template(std.get(block, 'private_data_source_connect_networks', null)),
        region_filter: build.template(std.get(block, 'region_filter', null)),
      }),
      id: resource.field('id'),
      name_filter: resource.field('name_filter'),
      private_data_source_connect_networks: resource.field('private_data_source_connect_networks'),
      region_filter: resource.field('region_filter'),
    },
    cloud_provider_aws_account(name, block): {
      local resource = blockType.resource('grafana_cloud_provider_aws_account', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        regions: build.template(std.get(block, 'regions', null)),
        resource_id: build.template(block.resource_id),
        role_arn: build.template(std.get(block, 'role_arn', null)),
        stack_id: build.template(block.stack_id),
      }),
      id: resource.field('id'),
      name: resource.field('name'),
      regions: resource.field('regions'),
      resource_id: resource.field('resource_id'),
      role_arn: resource.field('role_arn'),
      stack_id: resource.field('stack_id'),
    },
    cloud_provider_aws_cloudwatch_scrape_job(name, block): {
      local resource = blockType.resource('grafana_cloud_provider_aws_cloudwatch_scrape_job', name),
      _: resource._(block, {
        aws_account_resource_id: build.template(std.get(block, 'aws_account_resource_id', null)),
        disabled_reason: build.template(std.get(block, 'disabled_reason', null)),
        enabled: build.template(std.get(block, 'enabled', null)),
        export_tags: build.template(std.get(block, 'export_tags', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        regions: build.template(std.get(block, 'regions', null)),
        regions_subset_override_used: build.template(std.get(block, 'regions_subset_override_used', null)),
        role_arn: build.template(std.get(block, 'role_arn', null)),
        stack_id: build.template(block.stack_id),
        static_labels: build.template(std.get(block, 'static_labels', null)),
      }),
      aws_account_resource_id: resource.field('aws_account_resource_id'),
      disabled_reason: resource.field('disabled_reason'),
      enabled: resource.field('enabled'),
      export_tags: resource.field('export_tags'),
      id: resource.field('id'),
      name: resource.field('name'),
      regions: resource.field('regions'),
      regions_subset_override_used: resource.field('regions_subset_override_used'),
      role_arn: resource.field('role_arn'),
      stack_id: resource.field('stack_id'),
      static_labels: resource.field('static_labels'),
    },
    cloud_provider_aws_cloudwatch_scrape_jobs(name, block): {
      local resource = blockType.resource('grafana_cloud_provider_aws_cloudwatch_scrape_jobs', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        stack_id: build.template(block.stack_id),
      }),
      id: resource.field('id'),
      stack_id: resource.field('stack_id'),
    },
    cloud_provider_azure_credential(name, block): {
      local resource = blockType.resource('grafana_cloud_provider_azure_credential', name),
      _: resource._(block, {
        client_id: build.template(std.get(block, 'client_id', null)),
        client_secret: build.template(std.get(block, 'client_secret', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        resource_id: build.template(block.resource_id),
        resource_tags_to_add_to_metrics: build.template(std.get(block, 'resource_tags_to_add_to_metrics', null)),
        stack_id: build.template(block.stack_id),
        tenant_id: build.template(std.get(block, 'tenant_id', null)),
      }),
      client_id: resource.field('client_id'),
      client_secret: resource.field('client_secret'),
      id: resource.field('id'),
      name: resource.field('name'),
      resource_id: resource.field('resource_id'),
      resource_tags_to_add_to_metrics: resource.field('resource_tags_to_add_to_metrics'),
      stack_id: resource.field('stack_id'),
      tenant_id: resource.field('tenant_id'),
    },
    cloud_stack(name, block): {
      local resource = blockType.resource('grafana_cloud_stack', name),
      _: resource._(block, {
        alertmanager_ip_allow_list_cname: build.template(std.get(block, 'alertmanager_ip_allow_list_cname', null)),
        alertmanager_name: build.template(std.get(block, 'alertmanager_name', null)),
        alertmanager_status: build.template(std.get(block, 'alertmanager_status', null)),
        alertmanager_url: build.template(std.get(block, 'alertmanager_url', null)),
        alertmanager_user_id: build.template(std.get(block, 'alertmanager_user_id', null)),
        cluster_slug: build.template(std.get(block, 'cluster_slug', null)),
        description: build.template(std.get(block, 'description', null)),
        fleet_management_name: build.template(std.get(block, 'fleet_management_name', null)),
        fleet_management_status: build.template(std.get(block, 'fleet_management_status', null)),
        fleet_management_url: build.template(std.get(block, 'fleet_management_url', null)),
        fleet_management_user_id: build.template(std.get(block, 'fleet_management_user_id', null)),
        grafanas_ip_allow_list_cname: build.template(std.get(block, 'grafanas_ip_allow_list_cname', null)),
        graphite_ip_allow_list_cname: build.template(std.get(block, 'graphite_ip_allow_list_cname', null)),
        graphite_name: build.template(std.get(block, 'graphite_name', null)),
        graphite_private_connectivity_info_private_dns: build.template(std.get(block, 'graphite_private_connectivity_info_private_dns', null)),
        graphite_private_connectivity_info_service_name: build.template(std.get(block, 'graphite_private_connectivity_info_service_name', null)),
        graphite_status: build.template(std.get(block, 'graphite_status', null)),
        graphite_url: build.template(std.get(block, 'graphite_url', null)),
        graphite_user_id: build.template(std.get(block, 'graphite_user_id', null)),
        id: build.template(std.get(block, 'id', null)),
        influx_url: build.template(std.get(block, 'influx_url', null)),
        labels: build.template(std.get(block, 'labels', null)),
        logs_ip_allow_list_cname: build.template(std.get(block, 'logs_ip_allow_list_cname', null)),
        logs_name: build.template(std.get(block, 'logs_name', null)),
        logs_private_connectivity_info_private_dns: build.template(std.get(block, 'logs_private_connectivity_info_private_dns', null)),
        logs_private_connectivity_info_service_name: build.template(std.get(block, 'logs_private_connectivity_info_service_name', null)),
        logs_status: build.template(std.get(block, 'logs_status', null)),
        logs_url: build.template(std.get(block, 'logs_url', null)),
        logs_user_id: build.template(std.get(block, 'logs_user_id', null)),
        name: build.template(std.get(block, 'name', null)),
        org_id: build.template(std.get(block, 'org_id', null)),
        org_name: build.template(std.get(block, 'org_name', null)),
        org_slug: build.template(std.get(block, 'org_slug', null)),
        otlp_private_connectivity_info_private_dns: build.template(std.get(block, 'otlp_private_connectivity_info_private_dns', null)),
        otlp_private_connectivity_info_service_name: build.template(std.get(block, 'otlp_private_connectivity_info_service_name', null)),
        otlp_url: build.template(std.get(block, 'otlp_url', null)),
        pdc_api_private_connectivity_info_private_dns: build.template(std.get(block, 'pdc_api_private_connectivity_info_private_dns', null)),
        pdc_api_private_connectivity_info_service_name: build.template(std.get(block, 'pdc_api_private_connectivity_info_service_name', null)),
        pdc_gateway_private_connectivity_info_private_dns: build.template(std.get(block, 'pdc_gateway_private_connectivity_info_private_dns', null)),
        pdc_gateway_private_connectivity_info_service_name: build.template(std.get(block, 'pdc_gateway_private_connectivity_info_service_name', null)),
        profiles_ip_allow_list_cname: build.template(std.get(block, 'profiles_ip_allow_list_cname', null)),
        profiles_name: build.template(std.get(block, 'profiles_name', null)),
        profiles_private_connectivity_info_private_dns: build.template(std.get(block, 'profiles_private_connectivity_info_private_dns', null)),
        profiles_private_connectivity_info_service_name: build.template(std.get(block, 'profiles_private_connectivity_info_service_name', null)),
        profiles_status: build.template(std.get(block, 'profiles_status', null)),
        profiles_url: build.template(std.get(block, 'profiles_url', null)),
        profiles_user_id: build.template(std.get(block, 'profiles_user_id', null)),
        prometheus_ip_allow_list_cname: build.template(std.get(block, 'prometheus_ip_allow_list_cname', null)),
        prometheus_name: build.template(std.get(block, 'prometheus_name', null)),
        prometheus_private_connectivity_info_private_dns: build.template(std.get(block, 'prometheus_private_connectivity_info_private_dns', null)),
        prometheus_private_connectivity_info_service_name: build.template(std.get(block, 'prometheus_private_connectivity_info_service_name', null)),
        prometheus_remote_endpoint: build.template(std.get(block, 'prometheus_remote_endpoint', null)),
        prometheus_remote_write_endpoint: build.template(std.get(block, 'prometheus_remote_write_endpoint', null)),
        prometheus_status: build.template(std.get(block, 'prometheus_status', null)),
        prometheus_url: build.template(std.get(block, 'prometheus_url', null)),
        prometheus_user_id: build.template(std.get(block, 'prometheus_user_id', null)),
        region_slug: build.template(std.get(block, 'region_slug', null)),
        slug: build.template(block.slug),
        status: build.template(std.get(block, 'status', null)),
        traces_ip_allow_list_cname: build.template(std.get(block, 'traces_ip_allow_list_cname', null)),
        traces_name: build.template(std.get(block, 'traces_name', null)),
        traces_private_connectivity_info_private_dns: build.template(std.get(block, 'traces_private_connectivity_info_private_dns', null)),
        traces_private_connectivity_info_service_name: build.template(std.get(block, 'traces_private_connectivity_info_service_name', null)),
        traces_status: build.template(std.get(block, 'traces_status', null)),
        traces_url: build.template(std.get(block, 'traces_url', null)),
        traces_user_id: build.template(std.get(block, 'traces_user_id', null)),
        url: build.template(std.get(block, 'url', null)),
      }),
      alertmanager_ip_allow_list_cname: resource.field('alertmanager_ip_allow_list_cname'),
      alertmanager_name: resource.field('alertmanager_name'),
      alertmanager_status: resource.field('alertmanager_status'),
      alertmanager_url: resource.field('alertmanager_url'),
      alertmanager_user_id: resource.field('alertmanager_user_id'),
      cluster_slug: resource.field('cluster_slug'),
      description: resource.field('description'),
      fleet_management_name: resource.field('fleet_management_name'),
      fleet_management_status: resource.field('fleet_management_status'),
      fleet_management_url: resource.field('fleet_management_url'),
      fleet_management_user_id: resource.field('fleet_management_user_id'),
      grafanas_ip_allow_list_cname: resource.field('grafanas_ip_allow_list_cname'),
      graphite_ip_allow_list_cname: resource.field('graphite_ip_allow_list_cname'),
      graphite_name: resource.field('graphite_name'),
      graphite_private_connectivity_info_private_dns: resource.field('graphite_private_connectivity_info_private_dns'),
      graphite_private_connectivity_info_service_name: resource.field('graphite_private_connectivity_info_service_name'),
      graphite_status: resource.field('graphite_status'),
      graphite_url: resource.field('graphite_url'),
      graphite_user_id: resource.field('graphite_user_id'),
      id: resource.field('id'),
      influx_url: resource.field('influx_url'),
      labels: resource.field('labels'),
      logs_ip_allow_list_cname: resource.field('logs_ip_allow_list_cname'),
      logs_name: resource.field('logs_name'),
      logs_private_connectivity_info_private_dns: resource.field('logs_private_connectivity_info_private_dns'),
      logs_private_connectivity_info_service_name: resource.field('logs_private_connectivity_info_service_name'),
      logs_status: resource.field('logs_status'),
      logs_url: resource.field('logs_url'),
      logs_user_id: resource.field('logs_user_id'),
      name: resource.field('name'),
      org_id: resource.field('org_id'),
      org_name: resource.field('org_name'),
      org_slug: resource.field('org_slug'),
      otlp_private_connectivity_info_private_dns: resource.field('otlp_private_connectivity_info_private_dns'),
      otlp_private_connectivity_info_service_name: resource.field('otlp_private_connectivity_info_service_name'),
      otlp_url: resource.field('otlp_url'),
      pdc_api_private_connectivity_info_private_dns: resource.field('pdc_api_private_connectivity_info_private_dns'),
      pdc_api_private_connectivity_info_service_name: resource.field('pdc_api_private_connectivity_info_service_name'),
      pdc_gateway_private_connectivity_info_private_dns: resource.field('pdc_gateway_private_connectivity_info_private_dns'),
      pdc_gateway_private_connectivity_info_service_name: resource.field('pdc_gateway_private_connectivity_info_service_name'),
      profiles_ip_allow_list_cname: resource.field('profiles_ip_allow_list_cname'),
      profiles_name: resource.field('profiles_name'),
      profiles_private_connectivity_info_private_dns: resource.field('profiles_private_connectivity_info_private_dns'),
      profiles_private_connectivity_info_service_name: resource.field('profiles_private_connectivity_info_service_name'),
      profiles_status: resource.field('profiles_status'),
      profiles_url: resource.field('profiles_url'),
      profiles_user_id: resource.field('profiles_user_id'),
      prometheus_ip_allow_list_cname: resource.field('prometheus_ip_allow_list_cname'),
      prometheus_name: resource.field('prometheus_name'),
      prometheus_private_connectivity_info_private_dns: resource.field('prometheus_private_connectivity_info_private_dns'),
      prometheus_private_connectivity_info_service_name: resource.field('prometheus_private_connectivity_info_service_name'),
      prometheus_remote_endpoint: resource.field('prometheus_remote_endpoint'),
      prometheus_remote_write_endpoint: resource.field('prometheus_remote_write_endpoint'),
      prometheus_status: resource.field('prometheus_status'),
      prometheus_url: resource.field('prometheus_url'),
      prometheus_user_id: resource.field('prometheus_user_id'),
      region_slug: resource.field('region_slug'),
      slug: resource.field('slug'),
      status: resource.field('status'),
      traces_ip_allow_list_cname: resource.field('traces_ip_allow_list_cname'),
      traces_name: resource.field('traces_name'),
      traces_private_connectivity_info_private_dns: resource.field('traces_private_connectivity_info_private_dns'),
      traces_private_connectivity_info_service_name: resource.field('traces_private_connectivity_info_service_name'),
      traces_status: resource.field('traces_status'),
      traces_url: resource.field('traces_url'),
      traces_user_id: resource.field('traces_user_id'),
      url: resource.field('url'),
    },
    connections_metrics_endpoint_scrape_job(name, block): {
      local resource = blockType.resource('grafana_connections_metrics_endpoint_scrape_job', name),
      _: resource._(block, {
        authentication_basic_password: build.template(std.get(block, 'authentication_basic_password', null)),
        authentication_basic_username: build.template(std.get(block, 'authentication_basic_username', null)),
        authentication_bearer_token: build.template(std.get(block, 'authentication_bearer_token', null)),
        authentication_method: build.template(std.get(block, 'authentication_method', null)),
        enabled: build.template(std.get(block, 'enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        scrape_interval_seconds: build.template(std.get(block, 'scrape_interval_seconds', null)),
        stack_id: build.template(block.stack_id),
        url: build.template(std.get(block, 'url', null)),
      }),
      authentication_basic_password: resource.field('authentication_basic_password'),
      authentication_basic_username: resource.field('authentication_basic_username'),
      authentication_bearer_token: resource.field('authentication_bearer_token'),
      authentication_method: resource.field('authentication_method'),
      enabled: resource.field('enabled'),
      id: resource.field('id'),
      name: resource.field('name'),
      scrape_interval_seconds: resource.field('scrape_interval_seconds'),
      stack_id: resource.field('stack_id'),
      url: resource.field('url'),
    },
    dashboard(name, block): {
      local resource = blockType.resource('grafana_dashboard', name),
      _: resource._(block, {
        config_json: build.template(std.get(block, 'config_json', null)),
        dashboard_id: build.template(std.get(block, 'dashboard_id', null)),
        folder_uid: build.template(std.get(block, 'folder_uid', null)),
        id: build.template(std.get(block, 'id', null)),
        is_starred: build.template(std.get(block, 'is_starred', null)),
        org_id: build.template(std.get(block, 'org_id', null)),
        slug: build.template(std.get(block, 'slug', null)),
        title: build.template(std.get(block, 'title', null)),
        uid: build.template(std.get(block, 'uid', null)),
        url: build.template(std.get(block, 'url', null)),
        version: build.template(std.get(block, 'version', null)),
      }),
      config_json: resource.field('config_json'),
      dashboard_id: resource.field('dashboard_id'),
      folder_uid: resource.field('folder_uid'),
      id: resource.field('id'),
      is_starred: resource.field('is_starred'),
      org_id: resource.field('org_id'),
      slug: resource.field('slug'),
      title: resource.field('title'),
      uid: resource.field('uid'),
      url: resource.field('url'),
      version: resource.field('version'),
    },
    dashboards(name, block): {
      local resource = blockType.resource('grafana_dashboards', name),
      _: resource._(block, {
        dashboards: build.template(std.get(block, 'dashboards', null)),
        folder_uids: build.template(std.get(block, 'folder_uids', null)),
        id: build.template(std.get(block, 'id', null)),
        limit: build.template(std.get(block, 'limit', null)),
        org_id: build.template(std.get(block, 'org_id', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      dashboards: resource.field('dashboards'),
      folder_uids: resource.field('folder_uids'),
      id: resource.field('id'),
      limit: resource.field('limit'),
      org_id: resource.field('org_id'),
      tags: resource.field('tags'),
    },
    data_source(name, block): {
      local resource = blockType.resource('grafana_data_source', name),
      _: resource._(block, {
        access_mode: build.template(std.get(block, 'access_mode', null)),
        basic_auth_enabled: build.template(std.get(block, 'basic_auth_enabled', null)),
        basic_auth_username: build.template(std.get(block, 'basic_auth_username', null)),
        database_name: build.template(std.get(block, 'database_name', null)),
        id: build.template(std.get(block, 'id', null)),
        is_default: build.template(std.get(block, 'is_default', null)),
        json_data_encoded: build.template(std.get(block, 'json_data_encoded', null)),
        name: build.template(std.get(block, 'name', null)),
        org_id: build.template(std.get(block, 'org_id', null)),
        private_data_source_connect_network_id: build.template(std.get(block, 'private_data_source_connect_network_id', null)),
        type: build.template(std.get(block, 'type', null)),
        uid: build.template(std.get(block, 'uid', null)),
        url: build.template(std.get(block, 'url', null)),
        username: build.template(std.get(block, 'username', null)),
      }),
      access_mode: resource.field('access_mode'),
      basic_auth_enabled: resource.field('basic_auth_enabled'),
      basic_auth_username: resource.field('basic_auth_username'),
      database_name: resource.field('database_name'),
      id: resource.field('id'),
      is_default: resource.field('is_default'),
      json_data_encoded: resource.field('json_data_encoded'),
      name: resource.field('name'),
      org_id: resource.field('org_id'),
      private_data_source_connect_network_id: resource.field('private_data_source_connect_network_id'),
      type: resource.field('type'),
      uid: resource.field('uid'),
      url: resource.field('url'),
      username: resource.field('username'),
    },
    folder(name, block): {
      local resource = blockType.resource('grafana_folder', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        org_id: build.template(std.get(block, 'org_id', null)),
        parent_folder_uid: build.template(std.get(block, 'parent_folder_uid', null)),
        title: build.template(block.title),
        uid: build.template(std.get(block, 'uid', null)),
        url: build.template(std.get(block, 'url', null)),
      }),
      id: resource.field('id'),
      org_id: resource.field('org_id'),
      parent_folder_uid: resource.field('parent_folder_uid'),
      title: resource.field('title'),
      uid: resource.field('uid'),
      url: resource.field('url'),
    },
    folders(name, block): {
      local resource = blockType.resource('grafana_folders', name),
      _: resource._(block, {
        folders: build.template(std.get(block, 'folders', null)),
        id: build.template(std.get(block, 'id', null)),
        org_id: build.template(std.get(block, 'org_id', null)),
      }),
      folders: resource.field('folders'),
      id: resource.field('id'),
      org_id: resource.field('org_id'),
    },
    frontend_o11y_app(name, block): {
      local resource = blockType.resource('grafana_frontend_o11y_app', name),
      _: resource._(block, {
        allowed_origins: build.template(std.get(block, 'allowed_origins', null)),
        extra_log_attributes: build.template(std.get(block, 'extra_log_attributes', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        settings: build.template(std.get(block, 'settings', null)),
        stack_id: build.template(block.stack_id),
      }),
      allowed_origins: resource.field('allowed_origins'),
      extra_log_attributes: resource.field('extra_log_attributes'),
      id: resource.field('id'),
      name: resource.field('name'),
      settings: resource.field('settings'),
      stack_id: resource.field('stack_id'),
    },
    library_panel(name, block): {
      local resource = blockType.resource('grafana_library_panel', name),
      _: resource._(block, {
        created: build.template(std.get(block, 'created', null)),
        dashboard_ids: build.template(std.get(block, 'dashboard_ids', null)),
        description: build.template(std.get(block, 'description', null)),
        folder_name: build.template(std.get(block, 'folder_name', null)),
        folder_uid: build.template(std.get(block, 'folder_uid', null)),
        id: build.template(std.get(block, 'id', null)),
        model_json: build.template(std.get(block, 'model_json', null)),
        name: build.template(std.get(block, 'name', null)),
        org_id: build.template(std.get(block, 'org_id', null)),
        panel_id: build.template(std.get(block, 'panel_id', null)),
        type: build.template(std.get(block, 'type', null)),
        uid: build.template(std.get(block, 'uid', null)),
        updated: build.template(std.get(block, 'updated', null)),
        version: build.template(std.get(block, 'version', null)),
      }),
      created: resource.field('created'),
      dashboard_ids: resource.field('dashboard_ids'),
      description: resource.field('description'),
      folder_name: resource.field('folder_name'),
      folder_uid: resource.field('folder_uid'),
      id: resource.field('id'),
      model_json: resource.field('model_json'),
      name: resource.field('name'),
      org_id: resource.field('org_id'),
      panel_id: resource.field('panel_id'),
      type: resource.field('type'),
      uid: resource.field('uid'),
      updated: resource.field('updated'),
      version: resource.field('version'),
    },
    library_panels(name, block): {
      local resource = blockType.resource('grafana_library_panels', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        org_id: build.template(std.get(block, 'org_id', null)),
        panels: build.template(std.get(block, 'panels', null)),
      }),
      id: resource.field('id'),
      org_id: resource.field('org_id'),
      panels: resource.field('panels'),
    },
    oncall_escalation_chain(name, block): {
      local resource = blockType.resource('grafana_oncall_escalation_chain', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
      }),
      id: resource.field('id'),
      name: resource.field('name'),
    },
    oncall_integration(name, block): {
      local resource = blockType.resource('grafana_oncall_integration', name),
      _: resource._(block, {
        id: build.template(block.id),
        name: build.template(std.get(block, 'name', null)),
      }),
      id: resource.field('id'),
      name: resource.field('name'),
    },
    oncall_outgoing_webhook(name, block): {
      local resource = blockType.resource('grafana_oncall_outgoing_webhook', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
      }),
      id: resource.field('id'),
      name: resource.field('name'),
    },
    oncall_schedule(name, block): {
      local resource = blockType.resource('grafana_oncall_schedule', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        type: build.template(std.get(block, 'type', null)),
      }),
      id: resource.field('id'),
      name: resource.field('name'),
      type: resource.field('type'),
    },
    oncall_slack_channel(name, block): {
      local resource = blockType.resource('grafana_oncall_slack_channel', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        slack_id: build.template(std.get(block, 'slack_id', null)),
      }),
      id: resource.field('id'),
      name: resource.field('name'),
      slack_id: resource.field('slack_id'),
    },
    oncall_team(name, block): {
      local resource = blockType.resource('grafana_oncall_team', name),
      _: resource._(block, {
        avatar_url: build.template(std.get(block, 'avatar_url', null)),
        email: build.template(std.get(block, 'email', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
      }),
      avatar_url: resource.field('avatar_url'),
      email: resource.field('email'),
      id: resource.field('id'),
      name: resource.field('name'),
    },
    oncall_user(name, block): {
      local resource = blockType.resource('grafana_oncall_user', name),
      _: resource._(block, {
        email: build.template(std.get(block, 'email', null)),
        id: build.template(std.get(block, 'id', null)),
        role: build.template(std.get(block, 'role', null)),
        username: build.template(block.username),
      }),
      email: resource.field('email'),
      id: resource.field('id'),
      role: resource.field('role'),
      username: resource.field('username'),
    },
    oncall_user_group(name, block): {
      local resource = blockType.resource('grafana_oncall_user_group', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        slack_handle: build.template(block.slack_handle),
        slack_id: build.template(std.get(block, 'slack_id', null)),
      }),
      id: resource.field('id'),
      slack_handle: resource.field('slack_handle'),
      slack_id: resource.field('slack_id'),
    },
    oncall_users(name, block): {
      local resource = blockType.resource('grafana_oncall_users', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        users: build.template(std.get(block, 'users', null)),
      }),
      id: resource.field('id'),
      users: resource.field('users'),
    },
    organization(name, block): {
      local resource = blockType.resource('grafana_organization', name),
      _: resource._(block, {
        admins: build.template(std.get(block, 'admins', null)),
        editors: build.template(std.get(block, 'editors', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        viewers: build.template(std.get(block, 'viewers', null)),
      }),
      admins: resource.field('admins'),
      editors: resource.field('editors'),
      id: resource.field('id'),
      name: resource.field('name'),
      viewers: resource.field('viewers'),
    },
    organization_preferences(name, block): {
      local resource = blockType.resource('grafana_organization_preferences', name),
      _: resource._(block, {
        home_dashboard_uid: build.template(std.get(block, 'home_dashboard_uid', null)),
        id: build.template(std.get(block, 'id', null)),
        org_id: build.template(std.get(block, 'org_id', null)),
        theme: build.template(std.get(block, 'theme', null)),
        timezone: build.template(std.get(block, 'timezone', null)),
        week_start: build.template(std.get(block, 'week_start', null)),
      }),
      home_dashboard_uid: resource.field('home_dashboard_uid'),
      id: resource.field('id'),
      org_id: resource.field('org_id'),
      theme: resource.field('theme'),
      timezone: resource.field('timezone'),
      week_start: resource.field('week_start'),
    },
    role(name, block): {
      local resource = blockType.resource('grafana_role', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        display_name: build.template(std.get(block, 'display_name', null)),
        global: build.template(std.get(block, 'global', null)),
        group: build.template(std.get(block, 'group', null)),
        hidden: build.template(std.get(block, 'hidden', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        org_id: build.template(std.get(block, 'org_id', null)),
        permissions: build.template(std.get(block, 'permissions', null)),
        uid: build.template(std.get(block, 'uid', null)),
        version: build.template(std.get(block, 'version', null)),
      }),
      description: resource.field('description'),
      display_name: resource.field('display_name'),
      global: resource.field('global'),
      group: resource.field('group'),
      hidden: resource.field('hidden'),
      id: resource.field('id'),
      name: resource.field('name'),
      org_id: resource.field('org_id'),
      permissions: resource.field('permissions'),
      uid: resource.field('uid'),
      version: resource.field('version'),
    },
    service_account(name, block): {
      local resource = blockType.resource('grafana_service_account', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        is_disabled: build.template(std.get(block, 'is_disabled', null)),
        name: build.template(block.name),
        org_id: build.template(std.get(block, 'org_id', null)),
        role: build.template(std.get(block, 'role', null)),
      }),
      id: resource.field('id'),
      is_disabled: resource.field('is_disabled'),
      name: resource.field('name'),
      org_id: resource.field('org_id'),
      role: resource.field('role'),
    },
    slos(name, block): {
      local resource = blockType.resource('grafana_slos', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        slos: build.template(std.get(block, 'slos', null)),
      }),
      id: resource.field('id'),
      slos: resource.field('slos'),
    },
    synthetic_monitoring_probe(name, block): {
      local resource = blockType.resource('grafana_synthetic_monitoring_probe', name),
      _: resource._(block, {
        disable_browser_checks: build.template(std.get(block, 'disable_browser_checks', null)),
        disable_scripted_checks: build.template(std.get(block, 'disable_scripted_checks', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        latitude: build.template(std.get(block, 'latitude', null)),
        longitude: build.template(std.get(block, 'longitude', null)),
        name: build.template(block.name),
        public: build.template(std.get(block, 'public', null)),
        region: build.template(std.get(block, 'region', null)),
        tenant_id: build.template(std.get(block, 'tenant_id', null)),
      }),
      disable_browser_checks: resource.field('disable_browser_checks'),
      disable_scripted_checks: resource.field('disable_scripted_checks'),
      id: resource.field('id'),
      labels: resource.field('labels'),
      latitude: resource.field('latitude'),
      longitude: resource.field('longitude'),
      name: resource.field('name'),
      public: resource.field('public'),
      region: resource.field('region'),
      tenant_id: resource.field('tenant_id'),
    },
    synthetic_monitoring_probes(name, block): {
      local resource = blockType.resource('grafana_synthetic_monitoring_probes', name),
      _: resource._(block, {
        filter_deprecated: build.template(std.get(block, 'filter_deprecated', null)),
        id: build.template(std.get(block, 'id', null)),
        probes: build.template(std.get(block, 'probes', null)),
      }),
      filter_deprecated: resource.field('filter_deprecated'),
      id: resource.field('id'),
      probes: resource.field('probes'),
    },
    team(name, block): {
      local resource = blockType.resource('grafana_team', name),
      _: resource._(block, {
        email: build.template(std.get(block, 'email', null)),
        id: build.template(std.get(block, 'id', null)),
        members: build.template(std.get(block, 'members', null)),
        name: build.template(block.name),
        org_id: build.template(std.get(block, 'org_id', null)),
        preferences: build.template(std.get(block, 'preferences', null)),
        read_team_sync: build.template(std.get(block, 'read_team_sync', null)),
        team_id: build.template(std.get(block, 'team_id', null)),
        team_sync: build.template(std.get(block, 'team_sync', null)),
        team_uid: build.template(std.get(block, 'team_uid', null)),
      }),
      email: resource.field('email'),
      id: resource.field('id'),
      members: resource.field('members'),
      name: resource.field('name'),
      org_id: resource.field('org_id'),
      preferences: resource.field('preferences'),
      read_team_sync: resource.field('read_team_sync'),
      team_id: resource.field('team_id'),
      team_sync: resource.field('team_sync'),
      team_uid: resource.field('team_uid'),
    },
    user(name, block): {
      local resource = blockType.resource('grafana_user', name),
      _: resource._(block, {
        email: build.template(std.get(block, 'email', null)),
        id: build.template(std.get(block, 'id', null)),
        is_admin: build.template(std.get(block, 'is_admin', null)),
        login: build.template(std.get(block, 'login', null)),
        name: build.template(std.get(block, 'name', null)),
        user_id: build.template(std.get(block, 'user_id', null)),
      }),
      email: resource.field('email'),
      id: resource.field('id'),
      is_admin: resource.field('is_admin'),
      login: resource.field('login'),
      name: resource.field('name'),
      user_id: resource.field('user_id'),
    },
    users(name, block): {
      local resource = blockType.resource('grafana_users', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        users: build.template(std.get(block, 'users', null)),
      }),
      id: resource.field('id'),
      users: resource.field('users'),
    },
  },
};

local providerWithConfiguration = provider(null) + {
  withConfiguration(alias, block): provider(std.prune({
    alias: alias,
    auth: build.template(std.get(block, 'auth', null)),
    ca_cert: build.template(std.get(block, 'ca_cert', null)),
    cloud_access_policy_token: build.template(std.get(block, 'cloud_access_policy_token', null)),
    cloud_api_url: build.template(std.get(block, 'cloud_api_url', null)),
    cloud_provider_access_token: build.template(std.get(block, 'cloud_provider_access_token', null)),
    cloud_provider_url: build.template(std.get(block, 'cloud_provider_url', null)),
    connections_api_access_token: build.template(std.get(block, 'connections_api_access_token', null)),
    connections_api_url: build.template(std.get(block, 'connections_api_url', null)),
    fleet_management_auth: build.template(std.get(block, 'fleet_management_auth', null)),
    fleet_management_url: build.template(std.get(block, 'fleet_management_url', null)),
    frontend_o11y_api_access_token: build.template(std.get(block, 'frontend_o11y_api_access_token', null)),
    http_headers: build.template(std.get(block, 'http_headers', null)),
    insecure_skip_verify: build.template(std.get(block, 'insecure_skip_verify', null)),
    oncall_access_token: build.template(std.get(block, 'oncall_access_token', null)),
    oncall_url: build.template(std.get(block, 'oncall_url', null)),
    retries: build.template(std.get(block, 'retries', null)),
    retry_status_codes: build.template(std.get(block, 'retry_status_codes', null)),
    retry_wait: build.template(std.get(block, 'retry_wait', null)),
    sm_access_token: build.template(std.get(block, 'sm_access_token', null)),
    sm_url: build.template(std.get(block, 'sm_url', null)),
    store_dashboard_sha256: build.template(std.get(block, 'store_dashboard_sha256', null)),
    tls_cert: build.template(std.get(block, 'tls_cert', null)),
    tls_key: build.template(std.get(block, 'tls_key', null)),
    url: build.template(std.get(block, 'url', null)),
  })),
};

providerWithConfiguration
