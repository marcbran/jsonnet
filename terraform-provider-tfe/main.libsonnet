local build = {
  expression(val):
    if std.type(val) == 'object' then
      if std.objectHas(val, '_')
      then
        if std.objectHas(val._, 'ref')
        then val._.ref
        else '"%s"' % [val._.str]
      else '{%s}' % [std.join(',', std.map(function(key) '%s:%s' % [self.expression(key), self.expression(val[key])], std.objectFields(val)))]
    else if std.type(val) == 'array' then '[%s]' % [std.join(',', std.map(function(element) self.expression(element), val))]
    else if std.type(val) == 'string' then '"%s"' % [val]
    else '"%s"' % [val],
  template(val):
    if std.type(val) == 'object' then
      if std.objectHas(val, '_')
      then
        if std.objectHas(val._, 'ref')
        then std.strReplace(self.string(val), '\n', '\\n')
        else val._.str
      else std.mapWithKey(function(key, value) self.template(value), val)
    else if std.type(val) == 'array' then std.map(function(element) self.template(element), val)
    else if std.type(val) == 'string' then std.strReplace(self.string(val), '\n', '\\n')
    else val,
  string(val):
    if std.type(val) == 'object' then
      if std.objectHas(val, '_')
      then
        if std.objectHas(val._, 'ref')
        then '${%s}' % [val._.ref]
        else val._.str
      else '${%s}' % [self.expression(val)]
    else if std.type(val) == 'array' then '${%s}' % [self.expression(val)]
    else if std.type(val) == 'string' then val
    else val,
  blocks(val):
    if std.type(val) == 'object'
    then
      if std.objectHas(val, '_')
      then
        if std.objectHas(val._, 'blocks')
        then val._.blocks
        else
          if std.objectHas(val._, 'block')
          then { [val._.ref]: val._.block }
          else {}
      else std.foldl(function(acc, val) std.mergePatch(acc, val), std.map(function(key) build.blocks(val[key]), std.objectFields(val)), {})
    else if std.type(val) == 'array'
    then std.foldl(function(acc, val) std.mergePatch(acc, val), std.map(function(element) build.blocks(element), val), {})
    else {},
};

local providerTemplate(provider, requirements, rawConfiguration, configuration) = {
  local providerRequirements = {
    ['terraform.required_providers.%s' % [provider]]: requirements,
  },
  local providerAlias = if configuration == null then null else std.get(configuration, 'alias', null),
  local providerConfiguration =
    if configuration == null then { _: { refBlock: {}, blocks: [] } } else {
      _: {
        local _ = self,
        ref: '%s.%s' % [provider, configuration.alias],
        refBlock: {
          provider: _.ref,
        },
        block: {
          provider: {
            [provider]: std.prune(configuration),
          },
        },
        blocks: build.blocks(rawConfiguration) + {
          [_.ref]: _.block,
        },
      },
    },
  blockType(blockType): {
    local blockTypePath = if blockType == 'resource' then [] else ['data'],
    resource(type, name): {
      local resourceType = std.substr(type, std.length(provider) + 1, std.length(type)),
      local resourcePath = blockTypePath + [type, name],
      _(rawBlock, block): {
        local _ = self,
        local metaBlock = {
          depends_on: build.template(std.get(rawBlock, 'depends_on', null)),
          count: build.template(std.get(rawBlock, 'count', null)),
          for_each: build.template(std.get(rawBlock, 'for_each', null)),
        },
        type: if std.objectHas(rawBlock, 'for_each') then 'map' else if std.objectHas(rawBlock, 'count') then 'list' else 'object',
        provider: provider,
        providerAlias: providerAlias,
        resourceType: resourceType,
        name: name,
        ref: std.join('.', resourcePath),
        block: {
          [blockType]: {
            [type]: {
              [name]: std.prune(providerConfiguration._.refBlock + metaBlock + block),
            },
          },
        },
        blocks: build.blocks([providerConfiguration] + [rawBlock]) + providerRequirements + {
          [_.ref]: _.block,
        },
      },
      field(blocks, fieldName): {
        local fieldPath = resourcePath + [fieldName],
        _: {
          ref: std.join('.', fieldPath),
          blocks: blocks,
        },
      },
    },
  },
  func(name, parameters=[]): {
    local parameterString = std.join(', ', [build.expression(parameter) for parameter in parameters]),
    _: {
      ref: 'provider::%s::%s(%s)' % [provider, name, parameterString],
      blocks: build.blocks([providerConfiguration] + [parameters]) + providerRequirements,
    },
  },
};

local provider(rawConfiguration, configuration) = {
  local requirements = {
    source: 'registry.terraform.io/hashicorp/tfe',
    version: '0.64.0',
  },
  local provider = providerTemplate('tfe', requirements, rawConfiguration, configuration),
  resource: {
    local blockType = provider.blockType('resource'),
    admin_organization_settings(name, block): {
      local resource = blockType.resource('tfe_admin_organization_settings', name),
      _: resource._(block, {
        access_beta_tools: build.template(std.get(block, 'access_beta_tools', null)),
        global_module_sharing: build.template(std.get(block, 'global_module_sharing', null)),
        id: build.template(std.get(block, 'id', null)),
        module_sharing_consumer_organizations: build.template(std.get(block, 'module_sharing_consumer_organizations', null)),
        organization: build.template(std.get(block, 'organization', null)),
        sso_enabled: build.template(std.get(block, 'sso_enabled', null)),
        workspace_limit: build.template(std.get(block, 'workspace_limit', null)),
      }),
      access_beta_tools: resource.field(self._.blocks, 'access_beta_tools'),
      global_module_sharing: resource.field(self._.blocks, 'global_module_sharing'),
      id: resource.field(self._.blocks, 'id'),
      module_sharing_consumer_organizations: resource.field(self._.blocks, 'module_sharing_consumer_organizations'),
      organization: resource.field(self._.blocks, 'organization'),
      sso_enabled: resource.field(self._.blocks, 'sso_enabled'),
      workspace_limit: resource.field(self._.blocks, 'workspace_limit'),
    },
    agent_pool(name, block): {
      local resource = blockType.resource('tfe_agent_pool', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        organization: build.template(std.get(block, 'organization', null)),
        organization_scoped: build.template(std.get(block, 'organization_scoped', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      organization: resource.field(self._.blocks, 'organization'),
      organization_scoped: resource.field(self._.blocks, 'organization_scoped'),
    },
    agent_pool_allowed_workspaces(name, block): {
      local resource = blockType.resource('tfe_agent_pool_allowed_workspaces', name),
      _: resource._(block, {
        agent_pool_id: build.template(block.agent_pool_id),
        allowed_workspace_ids: build.template(block.allowed_workspace_ids),
        id: build.template(std.get(block, 'id', null)),
      }),
      agent_pool_id: resource.field(self._.blocks, 'agent_pool_id'),
      allowed_workspace_ids: resource.field(self._.blocks, 'allowed_workspace_ids'),
      id: resource.field(self._.blocks, 'id'),
    },
    agent_token(name, block): {
      local resource = blockType.resource('tfe_agent_token', name),
      _: resource._(block, {
        agent_pool_id: build.template(block.agent_pool_id),
        description: build.template(block.description),
        id: build.template(std.get(block, 'id', null)),
        token: build.template(std.get(block, 'token', null)),
      }),
      agent_pool_id: resource.field(self._.blocks, 'agent_pool_id'),
      description: resource.field(self._.blocks, 'description'),
      id: resource.field(self._.blocks, 'id'),
      token: resource.field(self._.blocks, 'token'),
    },
    audit_trail_token(name, block): {
      local resource = blockType.resource('tfe_audit_trail_token', name),
      _: resource._(block, {
        expired_at: build.template(std.get(block, 'expired_at', null)),
        force_regenerate: build.template(std.get(block, 'force_regenerate', null)),
        id: build.template(std.get(block, 'id', null)),
        organization: build.template(std.get(block, 'organization', null)),
        token: build.template(std.get(block, 'token', null)),
      }),
      expired_at: resource.field(self._.blocks, 'expired_at'),
      force_regenerate: resource.field(self._.blocks, 'force_regenerate'),
      id: resource.field(self._.blocks, 'id'),
      organization: resource.field(self._.blocks, 'organization'),
      token: resource.field(self._.blocks, 'token'),
    },
    data_retention_policy(name, block): {
      local resource = blockType.resource('tfe_data_retention_policy', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        organization: build.template(std.get(block, 'organization', null)),
        workspace_id: build.template(std.get(block, 'workspace_id', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      organization: resource.field(self._.blocks, 'organization'),
      workspace_id: resource.field(self._.blocks, 'workspace_id'),
    },
    no_code_module(name, block): {
      local resource = blockType.resource('tfe_no_code_module', name),
      _: resource._(block, {
        enabled: build.template(std.get(block, 'enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        organization: build.template(std.get(block, 'organization', null)),
        registry_module: build.template(block.registry_module),
        version_pin: build.template(std.get(block, 'version_pin', null)),
      }),
      enabled: resource.field(self._.blocks, 'enabled'),
      id: resource.field(self._.blocks, 'id'),
      organization: resource.field(self._.blocks, 'organization'),
      registry_module: resource.field(self._.blocks, 'registry_module'),
      version_pin: resource.field(self._.blocks, 'version_pin'),
    },
    notification_configuration(name, block): {
      local resource = blockType.resource('tfe_notification_configuration', name),
      _: resource._(block, {
        destination_type: build.template(block.destination_type),
        email_addresses: build.template(std.get(block, 'email_addresses', null)),
        email_user_ids: build.template(std.get(block, 'email_user_ids', null)),
        enabled: build.template(std.get(block, 'enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        token: build.template(std.get(block, 'token', null)),
        triggers: build.template(std.get(block, 'triggers', null)),
        url: build.template(std.get(block, 'url', null)),
        workspace_id: build.template(block.workspace_id),
      }),
      destination_type: resource.field(self._.blocks, 'destination_type'),
      email_addresses: resource.field(self._.blocks, 'email_addresses'),
      email_user_ids: resource.field(self._.blocks, 'email_user_ids'),
      enabled: resource.field(self._.blocks, 'enabled'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      token: resource.field(self._.blocks, 'token'),
      triggers: resource.field(self._.blocks, 'triggers'),
      url: resource.field(self._.blocks, 'url'),
      workspace_id: resource.field(self._.blocks, 'workspace_id'),
    },
    oauth_client(name, block): {
      local resource = blockType.resource('tfe_oauth_client', name),
      _: resource._(block, {
        agent_pool_id: build.template(std.get(block, 'agent_pool_id', null)),
        api_url: build.template(block.api_url),
        http_url: build.template(block.http_url),
        id: build.template(std.get(block, 'id', null)),
        key: build.template(std.get(block, 'key', null)),
        name: build.template(std.get(block, 'name', null)),
        oauth_token: build.template(std.get(block, 'oauth_token', null)),
        oauth_token_id: build.template(std.get(block, 'oauth_token_id', null)),
        organization: build.template(std.get(block, 'organization', null)),
        organization_scoped: build.template(std.get(block, 'organization_scoped', null)),
        private_key: build.template(std.get(block, 'private_key', null)),
        rsa_public_key: build.template(std.get(block, 'rsa_public_key', null)),
        secret: build.template(std.get(block, 'secret', null)),
        service_provider: build.template(block.service_provider),
      }),
      agent_pool_id: resource.field(self._.blocks, 'agent_pool_id'),
      api_url: resource.field(self._.blocks, 'api_url'),
      http_url: resource.field(self._.blocks, 'http_url'),
      id: resource.field(self._.blocks, 'id'),
      key: resource.field(self._.blocks, 'key'),
      name: resource.field(self._.blocks, 'name'),
      oauth_token: resource.field(self._.blocks, 'oauth_token'),
      oauth_token_id: resource.field(self._.blocks, 'oauth_token_id'),
      organization: resource.field(self._.blocks, 'organization'),
      organization_scoped: resource.field(self._.blocks, 'organization_scoped'),
      private_key: resource.field(self._.blocks, 'private_key'),
      rsa_public_key: resource.field(self._.blocks, 'rsa_public_key'),
      secret: resource.field(self._.blocks, 'secret'),
      service_provider: resource.field(self._.blocks, 'service_provider'),
    },
    opa_version(name, block): {
      local resource = blockType.resource('tfe_opa_version', name),
      _: resource._(block, {
        beta: build.template(std.get(block, 'beta', null)),
        deprecated: build.template(std.get(block, 'deprecated', null)),
        deprecated_reason: build.template(std.get(block, 'deprecated_reason', null)),
        enabled: build.template(std.get(block, 'enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        official: build.template(std.get(block, 'official', null)),
        sha: build.template(block.sha),
        url: build.template(block.url),
        version: build.template(block.version),
      }),
      beta: resource.field(self._.blocks, 'beta'),
      deprecated: resource.field(self._.blocks, 'deprecated'),
      deprecated_reason: resource.field(self._.blocks, 'deprecated_reason'),
      enabled: resource.field(self._.blocks, 'enabled'),
      id: resource.field(self._.blocks, 'id'),
      official: resource.field(self._.blocks, 'official'),
      sha: resource.field(self._.blocks, 'sha'),
      url: resource.field(self._.blocks, 'url'),
      version: resource.field(self._.blocks, 'version'),
    },
    organization(name, block): {
      local resource = blockType.resource('tfe_organization', name),
      _: resource._(block, {
        aggregated_commit_status_enabled: build.template(std.get(block, 'aggregated_commit_status_enabled', null)),
        allow_force_delete_workspaces: build.template(std.get(block, 'allow_force_delete_workspaces', null)),
        assessments_enforced: build.template(std.get(block, 'assessments_enforced', null)),
        collaborator_auth_policy: build.template(std.get(block, 'collaborator_auth_policy', null)),
        cost_estimation_enabled: build.template(std.get(block, 'cost_estimation_enabled', null)),
        default_project_id: build.template(std.get(block, 'default_project_id', null)),
        email: build.template(block.email),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        owners_team_saml_role_id: build.template(std.get(block, 'owners_team_saml_role_id', null)),
        send_passing_statuses_for_untriggered_speculative_plans: build.template(std.get(block, 'send_passing_statuses_for_untriggered_speculative_plans', null)),
        session_remember_minutes: build.template(std.get(block, 'session_remember_minutes', null)),
        session_timeout_minutes: build.template(std.get(block, 'session_timeout_minutes', null)),
        speculative_plan_management_enabled: build.template(std.get(block, 'speculative_plan_management_enabled', null)),
      }),
      aggregated_commit_status_enabled: resource.field(self._.blocks, 'aggregated_commit_status_enabled'),
      allow_force_delete_workspaces: resource.field(self._.blocks, 'allow_force_delete_workspaces'),
      assessments_enforced: resource.field(self._.blocks, 'assessments_enforced'),
      collaborator_auth_policy: resource.field(self._.blocks, 'collaborator_auth_policy'),
      cost_estimation_enabled: resource.field(self._.blocks, 'cost_estimation_enabled'),
      default_project_id: resource.field(self._.blocks, 'default_project_id'),
      email: resource.field(self._.blocks, 'email'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      owners_team_saml_role_id: resource.field(self._.blocks, 'owners_team_saml_role_id'),
      send_passing_statuses_for_untriggered_speculative_plans: resource.field(self._.blocks, 'send_passing_statuses_for_untriggered_speculative_plans'),
      session_remember_minutes: resource.field(self._.blocks, 'session_remember_minutes'),
      session_timeout_minutes: resource.field(self._.blocks, 'session_timeout_minutes'),
      speculative_plan_management_enabled: resource.field(self._.blocks, 'speculative_plan_management_enabled'),
    },
    organization_default_settings(name, block): {
      local resource = blockType.resource('tfe_organization_default_settings', name),
      _: resource._(block, {
        default_agent_pool_id: build.template(std.get(block, 'default_agent_pool_id', null)),
        default_execution_mode: build.template(block.default_execution_mode),
        id: build.template(std.get(block, 'id', null)),
        organization: build.template(std.get(block, 'organization', null)),
      }),
      default_agent_pool_id: resource.field(self._.blocks, 'default_agent_pool_id'),
      default_execution_mode: resource.field(self._.blocks, 'default_execution_mode'),
      id: resource.field(self._.blocks, 'id'),
      organization: resource.field(self._.blocks, 'organization'),
    },
    organization_membership(name, block): {
      local resource = blockType.resource('tfe_organization_membership', name),
      _: resource._(block, {
        email: build.template(block.email),
        id: build.template(std.get(block, 'id', null)),
        organization: build.template(std.get(block, 'organization', null)),
        user_id: build.template(std.get(block, 'user_id', null)),
        username: build.template(std.get(block, 'username', null)),
      }),
      email: resource.field(self._.blocks, 'email'),
      id: resource.field(self._.blocks, 'id'),
      organization: resource.field(self._.blocks, 'organization'),
      user_id: resource.field(self._.blocks, 'user_id'),
      username: resource.field(self._.blocks, 'username'),
    },
    organization_module_sharing(name, block): {
      local resource = blockType.resource('tfe_organization_module_sharing', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        module_consumers: build.template(block.module_consumers),
        organization: build.template(std.get(block, 'organization', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      module_consumers: resource.field(self._.blocks, 'module_consumers'),
      organization: resource.field(self._.blocks, 'organization'),
    },
    organization_run_task(name, block): {
      local resource = blockType.resource('tfe_organization_run_task', name),
      _: resource._(block, {
        category: build.template(std.get(block, 'category', null)),
        description: build.template(std.get(block, 'description', null)),
        enabled: build.template(std.get(block, 'enabled', null)),
        hmac_key: build.template(std.get(block, 'hmac_key', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        organization: build.template(std.get(block, 'organization', null)),
        url: build.template(block.url),
      }),
      category: resource.field(self._.blocks, 'category'),
      description: resource.field(self._.blocks, 'description'),
      enabled: resource.field(self._.blocks, 'enabled'),
      hmac_key: resource.field(self._.blocks, 'hmac_key'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      organization: resource.field(self._.blocks, 'organization'),
      url: resource.field(self._.blocks, 'url'),
    },
    organization_run_task_global_settings(name, block): {
      local resource = blockType.resource('tfe_organization_run_task_global_settings', name),
      _: resource._(block, {
        enabled: build.template(std.get(block, 'enabled', null)),
        enforcement_level: build.template(block.enforcement_level),
        id: build.template(std.get(block, 'id', null)),
        stages: build.template(block.stages),
        task_id: build.template(block.task_id),
      }),
      enabled: resource.field(self._.blocks, 'enabled'),
      enforcement_level: resource.field(self._.blocks, 'enforcement_level'),
      id: resource.field(self._.blocks, 'id'),
      stages: resource.field(self._.blocks, 'stages'),
      task_id: resource.field(self._.blocks, 'task_id'),
    },
    organization_token(name, block): {
      local resource = blockType.resource('tfe_organization_token', name),
      _: resource._(block, {
        expired_at: build.template(std.get(block, 'expired_at', null)),
        force_regenerate: build.template(std.get(block, 'force_regenerate', null)),
        id: build.template(std.get(block, 'id', null)),
        organization: build.template(std.get(block, 'organization', null)),
        token: build.template(std.get(block, 'token', null)),
      }),
      expired_at: resource.field(self._.blocks, 'expired_at'),
      force_regenerate: resource.field(self._.blocks, 'force_regenerate'),
      id: resource.field(self._.blocks, 'id'),
      organization: resource.field(self._.blocks, 'organization'),
      token: resource.field(self._.blocks, 'token'),
    },
    policy(name, block): {
      local resource = blockType.resource('tfe_policy', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        enforce_mode: build.template(std.get(block, 'enforce_mode', null)),
        id: build.template(std.get(block, 'id', null)),
        kind: build.template(std.get(block, 'kind', null)),
        name: build.template(block.name),
        organization: build.template(std.get(block, 'organization', null)),
        policy: build.template(block.policy),
        query: build.template(std.get(block, 'query', null)),
      }),
      description: resource.field(self._.blocks, 'description'),
      enforce_mode: resource.field(self._.blocks, 'enforce_mode'),
      id: resource.field(self._.blocks, 'id'),
      kind: resource.field(self._.blocks, 'kind'),
      name: resource.field(self._.blocks, 'name'),
      organization: resource.field(self._.blocks, 'organization'),
      policy: resource.field(self._.blocks, 'policy'),
      query: resource.field(self._.blocks, 'query'),
    },
    policy_set(name, block): {
      local resource = blockType.resource('tfe_policy_set', name),
      _: resource._(block, {
        agent_enabled: build.template(std.get(block, 'agent_enabled', null)),
        description: build.template(std.get(block, 'description', null)),
        global: build.template(std.get(block, 'global', null)),
        id: build.template(std.get(block, 'id', null)),
        kind: build.template(std.get(block, 'kind', null)),
        name: build.template(block.name),
        organization: build.template(std.get(block, 'organization', null)),
        overridable: build.template(std.get(block, 'overridable', null)),
        policies_path: build.template(std.get(block, 'policies_path', null)),
        policy_ids: build.template(std.get(block, 'policy_ids', null)),
        policy_tool_version: build.template(std.get(block, 'policy_tool_version', null)),
        slug: build.template(std.get(block, 'slug', null)),
        workspace_ids: build.template(std.get(block, 'workspace_ids', null)),
      }),
      agent_enabled: resource.field(self._.blocks, 'agent_enabled'),
      description: resource.field(self._.blocks, 'description'),
      global: resource.field(self._.blocks, 'global'),
      id: resource.field(self._.blocks, 'id'),
      kind: resource.field(self._.blocks, 'kind'),
      name: resource.field(self._.blocks, 'name'),
      organization: resource.field(self._.blocks, 'organization'),
      overridable: resource.field(self._.blocks, 'overridable'),
      policies_path: resource.field(self._.blocks, 'policies_path'),
      policy_ids: resource.field(self._.blocks, 'policy_ids'),
      policy_tool_version: resource.field(self._.blocks, 'policy_tool_version'),
      slug: resource.field(self._.blocks, 'slug'),
      workspace_ids: resource.field(self._.blocks, 'workspace_ids'),
    },
    policy_set_parameter(name, block): {
      local resource = blockType.resource('tfe_policy_set_parameter', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        key: build.template(block.key),
        policy_set_id: build.template(block.policy_set_id),
        sensitive: build.template(std.get(block, 'sensitive', null)),
        value: build.template(std.get(block, 'value', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      key: resource.field(self._.blocks, 'key'),
      policy_set_id: resource.field(self._.blocks, 'policy_set_id'),
      sensitive: resource.field(self._.blocks, 'sensitive'),
      value: resource.field(self._.blocks, 'value'),
    },
    project(name, block): {
      local resource = blockType.resource('tfe_project', name),
      _: resource._(block, {
        auto_destroy_activity_duration: build.template(std.get(block, 'auto_destroy_activity_duration', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        organization: build.template(std.get(block, 'organization', null)),
      }),
      auto_destroy_activity_duration: resource.field(self._.blocks, 'auto_destroy_activity_duration'),
      description: resource.field(self._.blocks, 'description'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      organization: resource.field(self._.blocks, 'organization'),
    },
    project_oauth_client(name, block): {
      local resource = blockType.resource('tfe_project_oauth_client', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        oauth_client_id: build.template(block.oauth_client_id),
        project_id: build.template(block.project_id),
      }),
      id: resource.field(self._.blocks, 'id'),
      oauth_client_id: resource.field(self._.blocks, 'oauth_client_id'),
      project_id: resource.field(self._.blocks, 'project_id'),
    },
    project_policy_set(name, block): {
      local resource = blockType.resource('tfe_project_policy_set', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        policy_set_id: build.template(block.policy_set_id),
        project_id: build.template(block.project_id),
      }),
      id: resource.field(self._.blocks, 'id'),
      policy_set_id: resource.field(self._.blocks, 'policy_set_id'),
      project_id: resource.field(self._.blocks, 'project_id'),
    },
    project_variable_set(name, block): {
      local resource = blockType.resource('tfe_project_variable_set', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        project_id: build.template(block.project_id),
        variable_set_id: build.template(block.variable_set_id),
      }),
      id: resource.field(self._.blocks, 'id'),
      project_id: resource.field(self._.blocks, 'project_id'),
      variable_set_id: resource.field(self._.blocks, 'variable_set_id'),
    },
    registry_gpg_key(name, block): {
      local resource = blockType.resource('tfe_registry_gpg_key', name),
      _: resource._(block, {
        ascii_armor: build.template(block.ascii_armor),
        created_at: build.template(std.get(block, 'created_at', null)),
        id: build.template(std.get(block, 'id', null)),
        organization: build.template(std.get(block, 'organization', null)),
        updated_at: build.template(std.get(block, 'updated_at', null)),
      }),
      ascii_armor: resource.field(self._.blocks, 'ascii_armor'),
      created_at: resource.field(self._.blocks, 'created_at'),
      id: resource.field(self._.blocks, 'id'),
      organization: resource.field(self._.blocks, 'organization'),
      updated_at: resource.field(self._.blocks, 'updated_at'),
    },
    registry_module(name, block): {
      local resource = blockType.resource('tfe_registry_module', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        initial_version: build.template(std.get(block, 'initial_version', null)),
        module_provider: build.template(std.get(block, 'module_provider', null)),
        name: build.template(std.get(block, 'name', null)),
        namespace: build.template(std.get(block, 'namespace', null)),
        no_code: build.template(std.get(block, 'no_code', null)),
        organization: build.template(std.get(block, 'organization', null)),
        publishing_mechanism: build.template(std.get(block, 'publishing_mechanism', null)),
        registry_name: build.template(std.get(block, 'registry_name', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      initial_version: resource.field(self._.blocks, 'initial_version'),
      module_provider: resource.field(self._.blocks, 'module_provider'),
      name: resource.field(self._.blocks, 'name'),
      namespace: resource.field(self._.blocks, 'namespace'),
      no_code: resource.field(self._.blocks, 'no_code'),
      organization: resource.field(self._.blocks, 'organization'),
      publishing_mechanism: resource.field(self._.blocks, 'publishing_mechanism'),
      registry_name: resource.field(self._.blocks, 'registry_name'),
    },
    registry_provider(name, block): {
      local resource = blockType.resource('tfe_registry_provider', name),
      _: resource._(block, {
        created_at: build.template(std.get(block, 'created_at', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        namespace: build.template(std.get(block, 'namespace', null)),
        organization: build.template(std.get(block, 'organization', null)),
        registry_name: build.template(std.get(block, 'registry_name', null)),
        updated_at: build.template(std.get(block, 'updated_at', null)),
      }),
      created_at: resource.field(self._.blocks, 'created_at'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      namespace: resource.field(self._.blocks, 'namespace'),
      organization: resource.field(self._.blocks, 'organization'),
      registry_name: resource.field(self._.blocks, 'registry_name'),
      updated_at: resource.field(self._.blocks, 'updated_at'),
    },
    run_trigger(name, block): {
      local resource = blockType.resource('tfe_run_trigger', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        sourceable_id: build.template(block.sourceable_id),
        workspace_id: build.template(block.workspace_id),
      }),
      id: resource.field(self._.blocks, 'id'),
      sourceable_id: resource.field(self._.blocks, 'sourceable_id'),
      workspace_id: resource.field(self._.blocks, 'workspace_id'),
    },
    saml_settings(name, block): {
      local resource = blockType.resource('tfe_saml_settings', name),
      _: resource._(block, {
        acs_consumer_url: build.template(std.get(block, 'acs_consumer_url', null)),
        attr_groups: build.template(std.get(block, 'attr_groups', null)),
        attr_site_admin: build.template(std.get(block, 'attr_site_admin', null)),
        attr_username: build.template(std.get(block, 'attr_username', null)),
        authn_requests_signed: build.template(std.get(block, 'authn_requests_signed', null)),
        certificate: build.template(std.get(block, 'certificate', null)),
        debug: build.template(std.get(block, 'debug', null)),
        enabled: build.template(std.get(block, 'enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        idp_cert: build.template(block.idp_cert),
        metadata_url: build.template(std.get(block, 'metadata_url', null)),
        old_idp_cert: build.template(std.get(block, 'old_idp_cert', null)),
        private_key: build.template(std.get(block, 'private_key', null)),
        signature_digest_method: build.template(std.get(block, 'signature_digest_method', null)),
        signature_signing_method: build.template(std.get(block, 'signature_signing_method', null)),
        site_admin_role: build.template(std.get(block, 'site_admin_role', null)),
        slo_endpoint_url: build.template(block.slo_endpoint_url),
        sso_api_token_session_timeout: build.template(std.get(block, 'sso_api_token_session_timeout', null)),
        sso_endpoint_url: build.template(block.sso_endpoint_url),
        team_management_enabled: build.template(std.get(block, 'team_management_enabled', null)),
        want_assertions_signed: build.template(std.get(block, 'want_assertions_signed', null)),
      }),
      acs_consumer_url: resource.field(self._.blocks, 'acs_consumer_url'),
      attr_groups: resource.field(self._.blocks, 'attr_groups'),
      attr_site_admin: resource.field(self._.blocks, 'attr_site_admin'),
      attr_username: resource.field(self._.blocks, 'attr_username'),
      authn_requests_signed: resource.field(self._.blocks, 'authn_requests_signed'),
      certificate: resource.field(self._.blocks, 'certificate'),
      debug: resource.field(self._.blocks, 'debug'),
      enabled: resource.field(self._.blocks, 'enabled'),
      id: resource.field(self._.blocks, 'id'),
      idp_cert: resource.field(self._.blocks, 'idp_cert'),
      metadata_url: resource.field(self._.blocks, 'metadata_url'),
      old_idp_cert: resource.field(self._.blocks, 'old_idp_cert'),
      private_key: resource.field(self._.blocks, 'private_key'),
      signature_digest_method: resource.field(self._.blocks, 'signature_digest_method'),
      signature_signing_method: resource.field(self._.blocks, 'signature_signing_method'),
      site_admin_role: resource.field(self._.blocks, 'site_admin_role'),
      slo_endpoint_url: resource.field(self._.blocks, 'slo_endpoint_url'),
      sso_api_token_session_timeout: resource.field(self._.blocks, 'sso_api_token_session_timeout'),
      sso_endpoint_url: resource.field(self._.blocks, 'sso_endpoint_url'),
      team_management_enabled: resource.field(self._.blocks, 'team_management_enabled'),
      want_assertions_signed: resource.field(self._.blocks, 'want_assertions_signed'),
    },
    sentinel_policy(name, block): {
      local resource = blockType.resource('tfe_sentinel_policy', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        enforce_mode: build.template(std.get(block, 'enforce_mode', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        organization: build.template(std.get(block, 'organization', null)),
        policy: build.template(block.policy),
      }),
      description: resource.field(self._.blocks, 'description'),
      enforce_mode: resource.field(self._.blocks, 'enforce_mode'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      organization: resource.field(self._.blocks, 'organization'),
      policy: resource.field(self._.blocks, 'policy'),
    },
    sentinel_version(name, block): {
      local resource = blockType.resource('tfe_sentinel_version', name),
      _: resource._(block, {
        beta: build.template(std.get(block, 'beta', null)),
        deprecated: build.template(std.get(block, 'deprecated', null)),
        deprecated_reason: build.template(std.get(block, 'deprecated_reason', null)),
        enabled: build.template(std.get(block, 'enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        official: build.template(std.get(block, 'official', null)),
        sha: build.template(block.sha),
        url: build.template(block.url),
        version: build.template(block.version),
      }),
      beta: resource.field(self._.blocks, 'beta'),
      deprecated: resource.field(self._.blocks, 'deprecated'),
      deprecated_reason: resource.field(self._.blocks, 'deprecated_reason'),
      enabled: resource.field(self._.blocks, 'enabled'),
      id: resource.field(self._.blocks, 'id'),
      official: resource.field(self._.blocks, 'official'),
      sha: resource.field(self._.blocks, 'sha'),
      url: resource.field(self._.blocks, 'url'),
      version: resource.field(self._.blocks, 'version'),
    },
    ssh_key(name, block): {
      local resource = blockType.resource('tfe_ssh_key', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        key: build.template(block.key),
        name: build.template(block.name),
        organization: build.template(std.get(block, 'organization', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      key: resource.field(self._.blocks, 'key'),
      name: resource.field(self._.blocks, 'name'),
      organization: resource.field(self._.blocks, 'organization'),
    },
    stack(name, block): {
      local resource = blockType.resource('tfe_stack', name),
      _: resource._(block, {
        created_at: build.template(std.get(block, 'created_at', null)),
        deployment_names: build.template(std.get(block, 'deployment_names', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        project_id: build.template(block.project_id),
        updated_at: build.template(std.get(block, 'updated_at', null)),
      }),
      created_at: resource.field(self._.blocks, 'created_at'),
      deployment_names: resource.field(self._.blocks, 'deployment_names'),
      description: resource.field(self._.blocks, 'description'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      project_id: resource.field(self._.blocks, 'project_id'),
      updated_at: resource.field(self._.blocks, 'updated_at'),
    },
    team(name, block): {
      local resource = blockType.resource('tfe_team', name),
      _: resource._(block, {
        allow_member_token_management: build.template(std.get(block, 'allow_member_token_management', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        organization: build.template(std.get(block, 'organization', null)),
        sso_team_id: build.template(std.get(block, 'sso_team_id', null)),
        visibility: build.template(std.get(block, 'visibility', null)),
      }),
      allow_member_token_management: resource.field(self._.blocks, 'allow_member_token_management'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      organization: resource.field(self._.blocks, 'organization'),
      sso_team_id: resource.field(self._.blocks, 'sso_team_id'),
      visibility: resource.field(self._.blocks, 'visibility'),
    },
    team_access(name, block): {
      local resource = blockType.resource('tfe_team_access', name),
      _: resource._(block, {
        access: build.template(std.get(block, 'access', null)),
        id: build.template(std.get(block, 'id', null)),
        team_id: build.template(block.team_id),
        workspace_id: build.template(block.workspace_id),
      }),
      access: resource.field(self._.blocks, 'access'),
      id: resource.field(self._.blocks, 'id'),
      team_id: resource.field(self._.blocks, 'team_id'),
      workspace_id: resource.field(self._.blocks, 'workspace_id'),
    },
    team_member(name, block): {
      local resource = blockType.resource('tfe_team_member', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        team_id: build.template(block.team_id),
        username: build.template(block.username),
      }),
      id: resource.field(self._.blocks, 'id'),
      team_id: resource.field(self._.blocks, 'team_id'),
      username: resource.field(self._.blocks, 'username'),
    },
    team_members(name, block): {
      local resource = blockType.resource('tfe_team_members', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        team_id: build.template(block.team_id),
        usernames: build.template(block.usernames),
      }),
      id: resource.field(self._.blocks, 'id'),
      team_id: resource.field(self._.blocks, 'team_id'),
      usernames: resource.field(self._.blocks, 'usernames'),
    },
    team_notification_configuration(name, block): {
      local resource = blockType.resource('tfe_team_notification_configuration', name),
      _: resource._(block, {
        destination_type: build.template(block.destination_type),
        email_addresses: build.template(std.get(block, 'email_addresses', null)),
        email_user_ids: build.template(std.get(block, 'email_user_ids', null)),
        enabled: build.template(std.get(block, 'enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        team_id: build.template(block.team_id),
        token: build.template(std.get(block, 'token', null)),
        triggers: build.template(std.get(block, 'triggers', null)),
        url: build.template(std.get(block, 'url', null)),
      }),
      destination_type: resource.field(self._.blocks, 'destination_type'),
      email_addresses: resource.field(self._.blocks, 'email_addresses'),
      email_user_ids: resource.field(self._.blocks, 'email_user_ids'),
      enabled: resource.field(self._.blocks, 'enabled'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      team_id: resource.field(self._.blocks, 'team_id'),
      token: resource.field(self._.blocks, 'token'),
      triggers: resource.field(self._.blocks, 'triggers'),
      url: resource.field(self._.blocks, 'url'),
    },
    team_organization_member(name, block): {
      local resource = blockType.resource('tfe_team_organization_member', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        organization_membership_id: build.template(block.organization_membership_id),
        team_id: build.template(block.team_id),
      }),
      id: resource.field(self._.blocks, 'id'),
      organization_membership_id: resource.field(self._.blocks, 'organization_membership_id'),
      team_id: resource.field(self._.blocks, 'team_id'),
    },
    team_organization_members(name, block): {
      local resource = blockType.resource('tfe_team_organization_members', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        organization_membership_ids: build.template(block.organization_membership_ids),
        team_id: build.template(block.team_id),
      }),
      id: resource.field(self._.blocks, 'id'),
      organization_membership_ids: resource.field(self._.blocks, 'organization_membership_ids'),
      team_id: resource.field(self._.blocks, 'team_id'),
    },
    team_project_access(name, block): {
      local resource = blockType.resource('tfe_team_project_access', name),
      _: resource._(block, {
        access: build.template(block.access),
        id: build.template(std.get(block, 'id', null)),
        project_id: build.template(block.project_id),
        team_id: build.template(block.team_id),
      }),
      access: resource.field(self._.blocks, 'access'),
      id: resource.field(self._.blocks, 'id'),
      project_id: resource.field(self._.blocks, 'project_id'),
      team_id: resource.field(self._.blocks, 'team_id'),
    },
    team_token(name, block): {
      local resource = blockType.resource('tfe_team_token', name),
      _: resource._(block, {
        expired_at: build.template(std.get(block, 'expired_at', null)),
        force_regenerate: build.template(std.get(block, 'force_regenerate', null)),
        id: build.template(std.get(block, 'id', null)),
        team_id: build.template(block.team_id),
        token: build.template(std.get(block, 'token', null)),
      }),
      expired_at: resource.field(self._.blocks, 'expired_at'),
      force_regenerate: resource.field(self._.blocks, 'force_regenerate'),
      id: resource.field(self._.blocks, 'id'),
      team_id: resource.field(self._.blocks, 'team_id'),
      token: resource.field(self._.blocks, 'token'),
    },
    terraform_version(name, block): {
      local resource = blockType.resource('tfe_terraform_version', name),
      _: resource._(block, {
        beta: build.template(std.get(block, 'beta', null)),
        deprecated: build.template(std.get(block, 'deprecated', null)),
        deprecated_reason: build.template(std.get(block, 'deprecated_reason', null)),
        enabled: build.template(std.get(block, 'enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        official: build.template(std.get(block, 'official', null)),
        sha: build.template(block.sha),
        url: build.template(block.url),
        version: build.template(block.version),
      }),
      beta: resource.field(self._.blocks, 'beta'),
      deprecated: resource.field(self._.blocks, 'deprecated'),
      deprecated_reason: resource.field(self._.blocks, 'deprecated_reason'),
      enabled: resource.field(self._.blocks, 'enabled'),
      id: resource.field(self._.blocks, 'id'),
      official: resource.field(self._.blocks, 'official'),
      sha: resource.field(self._.blocks, 'sha'),
      url: resource.field(self._.blocks, 'url'),
      version: resource.field(self._.blocks, 'version'),
    },
    test_variable(name, block): {
      local resource = blockType.resource('tfe_test_variable', name),
      _: resource._(block, {
        category: build.template(block.category),
        description: build.template(std.get(block, 'description', null)),
        hcl: build.template(std.get(block, 'hcl', null)),
        id: build.template(std.get(block, 'id', null)),
        key: build.template(block.key),
        module_name: build.template(block.module_name),
        module_provider: build.template(block.module_provider),
        organization: build.template(block.organization),
        readable_value: build.template(std.get(block, 'readable_value', null)),
        sensitive: build.template(std.get(block, 'sensitive', null)),
        value: build.template(std.get(block, 'value', null)),
      }),
      category: resource.field(self._.blocks, 'category'),
      description: resource.field(self._.blocks, 'description'),
      hcl: resource.field(self._.blocks, 'hcl'),
      id: resource.field(self._.blocks, 'id'),
      key: resource.field(self._.blocks, 'key'),
      module_name: resource.field(self._.blocks, 'module_name'),
      module_provider: resource.field(self._.blocks, 'module_provider'),
      organization: resource.field(self._.blocks, 'organization'),
      readable_value: resource.field(self._.blocks, 'readable_value'),
      sensitive: resource.field(self._.blocks, 'sensitive'),
      value: resource.field(self._.blocks, 'value'),
    },
    variable(name, block): {
      local resource = blockType.resource('tfe_variable', name),
      _: resource._(block, {
        category: build.template(block.category),
        description: build.template(std.get(block, 'description', null)),
        hcl: build.template(std.get(block, 'hcl', null)),
        id: build.template(std.get(block, 'id', null)),
        key: build.template(block.key),
        readable_value: build.template(std.get(block, 'readable_value', null)),
        sensitive: build.template(std.get(block, 'sensitive', null)),
        value: build.template(std.get(block, 'value', null)),
        variable_set_id: build.template(std.get(block, 'variable_set_id', null)),
        workspace_id: build.template(std.get(block, 'workspace_id', null)),
      }),
      category: resource.field(self._.blocks, 'category'),
      description: resource.field(self._.blocks, 'description'),
      hcl: resource.field(self._.blocks, 'hcl'),
      id: resource.field(self._.blocks, 'id'),
      key: resource.field(self._.blocks, 'key'),
      readable_value: resource.field(self._.blocks, 'readable_value'),
      sensitive: resource.field(self._.blocks, 'sensitive'),
      value: resource.field(self._.blocks, 'value'),
      variable_set_id: resource.field(self._.blocks, 'variable_set_id'),
      workspace_id: resource.field(self._.blocks, 'workspace_id'),
    },
    variable_set(name, block): {
      local resource = blockType.resource('tfe_variable_set', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        global: build.template(std.get(block, 'global', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        organization: build.template(std.get(block, 'organization', null)),
        parent_project_id: build.template(std.get(block, 'parent_project_id', null)),
        priority: build.template(std.get(block, 'priority', null)),
        workspace_ids: build.template(std.get(block, 'workspace_ids', null)),
      }),
      description: resource.field(self._.blocks, 'description'),
      global: resource.field(self._.blocks, 'global'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      organization: resource.field(self._.blocks, 'organization'),
      parent_project_id: resource.field(self._.blocks, 'parent_project_id'),
      priority: resource.field(self._.blocks, 'priority'),
      workspace_ids: resource.field(self._.blocks, 'workspace_ids'),
    },
    workspace(name, block): {
      local resource = blockType.resource('tfe_workspace', name),
      _: resource._(block, {
        agent_pool_id: build.template(std.get(block, 'agent_pool_id', null)),
        allow_destroy_plan: build.template(std.get(block, 'allow_destroy_plan', null)),
        assessments_enabled: build.template(std.get(block, 'assessments_enabled', null)),
        auto_apply: build.template(std.get(block, 'auto_apply', null)),
        auto_apply_run_trigger: build.template(std.get(block, 'auto_apply_run_trigger', null)),
        auto_destroy_activity_duration: build.template(std.get(block, 'auto_destroy_activity_duration', null)),
        auto_destroy_at: build.template(std.get(block, 'auto_destroy_at', null)),
        description: build.template(std.get(block, 'description', null)),
        execution_mode: build.template(std.get(block, 'execution_mode', null)),
        file_triggers_enabled: build.template(std.get(block, 'file_triggers_enabled', null)),
        force_delete: build.template(std.get(block, 'force_delete', null)),
        global_remote_state: build.template(std.get(block, 'global_remote_state', null)),
        html_url: build.template(std.get(block, 'html_url', null)),
        id: build.template(std.get(block, 'id', null)),
        ignore_additional_tag_names: build.template(std.get(block, 'ignore_additional_tag_names', null)),
        inherits_project_auto_destroy: build.template(std.get(block, 'inherits_project_auto_destroy', null)),
        name: build.template(block.name),
        operations: build.template(std.get(block, 'operations', null)),
        organization: build.template(std.get(block, 'organization', null)),
        project_id: build.template(std.get(block, 'project_id', null)),
        queue_all_runs: build.template(std.get(block, 'queue_all_runs', null)),
        remote_state_consumer_ids: build.template(std.get(block, 'remote_state_consumer_ids', null)),
        resource_count: build.template(std.get(block, 'resource_count', null)),
        source_name: build.template(std.get(block, 'source_name', null)),
        source_url: build.template(std.get(block, 'source_url', null)),
        speculative_enabled: build.template(std.get(block, 'speculative_enabled', null)),
        ssh_key_id: build.template(std.get(block, 'ssh_key_id', null)),
        structured_run_output_enabled: build.template(std.get(block, 'structured_run_output_enabled', null)),
        tag_names: build.template(std.get(block, 'tag_names', null)),
        terraform_version: build.template(std.get(block, 'terraform_version', null)),
        trigger_patterns: build.template(std.get(block, 'trigger_patterns', null)),
        trigger_prefixes: build.template(std.get(block, 'trigger_prefixes', null)),
        working_directory: build.template(std.get(block, 'working_directory', null)),
      }),
      agent_pool_id: resource.field(self._.blocks, 'agent_pool_id'),
      allow_destroy_plan: resource.field(self._.blocks, 'allow_destroy_plan'),
      assessments_enabled: resource.field(self._.blocks, 'assessments_enabled'),
      auto_apply: resource.field(self._.blocks, 'auto_apply'),
      auto_apply_run_trigger: resource.field(self._.blocks, 'auto_apply_run_trigger'),
      auto_destroy_activity_duration: resource.field(self._.blocks, 'auto_destroy_activity_duration'),
      auto_destroy_at: resource.field(self._.blocks, 'auto_destroy_at'),
      description: resource.field(self._.blocks, 'description'),
      execution_mode: resource.field(self._.blocks, 'execution_mode'),
      file_triggers_enabled: resource.field(self._.blocks, 'file_triggers_enabled'),
      force_delete: resource.field(self._.blocks, 'force_delete'),
      global_remote_state: resource.field(self._.blocks, 'global_remote_state'),
      html_url: resource.field(self._.blocks, 'html_url'),
      id: resource.field(self._.blocks, 'id'),
      ignore_additional_tag_names: resource.field(self._.blocks, 'ignore_additional_tag_names'),
      inherits_project_auto_destroy: resource.field(self._.blocks, 'inherits_project_auto_destroy'),
      name: resource.field(self._.blocks, 'name'),
      operations: resource.field(self._.blocks, 'operations'),
      organization: resource.field(self._.blocks, 'organization'),
      project_id: resource.field(self._.blocks, 'project_id'),
      queue_all_runs: resource.field(self._.blocks, 'queue_all_runs'),
      remote_state_consumer_ids: resource.field(self._.blocks, 'remote_state_consumer_ids'),
      resource_count: resource.field(self._.blocks, 'resource_count'),
      source_name: resource.field(self._.blocks, 'source_name'),
      source_url: resource.field(self._.blocks, 'source_url'),
      speculative_enabled: resource.field(self._.blocks, 'speculative_enabled'),
      ssh_key_id: resource.field(self._.blocks, 'ssh_key_id'),
      structured_run_output_enabled: resource.field(self._.blocks, 'structured_run_output_enabled'),
      tag_names: resource.field(self._.blocks, 'tag_names'),
      terraform_version: resource.field(self._.blocks, 'terraform_version'),
      trigger_patterns: resource.field(self._.blocks, 'trigger_patterns'),
      trigger_prefixes: resource.field(self._.blocks, 'trigger_prefixes'),
      working_directory: resource.field(self._.blocks, 'working_directory'),
    },
    workspace_policy_set(name, block): {
      local resource = blockType.resource('tfe_workspace_policy_set', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        policy_set_id: build.template(block.policy_set_id),
        workspace_id: build.template(block.workspace_id),
      }),
      id: resource.field(self._.blocks, 'id'),
      policy_set_id: resource.field(self._.blocks, 'policy_set_id'),
      workspace_id: resource.field(self._.blocks, 'workspace_id'),
    },
    workspace_policy_set_exclusion(name, block): {
      local resource = blockType.resource('tfe_workspace_policy_set_exclusion', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        policy_set_id: build.template(block.policy_set_id),
        workspace_id: build.template(block.workspace_id),
      }),
      id: resource.field(self._.blocks, 'id'),
      policy_set_id: resource.field(self._.blocks, 'policy_set_id'),
      workspace_id: resource.field(self._.blocks, 'workspace_id'),
    },
    workspace_run(name, block): {
      local resource = blockType.resource('tfe_workspace_run', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        workspace_id: build.template(block.workspace_id),
      }),
      id: resource.field(self._.blocks, 'id'),
      workspace_id: resource.field(self._.blocks, 'workspace_id'),
    },
    workspace_run_task(name, block): {
      local resource = blockType.resource('tfe_workspace_run_task', name),
      _: resource._(block, {
        enforcement_level: build.template(block.enforcement_level),
        id: build.template(std.get(block, 'id', null)),
        stage: build.template(std.get(block, 'stage', null)),
        stages: build.template(std.get(block, 'stages', null)),
        task_id: build.template(block.task_id),
        workspace_id: build.template(block.workspace_id),
      }),
      enforcement_level: resource.field(self._.blocks, 'enforcement_level'),
      id: resource.field(self._.blocks, 'id'),
      stage: resource.field(self._.blocks, 'stage'),
      stages: resource.field(self._.blocks, 'stages'),
      task_id: resource.field(self._.blocks, 'task_id'),
      workspace_id: resource.field(self._.blocks, 'workspace_id'),
    },
    workspace_settings(name, block): {
      local resource = blockType.resource('tfe_workspace_settings', name),
      _: resource._(block, {
        agent_pool_id: build.template(std.get(block, 'agent_pool_id', null)),
        execution_mode: build.template(std.get(block, 'execution_mode', null)),
        global_remote_state: build.template(std.get(block, 'global_remote_state', null)),
        id: build.template(std.get(block, 'id', null)),
        overwrites: build.template(std.get(block, 'overwrites', null)),
        remote_state_consumer_ids: build.template(std.get(block, 'remote_state_consumer_ids', null)),
        workspace_id: build.template(block.workspace_id),
      }),
      agent_pool_id: resource.field(self._.blocks, 'agent_pool_id'),
      execution_mode: resource.field(self._.blocks, 'execution_mode'),
      global_remote_state: resource.field(self._.blocks, 'global_remote_state'),
      id: resource.field(self._.blocks, 'id'),
      overwrites: resource.field(self._.blocks, 'overwrites'),
      remote_state_consumer_ids: resource.field(self._.blocks, 'remote_state_consumer_ids'),
      workspace_id: resource.field(self._.blocks, 'workspace_id'),
    },
    workspace_variable_set(name, block): {
      local resource = blockType.resource('tfe_workspace_variable_set', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        variable_set_id: build.template(block.variable_set_id),
        workspace_id: build.template(block.workspace_id),
      }),
      id: resource.field(self._.blocks, 'id'),
      variable_set_id: resource.field(self._.blocks, 'variable_set_id'),
      workspace_id: resource.field(self._.blocks, 'workspace_id'),
    },
  },
  data: {
    local blockType = provider.blockType('data'),
    agent_pool(name, block): {
      local resource = blockType.resource('tfe_agent_pool', name),
      _: resource._(block, {
        allowed_workspace_ids: build.template(std.get(block, 'allowed_workspace_ids', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        organization: build.template(std.get(block, 'organization', null)),
        organization_scoped: build.template(std.get(block, 'organization_scoped', null)),
      }),
      allowed_workspace_ids: resource.field(self._.blocks, 'allowed_workspace_ids'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      organization: resource.field(self._.blocks, 'organization'),
      organization_scoped: resource.field(self._.blocks, 'organization_scoped'),
    },
    github_app_installation(name, block): {
      local resource = blockType.resource('tfe_github_app_installation', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        installation_id: build.template(std.get(block, 'installation_id', null)),
        name: build.template(std.get(block, 'name', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      installation_id: resource.field(self._.blocks, 'installation_id'),
      name: resource.field(self._.blocks, 'name'),
    },
    ip_ranges(name, block): {
      local resource = blockType.resource('tfe_ip_ranges', name),
      _: resource._(block, {
        api: build.template(std.get(block, 'api', null)),
        id: build.template(std.get(block, 'id', null)),
        notifications: build.template(std.get(block, 'notifications', null)),
        sentinel: build.template(std.get(block, 'sentinel', null)),
        vcs: build.template(std.get(block, 'vcs', null)),
      }),
      api: resource.field(self._.blocks, 'api'),
      id: resource.field(self._.blocks, 'id'),
      notifications: resource.field(self._.blocks, 'notifications'),
      sentinel: resource.field(self._.blocks, 'sentinel'),
      vcs: resource.field(self._.blocks, 'vcs'),
    },
    no_code_module(name, block): {
      local resource = blockType.resource('tfe_no_code_module', name),
      _: resource._(block, {
        enabled: build.template(std.get(block, 'enabled', null)),
        id: build.template(block.id),
        namespace: build.template(std.get(block, 'namespace', null)),
        organization: build.template(std.get(block, 'organization', null)),
        registry_module_id: build.template(std.get(block, 'registry_module_id', null)),
        version_pin: build.template(std.get(block, 'version_pin', null)),
      }),
      enabled: resource.field(self._.blocks, 'enabled'),
      id: resource.field(self._.blocks, 'id'),
      namespace: resource.field(self._.blocks, 'namespace'),
      organization: resource.field(self._.blocks, 'organization'),
      registry_module_id: resource.field(self._.blocks, 'registry_module_id'),
      version_pin: resource.field(self._.blocks, 'version_pin'),
    },
    oauth_client(name, block): {
      local resource = blockType.resource('tfe_oauth_client', name),
      _: resource._(block, {
        api_url: build.template(std.get(block, 'api_url', null)),
        callback_url: build.template(std.get(block, 'callback_url', null)),
        created_at: build.template(std.get(block, 'created_at', null)),
        http_url: build.template(std.get(block, 'http_url', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        oauth_client_id: build.template(std.get(block, 'oauth_client_id', null)),
        oauth_token_id: build.template(std.get(block, 'oauth_token_id', null)),
        organization: build.template(std.get(block, 'organization', null)),
        organization_scoped: build.template(std.get(block, 'organization_scoped', null)),
        project_ids: build.template(std.get(block, 'project_ids', null)),
        service_provider: build.template(std.get(block, 'service_provider', null)),
        service_provider_display_name: build.template(std.get(block, 'service_provider_display_name', null)),
      }),
      api_url: resource.field(self._.blocks, 'api_url'),
      callback_url: resource.field(self._.blocks, 'callback_url'),
      created_at: resource.field(self._.blocks, 'created_at'),
      http_url: resource.field(self._.blocks, 'http_url'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      oauth_client_id: resource.field(self._.blocks, 'oauth_client_id'),
      oauth_token_id: resource.field(self._.blocks, 'oauth_token_id'),
      organization: resource.field(self._.blocks, 'organization'),
      organization_scoped: resource.field(self._.blocks, 'organization_scoped'),
      project_ids: resource.field(self._.blocks, 'project_ids'),
      service_provider: resource.field(self._.blocks, 'service_provider'),
      service_provider_display_name: resource.field(self._.blocks, 'service_provider_display_name'),
    },
    organization(name, block): {
      local resource = blockType.resource('tfe_organization', name),
      _: resource._(block, {
        aggregated_commit_status_enabled: build.template(std.get(block, 'aggregated_commit_status_enabled', null)),
        assessments_enforced: build.template(std.get(block, 'assessments_enforced', null)),
        collaborator_auth_policy: build.template(std.get(block, 'collaborator_auth_policy', null)),
        cost_estimation_enabled: build.template(std.get(block, 'cost_estimation_enabled', null)),
        default_project_id: build.template(std.get(block, 'default_project_id', null)),
        email: build.template(std.get(block, 'email', null)),
        external_id: build.template(std.get(block, 'external_id', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        owners_team_saml_role_id: build.template(std.get(block, 'owners_team_saml_role_id', null)),
        send_passing_statuses_for_untriggered_speculative_plans: build.template(std.get(block, 'send_passing_statuses_for_untriggered_speculative_plans', null)),
        speculative_plan_management_enabled: build.template(std.get(block, 'speculative_plan_management_enabled', null)),
        two_factor_conformant: build.template(std.get(block, 'two_factor_conformant', null)),
      }),
      aggregated_commit_status_enabled: resource.field(self._.blocks, 'aggregated_commit_status_enabled'),
      assessments_enforced: resource.field(self._.blocks, 'assessments_enforced'),
      collaborator_auth_policy: resource.field(self._.blocks, 'collaborator_auth_policy'),
      cost_estimation_enabled: resource.field(self._.blocks, 'cost_estimation_enabled'),
      default_project_id: resource.field(self._.blocks, 'default_project_id'),
      email: resource.field(self._.blocks, 'email'),
      external_id: resource.field(self._.blocks, 'external_id'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      owners_team_saml_role_id: resource.field(self._.blocks, 'owners_team_saml_role_id'),
      send_passing_statuses_for_untriggered_speculative_plans: resource.field(self._.blocks, 'send_passing_statuses_for_untriggered_speculative_plans'),
      speculative_plan_management_enabled: resource.field(self._.blocks, 'speculative_plan_management_enabled'),
      two_factor_conformant: resource.field(self._.blocks, 'two_factor_conformant'),
    },
    organization_members(name, block): {
      local resource = blockType.resource('tfe_organization_members', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        members: build.template(std.get(block, 'members', null)),
        members_waiting: build.template(std.get(block, 'members_waiting', null)),
        organization: build.template(std.get(block, 'organization', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      members: resource.field(self._.blocks, 'members'),
      members_waiting: resource.field(self._.blocks, 'members_waiting'),
      organization: resource.field(self._.blocks, 'organization'),
    },
    organization_membership(name, block): {
      local resource = blockType.resource('tfe_organization_membership', name),
      _: resource._(block, {
        email: build.template(std.get(block, 'email', null)),
        id: build.template(std.get(block, 'id', null)),
        organization: build.template(std.get(block, 'organization', null)),
        organization_membership_id: build.template(std.get(block, 'organization_membership_id', null)),
        user_id: build.template(std.get(block, 'user_id', null)),
        username: build.template(std.get(block, 'username', null)),
      }),
      email: resource.field(self._.blocks, 'email'),
      id: resource.field(self._.blocks, 'id'),
      organization: resource.field(self._.blocks, 'organization'),
      organization_membership_id: resource.field(self._.blocks, 'organization_membership_id'),
      user_id: resource.field(self._.blocks, 'user_id'),
      username: resource.field(self._.blocks, 'username'),
    },
    organization_run_task(name, block): {
      local resource = blockType.resource('tfe_organization_run_task', name),
      _: resource._(block, {
        category: build.template(std.get(block, 'category', null)),
        description: build.template(std.get(block, 'description', null)),
        enabled: build.template(std.get(block, 'enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        organization: build.template(std.get(block, 'organization', null)),
        url: build.template(std.get(block, 'url', null)),
      }),
      category: resource.field(self._.blocks, 'category'),
      description: resource.field(self._.blocks, 'description'),
      enabled: resource.field(self._.blocks, 'enabled'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      organization: resource.field(self._.blocks, 'organization'),
      url: resource.field(self._.blocks, 'url'),
    },
    organization_run_task_global_settings(name, block): {
      local resource = blockType.resource('tfe_organization_run_task_global_settings', name),
      _: resource._(block, {
        enabled: build.template(std.get(block, 'enabled', null)),
        enforcement_level: build.template(std.get(block, 'enforcement_level', null)),
        id: build.template(std.get(block, 'id', null)),
        stages: build.template(std.get(block, 'stages', null)),
        task_id: build.template(block.task_id),
      }),
      enabled: resource.field(self._.blocks, 'enabled'),
      enforcement_level: resource.field(self._.blocks, 'enforcement_level'),
      id: resource.field(self._.blocks, 'id'),
      stages: resource.field(self._.blocks, 'stages'),
      task_id: resource.field(self._.blocks, 'task_id'),
    },
    organization_tags(name, block): {
      local resource = blockType.resource('tfe_organization_tags', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        organization: build.template(std.get(block, 'organization', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      organization: resource.field(self._.blocks, 'organization'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    organizations(name, block): {
      local resource = blockType.resource('tfe_organizations', name),
      _: resource._(block, {
        admin: build.template(std.get(block, 'admin', null)),
        id: build.template(std.get(block, 'id', null)),
        ids: build.template(std.get(block, 'ids', null)),
        names: build.template(std.get(block, 'names', null)),
      }),
      admin: resource.field(self._.blocks, 'admin'),
      id: resource.field(self._.blocks, 'id'),
      ids: resource.field(self._.blocks, 'ids'),
      names: resource.field(self._.blocks, 'names'),
    },
    outputs(name, block): {
      local resource = blockType.resource('tfe_outputs', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        nonsensitive_values: build.template(std.get(block, 'nonsensitive_values', null)),
        organization: build.template(std.get(block, 'organization', null)),
        values: build.template(std.get(block, 'values', null)),
        workspace: build.template(block.workspace),
      }),
      id: resource.field(self._.blocks, 'id'),
      nonsensitive_values: resource.field(self._.blocks, 'nonsensitive_values'),
      organization: resource.field(self._.blocks, 'organization'),
      values: resource.field(self._.blocks, 'values'),
      workspace: resource.field(self._.blocks, 'workspace'),
    },
    policy_set(name, block): {
      local resource = blockType.resource('tfe_policy_set', name),
      _: resource._(block, {
        agent_enabled: build.template(std.get(block, 'agent_enabled', null)),
        description: build.template(std.get(block, 'description', null)),
        excluded_workspace_ids: build.template(std.get(block, 'excluded_workspace_ids', null)),
        global: build.template(std.get(block, 'global', null)),
        id: build.template(std.get(block, 'id', null)),
        kind: build.template(std.get(block, 'kind', null)),
        name: build.template(block.name),
        organization: build.template(std.get(block, 'organization', null)),
        overridable: build.template(std.get(block, 'overridable', null)),
        policies_path: build.template(std.get(block, 'policies_path', null)),
        policy_ids: build.template(std.get(block, 'policy_ids', null)),
        policy_tool_version: build.template(std.get(block, 'policy_tool_version', null)),
        project_ids: build.template(std.get(block, 'project_ids', null)),
        vcs_repo: build.template(std.get(block, 'vcs_repo', null)),
        workspace_ids: build.template(std.get(block, 'workspace_ids', null)),
      }),
      agent_enabled: resource.field(self._.blocks, 'agent_enabled'),
      description: resource.field(self._.blocks, 'description'),
      excluded_workspace_ids: resource.field(self._.blocks, 'excluded_workspace_ids'),
      global: resource.field(self._.blocks, 'global'),
      id: resource.field(self._.blocks, 'id'),
      kind: resource.field(self._.blocks, 'kind'),
      name: resource.field(self._.blocks, 'name'),
      organization: resource.field(self._.blocks, 'organization'),
      overridable: resource.field(self._.blocks, 'overridable'),
      policies_path: resource.field(self._.blocks, 'policies_path'),
      policy_ids: resource.field(self._.blocks, 'policy_ids'),
      policy_tool_version: resource.field(self._.blocks, 'policy_tool_version'),
      project_ids: resource.field(self._.blocks, 'project_ids'),
      vcs_repo: resource.field(self._.blocks, 'vcs_repo'),
      workspace_ids: resource.field(self._.blocks, 'workspace_ids'),
    },
    project(name, block): {
      local resource = blockType.resource('tfe_project', name),
      _: resource._(block, {
        auto_destroy_activity_duration: build.template(std.get(block, 'auto_destroy_activity_duration', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        organization: build.template(std.get(block, 'organization', null)),
        workspace_ids: build.template(std.get(block, 'workspace_ids', null)),
        workspace_names: build.template(std.get(block, 'workspace_names', null)),
      }),
      auto_destroy_activity_duration: resource.field(self._.blocks, 'auto_destroy_activity_duration'),
      description: resource.field(self._.blocks, 'description'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      organization: resource.field(self._.blocks, 'organization'),
      workspace_ids: resource.field(self._.blocks, 'workspace_ids'),
      workspace_names: resource.field(self._.blocks, 'workspace_names'),
    },
    projects(name, block): {
      local resource = blockType.resource('tfe_projects', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        organization: build.template(std.get(block, 'organization', null)),
        projects: build.template(std.get(block, 'projects', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      organization: resource.field(self._.blocks, 'organization'),
      projects: resource.field(self._.blocks, 'projects'),
    },
    registry_gpg_key(name, block): {
      local resource = blockType.resource('tfe_registry_gpg_key', name),
      _: resource._(block, {
        ascii_armor: build.template(std.get(block, 'ascii_armor', null)),
        created_at: build.template(std.get(block, 'created_at', null)),
        id: build.template(block.id),
        organization: build.template(std.get(block, 'organization', null)),
        updated_at: build.template(std.get(block, 'updated_at', null)),
      }),
      ascii_armor: resource.field(self._.blocks, 'ascii_armor'),
      created_at: resource.field(self._.blocks, 'created_at'),
      id: resource.field(self._.blocks, 'id'),
      organization: resource.field(self._.blocks, 'organization'),
      updated_at: resource.field(self._.blocks, 'updated_at'),
    },
    registry_gpg_keys(name, block): {
      local resource = blockType.resource('tfe_registry_gpg_keys', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        keys: build.template(std.get(block, 'keys', null)),
        organization: build.template(std.get(block, 'organization', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      keys: resource.field(self._.blocks, 'keys'),
      organization: resource.field(self._.blocks, 'organization'),
    },
    registry_provider(name, block): {
      local resource = blockType.resource('tfe_registry_provider', name),
      _: resource._(block, {
        created_at: build.template(std.get(block, 'created_at', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        namespace: build.template(std.get(block, 'namespace', null)),
        organization: build.template(std.get(block, 'organization', null)),
        registry_name: build.template(std.get(block, 'registry_name', null)),
        updated_at: build.template(std.get(block, 'updated_at', null)),
      }),
      created_at: resource.field(self._.blocks, 'created_at'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      namespace: resource.field(self._.blocks, 'namespace'),
      organization: resource.field(self._.blocks, 'organization'),
      registry_name: resource.field(self._.blocks, 'registry_name'),
      updated_at: resource.field(self._.blocks, 'updated_at'),
    },
    registry_providers(name, block): {
      local resource = blockType.resource('tfe_registry_providers', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        organization: build.template(std.get(block, 'organization', null)),
        providers: build.template(std.get(block, 'providers', null)),
        registry_name: build.template(std.get(block, 'registry_name', null)),
        search: build.template(std.get(block, 'search', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      organization: resource.field(self._.blocks, 'organization'),
      providers: resource.field(self._.blocks, 'providers'),
      registry_name: resource.field(self._.blocks, 'registry_name'),
      search: resource.field(self._.blocks, 'search'),
    },
    saml_settings(name, block): {
      local resource = blockType.resource('tfe_saml_settings', name),
      _: resource._(block, {
        acs_consumer_url: build.template(std.get(block, 'acs_consumer_url', null)),
        attr_groups: build.template(std.get(block, 'attr_groups', null)),
        attr_site_admin: build.template(std.get(block, 'attr_site_admin', null)),
        attr_username: build.template(std.get(block, 'attr_username', null)),
        authn_requests_signed: build.template(std.get(block, 'authn_requests_signed', null)),
        certificate: build.template(std.get(block, 'certificate', null)),
        debug: build.template(std.get(block, 'debug', null)),
        enabled: build.template(std.get(block, 'enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        idp_cert: build.template(std.get(block, 'idp_cert', null)),
        metadata_url: build.template(std.get(block, 'metadata_url', null)),
        old_idp_cert: build.template(std.get(block, 'old_idp_cert', null)),
        private_key: build.template(std.get(block, 'private_key', null)),
        signature_digest_method: build.template(std.get(block, 'signature_digest_method', null)),
        signature_signing_method: build.template(std.get(block, 'signature_signing_method', null)),
        site_admin_role: build.template(std.get(block, 'site_admin_role', null)),
        slo_endpoint_url: build.template(std.get(block, 'slo_endpoint_url', null)),
        sso_api_token_session_timeout: build.template(std.get(block, 'sso_api_token_session_timeout', null)),
        sso_endpoint_url: build.template(std.get(block, 'sso_endpoint_url', null)),
        team_management_enabled: build.template(std.get(block, 'team_management_enabled', null)),
        want_assertions_signed: build.template(std.get(block, 'want_assertions_signed', null)),
      }),
      acs_consumer_url: resource.field(self._.blocks, 'acs_consumer_url'),
      attr_groups: resource.field(self._.blocks, 'attr_groups'),
      attr_site_admin: resource.field(self._.blocks, 'attr_site_admin'),
      attr_username: resource.field(self._.blocks, 'attr_username'),
      authn_requests_signed: resource.field(self._.blocks, 'authn_requests_signed'),
      certificate: resource.field(self._.blocks, 'certificate'),
      debug: resource.field(self._.blocks, 'debug'),
      enabled: resource.field(self._.blocks, 'enabled'),
      id: resource.field(self._.blocks, 'id'),
      idp_cert: resource.field(self._.blocks, 'idp_cert'),
      metadata_url: resource.field(self._.blocks, 'metadata_url'),
      old_idp_cert: resource.field(self._.blocks, 'old_idp_cert'),
      private_key: resource.field(self._.blocks, 'private_key'),
      signature_digest_method: resource.field(self._.blocks, 'signature_digest_method'),
      signature_signing_method: resource.field(self._.blocks, 'signature_signing_method'),
      site_admin_role: resource.field(self._.blocks, 'site_admin_role'),
      slo_endpoint_url: resource.field(self._.blocks, 'slo_endpoint_url'),
      sso_api_token_session_timeout: resource.field(self._.blocks, 'sso_api_token_session_timeout'),
      sso_endpoint_url: resource.field(self._.blocks, 'sso_endpoint_url'),
      team_management_enabled: resource.field(self._.blocks, 'team_management_enabled'),
      want_assertions_signed: resource.field(self._.blocks, 'want_assertions_signed'),
    },
    slug(name, block): {
      local resource = blockType.resource('tfe_slug', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        source_path: build.template(block.source_path),
      }),
      id: resource.field(self._.blocks, 'id'),
      source_path: resource.field(self._.blocks, 'source_path'),
    },
    ssh_key(name, block): {
      local resource = blockType.resource('tfe_ssh_key', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        organization: build.template(std.get(block, 'organization', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      organization: resource.field(self._.blocks, 'organization'),
    },
    team(name, block): {
      local resource = blockType.resource('tfe_team', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        organization: build.template(std.get(block, 'organization', null)),
        sso_team_id: build.template(std.get(block, 'sso_team_id', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      organization: resource.field(self._.blocks, 'organization'),
      sso_team_id: resource.field(self._.blocks, 'sso_team_id'),
    },
    team_access(name, block): {
      local resource = blockType.resource('tfe_team_access', name),
      _: resource._(block, {
        access: build.template(std.get(block, 'access', null)),
        id: build.template(std.get(block, 'id', null)),
        permissions: build.template(std.get(block, 'permissions', null)),
        team_id: build.template(block.team_id),
        workspace_id: build.template(block.workspace_id),
      }),
      access: resource.field(self._.blocks, 'access'),
      id: resource.field(self._.blocks, 'id'),
      permissions: resource.field(self._.blocks, 'permissions'),
      team_id: resource.field(self._.blocks, 'team_id'),
      workspace_id: resource.field(self._.blocks, 'workspace_id'),
    },
    team_project_access(name, block): {
      local resource = blockType.resource('tfe_team_project_access', name),
      _: resource._(block, {
        access: build.template(std.get(block, 'access', null)),
        id: build.template(std.get(block, 'id', null)),
        project_access: build.template(std.get(block, 'project_access', null)),
        project_id: build.template(block.project_id),
        team_id: build.template(block.team_id),
        workspace_access: build.template(std.get(block, 'workspace_access', null)),
      }),
      access: resource.field(self._.blocks, 'access'),
      id: resource.field(self._.blocks, 'id'),
      project_access: resource.field(self._.blocks, 'project_access'),
      project_id: resource.field(self._.blocks, 'project_id'),
      team_id: resource.field(self._.blocks, 'team_id'),
      workspace_access: resource.field(self._.blocks, 'workspace_access'),
    },
    teams(name, block): {
      local resource = blockType.resource('tfe_teams', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        ids: build.template(std.get(block, 'ids', null)),
        names: build.template(std.get(block, 'names', null)),
        organization: build.template(std.get(block, 'organization', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      ids: resource.field(self._.blocks, 'ids'),
      names: resource.field(self._.blocks, 'names'),
      organization: resource.field(self._.blocks, 'organization'),
    },
    variable_set(name, block): {
      local resource = blockType.resource('tfe_variable_set', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        global: build.template(std.get(block, 'global', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        organization: build.template(std.get(block, 'organization', null)),
        parent_project_id: build.template(std.get(block, 'parent_project_id', null)),
        priority: build.template(std.get(block, 'priority', null)),
        project_ids: build.template(std.get(block, 'project_ids', null)),
        variable_ids: build.template(std.get(block, 'variable_ids', null)),
        workspace_ids: build.template(std.get(block, 'workspace_ids', null)),
      }),
      description: resource.field(self._.blocks, 'description'),
      global: resource.field(self._.blocks, 'global'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      organization: resource.field(self._.blocks, 'organization'),
      parent_project_id: resource.field(self._.blocks, 'parent_project_id'),
      priority: resource.field(self._.blocks, 'priority'),
      project_ids: resource.field(self._.blocks, 'project_ids'),
      variable_ids: resource.field(self._.blocks, 'variable_ids'),
      workspace_ids: resource.field(self._.blocks, 'workspace_ids'),
    },
    variables(name, block): {
      local resource = blockType.resource('tfe_variables', name),
      _: resource._(block, {
        env: build.template(std.get(block, 'env', null)),
        id: build.template(std.get(block, 'id', null)),
        terraform: build.template(std.get(block, 'terraform', null)),
        variable_set_id: build.template(std.get(block, 'variable_set_id', null)),
        variables: build.template(std.get(block, 'variables', null)),
        workspace_id: build.template(std.get(block, 'workspace_id', null)),
      }),
      env: resource.field(self._.blocks, 'env'),
      id: resource.field(self._.blocks, 'id'),
      terraform: resource.field(self._.blocks, 'terraform'),
      variable_set_id: resource.field(self._.blocks, 'variable_set_id'),
      variables: resource.field(self._.blocks, 'variables'),
      workspace_id: resource.field(self._.blocks, 'workspace_id'),
    },
    workspace(name, block): {
      local resource = blockType.resource('tfe_workspace', name),
      _: resource._(block, {
        allow_destroy_plan: build.template(std.get(block, 'allow_destroy_plan', null)),
        assessments_enabled: build.template(std.get(block, 'assessments_enabled', null)),
        auto_apply: build.template(std.get(block, 'auto_apply', null)),
        auto_apply_run_trigger: build.template(std.get(block, 'auto_apply_run_trigger', null)),
        auto_destroy_activity_duration: build.template(std.get(block, 'auto_destroy_activity_duration', null)),
        auto_destroy_at: build.template(std.get(block, 'auto_destroy_at', null)),
        description: build.template(std.get(block, 'description', null)),
        execution_mode: build.template(std.get(block, 'execution_mode', null)),
        file_triggers_enabled: build.template(std.get(block, 'file_triggers_enabled', null)),
        global_remote_state: build.template(std.get(block, 'global_remote_state', null)),
        html_url: build.template(std.get(block, 'html_url', null)),
        id: build.template(std.get(block, 'id', null)),
        inherits_project_auto_destroy: build.template(std.get(block, 'inherits_project_auto_destroy', null)),
        name: build.template(block.name),
        operations: build.template(std.get(block, 'operations', null)),
        organization: build.template(std.get(block, 'organization', null)),
        policy_check_failures: build.template(std.get(block, 'policy_check_failures', null)),
        project_id: build.template(std.get(block, 'project_id', null)),
        queue_all_runs: build.template(std.get(block, 'queue_all_runs', null)),
        remote_state_consumer_ids: build.template(std.get(block, 'remote_state_consumer_ids', null)),
        resource_count: build.template(std.get(block, 'resource_count', null)),
        run_failures: build.template(std.get(block, 'run_failures', null)),
        runs_count: build.template(std.get(block, 'runs_count', null)),
        source_name: build.template(std.get(block, 'source_name', null)),
        source_url: build.template(std.get(block, 'source_url', null)),
        speculative_enabled: build.template(std.get(block, 'speculative_enabled', null)),
        ssh_key_id: build.template(std.get(block, 'ssh_key_id', null)),
        structured_run_output_enabled: build.template(std.get(block, 'structured_run_output_enabled', null)),
        tag_names: build.template(std.get(block, 'tag_names', null)),
        terraform_version: build.template(std.get(block, 'terraform_version', null)),
        trigger_patterns: build.template(std.get(block, 'trigger_patterns', null)),
        trigger_prefixes: build.template(std.get(block, 'trigger_prefixes', null)),
        vcs_repo: build.template(std.get(block, 'vcs_repo', null)),
        working_directory: build.template(std.get(block, 'working_directory', null)),
      }),
      allow_destroy_plan: resource.field(self._.blocks, 'allow_destroy_plan'),
      assessments_enabled: resource.field(self._.blocks, 'assessments_enabled'),
      auto_apply: resource.field(self._.blocks, 'auto_apply'),
      auto_apply_run_trigger: resource.field(self._.blocks, 'auto_apply_run_trigger'),
      auto_destroy_activity_duration: resource.field(self._.blocks, 'auto_destroy_activity_duration'),
      auto_destroy_at: resource.field(self._.blocks, 'auto_destroy_at'),
      description: resource.field(self._.blocks, 'description'),
      execution_mode: resource.field(self._.blocks, 'execution_mode'),
      file_triggers_enabled: resource.field(self._.blocks, 'file_triggers_enabled'),
      global_remote_state: resource.field(self._.blocks, 'global_remote_state'),
      html_url: resource.field(self._.blocks, 'html_url'),
      id: resource.field(self._.blocks, 'id'),
      inherits_project_auto_destroy: resource.field(self._.blocks, 'inherits_project_auto_destroy'),
      name: resource.field(self._.blocks, 'name'),
      operations: resource.field(self._.blocks, 'operations'),
      organization: resource.field(self._.blocks, 'organization'),
      policy_check_failures: resource.field(self._.blocks, 'policy_check_failures'),
      project_id: resource.field(self._.blocks, 'project_id'),
      queue_all_runs: resource.field(self._.blocks, 'queue_all_runs'),
      remote_state_consumer_ids: resource.field(self._.blocks, 'remote_state_consumer_ids'),
      resource_count: resource.field(self._.blocks, 'resource_count'),
      run_failures: resource.field(self._.blocks, 'run_failures'),
      runs_count: resource.field(self._.blocks, 'runs_count'),
      source_name: resource.field(self._.blocks, 'source_name'),
      source_url: resource.field(self._.blocks, 'source_url'),
      speculative_enabled: resource.field(self._.blocks, 'speculative_enabled'),
      ssh_key_id: resource.field(self._.blocks, 'ssh_key_id'),
      structured_run_output_enabled: resource.field(self._.blocks, 'structured_run_output_enabled'),
      tag_names: resource.field(self._.blocks, 'tag_names'),
      terraform_version: resource.field(self._.blocks, 'terraform_version'),
      trigger_patterns: resource.field(self._.blocks, 'trigger_patterns'),
      trigger_prefixes: resource.field(self._.blocks, 'trigger_prefixes'),
      vcs_repo: resource.field(self._.blocks, 'vcs_repo'),
      working_directory: resource.field(self._.blocks, 'working_directory'),
    },
    workspace_ids(name, block): {
      local resource = blockType.resource('tfe_workspace_ids', name),
      _: resource._(block, {
        exclude_tags: build.template(std.get(block, 'exclude_tags', null)),
        full_names: build.template(std.get(block, 'full_names', null)),
        id: build.template(std.get(block, 'id', null)),
        ids: build.template(std.get(block, 'ids', null)),
        names: build.template(std.get(block, 'names', null)),
        organization: build.template(std.get(block, 'organization', null)),
        tag_names: build.template(std.get(block, 'tag_names', null)),
      }),
      exclude_tags: resource.field(self._.blocks, 'exclude_tags'),
      full_names: resource.field(self._.blocks, 'full_names'),
      id: resource.field(self._.blocks, 'id'),
      ids: resource.field(self._.blocks, 'ids'),
      names: resource.field(self._.blocks, 'names'),
      organization: resource.field(self._.blocks, 'organization'),
      tag_names: resource.field(self._.blocks, 'tag_names'),
    },
    workspace_run_task(name, block): {
      local resource = blockType.resource('tfe_workspace_run_task', name),
      _: resource._(block, {
        enforcement_level: build.template(std.get(block, 'enforcement_level', null)),
        id: build.template(std.get(block, 'id', null)),
        stage: build.template(std.get(block, 'stage', null)),
        stages: build.template(std.get(block, 'stages', null)),
        task_id: build.template(block.task_id),
        workspace_id: build.template(block.workspace_id),
      }),
      enforcement_level: resource.field(self._.blocks, 'enforcement_level'),
      id: resource.field(self._.blocks, 'id'),
      stage: resource.field(self._.blocks, 'stage'),
      stages: resource.field(self._.blocks, 'stages'),
      task_id: resource.field(self._.blocks, 'task_id'),
      workspace_id: resource.field(self._.blocks, 'workspace_id'),
    },
  },
};

local providerWithConfiguration = provider(null, null) + {
  withConfiguration(alias, block): provider(block, {
    alias: alias,
    hostname: build.template(std.get(block, 'hostname', null)),
    organization: build.template(std.get(block, 'organization', null)),
    ssl_skip_verify: build.template(std.get(block, 'ssl_skip_verify', null)),
    token: build.template(std.get(block, 'token', null)),
  }),
};

providerWithConfiguration
