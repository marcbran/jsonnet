local build = {
  expression(val):
    if std.type(val) == 'object' then
      if std.objectHas(val, '_')
      then
        if std.objectHas(val._, 'ref')
        then val._.ref
        else '"%s"' % [val._.str]
      else '{%s}' % [std.join(',', std.map(function(key) '%s:%s' % [self.expression(key), self.expression(val[key])], std.objectFields(val)))]
    else if std.type(val) == 'array' then '[%s]' % [std.join(',', std.map(function(element) self.expression(element), val))]
    else if std.type(val) == 'string' then '"%s"' % [val]
    else '"%s"' % [val],
  template(val):
    if std.type(val) == 'object' then
      if std.objectHas(val, '_')
      then
        if std.objectHas(val._, 'ref')
        then std.strReplace(self.string(val), '\n', '\\n')
        else val._.str
      else std.mapWithKey(function(key, value) self.template(value), val)
    else if std.type(val) == 'array' then std.map(function(element) self.template(element), val)
    else if std.type(val) == 'string' then std.strReplace(self.string(val), '\n', '\\n')
    else val,
  string(val):
    if std.type(val) == 'object' then
      if std.objectHas(val, '_')
      then
        if std.objectHas(val._, 'ref')
        then '${%s}' % [val._.ref]
        else val._.str
      else '${%s}' % [self.expression(val)]
    else if std.type(val) == 'array' then '${%s}' % [self.expression(val)]
    else if std.type(val) == 'string' then val
    else val,
  blocks(val):
    if std.type(val) == 'object'
    then
      if std.objectHas(val, '_')
      then
        if std.objectHas(val._, 'blocks')
        then val._.blocks
        else
          if std.objectHas(val._, 'block')
          then { [val._.ref]: val._.block }
          else {}
      else std.foldl(function(acc, val) std.mergePatch(acc, val), std.map(function(key) build.blocks(val[key]), std.objectFields(val)), {})
    else if std.type(val) == 'array'
    then std.foldl(function(acc, val) std.mergePatch(acc, val), std.map(function(element) build.blocks(element), val), {})
    else {},
};

local providerTemplate(provider, requirements, configuration) = {
  local providerRequirements = { ['terraform.required_providers.%s' % [provider]]: requirements },
  local providerAlias = if configuration == null then null else configuration.alias,
  local providerRef = if configuration == null then null else '%s.%s' % [provider, providerAlias],
  local providerConfiguration = if configuration == null then {} else { [providerRef]: { provider: { [provider]: configuration } } },
  local providerRefBlock = if configuration == null then {} else { provider: providerRef },
  blockType(blockType): {
    local blockTypePath = if blockType == 'resource' then [] else ['data'],
    resource(type, name): {
      local resourceType = std.substr(type, std.length(provider) + 1, std.length(type)),
      local resourcePath = blockTypePath + [type, name],
      _(rawBlock, block): {
        local _ = self,
        local metaBlock = {
          depends_on: build.template(std.get(rawBlock, 'depends_on', null)),
          count: build.template(std.get(rawBlock, 'count', null)),
          for_each: build.template(std.get(rawBlock, 'for_each', null)),
        },
        type: if std.objectHas(rawBlock, 'for_each') then 'map' else if std.objectHas(rawBlock, 'count') then 'list' else 'object',
        provider: provider,
        providerAlias: providerAlias,
        resourceType: resourceType,
        name: name,
        ref: std.join('.', resourcePath),
        block: {
          [blockType]: {
            [type]: {
              [name]: std.prune(metaBlock + block + providerRefBlock),
            },
          },
        },
        blocks: build.blocks(rawBlock) + providerRequirements + providerConfiguration + {
          [_.ref]: _.block,
        },
      },
      field(blocks, fieldName): {
        local fieldPath = resourcePath + [fieldName],
        _: {
          ref: std.join('.', fieldPath),
          blocks: blocks,
        },
      },
    },
  },
  func(name, parameters=[]): {
    local parameterString = std.join(', ', [build.expression(parameter) for parameter in parameters]),
    _: {
      ref: 'provider::%s::%s(%s)' % [provider, name, parameterString],
      blocks: build.blocks(parameters) + providerRequirements + providerConfiguration,
    },
  },
};

local provider(configuration) = {
  local requirements = {
    source: 'registry.terraform.io/hashicorp/azurerm',
    version: '4.23.0',
  },
  local provider = providerTemplate('azurerm', requirements, configuration),
  resource: {
    local blockType = provider.blockType('resource'),
    aadb2c_directory(name, block): {
      local resource = blockType.resource('azurerm_aadb2c_directory', name),
      _: resource._(block, {
        billing_type: build.template(std.get(block, 'billing_type', null)),
        country_code: build.template(std.get(block, 'country_code', null)),
        data_residency_location: build.template(block.data_residency_location),
        display_name: build.template(std.get(block, 'display_name', null)),
        domain_name: build.template(block.domain_name),
        effective_start_date: build.template(std.get(block, 'effective_start_date', null)),
        id: build.template(std.get(block, 'id', null)),
        resource_group_name: build.template(block.resource_group_name),
        sku_name: build.template(block.sku_name),
        tags: build.template(std.get(block, 'tags', null)),
        tenant_id: build.template(std.get(block, 'tenant_id', null)),
      }),
      billing_type: resource.field(self._.blocks, 'billing_type'),
      country_code: resource.field(self._.blocks, 'country_code'),
      data_residency_location: resource.field(self._.blocks, 'data_residency_location'),
      display_name: resource.field(self._.blocks, 'display_name'),
      domain_name: resource.field(self._.blocks, 'domain_name'),
      effective_start_date: resource.field(self._.blocks, 'effective_start_date'),
      id: resource.field(self._.blocks, 'id'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      sku_name: resource.field(self._.blocks, 'sku_name'),
      tags: resource.field(self._.blocks, 'tags'),
      tenant_id: resource.field(self._.blocks, 'tenant_id'),
    },
    active_directory_domain_service(name, block): {
      local resource = blockType.resource('azurerm_active_directory_domain_service', name),
      _: resource._(block, {
        deployment_id: build.template(std.get(block, 'deployment_id', null)),
        domain_configuration_type: build.template(std.get(block, 'domain_configuration_type', null)),
        domain_name: build.template(block.domain_name),
        filtered_sync_enabled: build.template(std.get(block, 'filtered_sync_enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        resource_id: build.template(std.get(block, 'resource_id', null)),
        sku: build.template(block.sku),
        sync_owner: build.template(std.get(block, 'sync_owner', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tenant_id: build.template(std.get(block, 'tenant_id', null)),
        version: build.template(std.get(block, 'version', null)),
      }),
      deployment_id: resource.field(self._.blocks, 'deployment_id'),
      domain_configuration_type: resource.field(self._.blocks, 'domain_configuration_type'),
      domain_name: resource.field(self._.blocks, 'domain_name'),
      filtered_sync_enabled: resource.field(self._.blocks, 'filtered_sync_enabled'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      resource_id: resource.field(self._.blocks, 'resource_id'),
      sku: resource.field(self._.blocks, 'sku'),
      sync_owner: resource.field(self._.blocks, 'sync_owner'),
      tags: resource.field(self._.blocks, 'tags'),
      tenant_id: resource.field(self._.blocks, 'tenant_id'),
      version: resource.field(self._.blocks, 'version'),
    },
    active_directory_domain_service_replica_set(name, block): {
      local resource = blockType.resource('azurerm_active_directory_domain_service_replica_set', name),
      _: resource._(block, {
        domain_controller_ip_addresses: build.template(std.get(block, 'domain_controller_ip_addresses', null)),
        domain_service_id: build.template(block.domain_service_id),
        external_access_ip_address: build.template(std.get(block, 'external_access_ip_address', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        service_status: build.template(std.get(block, 'service_status', null)),
        subnet_id: build.template(block.subnet_id),
      }),
      domain_controller_ip_addresses: resource.field(self._.blocks, 'domain_controller_ip_addresses'),
      domain_service_id: resource.field(self._.blocks, 'domain_service_id'),
      external_access_ip_address: resource.field(self._.blocks, 'external_access_ip_address'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      service_status: resource.field(self._.blocks, 'service_status'),
      subnet_id: resource.field(self._.blocks, 'subnet_id'),
    },
    active_directory_domain_service_trust(name, block): {
      local resource = blockType.resource('azurerm_active_directory_domain_service_trust', name),
      _: resource._(block, {
        domain_service_id: build.template(block.domain_service_id),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        password: build.template(block.password),
        trusted_domain_dns_ips: build.template(block.trusted_domain_dns_ips),
        trusted_domain_fqdn: build.template(block.trusted_domain_fqdn),
      }),
      domain_service_id: resource.field(self._.blocks, 'domain_service_id'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      password: resource.field(self._.blocks, 'password'),
      trusted_domain_dns_ips: resource.field(self._.blocks, 'trusted_domain_dns_ips'),
      trusted_domain_fqdn: resource.field(self._.blocks, 'trusted_domain_fqdn'),
    },
    advanced_threat_protection(name, block): {
      local resource = blockType.resource('azurerm_advanced_threat_protection', name),
      _: resource._(block, {
        enabled: build.template(block.enabled),
        id: build.template(std.get(block, 'id', null)),
        target_resource_id: build.template(block.target_resource_id),
      }),
      enabled: resource.field(self._.blocks, 'enabled'),
      id: resource.field(self._.blocks, 'id'),
      target_resource_id: resource.field(self._.blocks, 'target_resource_id'),
    },
    advisor_suppression(name, block): {
      local resource = blockType.resource('azurerm_advisor_suppression', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        recommendation_id: build.template(block.recommendation_id),
        resource_id: build.template(block.resource_id),
        suppression_id: build.template(std.get(block, 'suppression_id', null)),
        ttl: build.template(std.get(block, 'ttl', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      recommendation_id: resource.field(self._.blocks, 'recommendation_id'),
      resource_id: resource.field(self._.blocks, 'resource_id'),
      suppression_id: resource.field(self._.blocks, 'suppression_id'),
      ttl: resource.field(self._.blocks, 'ttl'),
    },
    ai_foundry(name, block): {
      local resource = blockType.resource('azurerm_ai_foundry', name),
      _: resource._(block, {
        application_insights_id: build.template(std.get(block, 'application_insights_id', null)),
        container_registry_id: build.template(std.get(block, 'container_registry_id', null)),
        description: build.template(std.get(block, 'description', null)),
        discovery_url: build.template(std.get(block, 'discovery_url', null)),
        friendly_name: build.template(std.get(block, 'friendly_name', null)),
        high_business_impact_enabled: build.template(std.get(block, 'high_business_impact_enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        key_vault_id: build.template(block.key_vault_id),
        location: build.template(block.location),
        name: build.template(block.name),
        primary_user_assigned_identity: build.template(std.get(block, 'primary_user_assigned_identity', null)),
        public_network_access: build.template(std.get(block, 'public_network_access', null)),
        resource_group_name: build.template(block.resource_group_name),
        storage_account_id: build.template(block.storage_account_id),
        tags: build.template(std.get(block, 'tags', null)),
        workspace_id: build.template(std.get(block, 'workspace_id', null)),
      }),
      application_insights_id: resource.field(self._.blocks, 'application_insights_id'),
      container_registry_id: resource.field(self._.blocks, 'container_registry_id'),
      description: resource.field(self._.blocks, 'description'),
      discovery_url: resource.field(self._.blocks, 'discovery_url'),
      friendly_name: resource.field(self._.blocks, 'friendly_name'),
      high_business_impact_enabled: resource.field(self._.blocks, 'high_business_impact_enabled'),
      id: resource.field(self._.blocks, 'id'),
      key_vault_id: resource.field(self._.blocks, 'key_vault_id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      primary_user_assigned_identity: resource.field(self._.blocks, 'primary_user_assigned_identity'),
      public_network_access: resource.field(self._.blocks, 'public_network_access'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      storage_account_id: resource.field(self._.blocks, 'storage_account_id'),
      tags: resource.field(self._.blocks, 'tags'),
      workspace_id: resource.field(self._.blocks, 'workspace_id'),
    },
    ai_foundry_project(name, block): {
      local resource = blockType.resource('azurerm_ai_foundry_project', name),
      _: resource._(block, {
        ai_services_hub_id: build.template(block.ai_services_hub_id),
        description: build.template(std.get(block, 'description', null)),
        friendly_name: build.template(std.get(block, 'friendly_name', null)),
        high_business_impact_enabled: build.template(std.get(block, 'high_business_impact_enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        project_id: build.template(std.get(block, 'project_id', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      ai_services_hub_id: resource.field(self._.blocks, 'ai_services_hub_id'),
      description: resource.field(self._.blocks, 'description'),
      friendly_name: resource.field(self._.blocks, 'friendly_name'),
      high_business_impact_enabled: resource.field(self._.blocks, 'high_business_impact_enabled'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      project_id: resource.field(self._.blocks, 'project_id'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    ai_services(name, block): {
      local resource = blockType.resource('azurerm_ai_services', name),
      _: resource._(block, {
        custom_subdomain_name: build.template(std.get(block, 'custom_subdomain_name', null)),
        endpoint: build.template(std.get(block, 'endpoint', null)),
        fqdns: build.template(std.get(block, 'fqdns', null)),
        id: build.template(std.get(block, 'id', null)),
        local_authentication_enabled: build.template(std.get(block, 'local_authentication_enabled', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        outbound_network_access_restricted: build.template(std.get(block, 'outbound_network_access_restricted', null)),
        primary_access_key: build.template(std.get(block, 'primary_access_key', null)),
        public_network_access: build.template(std.get(block, 'public_network_access', null)),
        resource_group_name: build.template(block.resource_group_name),
        secondary_access_key: build.template(std.get(block, 'secondary_access_key', null)),
        sku_name: build.template(block.sku_name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      custom_subdomain_name: resource.field(self._.blocks, 'custom_subdomain_name'),
      endpoint: resource.field(self._.blocks, 'endpoint'),
      fqdns: resource.field(self._.blocks, 'fqdns'),
      id: resource.field(self._.blocks, 'id'),
      local_authentication_enabled: resource.field(self._.blocks, 'local_authentication_enabled'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      outbound_network_access_restricted: resource.field(self._.blocks, 'outbound_network_access_restricted'),
      primary_access_key: resource.field(self._.blocks, 'primary_access_key'),
      public_network_access: resource.field(self._.blocks, 'public_network_access'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      secondary_access_key: resource.field(self._.blocks, 'secondary_access_key'),
      sku_name: resource.field(self._.blocks, 'sku_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    analysis_services_server(name, block): {
      local resource = blockType.resource('azurerm_analysis_services_server', name),
      _: resource._(block, {
        admin_users: build.template(std.get(block, 'admin_users', null)),
        backup_blob_container_uri: build.template(std.get(block, 'backup_blob_container_uri', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        power_bi_service_enabled: build.template(std.get(block, 'power_bi_service_enabled', null)),
        querypool_connection_mode: build.template(std.get(block, 'querypool_connection_mode', null)),
        resource_group_name: build.template(block.resource_group_name),
        server_full_name: build.template(std.get(block, 'server_full_name', null)),
        sku: build.template(block.sku),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      admin_users: resource.field(self._.blocks, 'admin_users'),
      backup_blob_container_uri: resource.field(self._.blocks, 'backup_blob_container_uri'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      power_bi_service_enabled: resource.field(self._.blocks, 'power_bi_service_enabled'),
      querypool_connection_mode: resource.field(self._.blocks, 'querypool_connection_mode'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      server_full_name: resource.field(self._.blocks, 'server_full_name'),
      sku: resource.field(self._.blocks, 'sku'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    api_connection(name, block): {
      local resource = blockType.resource('azurerm_api_connection', name),
      _: resource._(block, {
        display_name: build.template(std.get(block, 'display_name', null)),
        id: build.template(std.get(block, 'id', null)),
        managed_api_id: build.template(block.managed_api_id),
        name: build.template(block.name),
        parameter_values: build.template(std.get(block, 'parameter_values', null)),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      display_name: resource.field(self._.blocks, 'display_name'),
      id: resource.field(self._.blocks, 'id'),
      managed_api_id: resource.field(self._.blocks, 'managed_api_id'),
      name: resource.field(self._.blocks, 'name'),
      parameter_values: resource.field(self._.blocks, 'parameter_values'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    api_management(name, block): {
      local resource = blockType.resource('azurerm_api_management', name),
      _: resource._(block, {
        client_certificate_enabled: build.template(std.get(block, 'client_certificate_enabled', null)),
        developer_portal_url: build.template(std.get(block, 'developer_portal_url', null)),
        gateway_disabled: build.template(std.get(block, 'gateway_disabled', null)),
        gateway_regional_url: build.template(std.get(block, 'gateway_regional_url', null)),
        gateway_url: build.template(std.get(block, 'gateway_url', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        management_api_url: build.template(std.get(block, 'management_api_url', null)),
        min_api_version: build.template(std.get(block, 'min_api_version', null)),
        name: build.template(block.name),
        notification_sender_email: build.template(std.get(block, 'notification_sender_email', null)),
        portal_url: build.template(std.get(block, 'portal_url', null)),
        private_ip_addresses: build.template(std.get(block, 'private_ip_addresses', null)),
        public_ip_address_id: build.template(std.get(block, 'public_ip_address_id', null)),
        public_ip_addresses: build.template(std.get(block, 'public_ip_addresses', null)),
        public_network_access_enabled: build.template(std.get(block, 'public_network_access_enabled', null)),
        publisher_email: build.template(block.publisher_email),
        publisher_name: build.template(block.publisher_name),
        resource_group_name: build.template(block.resource_group_name),
        scm_url: build.template(std.get(block, 'scm_url', null)),
        sku_name: build.template(block.sku_name),
        tags: build.template(std.get(block, 'tags', null)),
        virtual_network_type: build.template(std.get(block, 'virtual_network_type', null)),
        zones: build.template(std.get(block, 'zones', null)),
      }),
      client_certificate_enabled: resource.field(self._.blocks, 'client_certificate_enabled'),
      developer_portal_url: resource.field(self._.blocks, 'developer_portal_url'),
      gateway_disabled: resource.field(self._.blocks, 'gateway_disabled'),
      gateway_regional_url: resource.field(self._.blocks, 'gateway_regional_url'),
      gateway_url: resource.field(self._.blocks, 'gateway_url'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      management_api_url: resource.field(self._.blocks, 'management_api_url'),
      min_api_version: resource.field(self._.blocks, 'min_api_version'),
      name: resource.field(self._.blocks, 'name'),
      notification_sender_email: resource.field(self._.blocks, 'notification_sender_email'),
      portal_url: resource.field(self._.blocks, 'portal_url'),
      private_ip_addresses: resource.field(self._.blocks, 'private_ip_addresses'),
      public_ip_address_id: resource.field(self._.blocks, 'public_ip_address_id'),
      public_ip_addresses: resource.field(self._.blocks, 'public_ip_addresses'),
      public_network_access_enabled: resource.field(self._.blocks, 'public_network_access_enabled'),
      publisher_email: resource.field(self._.blocks, 'publisher_email'),
      publisher_name: resource.field(self._.blocks, 'publisher_name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      scm_url: resource.field(self._.blocks, 'scm_url'),
      sku_name: resource.field(self._.blocks, 'sku_name'),
      tags: resource.field(self._.blocks, 'tags'),
      virtual_network_type: resource.field(self._.blocks, 'virtual_network_type'),
      zones: resource.field(self._.blocks, 'zones'),
    },
    api_management_api(name, block): {
      local resource = blockType.resource('azurerm_api_management_api', name),
      _: resource._(block, {
        api_management_name: build.template(block.api_management_name),
        api_type: build.template(std.get(block, 'api_type', null)),
        description: build.template(std.get(block, 'description', null)),
        display_name: build.template(std.get(block, 'display_name', null)),
        id: build.template(std.get(block, 'id', null)),
        is_current: build.template(std.get(block, 'is_current', null)),
        is_online: build.template(std.get(block, 'is_online', null)),
        name: build.template(block.name),
        path: build.template(std.get(block, 'path', null)),
        protocols: build.template(std.get(block, 'protocols', null)),
        resource_group_name: build.template(block.resource_group_name),
        revision: build.template(block.revision),
        revision_description: build.template(std.get(block, 'revision_description', null)),
        service_url: build.template(std.get(block, 'service_url', null)),
        source_api_id: build.template(std.get(block, 'source_api_id', null)),
        subscription_required: build.template(std.get(block, 'subscription_required', null)),
        terms_of_service_url: build.template(std.get(block, 'terms_of_service_url', null)),
        version: build.template(std.get(block, 'version', null)),
        version_description: build.template(std.get(block, 'version_description', null)),
        version_set_id: build.template(std.get(block, 'version_set_id', null)),
      }),
      api_management_name: resource.field(self._.blocks, 'api_management_name'),
      api_type: resource.field(self._.blocks, 'api_type'),
      description: resource.field(self._.blocks, 'description'),
      display_name: resource.field(self._.blocks, 'display_name'),
      id: resource.field(self._.blocks, 'id'),
      is_current: resource.field(self._.blocks, 'is_current'),
      is_online: resource.field(self._.blocks, 'is_online'),
      name: resource.field(self._.blocks, 'name'),
      path: resource.field(self._.blocks, 'path'),
      protocols: resource.field(self._.blocks, 'protocols'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      revision: resource.field(self._.blocks, 'revision'),
      revision_description: resource.field(self._.blocks, 'revision_description'),
      service_url: resource.field(self._.blocks, 'service_url'),
      source_api_id: resource.field(self._.blocks, 'source_api_id'),
      subscription_required: resource.field(self._.blocks, 'subscription_required'),
      terms_of_service_url: resource.field(self._.blocks, 'terms_of_service_url'),
      version: resource.field(self._.blocks, 'version'),
      version_description: resource.field(self._.blocks, 'version_description'),
      version_set_id: resource.field(self._.blocks, 'version_set_id'),
    },
    api_management_api_diagnostic(name, block): {
      local resource = blockType.resource('azurerm_api_management_api_diagnostic', name),
      _: resource._(block, {
        always_log_errors: build.template(std.get(block, 'always_log_errors', null)),
        api_management_logger_id: build.template(block.api_management_logger_id),
        api_management_name: build.template(block.api_management_name),
        api_name: build.template(block.api_name),
        http_correlation_protocol: build.template(std.get(block, 'http_correlation_protocol', null)),
        id: build.template(std.get(block, 'id', null)),
        identifier: build.template(block.identifier),
        log_client_ip: build.template(std.get(block, 'log_client_ip', null)),
        operation_name_format: build.template(std.get(block, 'operation_name_format', null)),
        resource_group_name: build.template(block.resource_group_name),
        sampling_percentage: build.template(std.get(block, 'sampling_percentage', null)),
        verbosity: build.template(std.get(block, 'verbosity', null)),
      }),
      always_log_errors: resource.field(self._.blocks, 'always_log_errors'),
      api_management_logger_id: resource.field(self._.blocks, 'api_management_logger_id'),
      api_management_name: resource.field(self._.blocks, 'api_management_name'),
      api_name: resource.field(self._.blocks, 'api_name'),
      http_correlation_protocol: resource.field(self._.blocks, 'http_correlation_protocol'),
      id: resource.field(self._.blocks, 'id'),
      identifier: resource.field(self._.blocks, 'identifier'),
      log_client_ip: resource.field(self._.blocks, 'log_client_ip'),
      operation_name_format: resource.field(self._.blocks, 'operation_name_format'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      sampling_percentage: resource.field(self._.blocks, 'sampling_percentage'),
      verbosity: resource.field(self._.blocks, 'verbosity'),
    },
    api_management_api_operation(name, block): {
      local resource = blockType.resource('azurerm_api_management_api_operation', name),
      _: resource._(block, {
        api_management_name: build.template(block.api_management_name),
        api_name: build.template(block.api_name),
        description: build.template(std.get(block, 'description', null)),
        display_name: build.template(block.display_name),
        id: build.template(std.get(block, 'id', null)),
        method: build.template(block.method),
        operation_id: build.template(block.operation_id),
        resource_group_name: build.template(block.resource_group_name),
        url_template: build.template(block.url_template),
      }),
      api_management_name: resource.field(self._.blocks, 'api_management_name'),
      api_name: resource.field(self._.blocks, 'api_name'),
      description: resource.field(self._.blocks, 'description'),
      display_name: resource.field(self._.blocks, 'display_name'),
      id: resource.field(self._.blocks, 'id'),
      method: resource.field(self._.blocks, 'method'),
      operation_id: resource.field(self._.blocks, 'operation_id'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      url_template: resource.field(self._.blocks, 'url_template'),
    },
    api_management_api_operation_policy(name, block): {
      local resource = blockType.resource('azurerm_api_management_api_operation_policy', name),
      _: resource._(block, {
        api_management_name: build.template(block.api_management_name),
        api_name: build.template(block.api_name),
        id: build.template(std.get(block, 'id', null)),
        operation_id: build.template(block.operation_id),
        resource_group_name: build.template(block.resource_group_name),
        xml_content: build.template(std.get(block, 'xml_content', null)),
        xml_link: build.template(std.get(block, 'xml_link', null)),
      }),
      api_management_name: resource.field(self._.blocks, 'api_management_name'),
      api_name: resource.field(self._.blocks, 'api_name'),
      id: resource.field(self._.blocks, 'id'),
      operation_id: resource.field(self._.blocks, 'operation_id'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      xml_content: resource.field(self._.blocks, 'xml_content'),
      xml_link: resource.field(self._.blocks, 'xml_link'),
    },
    api_management_api_operation_tag(name, block): {
      local resource = blockType.resource('azurerm_api_management_api_operation_tag', name),
      _: resource._(block, {
        api_operation_id: build.template(block.api_operation_id),
        display_name: build.template(block.display_name),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
      }),
      api_operation_id: resource.field(self._.blocks, 'api_operation_id'),
      display_name: resource.field(self._.blocks, 'display_name'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
    },
    api_management_api_policy(name, block): {
      local resource = blockType.resource('azurerm_api_management_api_policy', name),
      _: resource._(block, {
        api_management_name: build.template(block.api_management_name),
        api_name: build.template(block.api_name),
        id: build.template(std.get(block, 'id', null)),
        resource_group_name: build.template(block.resource_group_name),
        xml_content: build.template(std.get(block, 'xml_content', null)),
        xml_link: build.template(std.get(block, 'xml_link', null)),
      }),
      api_management_name: resource.field(self._.blocks, 'api_management_name'),
      api_name: resource.field(self._.blocks, 'api_name'),
      id: resource.field(self._.blocks, 'id'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      xml_content: resource.field(self._.blocks, 'xml_content'),
      xml_link: resource.field(self._.blocks, 'xml_link'),
    },
    api_management_api_release(name, block): {
      local resource = blockType.resource('azurerm_api_management_api_release', name),
      _: resource._(block, {
        api_id: build.template(block.api_id),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        notes: build.template(std.get(block, 'notes', null)),
      }),
      api_id: resource.field(self._.blocks, 'api_id'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      notes: resource.field(self._.blocks, 'notes'),
    },
    api_management_api_schema(name, block): {
      local resource = blockType.resource('azurerm_api_management_api_schema', name),
      _: resource._(block, {
        api_management_name: build.template(block.api_management_name),
        api_name: build.template(block.api_name),
        components: build.template(std.get(block, 'components', null)),
        content_type: build.template(block.content_type),
        definitions: build.template(std.get(block, 'definitions', null)),
        id: build.template(std.get(block, 'id', null)),
        resource_group_name: build.template(block.resource_group_name),
        schema_id: build.template(block.schema_id),
        value: build.template(std.get(block, 'value', null)),
      }),
      api_management_name: resource.field(self._.blocks, 'api_management_name'),
      api_name: resource.field(self._.blocks, 'api_name'),
      components: resource.field(self._.blocks, 'components'),
      content_type: resource.field(self._.blocks, 'content_type'),
      definitions: resource.field(self._.blocks, 'definitions'),
      id: resource.field(self._.blocks, 'id'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      schema_id: resource.field(self._.blocks, 'schema_id'),
      value: resource.field(self._.blocks, 'value'),
    },
    api_management_api_tag(name, block): {
      local resource = blockType.resource('azurerm_api_management_api_tag', name),
      _: resource._(block, {
        api_id: build.template(block.api_id),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
      }),
      api_id: resource.field(self._.blocks, 'api_id'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
    },
    api_management_api_tag_description(name, block): {
      local resource = blockType.resource('azurerm_api_management_api_tag_description', name),
      _: resource._(block, {
        api_tag_id: build.template(block.api_tag_id),
        description: build.template(std.get(block, 'description', null)),
        external_documentation_description: build.template(std.get(block, 'external_documentation_description', null)),
        external_documentation_url: build.template(std.get(block, 'external_documentation_url', null)),
        id: build.template(std.get(block, 'id', null)),
      }),
      api_tag_id: resource.field(self._.blocks, 'api_tag_id'),
      description: resource.field(self._.blocks, 'description'),
      external_documentation_description: resource.field(self._.blocks, 'external_documentation_description'),
      external_documentation_url: resource.field(self._.blocks, 'external_documentation_url'),
      id: resource.field(self._.blocks, 'id'),
    },
    api_management_api_version_set(name, block): {
      local resource = blockType.resource('azurerm_api_management_api_version_set', name),
      _: resource._(block, {
        api_management_name: build.template(block.api_management_name),
        description: build.template(std.get(block, 'description', null)),
        display_name: build.template(block.display_name),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        version_header_name: build.template(std.get(block, 'version_header_name', null)),
        version_query_name: build.template(std.get(block, 'version_query_name', null)),
        versioning_scheme: build.template(block.versioning_scheme),
      }),
      api_management_name: resource.field(self._.blocks, 'api_management_name'),
      description: resource.field(self._.blocks, 'description'),
      display_name: resource.field(self._.blocks, 'display_name'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      version_header_name: resource.field(self._.blocks, 'version_header_name'),
      version_query_name: resource.field(self._.blocks, 'version_query_name'),
      versioning_scheme: resource.field(self._.blocks, 'versioning_scheme'),
    },
    api_management_authorization_server(name, block): {
      local resource = blockType.resource('azurerm_api_management_authorization_server', name),
      _: resource._(block, {
        api_management_name: build.template(block.api_management_name),
        authorization_endpoint: build.template(block.authorization_endpoint),
        authorization_methods: build.template(block.authorization_methods),
        bearer_token_sending_methods: build.template(std.get(block, 'bearer_token_sending_methods', null)),
        client_authentication_method: build.template(std.get(block, 'client_authentication_method', null)),
        client_id: build.template(block.client_id),
        client_registration_endpoint: build.template(block.client_registration_endpoint),
        client_secret: build.template(std.get(block, 'client_secret', null)),
        default_scope: build.template(std.get(block, 'default_scope', null)),
        description: build.template(std.get(block, 'description', null)),
        display_name: build.template(block.display_name),
        grant_types: build.template(block.grant_types),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        resource_owner_password: build.template(std.get(block, 'resource_owner_password', null)),
        resource_owner_username: build.template(std.get(block, 'resource_owner_username', null)),
        support_state: build.template(std.get(block, 'support_state', null)),
        token_endpoint: build.template(std.get(block, 'token_endpoint', null)),
      }),
      api_management_name: resource.field(self._.blocks, 'api_management_name'),
      authorization_endpoint: resource.field(self._.blocks, 'authorization_endpoint'),
      authorization_methods: resource.field(self._.blocks, 'authorization_methods'),
      bearer_token_sending_methods: resource.field(self._.blocks, 'bearer_token_sending_methods'),
      client_authentication_method: resource.field(self._.blocks, 'client_authentication_method'),
      client_id: resource.field(self._.blocks, 'client_id'),
      client_registration_endpoint: resource.field(self._.blocks, 'client_registration_endpoint'),
      client_secret: resource.field(self._.blocks, 'client_secret'),
      default_scope: resource.field(self._.blocks, 'default_scope'),
      description: resource.field(self._.blocks, 'description'),
      display_name: resource.field(self._.blocks, 'display_name'),
      grant_types: resource.field(self._.blocks, 'grant_types'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      resource_owner_password: resource.field(self._.blocks, 'resource_owner_password'),
      resource_owner_username: resource.field(self._.blocks, 'resource_owner_username'),
      support_state: resource.field(self._.blocks, 'support_state'),
      token_endpoint: resource.field(self._.blocks, 'token_endpoint'),
    },
    api_management_backend(name, block): {
      local resource = blockType.resource('azurerm_api_management_backend', name),
      _: resource._(block, {
        api_management_name: build.template(block.api_management_name),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        protocol: build.template(block.protocol),
        resource_group_name: build.template(block.resource_group_name),
        resource_id: build.template(std.get(block, 'resource_id', null)),
        title: build.template(std.get(block, 'title', null)),
        url: build.template(block.url),
      }),
      api_management_name: resource.field(self._.blocks, 'api_management_name'),
      description: resource.field(self._.blocks, 'description'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      protocol: resource.field(self._.blocks, 'protocol'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      resource_id: resource.field(self._.blocks, 'resource_id'),
      title: resource.field(self._.blocks, 'title'),
      url: resource.field(self._.blocks, 'url'),
    },
    api_management_certificate(name, block): {
      local resource = blockType.resource('azurerm_api_management_certificate', name),
      _: resource._(block, {
        api_management_name: build.template(block.api_management_name),
        data: build.template(std.get(block, 'data', null)),
        expiration: build.template(std.get(block, 'expiration', null)),
        id: build.template(std.get(block, 'id', null)),
        key_vault_identity_client_id: build.template(std.get(block, 'key_vault_identity_client_id', null)),
        key_vault_secret_id: build.template(std.get(block, 'key_vault_secret_id', null)),
        name: build.template(block.name),
        password: build.template(std.get(block, 'password', null)),
        resource_group_name: build.template(block.resource_group_name),
        subject: build.template(std.get(block, 'subject', null)),
        thumbprint: build.template(std.get(block, 'thumbprint', null)),
      }),
      api_management_name: resource.field(self._.blocks, 'api_management_name'),
      data: resource.field(self._.blocks, 'data'),
      expiration: resource.field(self._.blocks, 'expiration'),
      id: resource.field(self._.blocks, 'id'),
      key_vault_identity_client_id: resource.field(self._.blocks, 'key_vault_identity_client_id'),
      key_vault_secret_id: resource.field(self._.blocks, 'key_vault_secret_id'),
      name: resource.field(self._.blocks, 'name'),
      password: resource.field(self._.blocks, 'password'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      subject: resource.field(self._.blocks, 'subject'),
      thumbprint: resource.field(self._.blocks, 'thumbprint'),
    },
    api_management_custom_domain(name, block): {
      local resource = blockType.resource('azurerm_api_management_custom_domain', name),
      _: resource._(block, {
        api_management_id: build.template(block.api_management_id),
        id: build.template(std.get(block, 'id', null)),
      }),
      api_management_id: resource.field(self._.blocks, 'api_management_id'),
      id: resource.field(self._.blocks, 'id'),
    },
    api_management_diagnostic(name, block): {
      local resource = blockType.resource('azurerm_api_management_diagnostic', name),
      _: resource._(block, {
        always_log_errors: build.template(std.get(block, 'always_log_errors', null)),
        api_management_logger_id: build.template(block.api_management_logger_id),
        api_management_name: build.template(block.api_management_name),
        http_correlation_protocol: build.template(std.get(block, 'http_correlation_protocol', null)),
        id: build.template(std.get(block, 'id', null)),
        identifier: build.template(block.identifier),
        log_client_ip: build.template(std.get(block, 'log_client_ip', null)),
        operation_name_format: build.template(std.get(block, 'operation_name_format', null)),
        resource_group_name: build.template(block.resource_group_name),
        sampling_percentage: build.template(std.get(block, 'sampling_percentage', null)),
        verbosity: build.template(std.get(block, 'verbosity', null)),
      }),
      always_log_errors: resource.field(self._.blocks, 'always_log_errors'),
      api_management_logger_id: resource.field(self._.blocks, 'api_management_logger_id'),
      api_management_name: resource.field(self._.blocks, 'api_management_name'),
      http_correlation_protocol: resource.field(self._.blocks, 'http_correlation_protocol'),
      id: resource.field(self._.blocks, 'id'),
      identifier: resource.field(self._.blocks, 'identifier'),
      log_client_ip: resource.field(self._.blocks, 'log_client_ip'),
      operation_name_format: resource.field(self._.blocks, 'operation_name_format'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      sampling_percentage: resource.field(self._.blocks, 'sampling_percentage'),
      verbosity: resource.field(self._.blocks, 'verbosity'),
    },
    api_management_email_template(name, block): {
      local resource = blockType.resource('azurerm_api_management_email_template', name),
      _: resource._(block, {
        api_management_name: build.template(block.api_management_name),
        body: build.template(block.body),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        resource_group_name: build.template(block.resource_group_name),
        subject: build.template(block.subject),
        template_name: build.template(block.template_name),
        title: build.template(std.get(block, 'title', null)),
      }),
      api_management_name: resource.field(self._.blocks, 'api_management_name'),
      body: resource.field(self._.blocks, 'body'),
      description: resource.field(self._.blocks, 'description'),
      id: resource.field(self._.blocks, 'id'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      subject: resource.field(self._.blocks, 'subject'),
      template_name: resource.field(self._.blocks, 'template_name'),
      title: resource.field(self._.blocks, 'title'),
    },
    api_management_gateway(name, block): {
      local resource = blockType.resource('azurerm_api_management_gateway', name),
      _: resource._(block, {
        api_management_id: build.template(block.api_management_id),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
      }),
      api_management_id: resource.field(self._.blocks, 'api_management_id'),
      description: resource.field(self._.blocks, 'description'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
    },
    api_management_gateway_api(name, block): {
      local resource = blockType.resource('azurerm_api_management_gateway_api', name),
      _: resource._(block, {
        api_id: build.template(block.api_id),
        gateway_id: build.template(block.gateway_id),
        id: build.template(std.get(block, 'id', null)),
      }),
      api_id: resource.field(self._.blocks, 'api_id'),
      gateway_id: resource.field(self._.blocks, 'gateway_id'),
      id: resource.field(self._.blocks, 'id'),
    },
    api_management_gateway_certificate_authority(name, block): {
      local resource = blockType.resource('azurerm_api_management_gateway_certificate_authority', name),
      _: resource._(block, {
        api_management_id: build.template(block.api_management_id),
        certificate_name: build.template(block.certificate_name),
        gateway_name: build.template(block.gateway_name),
        id: build.template(std.get(block, 'id', null)),
        is_trusted: build.template(std.get(block, 'is_trusted', null)),
      }),
      api_management_id: resource.field(self._.blocks, 'api_management_id'),
      certificate_name: resource.field(self._.blocks, 'certificate_name'),
      gateway_name: resource.field(self._.blocks, 'gateway_name'),
      id: resource.field(self._.blocks, 'id'),
      is_trusted: resource.field(self._.blocks, 'is_trusted'),
    },
    api_management_gateway_host_name_configuration(name, block): {
      local resource = blockType.resource('azurerm_api_management_gateway_host_name_configuration', name),
      _: resource._(block, {
        api_management_id: build.template(block.api_management_id),
        certificate_id: build.template(block.certificate_id),
        gateway_name: build.template(block.gateway_name),
        host_name: build.template(block.host_name),
        http2_enabled: build.template(std.get(block, 'http2_enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        request_client_certificate_enabled: build.template(std.get(block, 'request_client_certificate_enabled', null)),
        tls10_enabled: build.template(std.get(block, 'tls10_enabled', null)),
        tls11_enabled: build.template(std.get(block, 'tls11_enabled', null)),
      }),
      api_management_id: resource.field(self._.blocks, 'api_management_id'),
      certificate_id: resource.field(self._.blocks, 'certificate_id'),
      gateway_name: resource.field(self._.blocks, 'gateway_name'),
      host_name: resource.field(self._.blocks, 'host_name'),
      http2_enabled: resource.field(self._.blocks, 'http2_enabled'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      request_client_certificate_enabled: resource.field(self._.blocks, 'request_client_certificate_enabled'),
      tls10_enabled: resource.field(self._.blocks, 'tls10_enabled'),
      tls11_enabled: resource.field(self._.blocks, 'tls11_enabled'),
    },
    api_management_global_schema(name, block): {
      local resource = blockType.resource('azurerm_api_management_global_schema', name),
      _: resource._(block, {
        api_management_name: build.template(block.api_management_name),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        resource_group_name: build.template(block.resource_group_name),
        schema_id: build.template(block.schema_id),
        type: build.template(block.type),
        value: build.template(block.value),
      }),
      api_management_name: resource.field(self._.blocks, 'api_management_name'),
      description: resource.field(self._.blocks, 'description'),
      id: resource.field(self._.blocks, 'id'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      schema_id: resource.field(self._.blocks, 'schema_id'),
      type: resource.field(self._.blocks, 'type'),
      value: resource.field(self._.blocks, 'value'),
    },
    api_management_group(name, block): {
      local resource = blockType.resource('azurerm_api_management_group', name),
      _: resource._(block, {
        api_management_name: build.template(block.api_management_name),
        description: build.template(std.get(block, 'description', null)),
        display_name: build.template(block.display_name),
        external_id: build.template(std.get(block, 'external_id', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        type: build.template(std.get(block, 'type', null)),
      }),
      api_management_name: resource.field(self._.blocks, 'api_management_name'),
      description: resource.field(self._.blocks, 'description'),
      display_name: resource.field(self._.blocks, 'display_name'),
      external_id: resource.field(self._.blocks, 'external_id'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      type: resource.field(self._.blocks, 'type'),
    },
    api_management_group_user(name, block): {
      local resource = blockType.resource('azurerm_api_management_group_user', name),
      _: resource._(block, {
        api_management_name: build.template(block.api_management_name),
        group_name: build.template(block.group_name),
        id: build.template(std.get(block, 'id', null)),
        resource_group_name: build.template(block.resource_group_name),
        user_id: build.template(block.user_id),
      }),
      api_management_name: resource.field(self._.blocks, 'api_management_name'),
      group_name: resource.field(self._.blocks, 'group_name'),
      id: resource.field(self._.blocks, 'id'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      user_id: resource.field(self._.blocks, 'user_id'),
    },
    api_management_identity_provider_aad(name, block): {
      local resource = blockType.resource('azurerm_api_management_identity_provider_aad', name),
      _: resource._(block, {
        allowed_tenants: build.template(block.allowed_tenants),
        api_management_name: build.template(block.api_management_name),
        client_id: build.template(block.client_id),
        client_library: build.template(std.get(block, 'client_library', null)),
        client_secret: build.template(block.client_secret),
        id: build.template(std.get(block, 'id', null)),
        resource_group_name: build.template(block.resource_group_name),
        signin_tenant: build.template(std.get(block, 'signin_tenant', null)),
      }),
      allowed_tenants: resource.field(self._.blocks, 'allowed_tenants'),
      api_management_name: resource.field(self._.blocks, 'api_management_name'),
      client_id: resource.field(self._.blocks, 'client_id'),
      client_library: resource.field(self._.blocks, 'client_library'),
      client_secret: resource.field(self._.blocks, 'client_secret'),
      id: resource.field(self._.blocks, 'id'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      signin_tenant: resource.field(self._.blocks, 'signin_tenant'),
    },
    api_management_identity_provider_aadb2c(name, block): {
      local resource = blockType.resource('azurerm_api_management_identity_provider_aadb2c', name),
      _: resource._(block, {
        allowed_tenant: build.template(block.allowed_tenant),
        api_management_name: build.template(block.api_management_name),
        authority: build.template(block.authority),
        client_id: build.template(block.client_id),
        client_library: build.template(std.get(block, 'client_library', null)),
        client_secret: build.template(block.client_secret),
        id: build.template(std.get(block, 'id', null)),
        password_reset_policy: build.template(std.get(block, 'password_reset_policy', null)),
        profile_editing_policy: build.template(std.get(block, 'profile_editing_policy', null)),
        resource_group_name: build.template(block.resource_group_name),
        signin_policy: build.template(block.signin_policy),
        signin_tenant: build.template(block.signin_tenant),
        signup_policy: build.template(block.signup_policy),
      }),
      allowed_tenant: resource.field(self._.blocks, 'allowed_tenant'),
      api_management_name: resource.field(self._.blocks, 'api_management_name'),
      authority: resource.field(self._.blocks, 'authority'),
      client_id: resource.field(self._.blocks, 'client_id'),
      client_library: resource.field(self._.blocks, 'client_library'),
      client_secret: resource.field(self._.blocks, 'client_secret'),
      id: resource.field(self._.blocks, 'id'),
      password_reset_policy: resource.field(self._.blocks, 'password_reset_policy'),
      profile_editing_policy: resource.field(self._.blocks, 'profile_editing_policy'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      signin_policy: resource.field(self._.blocks, 'signin_policy'),
      signin_tenant: resource.field(self._.blocks, 'signin_tenant'),
      signup_policy: resource.field(self._.blocks, 'signup_policy'),
    },
    api_management_identity_provider_facebook(name, block): {
      local resource = blockType.resource('azurerm_api_management_identity_provider_facebook', name),
      _: resource._(block, {
        api_management_name: build.template(block.api_management_name),
        app_id: build.template(block.app_id),
        app_secret: build.template(block.app_secret),
        id: build.template(std.get(block, 'id', null)),
        resource_group_name: build.template(block.resource_group_name),
      }),
      api_management_name: resource.field(self._.blocks, 'api_management_name'),
      app_id: resource.field(self._.blocks, 'app_id'),
      app_secret: resource.field(self._.blocks, 'app_secret'),
      id: resource.field(self._.blocks, 'id'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
    },
    api_management_identity_provider_google(name, block): {
      local resource = blockType.resource('azurerm_api_management_identity_provider_google', name),
      _: resource._(block, {
        api_management_name: build.template(block.api_management_name),
        client_id: build.template(block.client_id),
        client_secret: build.template(block.client_secret),
        id: build.template(std.get(block, 'id', null)),
        resource_group_name: build.template(block.resource_group_name),
      }),
      api_management_name: resource.field(self._.blocks, 'api_management_name'),
      client_id: resource.field(self._.blocks, 'client_id'),
      client_secret: resource.field(self._.blocks, 'client_secret'),
      id: resource.field(self._.blocks, 'id'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
    },
    api_management_identity_provider_microsoft(name, block): {
      local resource = blockType.resource('azurerm_api_management_identity_provider_microsoft', name),
      _: resource._(block, {
        api_management_name: build.template(block.api_management_name),
        client_id: build.template(block.client_id),
        client_secret: build.template(block.client_secret),
        id: build.template(std.get(block, 'id', null)),
        resource_group_name: build.template(block.resource_group_name),
      }),
      api_management_name: resource.field(self._.blocks, 'api_management_name'),
      client_id: resource.field(self._.blocks, 'client_id'),
      client_secret: resource.field(self._.blocks, 'client_secret'),
      id: resource.field(self._.blocks, 'id'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
    },
    api_management_identity_provider_twitter(name, block): {
      local resource = blockType.resource('azurerm_api_management_identity_provider_twitter', name),
      _: resource._(block, {
        api_key: build.template(block.api_key),
        api_management_name: build.template(block.api_management_name),
        api_secret_key: build.template(block.api_secret_key),
        id: build.template(std.get(block, 'id', null)),
        resource_group_name: build.template(block.resource_group_name),
      }),
      api_key: resource.field(self._.blocks, 'api_key'),
      api_management_name: resource.field(self._.blocks, 'api_management_name'),
      api_secret_key: resource.field(self._.blocks, 'api_secret_key'),
      id: resource.field(self._.blocks, 'id'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
    },
    api_management_logger(name, block): {
      local resource = blockType.resource('azurerm_api_management_logger', name),
      _: resource._(block, {
        api_management_name: build.template(block.api_management_name),
        buffered: build.template(std.get(block, 'buffered', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        resource_id: build.template(std.get(block, 'resource_id', null)),
      }),
      api_management_name: resource.field(self._.blocks, 'api_management_name'),
      buffered: resource.field(self._.blocks, 'buffered'),
      description: resource.field(self._.blocks, 'description'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      resource_id: resource.field(self._.blocks, 'resource_id'),
    },
    api_management_named_value(name, block): {
      local resource = blockType.resource('azurerm_api_management_named_value', name),
      _: resource._(block, {
        api_management_name: build.template(block.api_management_name),
        display_name: build.template(block.display_name),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        secret: build.template(std.get(block, 'secret', null)),
        tags: build.template(std.get(block, 'tags', null)),
        value: build.template(std.get(block, 'value', null)),
      }),
      api_management_name: resource.field(self._.blocks, 'api_management_name'),
      display_name: resource.field(self._.blocks, 'display_name'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      secret: resource.field(self._.blocks, 'secret'),
      tags: resource.field(self._.blocks, 'tags'),
      value: resource.field(self._.blocks, 'value'),
    },
    api_management_notification_recipient_email(name, block): {
      local resource = blockType.resource('azurerm_api_management_notification_recipient_email', name),
      _: resource._(block, {
        api_management_id: build.template(block.api_management_id),
        email: build.template(block.email),
        id: build.template(std.get(block, 'id', null)),
        notification_type: build.template(block.notification_type),
      }),
      api_management_id: resource.field(self._.blocks, 'api_management_id'),
      email: resource.field(self._.blocks, 'email'),
      id: resource.field(self._.blocks, 'id'),
      notification_type: resource.field(self._.blocks, 'notification_type'),
    },
    api_management_notification_recipient_user(name, block): {
      local resource = blockType.resource('azurerm_api_management_notification_recipient_user', name),
      _: resource._(block, {
        api_management_id: build.template(block.api_management_id),
        id: build.template(std.get(block, 'id', null)),
        notification_type: build.template(block.notification_type),
        user_id: build.template(block.user_id),
      }),
      api_management_id: resource.field(self._.blocks, 'api_management_id'),
      id: resource.field(self._.blocks, 'id'),
      notification_type: resource.field(self._.blocks, 'notification_type'),
      user_id: resource.field(self._.blocks, 'user_id'),
    },
    api_management_openid_connect_provider(name, block): {
      local resource = blockType.resource('azurerm_api_management_openid_connect_provider', name),
      _: resource._(block, {
        api_management_name: build.template(block.api_management_name),
        client_id: build.template(block.client_id),
        client_secret: build.template(block.client_secret),
        description: build.template(std.get(block, 'description', null)),
        display_name: build.template(block.display_name),
        id: build.template(std.get(block, 'id', null)),
        metadata_endpoint: build.template(block.metadata_endpoint),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
      }),
      api_management_name: resource.field(self._.blocks, 'api_management_name'),
      client_id: resource.field(self._.blocks, 'client_id'),
      client_secret: resource.field(self._.blocks, 'client_secret'),
      description: resource.field(self._.blocks, 'description'),
      display_name: resource.field(self._.blocks, 'display_name'),
      id: resource.field(self._.blocks, 'id'),
      metadata_endpoint: resource.field(self._.blocks, 'metadata_endpoint'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
    },
    api_management_policy(name, block): {
      local resource = blockType.resource('azurerm_api_management_policy', name),
      _: resource._(block, {
        api_management_id: build.template(block.api_management_id),
        id: build.template(std.get(block, 'id', null)),
        xml_content: build.template(std.get(block, 'xml_content', null)),
        xml_link: build.template(std.get(block, 'xml_link', null)),
      }),
      api_management_id: resource.field(self._.blocks, 'api_management_id'),
      id: resource.field(self._.blocks, 'id'),
      xml_content: resource.field(self._.blocks, 'xml_content'),
      xml_link: resource.field(self._.blocks, 'xml_link'),
    },
    api_management_policy_fragment(name, block): {
      local resource = blockType.resource('azurerm_api_management_policy_fragment', name),
      _: resource._(block, {
        api_management_id: build.template(block.api_management_id),
        description: build.template(std.get(block, 'description', null)),
        format: build.template(std.get(block, 'format', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        value: build.template(block.value),
      }),
      api_management_id: resource.field(self._.blocks, 'api_management_id'),
      description: resource.field(self._.blocks, 'description'),
      format: resource.field(self._.blocks, 'format'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      value: resource.field(self._.blocks, 'value'),
    },
    api_management_product(name, block): {
      local resource = blockType.resource('azurerm_api_management_product', name),
      _: resource._(block, {
        api_management_name: build.template(block.api_management_name),
        approval_required: build.template(std.get(block, 'approval_required', null)),
        description: build.template(std.get(block, 'description', null)),
        display_name: build.template(block.display_name),
        id: build.template(std.get(block, 'id', null)),
        product_id: build.template(block.product_id),
        published: build.template(block.published),
        resource_group_name: build.template(block.resource_group_name),
        subscription_required: build.template(std.get(block, 'subscription_required', null)),
        subscriptions_limit: build.template(std.get(block, 'subscriptions_limit', null)),
        terms: build.template(std.get(block, 'terms', null)),
      }),
      api_management_name: resource.field(self._.blocks, 'api_management_name'),
      approval_required: resource.field(self._.blocks, 'approval_required'),
      description: resource.field(self._.blocks, 'description'),
      display_name: resource.field(self._.blocks, 'display_name'),
      id: resource.field(self._.blocks, 'id'),
      product_id: resource.field(self._.blocks, 'product_id'),
      published: resource.field(self._.blocks, 'published'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      subscription_required: resource.field(self._.blocks, 'subscription_required'),
      subscriptions_limit: resource.field(self._.blocks, 'subscriptions_limit'),
      terms: resource.field(self._.blocks, 'terms'),
    },
    api_management_product_api(name, block): {
      local resource = blockType.resource('azurerm_api_management_product_api', name),
      _: resource._(block, {
        api_management_name: build.template(block.api_management_name),
        api_name: build.template(block.api_name),
        id: build.template(std.get(block, 'id', null)),
        product_id: build.template(block.product_id),
        resource_group_name: build.template(block.resource_group_name),
      }),
      api_management_name: resource.field(self._.blocks, 'api_management_name'),
      api_name: resource.field(self._.blocks, 'api_name'),
      id: resource.field(self._.blocks, 'id'),
      product_id: resource.field(self._.blocks, 'product_id'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
    },
    api_management_product_group(name, block): {
      local resource = blockType.resource('azurerm_api_management_product_group', name),
      _: resource._(block, {
        api_management_name: build.template(block.api_management_name),
        group_name: build.template(block.group_name),
        id: build.template(std.get(block, 'id', null)),
        product_id: build.template(block.product_id),
        resource_group_name: build.template(block.resource_group_name),
      }),
      api_management_name: resource.field(self._.blocks, 'api_management_name'),
      group_name: resource.field(self._.blocks, 'group_name'),
      id: resource.field(self._.blocks, 'id'),
      product_id: resource.field(self._.blocks, 'product_id'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
    },
    api_management_product_policy(name, block): {
      local resource = blockType.resource('azurerm_api_management_product_policy', name),
      _: resource._(block, {
        api_management_name: build.template(block.api_management_name),
        id: build.template(std.get(block, 'id', null)),
        product_id: build.template(block.product_id),
        resource_group_name: build.template(block.resource_group_name),
        xml_content: build.template(std.get(block, 'xml_content', null)),
        xml_link: build.template(std.get(block, 'xml_link', null)),
      }),
      api_management_name: resource.field(self._.blocks, 'api_management_name'),
      id: resource.field(self._.blocks, 'id'),
      product_id: resource.field(self._.blocks, 'product_id'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      xml_content: resource.field(self._.blocks, 'xml_content'),
      xml_link: resource.field(self._.blocks, 'xml_link'),
    },
    api_management_product_tag(name, block): {
      local resource = blockType.resource('azurerm_api_management_product_tag', name),
      _: resource._(block, {
        api_management_name: build.template(block.api_management_name),
        api_management_product_id: build.template(block.api_management_product_id),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
      }),
      api_management_name: resource.field(self._.blocks, 'api_management_name'),
      api_management_product_id: resource.field(self._.blocks, 'api_management_product_id'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
    },
    api_management_redis_cache(name, block): {
      local resource = blockType.resource('azurerm_api_management_redis_cache', name),
      _: resource._(block, {
        api_management_id: build.template(block.api_management_id),
        cache_location: build.template(std.get(block, 'cache_location', null)),
        connection_string: build.template(block.connection_string),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        redis_cache_id: build.template(std.get(block, 'redis_cache_id', null)),
      }),
      api_management_id: resource.field(self._.blocks, 'api_management_id'),
      cache_location: resource.field(self._.blocks, 'cache_location'),
      connection_string: resource.field(self._.blocks, 'connection_string'),
      description: resource.field(self._.blocks, 'description'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      redis_cache_id: resource.field(self._.blocks, 'redis_cache_id'),
    },
    api_management_subscription(name, block): {
      local resource = blockType.resource('azurerm_api_management_subscription', name),
      _: resource._(block, {
        allow_tracing: build.template(std.get(block, 'allow_tracing', null)),
        api_id: build.template(std.get(block, 'api_id', null)),
        api_management_name: build.template(block.api_management_name),
        display_name: build.template(block.display_name),
        id: build.template(std.get(block, 'id', null)),
        primary_key: build.template(std.get(block, 'primary_key', null)),
        product_id: build.template(std.get(block, 'product_id', null)),
        resource_group_name: build.template(block.resource_group_name),
        secondary_key: build.template(std.get(block, 'secondary_key', null)),
        state: build.template(std.get(block, 'state', null)),
        subscription_id: build.template(std.get(block, 'subscription_id', null)),
        user_id: build.template(std.get(block, 'user_id', null)),
      }),
      allow_tracing: resource.field(self._.blocks, 'allow_tracing'),
      api_id: resource.field(self._.blocks, 'api_id'),
      api_management_name: resource.field(self._.blocks, 'api_management_name'),
      display_name: resource.field(self._.blocks, 'display_name'),
      id: resource.field(self._.blocks, 'id'),
      primary_key: resource.field(self._.blocks, 'primary_key'),
      product_id: resource.field(self._.blocks, 'product_id'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      secondary_key: resource.field(self._.blocks, 'secondary_key'),
      state: resource.field(self._.blocks, 'state'),
      subscription_id: resource.field(self._.blocks, 'subscription_id'),
      user_id: resource.field(self._.blocks, 'user_id'),
    },
    api_management_tag(name, block): {
      local resource = blockType.resource('azurerm_api_management_tag', name),
      _: resource._(block, {
        api_management_id: build.template(block.api_management_id),
        display_name: build.template(std.get(block, 'display_name', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
      }),
      api_management_id: resource.field(self._.blocks, 'api_management_id'),
      display_name: resource.field(self._.blocks, 'display_name'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
    },
    api_management_user(name, block): {
      local resource = blockType.resource('azurerm_api_management_user', name),
      _: resource._(block, {
        api_management_name: build.template(block.api_management_name),
        confirmation: build.template(std.get(block, 'confirmation', null)),
        email: build.template(block.email),
        first_name: build.template(block.first_name),
        id: build.template(std.get(block, 'id', null)),
        last_name: build.template(block.last_name),
        note: build.template(std.get(block, 'note', null)),
        password: build.template(std.get(block, 'password', null)),
        resource_group_name: build.template(block.resource_group_name),
        state: build.template(std.get(block, 'state', null)),
        user_id: build.template(block.user_id),
      }),
      api_management_name: resource.field(self._.blocks, 'api_management_name'),
      confirmation: resource.field(self._.blocks, 'confirmation'),
      email: resource.field(self._.blocks, 'email'),
      first_name: resource.field(self._.blocks, 'first_name'),
      id: resource.field(self._.blocks, 'id'),
      last_name: resource.field(self._.blocks, 'last_name'),
      note: resource.field(self._.blocks, 'note'),
      password: resource.field(self._.blocks, 'password'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      state: resource.field(self._.blocks, 'state'),
      user_id: resource.field(self._.blocks, 'user_id'),
    },
    app_configuration(name, block): {
      local resource = blockType.resource('azurerm_app_configuration', name),
      _: resource._(block, {
        data_plane_proxy_authentication_mode: build.template(std.get(block, 'data_plane_proxy_authentication_mode', null)),
        data_plane_proxy_private_link_delegation_enabled: build.template(std.get(block, 'data_plane_proxy_private_link_delegation_enabled', null)),
        endpoint: build.template(std.get(block, 'endpoint', null)),
        id: build.template(std.get(block, 'id', null)),
        local_auth_enabled: build.template(std.get(block, 'local_auth_enabled', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        primary_read_key: build.template(std.get(block, 'primary_read_key', null)),
        primary_write_key: build.template(std.get(block, 'primary_write_key', null)),
        public_network_access: build.template(std.get(block, 'public_network_access', null)),
        purge_protection_enabled: build.template(std.get(block, 'purge_protection_enabled', null)),
        resource_group_name: build.template(block.resource_group_name),
        secondary_read_key: build.template(std.get(block, 'secondary_read_key', null)),
        secondary_write_key: build.template(std.get(block, 'secondary_write_key', null)),
        sku: build.template(std.get(block, 'sku', null)),
        soft_delete_retention_days: build.template(std.get(block, 'soft_delete_retention_days', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      data_plane_proxy_authentication_mode: resource.field(self._.blocks, 'data_plane_proxy_authentication_mode'),
      data_plane_proxy_private_link_delegation_enabled: resource.field(self._.blocks, 'data_plane_proxy_private_link_delegation_enabled'),
      endpoint: resource.field(self._.blocks, 'endpoint'),
      id: resource.field(self._.blocks, 'id'),
      local_auth_enabled: resource.field(self._.blocks, 'local_auth_enabled'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      primary_read_key: resource.field(self._.blocks, 'primary_read_key'),
      primary_write_key: resource.field(self._.blocks, 'primary_write_key'),
      public_network_access: resource.field(self._.blocks, 'public_network_access'),
      purge_protection_enabled: resource.field(self._.blocks, 'purge_protection_enabled'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      secondary_read_key: resource.field(self._.blocks, 'secondary_read_key'),
      secondary_write_key: resource.field(self._.blocks, 'secondary_write_key'),
      sku: resource.field(self._.blocks, 'sku'),
      soft_delete_retention_days: resource.field(self._.blocks, 'soft_delete_retention_days'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    app_configuration_feature(name, block): {
      local resource = blockType.resource('azurerm_app_configuration_feature', name),
      _: resource._(block, {
        configuration_store_id: build.template(block.configuration_store_id),
        description: build.template(std.get(block, 'description', null)),
        enabled: build.template(std.get(block, 'enabled', null)),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        key: build.template(std.get(block, 'key', null)),
        label: build.template(std.get(block, 'label', null)),
        locked: build.template(std.get(block, 'locked', null)),
        name: build.template(block.name),
        percentage_filter_value: build.template(std.get(block, 'percentage_filter_value', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      configuration_store_id: resource.field(self._.blocks, 'configuration_store_id'),
      description: resource.field(self._.blocks, 'description'),
      enabled: resource.field(self._.blocks, 'enabled'),
      etag: resource.field(self._.blocks, 'etag'),
      id: resource.field(self._.blocks, 'id'),
      key: resource.field(self._.blocks, 'key'),
      label: resource.field(self._.blocks, 'label'),
      locked: resource.field(self._.blocks, 'locked'),
      name: resource.field(self._.blocks, 'name'),
      percentage_filter_value: resource.field(self._.blocks, 'percentage_filter_value'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    app_configuration_key(name, block): {
      local resource = blockType.resource('azurerm_app_configuration_key', name),
      _: resource._(block, {
        configuration_store_id: build.template(block.configuration_store_id),
        content_type: build.template(std.get(block, 'content_type', null)),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        key: build.template(block.key),
        label: build.template(std.get(block, 'label', null)),
        locked: build.template(std.get(block, 'locked', null)),
        tags: build.template(std.get(block, 'tags', null)),
        type: build.template(std.get(block, 'type', null)),
        value: build.template(std.get(block, 'value', null)),
        vault_key_reference: build.template(std.get(block, 'vault_key_reference', null)),
      }),
      configuration_store_id: resource.field(self._.blocks, 'configuration_store_id'),
      content_type: resource.field(self._.blocks, 'content_type'),
      etag: resource.field(self._.blocks, 'etag'),
      id: resource.field(self._.blocks, 'id'),
      key: resource.field(self._.blocks, 'key'),
      label: resource.field(self._.blocks, 'label'),
      locked: resource.field(self._.blocks, 'locked'),
      tags: resource.field(self._.blocks, 'tags'),
      type: resource.field(self._.blocks, 'type'),
      value: resource.field(self._.blocks, 'value'),
      vault_key_reference: resource.field(self._.blocks, 'vault_key_reference'),
    },
    app_service(name, block): {
      local resource = blockType.resource('azurerm_app_service', name),
      _: resource._(block, {
        app_service_plan_id: build.template(block.app_service_plan_id),
        app_settings: build.template(std.get(block, 'app_settings', null)),
        client_affinity_enabled: build.template(std.get(block, 'client_affinity_enabled', null)),
        client_cert_enabled: build.template(std.get(block, 'client_cert_enabled', null)),
        client_cert_mode: build.template(std.get(block, 'client_cert_mode', null)),
        custom_domain_verification_id: build.template(std.get(block, 'custom_domain_verification_id', null)),
        default_site_hostname: build.template(std.get(block, 'default_site_hostname', null)),
        enabled: build.template(std.get(block, 'enabled', null)),
        https_only: build.template(std.get(block, 'https_only', null)),
        id: build.template(std.get(block, 'id', null)),
        key_vault_reference_identity_id: build.template(std.get(block, 'key_vault_reference_identity_id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        outbound_ip_address_list: build.template(std.get(block, 'outbound_ip_address_list', null)),
        outbound_ip_addresses: build.template(std.get(block, 'outbound_ip_addresses', null)),
        possible_outbound_ip_address_list: build.template(std.get(block, 'possible_outbound_ip_address_list', null)),
        possible_outbound_ip_addresses: build.template(std.get(block, 'possible_outbound_ip_addresses', null)),
        resource_group_name: build.template(block.resource_group_name),
        site_credential: build.template(std.get(block, 'site_credential', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      app_service_plan_id: resource.field(self._.blocks, 'app_service_plan_id'),
      app_settings: resource.field(self._.blocks, 'app_settings'),
      client_affinity_enabled: resource.field(self._.blocks, 'client_affinity_enabled'),
      client_cert_enabled: resource.field(self._.blocks, 'client_cert_enabled'),
      client_cert_mode: resource.field(self._.blocks, 'client_cert_mode'),
      custom_domain_verification_id: resource.field(self._.blocks, 'custom_domain_verification_id'),
      default_site_hostname: resource.field(self._.blocks, 'default_site_hostname'),
      enabled: resource.field(self._.blocks, 'enabled'),
      https_only: resource.field(self._.blocks, 'https_only'),
      id: resource.field(self._.blocks, 'id'),
      key_vault_reference_identity_id: resource.field(self._.blocks, 'key_vault_reference_identity_id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      outbound_ip_address_list: resource.field(self._.blocks, 'outbound_ip_address_list'),
      outbound_ip_addresses: resource.field(self._.blocks, 'outbound_ip_addresses'),
      possible_outbound_ip_address_list: resource.field(self._.blocks, 'possible_outbound_ip_address_list'),
      possible_outbound_ip_addresses: resource.field(self._.blocks, 'possible_outbound_ip_addresses'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      site_credential: resource.field(self._.blocks, 'site_credential'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    app_service_active_slot(name, block): {
      local resource = blockType.resource('azurerm_app_service_active_slot', name),
      _: resource._(block, {
        app_service_name: build.template(block.app_service_name),
        app_service_slot_name: build.template(block.app_service_slot_name),
        id: build.template(std.get(block, 'id', null)),
        resource_group_name: build.template(block.resource_group_name),
      }),
      app_service_name: resource.field(self._.blocks, 'app_service_name'),
      app_service_slot_name: resource.field(self._.blocks, 'app_service_slot_name'),
      id: resource.field(self._.blocks, 'id'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
    },
    app_service_certificate(name, block): {
      local resource = blockType.resource('azurerm_app_service_certificate', name),
      _: resource._(block, {
        app_service_plan_id: build.template(std.get(block, 'app_service_plan_id', null)),
        expiration_date: build.template(std.get(block, 'expiration_date', null)),
        friendly_name: build.template(std.get(block, 'friendly_name', null)),
        host_names: build.template(std.get(block, 'host_names', null)),
        hosting_environment_profile_id: build.template(std.get(block, 'hosting_environment_profile_id', null)),
        id: build.template(std.get(block, 'id', null)),
        issue_date: build.template(std.get(block, 'issue_date', null)),
        issuer: build.template(std.get(block, 'issuer', null)),
        key_vault_id: build.template(std.get(block, 'key_vault_id', null)),
        key_vault_secret_id: build.template(std.get(block, 'key_vault_secret_id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        password: build.template(std.get(block, 'password', null)),
        pfx_blob: build.template(std.get(block, 'pfx_blob', null)),
        resource_group_name: build.template(block.resource_group_name),
        subject_name: build.template(std.get(block, 'subject_name', null)),
        tags: build.template(std.get(block, 'tags', null)),
        thumbprint: build.template(std.get(block, 'thumbprint', null)),
      }),
      app_service_plan_id: resource.field(self._.blocks, 'app_service_plan_id'),
      expiration_date: resource.field(self._.blocks, 'expiration_date'),
      friendly_name: resource.field(self._.blocks, 'friendly_name'),
      host_names: resource.field(self._.blocks, 'host_names'),
      hosting_environment_profile_id: resource.field(self._.blocks, 'hosting_environment_profile_id'),
      id: resource.field(self._.blocks, 'id'),
      issue_date: resource.field(self._.blocks, 'issue_date'),
      issuer: resource.field(self._.blocks, 'issuer'),
      key_vault_id: resource.field(self._.blocks, 'key_vault_id'),
      key_vault_secret_id: resource.field(self._.blocks, 'key_vault_secret_id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      password: resource.field(self._.blocks, 'password'),
      pfx_blob: resource.field(self._.blocks, 'pfx_blob'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      subject_name: resource.field(self._.blocks, 'subject_name'),
      tags: resource.field(self._.blocks, 'tags'),
      thumbprint: resource.field(self._.blocks, 'thumbprint'),
    },
    app_service_certificate_binding(name, block): {
      local resource = blockType.resource('azurerm_app_service_certificate_binding', name),
      _: resource._(block, {
        app_service_name: build.template(std.get(block, 'app_service_name', null)),
        certificate_id: build.template(block.certificate_id),
        hostname: build.template(std.get(block, 'hostname', null)),
        hostname_binding_id: build.template(block.hostname_binding_id),
        id: build.template(std.get(block, 'id', null)),
        ssl_state: build.template(block.ssl_state),
        thumbprint: build.template(std.get(block, 'thumbprint', null)),
      }),
      app_service_name: resource.field(self._.blocks, 'app_service_name'),
      certificate_id: resource.field(self._.blocks, 'certificate_id'),
      hostname: resource.field(self._.blocks, 'hostname'),
      hostname_binding_id: resource.field(self._.blocks, 'hostname_binding_id'),
      id: resource.field(self._.blocks, 'id'),
      ssl_state: resource.field(self._.blocks, 'ssl_state'),
      thumbprint: resource.field(self._.blocks, 'thumbprint'),
    },
    app_service_certificate_order(name, block): {
      local resource = blockType.resource('azurerm_app_service_certificate_order', name),
      _: resource._(block, {
        app_service_certificate_not_renewable_reasons: build.template(std.get(block, 'app_service_certificate_not_renewable_reasons', null)),
        auto_renew: build.template(std.get(block, 'auto_renew', null)),
        certificates: build.template(std.get(block, 'certificates', null)),
        csr: build.template(std.get(block, 'csr', null)),
        distinguished_name: build.template(std.get(block, 'distinguished_name', null)),
        domain_verification_token: build.template(std.get(block, 'domain_verification_token', null)),
        expiration_time: build.template(std.get(block, 'expiration_time', null)),
        id: build.template(std.get(block, 'id', null)),
        intermediate_thumbprint: build.template(std.get(block, 'intermediate_thumbprint', null)),
        is_private_key_external: build.template(std.get(block, 'is_private_key_external', null)),
        key_size: build.template(std.get(block, 'key_size', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        product_type: build.template(std.get(block, 'product_type', null)),
        resource_group_name: build.template(block.resource_group_name),
        root_thumbprint: build.template(std.get(block, 'root_thumbprint', null)),
        signed_certificate_thumbprint: build.template(std.get(block, 'signed_certificate_thumbprint', null)),
        status: build.template(std.get(block, 'status', null)),
        tags: build.template(std.get(block, 'tags', null)),
        validity_in_years: build.template(std.get(block, 'validity_in_years', null)),
      }),
      app_service_certificate_not_renewable_reasons: resource.field(self._.blocks, 'app_service_certificate_not_renewable_reasons'),
      auto_renew: resource.field(self._.blocks, 'auto_renew'),
      certificates: resource.field(self._.blocks, 'certificates'),
      csr: resource.field(self._.blocks, 'csr'),
      distinguished_name: resource.field(self._.blocks, 'distinguished_name'),
      domain_verification_token: resource.field(self._.blocks, 'domain_verification_token'),
      expiration_time: resource.field(self._.blocks, 'expiration_time'),
      id: resource.field(self._.blocks, 'id'),
      intermediate_thumbprint: resource.field(self._.blocks, 'intermediate_thumbprint'),
      is_private_key_external: resource.field(self._.blocks, 'is_private_key_external'),
      key_size: resource.field(self._.blocks, 'key_size'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      product_type: resource.field(self._.blocks, 'product_type'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      root_thumbprint: resource.field(self._.blocks, 'root_thumbprint'),
      signed_certificate_thumbprint: resource.field(self._.blocks, 'signed_certificate_thumbprint'),
      status: resource.field(self._.blocks, 'status'),
      tags: resource.field(self._.blocks, 'tags'),
      validity_in_years: resource.field(self._.blocks, 'validity_in_years'),
    },
    app_service_connection(name, block): {
      local resource = blockType.resource('azurerm_app_service_connection', name),
      _: resource._(block, {
        app_service_id: build.template(block.app_service_id),
        client_type: build.template(std.get(block, 'client_type', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        target_resource_id: build.template(block.target_resource_id),
        vnet_solution: build.template(std.get(block, 'vnet_solution', null)),
      }),
      app_service_id: resource.field(self._.blocks, 'app_service_id'),
      client_type: resource.field(self._.blocks, 'client_type'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      target_resource_id: resource.field(self._.blocks, 'target_resource_id'),
      vnet_solution: resource.field(self._.blocks, 'vnet_solution'),
    },
    app_service_custom_hostname_binding(name, block): {
      local resource = blockType.resource('azurerm_app_service_custom_hostname_binding', name),
      _: resource._(block, {
        app_service_name: build.template(block.app_service_name),
        hostname: build.template(block.hostname),
        id: build.template(std.get(block, 'id', null)),
        resource_group_name: build.template(block.resource_group_name),
        ssl_state: build.template(std.get(block, 'ssl_state', null)),
        thumbprint: build.template(std.get(block, 'thumbprint', null)),
        virtual_ip: build.template(std.get(block, 'virtual_ip', null)),
      }),
      app_service_name: resource.field(self._.blocks, 'app_service_name'),
      hostname: resource.field(self._.blocks, 'hostname'),
      id: resource.field(self._.blocks, 'id'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      ssl_state: resource.field(self._.blocks, 'ssl_state'),
      thumbprint: resource.field(self._.blocks, 'thumbprint'),
      virtual_ip: resource.field(self._.blocks, 'virtual_ip'),
    },
    app_service_environment_v3(name, block): {
      local resource = blockType.resource('azurerm_app_service_environment_v3', name),
      _: resource._(block, {
        allow_new_private_endpoint_connections: build.template(std.get(block, 'allow_new_private_endpoint_connections', null)),
        dedicated_host_count: build.template(std.get(block, 'dedicated_host_count', null)),
        dns_suffix: build.template(std.get(block, 'dns_suffix', null)),
        external_inbound_ip_addresses: build.template(std.get(block, 'external_inbound_ip_addresses', null)),
        id: build.template(std.get(block, 'id', null)),
        inbound_network_dependencies: build.template(std.get(block, 'inbound_network_dependencies', null)),
        internal_inbound_ip_addresses: build.template(std.get(block, 'internal_inbound_ip_addresses', null)),
        internal_load_balancing_mode: build.template(std.get(block, 'internal_load_balancing_mode', null)),
        ip_ssl_address_count: build.template(std.get(block, 'ip_ssl_address_count', null)),
        linux_outbound_ip_addresses: build.template(std.get(block, 'linux_outbound_ip_addresses', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        pricing_tier: build.template(std.get(block, 'pricing_tier', null)),
        remote_debugging_enabled: build.template(std.get(block, 'remote_debugging_enabled', null)),
        resource_group_name: build.template(block.resource_group_name),
        subnet_id: build.template(block.subnet_id),
        tags: build.template(std.get(block, 'tags', null)),
        windows_outbound_ip_addresses: build.template(std.get(block, 'windows_outbound_ip_addresses', null)),
        zone_redundant: build.template(std.get(block, 'zone_redundant', null)),
      }),
      allow_new_private_endpoint_connections: resource.field(self._.blocks, 'allow_new_private_endpoint_connections'),
      dedicated_host_count: resource.field(self._.blocks, 'dedicated_host_count'),
      dns_suffix: resource.field(self._.blocks, 'dns_suffix'),
      external_inbound_ip_addresses: resource.field(self._.blocks, 'external_inbound_ip_addresses'),
      id: resource.field(self._.blocks, 'id'),
      inbound_network_dependencies: resource.field(self._.blocks, 'inbound_network_dependencies'),
      internal_inbound_ip_addresses: resource.field(self._.blocks, 'internal_inbound_ip_addresses'),
      internal_load_balancing_mode: resource.field(self._.blocks, 'internal_load_balancing_mode'),
      ip_ssl_address_count: resource.field(self._.blocks, 'ip_ssl_address_count'),
      linux_outbound_ip_addresses: resource.field(self._.blocks, 'linux_outbound_ip_addresses'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      pricing_tier: resource.field(self._.blocks, 'pricing_tier'),
      remote_debugging_enabled: resource.field(self._.blocks, 'remote_debugging_enabled'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      subnet_id: resource.field(self._.blocks, 'subnet_id'),
      tags: resource.field(self._.blocks, 'tags'),
      windows_outbound_ip_addresses: resource.field(self._.blocks, 'windows_outbound_ip_addresses'),
      zone_redundant: resource.field(self._.blocks, 'zone_redundant'),
    },
    app_service_hybrid_connection(name, block): {
      local resource = blockType.resource('azurerm_app_service_hybrid_connection', name),
      _: resource._(block, {
        app_service_name: build.template(block.app_service_name),
        hostname: build.template(block.hostname),
        id: build.template(std.get(block, 'id', null)),
        namespace_name: build.template(std.get(block, 'namespace_name', null)),
        port: build.template(block.port),
        relay_id: build.template(block.relay_id),
        relay_name: build.template(std.get(block, 'relay_name', null)),
        resource_group_name: build.template(block.resource_group_name),
        send_key_name: build.template(std.get(block, 'send_key_name', null)),
        send_key_value: build.template(std.get(block, 'send_key_value', null)),
        service_bus_namespace: build.template(std.get(block, 'service_bus_namespace', null)),
        service_bus_suffix: build.template(std.get(block, 'service_bus_suffix', null)),
      }),
      app_service_name: resource.field(self._.blocks, 'app_service_name'),
      hostname: resource.field(self._.blocks, 'hostname'),
      id: resource.field(self._.blocks, 'id'),
      namespace_name: resource.field(self._.blocks, 'namespace_name'),
      port: resource.field(self._.blocks, 'port'),
      relay_id: resource.field(self._.blocks, 'relay_id'),
      relay_name: resource.field(self._.blocks, 'relay_name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      send_key_name: resource.field(self._.blocks, 'send_key_name'),
      send_key_value: resource.field(self._.blocks, 'send_key_value'),
      service_bus_namespace: resource.field(self._.blocks, 'service_bus_namespace'),
      service_bus_suffix: resource.field(self._.blocks, 'service_bus_suffix'),
    },
    app_service_managed_certificate(name, block): {
      local resource = blockType.resource('azurerm_app_service_managed_certificate', name),
      _: resource._(block, {
        canonical_name: build.template(std.get(block, 'canonical_name', null)),
        custom_hostname_binding_id: build.template(block.custom_hostname_binding_id),
        expiration_date: build.template(std.get(block, 'expiration_date', null)),
        friendly_name: build.template(std.get(block, 'friendly_name', null)),
        host_names: build.template(std.get(block, 'host_names', null)),
        id: build.template(std.get(block, 'id', null)),
        issue_date: build.template(std.get(block, 'issue_date', null)),
        issuer: build.template(std.get(block, 'issuer', null)),
        subject_name: build.template(std.get(block, 'subject_name', null)),
        tags: build.template(std.get(block, 'tags', null)),
        thumbprint: build.template(std.get(block, 'thumbprint', null)),
      }),
      canonical_name: resource.field(self._.blocks, 'canonical_name'),
      custom_hostname_binding_id: resource.field(self._.blocks, 'custom_hostname_binding_id'),
      expiration_date: resource.field(self._.blocks, 'expiration_date'),
      friendly_name: resource.field(self._.blocks, 'friendly_name'),
      host_names: resource.field(self._.blocks, 'host_names'),
      id: resource.field(self._.blocks, 'id'),
      issue_date: resource.field(self._.blocks, 'issue_date'),
      issuer: resource.field(self._.blocks, 'issuer'),
      subject_name: resource.field(self._.blocks, 'subject_name'),
      tags: resource.field(self._.blocks, 'tags'),
      thumbprint: resource.field(self._.blocks, 'thumbprint'),
    },
    app_service_plan(name, block): {
      local resource = blockType.resource('azurerm_app_service_plan', name),
      _: resource._(block, {
        app_service_environment_id: build.template(std.get(block, 'app_service_environment_id', null)),
        id: build.template(std.get(block, 'id', null)),
        is_xenon: build.template(std.get(block, 'is_xenon', null)),
        kind: build.template(std.get(block, 'kind', null)),
        location: build.template(block.location),
        maximum_elastic_worker_count: build.template(std.get(block, 'maximum_elastic_worker_count', null)),
        maximum_number_of_workers: build.template(std.get(block, 'maximum_number_of_workers', null)),
        name: build.template(block.name),
        per_site_scaling: build.template(std.get(block, 'per_site_scaling', null)),
        reserved: build.template(std.get(block, 'reserved', null)),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
        zone_redundant: build.template(std.get(block, 'zone_redundant', null)),
      }),
      app_service_environment_id: resource.field(self._.blocks, 'app_service_environment_id'),
      id: resource.field(self._.blocks, 'id'),
      is_xenon: resource.field(self._.blocks, 'is_xenon'),
      kind: resource.field(self._.blocks, 'kind'),
      location: resource.field(self._.blocks, 'location'),
      maximum_elastic_worker_count: resource.field(self._.blocks, 'maximum_elastic_worker_count'),
      maximum_number_of_workers: resource.field(self._.blocks, 'maximum_number_of_workers'),
      name: resource.field(self._.blocks, 'name'),
      per_site_scaling: resource.field(self._.blocks, 'per_site_scaling'),
      reserved: resource.field(self._.blocks, 'reserved'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
      zone_redundant: resource.field(self._.blocks, 'zone_redundant'),
    },
    app_service_public_certificate(name, block): {
      local resource = blockType.resource('azurerm_app_service_public_certificate', name),
      _: resource._(block, {
        app_service_name: build.template(block.app_service_name),
        blob: build.template(block.blob),
        certificate_location: build.template(block.certificate_location),
        certificate_name: build.template(block.certificate_name),
        id: build.template(std.get(block, 'id', null)),
        resource_group_name: build.template(block.resource_group_name),
        thumbprint: build.template(std.get(block, 'thumbprint', null)),
      }),
      app_service_name: resource.field(self._.blocks, 'app_service_name'),
      blob: resource.field(self._.blocks, 'blob'),
      certificate_location: resource.field(self._.blocks, 'certificate_location'),
      certificate_name: resource.field(self._.blocks, 'certificate_name'),
      id: resource.field(self._.blocks, 'id'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      thumbprint: resource.field(self._.blocks, 'thumbprint'),
    },
    app_service_slot(name, block): {
      local resource = blockType.resource('azurerm_app_service_slot', name),
      _: resource._(block, {
        app_service_name: build.template(block.app_service_name),
        app_service_plan_id: build.template(block.app_service_plan_id),
        app_settings: build.template(std.get(block, 'app_settings', null)),
        client_affinity_enabled: build.template(std.get(block, 'client_affinity_enabled', null)),
        default_site_hostname: build.template(std.get(block, 'default_site_hostname', null)),
        enabled: build.template(std.get(block, 'enabled', null)),
        https_only: build.template(std.get(block, 'https_only', null)),
        id: build.template(std.get(block, 'id', null)),
        key_vault_reference_identity_id: build.template(std.get(block, 'key_vault_reference_identity_id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        site_credential: build.template(std.get(block, 'site_credential', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      app_service_name: resource.field(self._.blocks, 'app_service_name'),
      app_service_plan_id: resource.field(self._.blocks, 'app_service_plan_id'),
      app_settings: resource.field(self._.blocks, 'app_settings'),
      client_affinity_enabled: resource.field(self._.blocks, 'client_affinity_enabled'),
      default_site_hostname: resource.field(self._.blocks, 'default_site_hostname'),
      enabled: resource.field(self._.blocks, 'enabled'),
      https_only: resource.field(self._.blocks, 'https_only'),
      id: resource.field(self._.blocks, 'id'),
      key_vault_reference_identity_id: resource.field(self._.blocks, 'key_vault_reference_identity_id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      site_credential: resource.field(self._.blocks, 'site_credential'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    app_service_slot_custom_hostname_binding(name, block): {
      local resource = blockType.resource('azurerm_app_service_slot_custom_hostname_binding', name),
      _: resource._(block, {
        app_service_slot_id: build.template(block.app_service_slot_id),
        hostname: build.template(block.hostname),
        id: build.template(std.get(block, 'id', null)),
        ssl_state: build.template(std.get(block, 'ssl_state', null)),
        thumbprint: build.template(std.get(block, 'thumbprint', null)),
        virtual_ip: build.template(std.get(block, 'virtual_ip', null)),
      }),
      app_service_slot_id: resource.field(self._.blocks, 'app_service_slot_id'),
      hostname: resource.field(self._.blocks, 'hostname'),
      id: resource.field(self._.blocks, 'id'),
      ssl_state: resource.field(self._.blocks, 'ssl_state'),
      thumbprint: resource.field(self._.blocks, 'thumbprint'),
      virtual_ip: resource.field(self._.blocks, 'virtual_ip'),
    },
    app_service_slot_virtual_network_swift_connection(name, block): {
      local resource = blockType.resource('azurerm_app_service_slot_virtual_network_swift_connection', name),
      _: resource._(block, {
        app_service_id: build.template(block.app_service_id),
        id: build.template(std.get(block, 'id', null)),
        slot_name: build.template(block.slot_name),
        subnet_id: build.template(block.subnet_id),
      }),
      app_service_id: resource.field(self._.blocks, 'app_service_id'),
      id: resource.field(self._.blocks, 'id'),
      slot_name: resource.field(self._.blocks, 'slot_name'),
      subnet_id: resource.field(self._.blocks, 'subnet_id'),
    },
    app_service_source_control(name, block): {
      local resource = blockType.resource('azurerm_app_service_source_control', name),
      _: resource._(block, {
        app_id: build.template(block.app_id),
        branch: build.template(std.get(block, 'branch', null)),
        id: build.template(std.get(block, 'id', null)),
        repo_url: build.template(std.get(block, 'repo_url', null)),
        rollback_enabled: build.template(std.get(block, 'rollback_enabled', null)),
        scm_type: build.template(std.get(block, 'scm_type', null)),
        use_local_git: build.template(std.get(block, 'use_local_git', null)),
        use_manual_integration: build.template(std.get(block, 'use_manual_integration', null)),
        use_mercurial: build.template(std.get(block, 'use_mercurial', null)),
        uses_github_action: build.template(std.get(block, 'uses_github_action', null)),
      }),
      app_id: resource.field(self._.blocks, 'app_id'),
      branch: resource.field(self._.blocks, 'branch'),
      id: resource.field(self._.blocks, 'id'),
      repo_url: resource.field(self._.blocks, 'repo_url'),
      rollback_enabled: resource.field(self._.blocks, 'rollback_enabled'),
      scm_type: resource.field(self._.blocks, 'scm_type'),
      use_local_git: resource.field(self._.blocks, 'use_local_git'),
      use_manual_integration: resource.field(self._.blocks, 'use_manual_integration'),
      use_mercurial: resource.field(self._.blocks, 'use_mercurial'),
      uses_github_action: resource.field(self._.blocks, 'uses_github_action'),
    },
    app_service_source_control_slot(name, block): {
      local resource = blockType.resource('azurerm_app_service_source_control_slot', name),
      _: resource._(block, {
        branch: build.template(std.get(block, 'branch', null)),
        id: build.template(std.get(block, 'id', null)),
        repo_url: build.template(std.get(block, 'repo_url', null)),
        rollback_enabled: build.template(std.get(block, 'rollback_enabled', null)),
        scm_type: build.template(std.get(block, 'scm_type', null)),
        slot_id: build.template(block.slot_id),
        use_local_git: build.template(std.get(block, 'use_local_git', null)),
        use_manual_integration: build.template(std.get(block, 'use_manual_integration', null)),
        use_mercurial: build.template(std.get(block, 'use_mercurial', null)),
        uses_github_action: build.template(std.get(block, 'uses_github_action', null)),
      }),
      branch: resource.field(self._.blocks, 'branch'),
      id: resource.field(self._.blocks, 'id'),
      repo_url: resource.field(self._.blocks, 'repo_url'),
      rollback_enabled: resource.field(self._.blocks, 'rollback_enabled'),
      scm_type: resource.field(self._.blocks, 'scm_type'),
      slot_id: resource.field(self._.blocks, 'slot_id'),
      use_local_git: resource.field(self._.blocks, 'use_local_git'),
      use_manual_integration: resource.field(self._.blocks, 'use_manual_integration'),
      use_mercurial: resource.field(self._.blocks, 'use_mercurial'),
      uses_github_action: resource.field(self._.blocks, 'uses_github_action'),
    },
    app_service_source_control_token(name, block): {
      local resource = blockType.resource('azurerm_app_service_source_control_token', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        token: build.template(block.token),
        token_secret: build.template(std.get(block, 'token_secret', null)),
        type: build.template(block.type),
      }),
      id: resource.field(self._.blocks, 'id'),
      token: resource.field(self._.blocks, 'token'),
      token_secret: resource.field(self._.blocks, 'token_secret'),
      type: resource.field(self._.blocks, 'type'),
    },
    app_service_virtual_network_swift_connection(name, block): {
      local resource = blockType.resource('azurerm_app_service_virtual_network_swift_connection', name),
      _: resource._(block, {
        app_service_id: build.template(block.app_service_id),
        id: build.template(std.get(block, 'id', null)),
        subnet_id: build.template(block.subnet_id),
      }),
      app_service_id: resource.field(self._.blocks, 'app_service_id'),
      id: resource.field(self._.blocks, 'id'),
      subnet_id: resource.field(self._.blocks, 'subnet_id'),
    },
    application_gateway(name, block): {
      local resource = blockType.resource('azurerm_application_gateway', name),
      _: resource._(block, {
        enable_http2: build.template(std.get(block, 'enable_http2', null)),
        fips_enabled: build.template(std.get(block, 'fips_enabled', null)),
        firewall_policy_id: build.template(std.get(block, 'firewall_policy_id', null)),
        force_firewall_policy_association: build.template(std.get(block, 'force_firewall_policy_association', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        private_endpoint_connection: build.template(std.get(block, 'private_endpoint_connection', null)),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
        zones: build.template(std.get(block, 'zones', null)),
      }),
      enable_http2: resource.field(self._.blocks, 'enable_http2'),
      fips_enabled: resource.field(self._.blocks, 'fips_enabled'),
      firewall_policy_id: resource.field(self._.blocks, 'firewall_policy_id'),
      force_firewall_policy_association: resource.field(self._.blocks, 'force_firewall_policy_association'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      private_endpoint_connection: resource.field(self._.blocks, 'private_endpoint_connection'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
      zones: resource.field(self._.blocks, 'zones'),
    },
    application_insights(name, block): {
      local resource = blockType.resource('azurerm_application_insights', name),
      _: resource._(block, {
        app_id: build.template(std.get(block, 'app_id', null)),
        application_type: build.template(block.application_type),
        connection_string: build.template(std.get(block, 'connection_string', null)),
        daily_data_cap_in_gb: build.template(std.get(block, 'daily_data_cap_in_gb', null)),
        daily_data_cap_notifications_disabled: build.template(std.get(block, 'daily_data_cap_notifications_disabled', null)),
        disable_ip_masking: build.template(std.get(block, 'disable_ip_masking', null)),
        force_customer_storage_for_profiler: build.template(std.get(block, 'force_customer_storage_for_profiler', null)),
        id: build.template(std.get(block, 'id', null)),
        instrumentation_key: build.template(std.get(block, 'instrumentation_key', null)),
        internet_ingestion_enabled: build.template(std.get(block, 'internet_ingestion_enabled', null)),
        internet_query_enabled: build.template(std.get(block, 'internet_query_enabled', null)),
        local_authentication_disabled: build.template(std.get(block, 'local_authentication_disabled', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        retention_in_days: build.template(std.get(block, 'retention_in_days', null)),
        sampling_percentage: build.template(std.get(block, 'sampling_percentage', null)),
        tags: build.template(std.get(block, 'tags', null)),
        workspace_id: build.template(std.get(block, 'workspace_id', null)),
      }),
      app_id: resource.field(self._.blocks, 'app_id'),
      application_type: resource.field(self._.blocks, 'application_type'),
      connection_string: resource.field(self._.blocks, 'connection_string'),
      daily_data_cap_in_gb: resource.field(self._.blocks, 'daily_data_cap_in_gb'),
      daily_data_cap_notifications_disabled: resource.field(self._.blocks, 'daily_data_cap_notifications_disabled'),
      disable_ip_masking: resource.field(self._.blocks, 'disable_ip_masking'),
      force_customer_storage_for_profiler: resource.field(self._.blocks, 'force_customer_storage_for_profiler'),
      id: resource.field(self._.blocks, 'id'),
      instrumentation_key: resource.field(self._.blocks, 'instrumentation_key'),
      internet_ingestion_enabled: resource.field(self._.blocks, 'internet_ingestion_enabled'),
      internet_query_enabled: resource.field(self._.blocks, 'internet_query_enabled'),
      local_authentication_disabled: resource.field(self._.blocks, 'local_authentication_disabled'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      retention_in_days: resource.field(self._.blocks, 'retention_in_days'),
      sampling_percentage: resource.field(self._.blocks, 'sampling_percentage'),
      tags: resource.field(self._.blocks, 'tags'),
      workspace_id: resource.field(self._.blocks, 'workspace_id'),
    },
    application_insights_analytics_item(name, block): {
      local resource = blockType.resource('azurerm_application_insights_analytics_item', name),
      _: resource._(block, {
        application_insights_id: build.template(block.application_insights_id),
        content: build.template(block.content),
        function_alias: build.template(std.get(block, 'function_alias', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        scope: build.template(block.scope),
        time_created: build.template(std.get(block, 'time_created', null)),
        time_modified: build.template(std.get(block, 'time_modified', null)),
        type: build.template(block.type),
        version: build.template(std.get(block, 'version', null)),
      }),
      application_insights_id: resource.field(self._.blocks, 'application_insights_id'),
      content: resource.field(self._.blocks, 'content'),
      function_alias: resource.field(self._.blocks, 'function_alias'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      scope: resource.field(self._.blocks, 'scope'),
      time_created: resource.field(self._.blocks, 'time_created'),
      time_modified: resource.field(self._.blocks, 'time_modified'),
      type: resource.field(self._.blocks, 'type'),
      version: resource.field(self._.blocks, 'version'),
    },
    application_insights_api_key(name, block): {
      local resource = blockType.resource('azurerm_application_insights_api_key', name),
      _: resource._(block, {
        api_key: build.template(std.get(block, 'api_key', null)),
        application_insights_id: build.template(block.application_insights_id),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        read_permissions: build.template(std.get(block, 'read_permissions', null)),
        write_permissions: build.template(std.get(block, 'write_permissions', null)),
      }),
      api_key: resource.field(self._.blocks, 'api_key'),
      application_insights_id: resource.field(self._.blocks, 'application_insights_id'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      read_permissions: resource.field(self._.blocks, 'read_permissions'),
      write_permissions: resource.field(self._.blocks, 'write_permissions'),
    },
    application_insights_smart_detection_rule(name, block): {
      local resource = blockType.resource('azurerm_application_insights_smart_detection_rule', name),
      _: resource._(block, {
        additional_email_recipients: build.template(std.get(block, 'additional_email_recipients', null)),
        application_insights_id: build.template(block.application_insights_id),
        enabled: build.template(std.get(block, 'enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        send_emails_to_subscription_owners: build.template(std.get(block, 'send_emails_to_subscription_owners', null)),
      }),
      additional_email_recipients: resource.field(self._.blocks, 'additional_email_recipients'),
      application_insights_id: resource.field(self._.blocks, 'application_insights_id'),
      enabled: resource.field(self._.blocks, 'enabled'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      send_emails_to_subscription_owners: resource.field(self._.blocks, 'send_emails_to_subscription_owners'),
    },
    application_insights_standard_web_test(name, block): {
      local resource = blockType.resource('azurerm_application_insights_standard_web_test', name),
      _: resource._(block, {
        application_insights_id: build.template(block.application_insights_id),
        description: build.template(std.get(block, 'description', null)),
        enabled: build.template(std.get(block, 'enabled', null)),
        frequency: build.template(std.get(block, 'frequency', null)),
        geo_locations: build.template(block.geo_locations),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        retry_enabled: build.template(std.get(block, 'retry_enabled', null)),
        synthetic_monitor_id: build.template(std.get(block, 'synthetic_monitor_id', null)),
        tags: build.template(std.get(block, 'tags', null)),
        timeout: build.template(std.get(block, 'timeout', null)),
      }),
      application_insights_id: resource.field(self._.blocks, 'application_insights_id'),
      description: resource.field(self._.blocks, 'description'),
      enabled: resource.field(self._.blocks, 'enabled'),
      frequency: resource.field(self._.blocks, 'frequency'),
      geo_locations: resource.field(self._.blocks, 'geo_locations'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      retry_enabled: resource.field(self._.blocks, 'retry_enabled'),
      synthetic_monitor_id: resource.field(self._.blocks, 'synthetic_monitor_id'),
      tags: resource.field(self._.blocks, 'tags'),
      timeout: resource.field(self._.blocks, 'timeout'),
    },
    application_insights_web_test(name, block): {
      local resource = blockType.resource('azurerm_application_insights_web_test', name),
      _: resource._(block, {
        application_insights_id: build.template(block.application_insights_id),
        configuration: build.template(block.configuration),
        description: build.template(std.get(block, 'description', null)),
        enabled: build.template(std.get(block, 'enabled', null)),
        frequency: build.template(std.get(block, 'frequency', null)),
        geo_locations: build.template(block.geo_locations),
        id: build.template(std.get(block, 'id', null)),
        kind: build.template(block.kind),
        location: build.template(block.location),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        retry_enabled: build.template(std.get(block, 'retry_enabled', null)),
        synthetic_monitor_id: build.template(std.get(block, 'synthetic_monitor_id', null)),
        tags: build.template(std.get(block, 'tags', null)),
        timeout: build.template(std.get(block, 'timeout', null)),
      }),
      application_insights_id: resource.field(self._.blocks, 'application_insights_id'),
      configuration: resource.field(self._.blocks, 'configuration'),
      description: resource.field(self._.blocks, 'description'),
      enabled: resource.field(self._.blocks, 'enabled'),
      frequency: resource.field(self._.blocks, 'frequency'),
      geo_locations: resource.field(self._.blocks, 'geo_locations'),
      id: resource.field(self._.blocks, 'id'),
      kind: resource.field(self._.blocks, 'kind'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      retry_enabled: resource.field(self._.blocks, 'retry_enabled'),
      synthetic_monitor_id: resource.field(self._.blocks, 'synthetic_monitor_id'),
      tags: resource.field(self._.blocks, 'tags'),
      timeout: resource.field(self._.blocks, 'timeout'),
    },
    application_insights_workbook(name, block): {
      local resource = blockType.resource('azurerm_application_insights_workbook', name),
      _: resource._(block, {
        category: build.template(std.get(block, 'category', null)),
        data_json: build.template(block.data_json),
        description: build.template(std.get(block, 'description', null)),
        display_name: build.template(block.display_name),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        source_id: build.template(std.get(block, 'source_id', null)),
        storage_container_id: build.template(std.get(block, 'storage_container_id', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      category: resource.field(self._.blocks, 'category'),
      data_json: resource.field(self._.blocks, 'data_json'),
      description: resource.field(self._.blocks, 'description'),
      display_name: resource.field(self._.blocks, 'display_name'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      source_id: resource.field(self._.blocks, 'source_id'),
      storage_container_id: resource.field(self._.blocks, 'storage_container_id'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    application_insights_workbook_template(name, block): {
      local resource = blockType.resource('azurerm_application_insights_workbook_template', name),
      _: resource._(block, {
        author: build.template(std.get(block, 'author', null)),
        id: build.template(std.get(block, 'id', null)),
        localized: build.template(std.get(block, 'localized', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        priority: build.template(std.get(block, 'priority', null)),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
        template_data: build.template(block.template_data),
      }),
      author: resource.field(self._.blocks, 'author'),
      id: resource.field(self._.blocks, 'id'),
      localized: resource.field(self._.blocks, 'localized'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      priority: resource.field(self._.blocks, 'priority'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
      template_data: resource.field(self._.blocks, 'template_data'),
    },
    application_load_balancer(name, block): {
      local resource = blockType.resource('azurerm_application_load_balancer', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        primary_configuration_endpoint: build.template(std.get(block, 'primary_configuration_endpoint', null)),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      primary_configuration_endpoint: resource.field(self._.blocks, 'primary_configuration_endpoint'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    application_load_balancer_frontend(name, block): {
      local resource = blockType.resource('azurerm_application_load_balancer_frontend', name),
      _: resource._(block, {
        application_load_balancer_id: build.template(block.application_load_balancer_id),
        fully_qualified_domain_name: build.template(std.get(block, 'fully_qualified_domain_name', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      application_load_balancer_id: resource.field(self._.blocks, 'application_load_balancer_id'),
      fully_qualified_domain_name: resource.field(self._.blocks, 'fully_qualified_domain_name'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    application_load_balancer_subnet_association(name, block): {
      local resource = blockType.resource('azurerm_application_load_balancer_subnet_association', name),
      _: resource._(block, {
        application_load_balancer_id: build.template(block.application_load_balancer_id),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        subnet_id: build.template(block.subnet_id),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      application_load_balancer_id: resource.field(self._.blocks, 'application_load_balancer_id'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      subnet_id: resource.field(self._.blocks, 'subnet_id'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    application_security_group(name, block): {
      local resource = blockType.resource('azurerm_application_security_group', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    arc_kubernetes_cluster(name, block): {
      local resource = blockType.resource('azurerm_arc_kubernetes_cluster', name),
      _: resource._(block, {
        agent_public_key_certificate: build.template(block.agent_public_key_certificate),
        agent_version: build.template(std.get(block, 'agent_version', null)),
        distribution: build.template(std.get(block, 'distribution', null)),
        id: build.template(std.get(block, 'id', null)),
        infrastructure: build.template(std.get(block, 'infrastructure', null)),
        kubernetes_version: build.template(std.get(block, 'kubernetes_version', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        offering: build.template(std.get(block, 'offering', null)),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
        total_core_count: build.template(std.get(block, 'total_core_count', null)),
        total_node_count: build.template(std.get(block, 'total_node_count', null)),
      }),
      agent_public_key_certificate: resource.field(self._.blocks, 'agent_public_key_certificate'),
      agent_version: resource.field(self._.blocks, 'agent_version'),
      distribution: resource.field(self._.blocks, 'distribution'),
      id: resource.field(self._.blocks, 'id'),
      infrastructure: resource.field(self._.blocks, 'infrastructure'),
      kubernetes_version: resource.field(self._.blocks, 'kubernetes_version'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      offering: resource.field(self._.blocks, 'offering'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
      total_core_count: resource.field(self._.blocks, 'total_core_count'),
      total_node_count: resource.field(self._.blocks, 'total_node_count'),
    },
    arc_kubernetes_cluster_extension(name, block): {
      local resource = blockType.resource('azurerm_arc_kubernetes_cluster_extension', name),
      _: resource._(block, {
        cluster_id: build.template(block.cluster_id),
        configuration_protected_settings: build.template(std.get(block, 'configuration_protected_settings', null)),
        configuration_settings: build.template(std.get(block, 'configuration_settings', null)),
        current_version: build.template(std.get(block, 'current_version', null)),
        extension_type: build.template(block.extension_type),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        release_namespace: build.template(std.get(block, 'release_namespace', null)),
        release_train: build.template(std.get(block, 'release_train', null)),
        target_namespace: build.template(std.get(block, 'target_namespace', null)),
        version: build.template(std.get(block, 'version', null)),
      }),
      cluster_id: resource.field(self._.blocks, 'cluster_id'),
      configuration_protected_settings: resource.field(self._.blocks, 'configuration_protected_settings'),
      configuration_settings: resource.field(self._.blocks, 'configuration_settings'),
      current_version: resource.field(self._.blocks, 'current_version'),
      extension_type: resource.field(self._.blocks, 'extension_type'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      release_namespace: resource.field(self._.blocks, 'release_namespace'),
      release_train: resource.field(self._.blocks, 'release_train'),
      target_namespace: resource.field(self._.blocks, 'target_namespace'),
      version: resource.field(self._.blocks, 'version'),
    },
    arc_kubernetes_flux_configuration(name, block): {
      local resource = blockType.resource('azurerm_arc_kubernetes_flux_configuration', name),
      _: resource._(block, {
        cluster_id: build.template(block.cluster_id),
        continuous_reconciliation_enabled: build.template(std.get(block, 'continuous_reconciliation_enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        namespace: build.template(block.namespace),
        scope: build.template(std.get(block, 'scope', null)),
      }),
      cluster_id: resource.field(self._.blocks, 'cluster_id'),
      continuous_reconciliation_enabled: resource.field(self._.blocks, 'continuous_reconciliation_enabled'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      namespace: resource.field(self._.blocks, 'namespace'),
      scope: resource.field(self._.blocks, 'scope'),
    },
    arc_kubernetes_provisioned_cluster(name, block): {
      local resource = blockType.resource('azurerm_arc_kubernetes_provisioned_cluster', name),
      _: resource._(block, {
        agent_version: build.template(std.get(block, 'agent_version', null)),
        arc_agent_auto_upgrade_enabled: build.template(std.get(block, 'arc_agent_auto_upgrade_enabled', null)),
        arc_agent_desired_version: build.template(std.get(block, 'arc_agent_desired_version', null)),
        distribution: build.template(std.get(block, 'distribution', null)),
        id: build.template(std.get(block, 'id', null)),
        infrastructure: build.template(std.get(block, 'infrastructure', null)),
        kubernetes_version: build.template(std.get(block, 'kubernetes_version', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        offering: build.template(std.get(block, 'offering', null)),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
        total_core_count: build.template(std.get(block, 'total_core_count', null)),
        total_node_count: build.template(std.get(block, 'total_node_count', null)),
      }),
      agent_version: resource.field(self._.blocks, 'agent_version'),
      arc_agent_auto_upgrade_enabled: resource.field(self._.blocks, 'arc_agent_auto_upgrade_enabled'),
      arc_agent_desired_version: resource.field(self._.blocks, 'arc_agent_desired_version'),
      distribution: resource.field(self._.blocks, 'distribution'),
      id: resource.field(self._.blocks, 'id'),
      infrastructure: resource.field(self._.blocks, 'infrastructure'),
      kubernetes_version: resource.field(self._.blocks, 'kubernetes_version'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      offering: resource.field(self._.blocks, 'offering'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
      total_core_count: resource.field(self._.blocks, 'total_core_count'),
      total_node_count: resource.field(self._.blocks, 'total_node_count'),
    },
    arc_machine(name, block): {
      local resource = blockType.resource('azurerm_arc_machine', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        kind: build.template(block.kind),
        location: build.template(block.location),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      kind: resource.field(self._.blocks, 'kind'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    arc_machine_automanage_configuration_assignment(name, block): {
      local resource = blockType.resource('azurerm_arc_machine_automanage_configuration_assignment', name),
      _: resource._(block, {
        arc_machine_id: build.template(block.arc_machine_id),
        configuration_id: build.template(block.configuration_id),
        id: build.template(std.get(block, 'id', null)),
      }),
      arc_machine_id: resource.field(self._.blocks, 'arc_machine_id'),
      configuration_id: resource.field(self._.blocks, 'configuration_id'),
      id: resource.field(self._.blocks, 'id'),
    },
    arc_machine_extension(name, block): {
      local resource = blockType.resource('azurerm_arc_machine_extension', name),
      _: resource._(block, {
        arc_machine_id: build.template(block.arc_machine_id),
        automatic_upgrade_enabled: build.template(std.get(block, 'automatic_upgrade_enabled', null)),
        force_update_tag: build.template(std.get(block, 'force_update_tag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        protected_settings: build.template(std.get(block, 'protected_settings', null)),
        publisher: build.template(block.publisher),
        settings: build.template(std.get(block, 'settings', null)),
        tags: build.template(std.get(block, 'tags', null)),
        type: build.template(block.type),
        type_handler_version: build.template(std.get(block, 'type_handler_version', null)),
      }),
      arc_machine_id: resource.field(self._.blocks, 'arc_machine_id'),
      automatic_upgrade_enabled: resource.field(self._.blocks, 'automatic_upgrade_enabled'),
      force_update_tag: resource.field(self._.blocks, 'force_update_tag'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      protected_settings: resource.field(self._.blocks, 'protected_settings'),
      publisher: resource.field(self._.blocks, 'publisher'),
      settings: resource.field(self._.blocks, 'settings'),
      tags: resource.field(self._.blocks, 'tags'),
      type: resource.field(self._.blocks, 'type'),
      type_handler_version: resource.field(self._.blocks, 'type_handler_version'),
    },
    arc_private_link_scope(name, block): {
      local resource = blockType.resource('azurerm_arc_private_link_scope', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        public_network_access_enabled: build.template(std.get(block, 'public_network_access_enabled', null)),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      public_network_access_enabled: resource.field(self._.blocks, 'public_network_access_enabled'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    arc_resource_bridge_appliance(name, block): {
      local resource = blockType.resource('azurerm_arc_resource_bridge_appliance', name),
      _: resource._(block, {
        distro: build.template(block.distro),
        id: build.template(std.get(block, 'id', null)),
        infrastructure_provider: build.template(block.infrastructure_provider),
        location: build.template(block.location),
        name: build.template(block.name),
        public_key_base64: build.template(std.get(block, 'public_key_base64', null)),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      distro: resource.field(self._.blocks, 'distro'),
      id: resource.field(self._.blocks, 'id'),
      infrastructure_provider: resource.field(self._.blocks, 'infrastructure_provider'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      public_key_base64: resource.field(self._.blocks, 'public_key_base64'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    attestation_provider(name, block): {
      local resource = blockType.resource('azurerm_attestation_provider', name),
      _: resource._(block, {
        attestation_uri: build.template(std.get(block, 'attestation_uri', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        open_enclave_policy_base64: build.template(std.get(block, 'open_enclave_policy_base64', null)),
        policy_signing_certificate_data: build.template(std.get(block, 'policy_signing_certificate_data', null)),
        resource_group_name: build.template(block.resource_group_name),
        sev_snp_policy_base64: build.template(std.get(block, 'sev_snp_policy_base64', null)),
        sgx_enclave_policy_base64: build.template(std.get(block, 'sgx_enclave_policy_base64', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tpm_policy_base64: build.template(std.get(block, 'tpm_policy_base64', null)),
        trust_model: build.template(std.get(block, 'trust_model', null)),
      }),
      attestation_uri: resource.field(self._.blocks, 'attestation_uri'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      open_enclave_policy_base64: resource.field(self._.blocks, 'open_enclave_policy_base64'),
      policy_signing_certificate_data: resource.field(self._.blocks, 'policy_signing_certificate_data'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      sev_snp_policy_base64: resource.field(self._.blocks, 'sev_snp_policy_base64'),
      sgx_enclave_policy_base64: resource.field(self._.blocks, 'sgx_enclave_policy_base64'),
      tags: resource.field(self._.blocks, 'tags'),
      tpm_policy_base64: resource.field(self._.blocks, 'tpm_policy_base64'),
      trust_model: resource.field(self._.blocks, 'trust_model'),
    },
    automanage_configuration(name, block): {
      local resource = blockType.resource('azurerm_automanage_configuration', name),
      _: resource._(block, {
        automation_account_enabled: build.template(std.get(block, 'automation_account_enabled', null)),
        boot_diagnostics_enabled: build.template(std.get(block, 'boot_diagnostics_enabled', null)),
        defender_for_cloud_enabled: build.template(std.get(block, 'defender_for_cloud_enabled', null)),
        guest_configuration_enabled: build.template(std.get(block, 'guest_configuration_enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        log_analytics_enabled: build.template(std.get(block, 'log_analytics_enabled', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        status_change_alert_enabled: build.template(std.get(block, 'status_change_alert_enabled', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      automation_account_enabled: resource.field(self._.blocks, 'automation_account_enabled'),
      boot_diagnostics_enabled: resource.field(self._.blocks, 'boot_diagnostics_enabled'),
      defender_for_cloud_enabled: resource.field(self._.blocks, 'defender_for_cloud_enabled'),
      guest_configuration_enabled: resource.field(self._.blocks, 'guest_configuration_enabled'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      log_analytics_enabled: resource.field(self._.blocks, 'log_analytics_enabled'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      status_change_alert_enabled: resource.field(self._.blocks, 'status_change_alert_enabled'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    automation_account(name, block): {
      local resource = blockType.resource('azurerm_automation_account', name),
      _: resource._(block, {
        dsc_primary_access_key: build.template(std.get(block, 'dsc_primary_access_key', null)),
        dsc_secondary_access_key: build.template(std.get(block, 'dsc_secondary_access_key', null)),
        dsc_server_endpoint: build.template(std.get(block, 'dsc_server_endpoint', null)),
        hybrid_service_url: build.template(std.get(block, 'hybrid_service_url', null)),
        id: build.template(std.get(block, 'id', null)),
        local_authentication_enabled: build.template(std.get(block, 'local_authentication_enabled', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        private_endpoint_connection: build.template(std.get(block, 'private_endpoint_connection', null)),
        public_network_access_enabled: build.template(std.get(block, 'public_network_access_enabled', null)),
        resource_group_name: build.template(block.resource_group_name),
        sku_name: build.template(block.sku_name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      dsc_primary_access_key: resource.field(self._.blocks, 'dsc_primary_access_key'),
      dsc_secondary_access_key: resource.field(self._.blocks, 'dsc_secondary_access_key'),
      dsc_server_endpoint: resource.field(self._.blocks, 'dsc_server_endpoint'),
      hybrid_service_url: resource.field(self._.blocks, 'hybrid_service_url'),
      id: resource.field(self._.blocks, 'id'),
      local_authentication_enabled: resource.field(self._.blocks, 'local_authentication_enabled'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      private_endpoint_connection: resource.field(self._.blocks, 'private_endpoint_connection'),
      public_network_access_enabled: resource.field(self._.blocks, 'public_network_access_enabled'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      sku_name: resource.field(self._.blocks, 'sku_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    automation_certificate(name, block): {
      local resource = blockType.resource('azurerm_automation_certificate', name),
      _: resource._(block, {
        automation_account_name: build.template(block.automation_account_name),
        base64: build.template(block.base64),
        description: build.template(std.get(block, 'description', null)),
        exportable: build.template(std.get(block, 'exportable', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        thumbprint: build.template(std.get(block, 'thumbprint', null)),
      }),
      automation_account_name: resource.field(self._.blocks, 'automation_account_name'),
      base64: resource.field(self._.blocks, 'base64'),
      description: resource.field(self._.blocks, 'description'),
      exportable: resource.field(self._.blocks, 'exportable'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      thumbprint: resource.field(self._.blocks, 'thumbprint'),
    },
    automation_connection(name, block): {
      local resource = blockType.resource('azurerm_automation_connection', name),
      _: resource._(block, {
        automation_account_name: build.template(block.automation_account_name),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        type: build.template(block.type),
        values: build.template(block.values),
      }),
      automation_account_name: resource.field(self._.blocks, 'automation_account_name'),
      description: resource.field(self._.blocks, 'description'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      type: resource.field(self._.blocks, 'type'),
      values: resource.field(self._.blocks, 'values'),
    },
    automation_connection_certificate(name, block): {
      local resource = blockType.resource('azurerm_automation_connection_certificate', name),
      _: resource._(block, {
        automation_account_name: build.template(block.automation_account_name),
        automation_certificate_name: build.template(block.automation_certificate_name),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        subscription_id: build.template(block.subscription_id),
      }),
      automation_account_name: resource.field(self._.blocks, 'automation_account_name'),
      automation_certificate_name: resource.field(self._.blocks, 'automation_certificate_name'),
      description: resource.field(self._.blocks, 'description'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      subscription_id: resource.field(self._.blocks, 'subscription_id'),
    },
    automation_connection_classic_certificate(name, block): {
      local resource = blockType.resource('azurerm_automation_connection_classic_certificate', name),
      _: resource._(block, {
        automation_account_name: build.template(block.automation_account_name),
        certificate_asset_name: build.template(block.certificate_asset_name),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        subscription_id: build.template(block.subscription_id),
        subscription_name: build.template(block.subscription_name),
      }),
      automation_account_name: resource.field(self._.blocks, 'automation_account_name'),
      certificate_asset_name: resource.field(self._.blocks, 'certificate_asset_name'),
      description: resource.field(self._.blocks, 'description'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      subscription_id: resource.field(self._.blocks, 'subscription_id'),
      subscription_name: resource.field(self._.blocks, 'subscription_name'),
    },
    automation_connection_service_principal(name, block): {
      local resource = blockType.resource('azurerm_automation_connection_service_principal', name),
      _: resource._(block, {
        application_id: build.template(block.application_id),
        automation_account_name: build.template(block.automation_account_name),
        certificate_thumbprint: build.template(block.certificate_thumbprint),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        subscription_id: build.template(block.subscription_id),
        tenant_id: build.template(block.tenant_id),
      }),
      application_id: resource.field(self._.blocks, 'application_id'),
      automation_account_name: resource.field(self._.blocks, 'automation_account_name'),
      certificate_thumbprint: resource.field(self._.blocks, 'certificate_thumbprint'),
      description: resource.field(self._.blocks, 'description'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      subscription_id: resource.field(self._.blocks, 'subscription_id'),
      tenant_id: resource.field(self._.blocks, 'tenant_id'),
    },
    automation_connection_type(name, block): {
      local resource = blockType.resource('azurerm_automation_connection_type', name),
      _: resource._(block, {
        automation_account_name: build.template(block.automation_account_name),
        id: build.template(std.get(block, 'id', null)),
        is_global: build.template(std.get(block, 'is_global', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
      }),
      automation_account_name: resource.field(self._.blocks, 'automation_account_name'),
      id: resource.field(self._.blocks, 'id'),
      is_global: resource.field(self._.blocks, 'is_global'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
    },
    automation_credential(name, block): {
      local resource = blockType.resource('azurerm_automation_credential', name),
      _: resource._(block, {
        automation_account_name: build.template(block.automation_account_name),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        password: build.template(block.password),
        resource_group_name: build.template(block.resource_group_name),
        username: build.template(block.username),
      }),
      automation_account_name: resource.field(self._.blocks, 'automation_account_name'),
      description: resource.field(self._.blocks, 'description'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      password: resource.field(self._.blocks, 'password'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      username: resource.field(self._.blocks, 'username'),
    },
    automation_dsc_configuration(name, block): {
      local resource = blockType.resource('azurerm_automation_dsc_configuration', name),
      _: resource._(block, {
        automation_account_name: build.template(block.automation_account_name),
        content_embedded: build.template(block.content_embedded),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        log_verbose: build.template(std.get(block, 'log_verbose', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        state: build.template(std.get(block, 'state', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      automation_account_name: resource.field(self._.blocks, 'automation_account_name'),
      content_embedded: resource.field(self._.blocks, 'content_embedded'),
      description: resource.field(self._.blocks, 'description'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      log_verbose: resource.field(self._.blocks, 'log_verbose'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      state: resource.field(self._.blocks, 'state'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    automation_dsc_nodeconfiguration(name, block): {
      local resource = blockType.resource('azurerm_automation_dsc_nodeconfiguration', name),
      _: resource._(block, {
        automation_account_name: build.template(block.automation_account_name),
        configuration_name: build.template(std.get(block, 'configuration_name', null)),
        content_embedded: build.template(block.content_embedded),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
      }),
      automation_account_name: resource.field(self._.blocks, 'automation_account_name'),
      configuration_name: resource.field(self._.blocks, 'configuration_name'),
      content_embedded: resource.field(self._.blocks, 'content_embedded'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
    },
    automation_hybrid_runbook_worker(name, block): {
      local resource = blockType.resource('azurerm_automation_hybrid_runbook_worker', name),
      _: resource._(block, {
        automation_account_name: build.template(block.automation_account_name),
        id: build.template(std.get(block, 'id', null)),
        ip: build.template(std.get(block, 'ip', null)),
        last_seen_date_time: build.template(std.get(block, 'last_seen_date_time', null)),
        registration_date_time: build.template(std.get(block, 'registration_date_time', null)),
        resource_group_name: build.template(block.resource_group_name),
        vm_resource_id: build.template(block.vm_resource_id),
        worker_group_name: build.template(block.worker_group_name),
        worker_id: build.template(block.worker_id),
        worker_name: build.template(std.get(block, 'worker_name', null)),
        worker_type: build.template(std.get(block, 'worker_type', null)),
      }),
      automation_account_name: resource.field(self._.blocks, 'automation_account_name'),
      id: resource.field(self._.blocks, 'id'),
      ip: resource.field(self._.blocks, 'ip'),
      last_seen_date_time: resource.field(self._.blocks, 'last_seen_date_time'),
      registration_date_time: resource.field(self._.blocks, 'registration_date_time'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      vm_resource_id: resource.field(self._.blocks, 'vm_resource_id'),
      worker_group_name: resource.field(self._.blocks, 'worker_group_name'),
      worker_id: resource.field(self._.blocks, 'worker_id'),
      worker_name: resource.field(self._.blocks, 'worker_name'),
      worker_type: resource.field(self._.blocks, 'worker_type'),
    },
    automation_hybrid_runbook_worker_group(name, block): {
      local resource = blockType.resource('azurerm_automation_hybrid_runbook_worker_group', name),
      _: resource._(block, {
        automation_account_name: build.template(block.automation_account_name),
        credential_name: build.template(std.get(block, 'credential_name', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
      }),
      automation_account_name: resource.field(self._.blocks, 'automation_account_name'),
      credential_name: resource.field(self._.blocks, 'credential_name'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
    },
    automation_job_schedule(name, block): {
      local resource = blockType.resource('azurerm_automation_job_schedule', name),
      _: resource._(block, {
        automation_account_name: build.template(block.automation_account_name),
        id: build.template(std.get(block, 'id', null)),
        job_schedule_id: build.template(std.get(block, 'job_schedule_id', null)),
        parameters: build.template(std.get(block, 'parameters', null)),
        resource_group_name: build.template(block.resource_group_name),
        resource_manager_id: build.template(std.get(block, 'resource_manager_id', null)),
        run_on: build.template(std.get(block, 'run_on', null)),
        runbook_name: build.template(block.runbook_name),
        schedule_name: build.template(block.schedule_name),
      }),
      automation_account_name: resource.field(self._.blocks, 'automation_account_name'),
      id: resource.field(self._.blocks, 'id'),
      job_schedule_id: resource.field(self._.blocks, 'job_schedule_id'),
      parameters: resource.field(self._.blocks, 'parameters'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      resource_manager_id: resource.field(self._.blocks, 'resource_manager_id'),
      run_on: resource.field(self._.blocks, 'run_on'),
      runbook_name: resource.field(self._.blocks, 'runbook_name'),
      schedule_name: resource.field(self._.blocks, 'schedule_name'),
    },
    automation_module(name, block): {
      local resource = blockType.resource('azurerm_automation_module', name),
      _: resource._(block, {
        automation_account_name: build.template(block.automation_account_name),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
      }),
      automation_account_name: resource.field(self._.blocks, 'automation_account_name'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
    },
    automation_powershell72_module(name, block): {
      local resource = blockType.resource('azurerm_automation_powershell72_module', name),
      _: resource._(block, {
        automation_account_id: build.template(block.automation_account_id),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      automation_account_id: resource.field(self._.blocks, 'automation_account_id'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    automation_python3_package(name, block): {
      local resource = blockType.resource('azurerm_automation_python3_package', name),
      _: resource._(block, {
        automation_account_name: build.template(block.automation_account_name),
        content_uri: build.template(block.content_uri),
        content_version: build.template(std.get(block, 'content_version', null)),
        hash_algorithm: build.template(std.get(block, 'hash_algorithm', null)),
        hash_value: build.template(std.get(block, 'hash_value', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      automation_account_name: resource.field(self._.blocks, 'automation_account_name'),
      content_uri: resource.field(self._.blocks, 'content_uri'),
      content_version: resource.field(self._.blocks, 'content_version'),
      hash_algorithm: resource.field(self._.blocks, 'hash_algorithm'),
      hash_value: resource.field(self._.blocks, 'hash_value'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    automation_runbook(name, block): {
      local resource = blockType.resource('azurerm_automation_runbook', name),
      _: resource._(block, {
        automation_account_name: build.template(block.automation_account_name),
        content: build.template(std.get(block, 'content', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        job_schedule: build.template(std.get(block, 'job_schedule', null)),
        location: build.template(block.location),
        log_activity_trace_level: build.template(std.get(block, 'log_activity_trace_level', null)),
        log_progress: build.template(block.log_progress),
        log_verbose: build.template(block.log_verbose),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        runbook_type: build.template(block.runbook_type),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      automation_account_name: resource.field(self._.blocks, 'automation_account_name'),
      content: resource.field(self._.blocks, 'content'),
      description: resource.field(self._.blocks, 'description'),
      id: resource.field(self._.blocks, 'id'),
      job_schedule: resource.field(self._.blocks, 'job_schedule'),
      location: resource.field(self._.blocks, 'location'),
      log_activity_trace_level: resource.field(self._.blocks, 'log_activity_trace_level'),
      log_progress: resource.field(self._.blocks, 'log_progress'),
      log_verbose: resource.field(self._.blocks, 'log_verbose'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      runbook_type: resource.field(self._.blocks, 'runbook_type'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    automation_schedule(name, block): {
      local resource = blockType.resource('azurerm_automation_schedule', name),
      _: resource._(block, {
        automation_account_name: build.template(block.automation_account_name),
        description: build.template(std.get(block, 'description', null)),
        expiry_time: build.template(std.get(block, 'expiry_time', null)),
        frequency: build.template(block.frequency),
        id: build.template(std.get(block, 'id', null)),
        interval: build.template(std.get(block, 'interval', null)),
        month_days: build.template(std.get(block, 'month_days', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        start_time: build.template(std.get(block, 'start_time', null)),
        timezone: build.template(std.get(block, 'timezone', null)),
        week_days: build.template(std.get(block, 'week_days', null)),
      }),
      automation_account_name: resource.field(self._.blocks, 'automation_account_name'),
      description: resource.field(self._.blocks, 'description'),
      expiry_time: resource.field(self._.blocks, 'expiry_time'),
      frequency: resource.field(self._.blocks, 'frequency'),
      id: resource.field(self._.blocks, 'id'),
      interval: resource.field(self._.blocks, 'interval'),
      month_days: resource.field(self._.blocks, 'month_days'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      start_time: resource.field(self._.blocks, 'start_time'),
      timezone: resource.field(self._.blocks, 'timezone'),
      week_days: resource.field(self._.blocks, 'week_days'),
    },
    automation_software_update_configuration(name, block): {
      local resource = blockType.resource('azurerm_automation_software_update_configuration', name),
      _: resource._(block, {
        automation_account_id: build.template(block.automation_account_id),
        duration: build.template(std.get(block, 'duration', null)),
        error_code: build.template(std.get(block, 'error_code', null)),
        error_message: build.template(std.get(block, 'error_message', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        non_azure_computer_names: build.template(std.get(block, 'non_azure_computer_names', null)),
        virtual_machine_ids: build.template(std.get(block, 'virtual_machine_ids', null)),
      }),
      automation_account_id: resource.field(self._.blocks, 'automation_account_id'),
      duration: resource.field(self._.blocks, 'duration'),
      error_code: resource.field(self._.blocks, 'error_code'),
      error_message: resource.field(self._.blocks, 'error_message'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      non_azure_computer_names: resource.field(self._.blocks, 'non_azure_computer_names'),
      virtual_machine_ids: resource.field(self._.blocks, 'virtual_machine_ids'),
    },
    automation_source_control(name, block): {
      local resource = blockType.resource('azurerm_automation_source_control', name),
      _: resource._(block, {
        automatic_sync: build.template(std.get(block, 'automatic_sync', null)),
        automation_account_id: build.template(block.automation_account_id),
        branch: build.template(std.get(block, 'branch', null)),
        description: build.template(std.get(block, 'description', null)),
        folder_path: build.template(block.folder_path),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        publish_runbook_enabled: build.template(std.get(block, 'publish_runbook_enabled', null)),
        repository_url: build.template(block.repository_url),
        source_control_type: build.template(block.source_control_type),
      }),
      automatic_sync: resource.field(self._.blocks, 'automatic_sync'),
      automation_account_id: resource.field(self._.blocks, 'automation_account_id'),
      branch: resource.field(self._.blocks, 'branch'),
      description: resource.field(self._.blocks, 'description'),
      folder_path: resource.field(self._.blocks, 'folder_path'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      publish_runbook_enabled: resource.field(self._.blocks, 'publish_runbook_enabled'),
      repository_url: resource.field(self._.blocks, 'repository_url'),
      source_control_type: resource.field(self._.blocks, 'source_control_type'),
    },
    automation_variable_bool(name, block): {
      local resource = blockType.resource('azurerm_automation_variable_bool', name),
      _: resource._(block, {
        automation_account_name: build.template(block.automation_account_name),
        description: build.template(std.get(block, 'description', null)),
        encrypted: build.template(std.get(block, 'encrypted', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        value: build.template(std.get(block, 'value', null)),
      }),
      automation_account_name: resource.field(self._.blocks, 'automation_account_name'),
      description: resource.field(self._.blocks, 'description'),
      encrypted: resource.field(self._.blocks, 'encrypted'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      value: resource.field(self._.blocks, 'value'),
    },
    automation_variable_datetime(name, block): {
      local resource = blockType.resource('azurerm_automation_variable_datetime', name),
      _: resource._(block, {
        automation_account_name: build.template(block.automation_account_name),
        description: build.template(std.get(block, 'description', null)),
        encrypted: build.template(std.get(block, 'encrypted', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        value: build.template(std.get(block, 'value', null)),
      }),
      automation_account_name: resource.field(self._.blocks, 'automation_account_name'),
      description: resource.field(self._.blocks, 'description'),
      encrypted: resource.field(self._.blocks, 'encrypted'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      value: resource.field(self._.blocks, 'value'),
    },
    automation_variable_int(name, block): {
      local resource = blockType.resource('azurerm_automation_variable_int', name),
      _: resource._(block, {
        automation_account_name: build.template(block.automation_account_name),
        description: build.template(std.get(block, 'description', null)),
        encrypted: build.template(std.get(block, 'encrypted', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        value: build.template(std.get(block, 'value', null)),
      }),
      automation_account_name: resource.field(self._.blocks, 'automation_account_name'),
      description: resource.field(self._.blocks, 'description'),
      encrypted: resource.field(self._.blocks, 'encrypted'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      value: resource.field(self._.blocks, 'value'),
    },
    automation_variable_object(name, block): {
      local resource = blockType.resource('azurerm_automation_variable_object', name),
      _: resource._(block, {
        automation_account_name: build.template(block.automation_account_name),
        description: build.template(std.get(block, 'description', null)),
        encrypted: build.template(std.get(block, 'encrypted', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        value: build.template(std.get(block, 'value', null)),
      }),
      automation_account_name: resource.field(self._.blocks, 'automation_account_name'),
      description: resource.field(self._.blocks, 'description'),
      encrypted: resource.field(self._.blocks, 'encrypted'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      value: resource.field(self._.blocks, 'value'),
    },
    automation_variable_string(name, block): {
      local resource = blockType.resource('azurerm_automation_variable_string', name),
      _: resource._(block, {
        automation_account_name: build.template(block.automation_account_name),
        description: build.template(std.get(block, 'description', null)),
        encrypted: build.template(std.get(block, 'encrypted', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        value: build.template(std.get(block, 'value', null)),
      }),
      automation_account_name: resource.field(self._.blocks, 'automation_account_name'),
      description: resource.field(self._.blocks, 'description'),
      encrypted: resource.field(self._.blocks, 'encrypted'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      value: resource.field(self._.blocks, 'value'),
    },
    automation_watcher(name, block): {
      local resource = blockType.resource('azurerm_automation_watcher', name),
      _: resource._(block, {
        automation_account_id: build.template(block.automation_account_id),
        description: build.template(std.get(block, 'description', null)),
        etag: build.template(std.get(block, 'etag', null)),
        execution_frequency_in_seconds: build.template(block.execution_frequency_in_seconds),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        script_name: build.template(block.script_name),
        script_parameters: build.template(std.get(block, 'script_parameters', null)),
        script_run_on: build.template(block.script_run_on),
        status: build.template(std.get(block, 'status', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      automation_account_id: resource.field(self._.blocks, 'automation_account_id'),
      description: resource.field(self._.blocks, 'description'),
      etag: resource.field(self._.blocks, 'etag'),
      execution_frequency_in_seconds: resource.field(self._.blocks, 'execution_frequency_in_seconds'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      script_name: resource.field(self._.blocks, 'script_name'),
      script_parameters: resource.field(self._.blocks, 'script_parameters'),
      script_run_on: resource.field(self._.blocks, 'script_run_on'),
      status: resource.field(self._.blocks, 'status'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    automation_webhook(name, block): {
      local resource = blockType.resource('azurerm_automation_webhook', name),
      _: resource._(block, {
        automation_account_name: build.template(block.automation_account_name),
        enabled: build.template(std.get(block, 'enabled', null)),
        expiry_time: build.template(block.expiry_time),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        parameters: build.template(std.get(block, 'parameters', null)),
        resource_group_name: build.template(block.resource_group_name),
        run_on_worker_group: build.template(std.get(block, 'run_on_worker_group', null)),
        runbook_name: build.template(block.runbook_name),
        uri: build.template(std.get(block, 'uri', null)),
      }),
      automation_account_name: resource.field(self._.blocks, 'automation_account_name'),
      enabled: resource.field(self._.blocks, 'enabled'),
      expiry_time: resource.field(self._.blocks, 'expiry_time'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      parameters: resource.field(self._.blocks, 'parameters'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      run_on_worker_group: resource.field(self._.blocks, 'run_on_worker_group'),
      runbook_name: resource.field(self._.blocks, 'runbook_name'),
      uri: resource.field(self._.blocks, 'uri'),
    },
    availability_set(name, block): {
      local resource = blockType.resource('azurerm_availability_set', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        managed: build.template(std.get(block, 'managed', null)),
        name: build.template(block.name),
        platform_fault_domain_count: build.template(std.get(block, 'platform_fault_domain_count', null)),
        platform_update_domain_count: build.template(std.get(block, 'platform_update_domain_count', null)),
        proximity_placement_group_id: build.template(std.get(block, 'proximity_placement_group_id', null)),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      managed: resource.field(self._.blocks, 'managed'),
      name: resource.field(self._.blocks, 'name'),
      platform_fault_domain_count: resource.field(self._.blocks, 'platform_fault_domain_count'),
      platform_update_domain_count: resource.field(self._.blocks, 'platform_update_domain_count'),
      proximity_placement_group_id: resource.field(self._.blocks, 'proximity_placement_group_id'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    backup_container_storage_account(name, block): {
      local resource = blockType.resource('azurerm_backup_container_storage_account', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        recovery_vault_name: build.template(block.recovery_vault_name),
        resource_group_name: build.template(block.resource_group_name),
        storage_account_id: build.template(block.storage_account_id),
      }),
      id: resource.field(self._.blocks, 'id'),
      recovery_vault_name: resource.field(self._.blocks, 'recovery_vault_name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      storage_account_id: resource.field(self._.blocks, 'storage_account_id'),
    },
    backup_policy_file_share(name, block): {
      local resource = blockType.resource('azurerm_backup_policy_file_share', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        recovery_vault_name: build.template(block.recovery_vault_name),
        resource_group_name: build.template(block.resource_group_name),
        timezone: build.template(std.get(block, 'timezone', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      recovery_vault_name: resource.field(self._.blocks, 'recovery_vault_name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      timezone: resource.field(self._.blocks, 'timezone'),
    },
    backup_policy_vm(name, block): {
      local resource = blockType.resource('azurerm_backup_policy_vm', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        instant_restore_retention_days: build.template(std.get(block, 'instant_restore_retention_days', null)),
        name: build.template(block.name),
        policy_type: build.template(std.get(block, 'policy_type', null)),
        recovery_vault_name: build.template(block.recovery_vault_name),
        resource_group_name: build.template(block.resource_group_name),
        timezone: build.template(std.get(block, 'timezone', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      instant_restore_retention_days: resource.field(self._.blocks, 'instant_restore_retention_days'),
      name: resource.field(self._.blocks, 'name'),
      policy_type: resource.field(self._.blocks, 'policy_type'),
      recovery_vault_name: resource.field(self._.blocks, 'recovery_vault_name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      timezone: resource.field(self._.blocks, 'timezone'),
    },
    backup_policy_vm_workload(name, block): {
      local resource = blockType.resource('azurerm_backup_policy_vm_workload', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        recovery_vault_name: build.template(block.recovery_vault_name),
        resource_group_name: build.template(block.resource_group_name),
        workload_type: build.template(block.workload_type),
      }),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      recovery_vault_name: resource.field(self._.blocks, 'recovery_vault_name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      workload_type: resource.field(self._.blocks, 'workload_type'),
    },
    backup_protected_file_share(name, block): {
      local resource = blockType.resource('azurerm_backup_protected_file_share', name),
      _: resource._(block, {
        backup_policy_id: build.template(block.backup_policy_id),
        id: build.template(std.get(block, 'id', null)),
        recovery_vault_name: build.template(block.recovery_vault_name),
        resource_group_name: build.template(block.resource_group_name),
        source_file_share_name: build.template(block.source_file_share_name),
        source_storage_account_id: build.template(block.source_storage_account_id),
      }),
      backup_policy_id: resource.field(self._.blocks, 'backup_policy_id'),
      id: resource.field(self._.blocks, 'id'),
      recovery_vault_name: resource.field(self._.blocks, 'recovery_vault_name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      source_file_share_name: resource.field(self._.blocks, 'source_file_share_name'),
      source_storage_account_id: resource.field(self._.blocks, 'source_storage_account_id'),
    },
    backup_protected_vm(name, block): {
      local resource = blockType.resource('azurerm_backup_protected_vm', name),
      _: resource._(block, {
        backup_policy_id: build.template(std.get(block, 'backup_policy_id', null)),
        exclude_disk_luns: build.template(std.get(block, 'exclude_disk_luns', null)),
        id: build.template(std.get(block, 'id', null)),
        include_disk_luns: build.template(std.get(block, 'include_disk_luns', null)),
        protection_state: build.template(std.get(block, 'protection_state', null)),
        recovery_vault_name: build.template(block.recovery_vault_name),
        resource_group_name: build.template(block.resource_group_name),
        source_vm_id: build.template(std.get(block, 'source_vm_id', null)),
      }),
      backup_policy_id: resource.field(self._.blocks, 'backup_policy_id'),
      exclude_disk_luns: resource.field(self._.blocks, 'exclude_disk_luns'),
      id: resource.field(self._.blocks, 'id'),
      include_disk_luns: resource.field(self._.blocks, 'include_disk_luns'),
      protection_state: resource.field(self._.blocks, 'protection_state'),
      recovery_vault_name: resource.field(self._.blocks, 'recovery_vault_name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      source_vm_id: resource.field(self._.blocks, 'source_vm_id'),
    },
    bastion_host(name, block): {
      local resource = blockType.resource('azurerm_bastion_host', name),
      _: resource._(block, {
        copy_paste_enabled: build.template(std.get(block, 'copy_paste_enabled', null)),
        dns_name: build.template(std.get(block, 'dns_name', null)),
        file_copy_enabled: build.template(std.get(block, 'file_copy_enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        ip_connect_enabled: build.template(std.get(block, 'ip_connect_enabled', null)),
        kerberos_enabled: build.template(std.get(block, 'kerberos_enabled', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        scale_units: build.template(std.get(block, 'scale_units', null)),
        session_recording_enabled: build.template(std.get(block, 'session_recording_enabled', null)),
        shareable_link_enabled: build.template(std.get(block, 'shareable_link_enabled', null)),
        sku: build.template(std.get(block, 'sku', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tunneling_enabled: build.template(std.get(block, 'tunneling_enabled', null)),
        virtual_network_id: build.template(std.get(block, 'virtual_network_id', null)),
        zones: build.template(std.get(block, 'zones', null)),
      }),
      copy_paste_enabled: resource.field(self._.blocks, 'copy_paste_enabled'),
      dns_name: resource.field(self._.blocks, 'dns_name'),
      file_copy_enabled: resource.field(self._.blocks, 'file_copy_enabled'),
      id: resource.field(self._.blocks, 'id'),
      ip_connect_enabled: resource.field(self._.blocks, 'ip_connect_enabled'),
      kerberos_enabled: resource.field(self._.blocks, 'kerberos_enabled'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      scale_units: resource.field(self._.blocks, 'scale_units'),
      session_recording_enabled: resource.field(self._.blocks, 'session_recording_enabled'),
      shareable_link_enabled: resource.field(self._.blocks, 'shareable_link_enabled'),
      sku: resource.field(self._.blocks, 'sku'),
      tags: resource.field(self._.blocks, 'tags'),
      tunneling_enabled: resource.field(self._.blocks, 'tunneling_enabled'),
      virtual_network_id: resource.field(self._.blocks, 'virtual_network_id'),
      zones: resource.field(self._.blocks, 'zones'),
    },
    batch_account(name, block): {
      local resource = blockType.resource('azurerm_batch_account', name),
      _: resource._(block, {
        account_endpoint: build.template(std.get(block, 'account_endpoint', null)),
        allowed_authentication_modes: build.template(std.get(block, 'allowed_authentication_modes', null)),
        encryption: build.template(std.get(block, 'encryption', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        pool_allocation_mode: build.template(std.get(block, 'pool_allocation_mode', null)),
        primary_access_key: build.template(std.get(block, 'primary_access_key', null)),
        public_network_access_enabled: build.template(std.get(block, 'public_network_access_enabled', null)),
        resource_group_name: build.template(block.resource_group_name),
        secondary_access_key: build.template(std.get(block, 'secondary_access_key', null)),
        storage_account_authentication_mode: build.template(std.get(block, 'storage_account_authentication_mode', null)),
        storage_account_id: build.template(std.get(block, 'storage_account_id', null)),
        storage_account_node_identity: build.template(std.get(block, 'storage_account_node_identity', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      account_endpoint: resource.field(self._.blocks, 'account_endpoint'),
      allowed_authentication_modes: resource.field(self._.blocks, 'allowed_authentication_modes'),
      encryption: resource.field(self._.blocks, 'encryption'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      pool_allocation_mode: resource.field(self._.blocks, 'pool_allocation_mode'),
      primary_access_key: resource.field(self._.blocks, 'primary_access_key'),
      public_network_access_enabled: resource.field(self._.blocks, 'public_network_access_enabled'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      secondary_access_key: resource.field(self._.blocks, 'secondary_access_key'),
      storage_account_authentication_mode: resource.field(self._.blocks, 'storage_account_authentication_mode'),
      storage_account_id: resource.field(self._.blocks, 'storage_account_id'),
      storage_account_node_identity: resource.field(self._.blocks, 'storage_account_node_identity'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    batch_application(name, block): {
      local resource = blockType.resource('azurerm_batch_application', name),
      _: resource._(block, {
        account_name: build.template(block.account_name),
        allow_updates: build.template(std.get(block, 'allow_updates', null)),
        default_version: build.template(std.get(block, 'default_version', null)),
        display_name: build.template(std.get(block, 'display_name', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
      }),
      account_name: resource.field(self._.blocks, 'account_name'),
      allow_updates: resource.field(self._.blocks, 'allow_updates'),
      default_version: resource.field(self._.blocks, 'default_version'),
      display_name: resource.field(self._.blocks, 'display_name'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
    },
    batch_certificate(name, block): {
      local resource = blockType.resource('azurerm_batch_certificate', name),
      _: resource._(block, {
        account_name: build.template(block.account_name),
        certificate: build.template(block.certificate),
        format: build.template(block.format),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        password: build.template(std.get(block, 'password', null)),
        public_data: build.template(std.get(block, 'public_data', null)),
        resource_group_name: build.template(block.resource_group_name),
        thumbprint: build.template(block.thumbprint),
        thumbprint_algorithm: build.template(block.thumbprint_algorithm),
      }),
      account_name: resource.field(self._.blocks, 'account_name'),
      certificate: resource.field(self._.blocks, 'certificate'),
      format: resource.field(self._.blocks, 'format'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      password: resource.field(self._.blocks, 'password'),
      public_data: resource.field(self._.blocks, 'public_data'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      thumbprint: resource.field(self._.blocks, 'thumbprint'),
      thumbprint_algorithm: resource.field(self._.blocks, 'thumbprint_algorithm'),
    },
    batch_job(name, block): {
      local resource = blockType.resource('azurerm_batch_job', name),
      _: resource._(block, {
        batch_pool_id: build.template(block.batch_pool_id),
        common_environment_properties: build.template(std.get(block, 'common_environment_properties', null)),
        display_name: build.template(std.get(block, 'display_name', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        priority: build.template(std.get(block, 'priority', null)),
        task_retry_maximum: build.template(std.get(block, 'task_retry_maximum', null)),
      }),
      batch_pool_id: resource.field(self._.blocks, 'batch_pool_id'),
      common_environment_properties: resource.field(self._.blocks, 'common_environment_properties'),
      display_name: resource.field(self._.blocks, 'display_name'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      priority: resource.field(self._.blocks, 'priority'),
      task_retry_maximum: resource.field(self._.blocks, 'task_retry_maximum'),
    },
    batch_pool(name, block): {
      local resource = blockType.resource('azurerm_batch_pool', name),
      _: resource._(block, {
        account_name: build.template(block.account_name),
        display_name: build.template(std.get(block, 'display_name', null)),
        id: build.template(std.get(block, 'id', null)),
        inter_node_communication: build.template(std.get(block, 'inter_node_communication', null)),
        license_type: build.template(std.get(block, 'license_type', null)),
        max_tasks_per_node: build.template(std.get(block, 'max_tasks_per_node', null)),
        metadata: build.template(std.get(block, 'metadata', null)),
        name: build.template(block.name),
        node_agent_sku_id: build.template(block.node_agent_sku_id),
        os_disk_placement: build.template(std.get(block, 'os_disk_placement', null)),
        resource_group_name: build.template(block.resource_group_name),
        stop_pending_resize_operation: build.template(std.get(block, 'stop_pending_resize_operation', null)),
        target_node_communication_mode: build.template(std.get(block, 'target_node_communication_mode', null)),
        vm_size: build.template(block.vm_size),
      }),
      account_name: resource.field(self._.blocks, 'account_name'),
      display_name: resource.field(self._.blocks, 'display_name'),
      id: resource.field(self._.blocks, 'id'),
      inter_node_communication: resource.field(self._.blocks, 'inter_node_communication'),
      license_type: resource.field(self._.blocks, 'license_type'),
      max_tasks_per_node: resource.field(self._.blocks, 'max_tasks_per_node'),
      metadata: resource.field(self._.blocks, 'metadata'),
      name: resource.field(self._.blocks, 'name'),
      node_agent_sku_id: resource.field(self._.blocks, 'node_agent_sku_id'),
      os_disk_placement: resource.field(self._.blocks, 'os_disk_placement'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      stop_pending_resize_operation: resource.field(self._.blocks, 'stop_pending_resize_operation'),
      target_node_communication_mode: resource.field(self._.blocks, 'target_node_communication_mode'),
      vm_size: resource.field(self._.blocks, 'vm_size'),
    },
    billing_account_cost_management_export(name, block): {
      local resource = blockType.resource('azurerm_billing_account_cost_management_export', name),
      _: resource._(block, {
        active: build.template(std.get(block, 'active', null)),
        billing_account_id: build.template(block.billing_account_id),
        file_format: build.template(std.get(block, 'file_format', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        recurrence_period_end_date: build.template(block.recurrence_period_end_date),
        recurrence_period_start_date: build.template(block.recurrence_period_start_date),
        recurrence_type: build.template(block.recurrence_type),
      }),
      active: resource.field(self._.blocks, 'active'),
      billing_account_id: resource.field(self._.blocks, 'billing_account_id'),
      file_format: resource.field(self._.blocks, 'file_format'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      recurrence_period_end_date: resource.field(self._.blocks, 'recurrence_period_end_date'),
      recurrence_period_start_date: resource.field(self._.blocks, 'recurrence_period_start_date'),
      recurrence_type: resource.field(self._.blocks, 'recurrence_type'),
    },
    blueprint_assignment(name, block): {
      local resource = blockType.resource('azurerm_blueprint_assignment', name),
      _: resource._(block, {
        blueprint_name: build.template(std.get(block, 'blueprint_name', null)),
        description: build.template(std.get(block, 'description', null)),
        display_name: build.template(std.get(block, 'display_name', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        lock_exclude_actions: build.template(std.get(block, 'lock_exclude_actions', null)),
        lock_exclude_principals: build.template(std.get(block, 'lock_exclude_principals', null)),
        lock_mode: build.template(std.get(block, 'lock_mode', null)),
        name: build.template(block.name),
        parameter_values: build.template(std.get(block, 'parameter_values', null)),
        resource_groups: build.template(std.get(block, 'resource_groups', null)),
        target_subscription_id: build.template(block.target_subscription_id),
        type: build.template(std.get(block, 'type', null)),
        version_id: build.template(block.version_id),
      }),
      blueprint_name: resource.field(self._.blocks, 'blueprint_name'),
      description: resource.field(self._.blocks, 'description'),
      display_name: resource.field(self._.blocks, 'display_name'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      lock_exclude_actions: resource.field(self._.blocks, 'lock_exclude_actions'),
      lock_exclude_principals: resource.field(self._.blocks, 'lock_exclude_principals'),
      lock_mode: resource.field(self._.blocks, 'lock_mode'),
      name: resource.field(self._.blocks, 'name'),
      parameter_values: resource.field(self._.blocks, 'parameter_values'),
      resource_groups: resource.field(self._.blocks, 'resource_groups'),
      target_subscription_id: resource.field(self._.blocks, 'target_subscription_id'),
      type: resource.field(self._.blocks, 'type'),
      version_id: resource.field(self._.blocks, 'version_id'),
    },
    bot_channel_alexa(name, block): {
      local resource = blockType.resource('azurerm_bot_channel_alexa', name),
      _: resource._(block, {
        bot_name: build.template(block.bot_name),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        resource_group_name: build.template(block.resource_group_name),
        skill_id: build.template(block.skill_id),
      }),
      bot_name: resource.field(self._.blocks, 'bot_name'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      skill_id: resource.field(self._.blocks, 'skill_id'),
    },
    bot_channel_direct_line_speech(name, block): {
      local resource = blockType.resource('azurerm_bot_channel_direct_line_speech', name),
      _: resource._(block, {
        bot_name: build.template(block.bot_name),
        cognitive_account_id: build.template(std.get(block, 'cognitive_account_id', null)),
        cognitive_service_access_key: build.template(block.cognitive_service_access_key),
        cognitive_service_location: build.template(block.cognitive_service_location),
        custom_speech_model_id: build.template(std.get(block, 'custom_speech_model_id', null)),
        custom_voice_deployment_id: build.template(std.get(block, 'custom_voice_deployment_id', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        resource_group_name: build.template(block.resource_group_name),
      }),
      bot_name: resource.field(self._.blocks, 'bot_name'),
      cognitive_account_id: resource.field(self._.blocks, 'cognitive_account_id'),
      cognitive_service_access_key: resource.field(self._.blocks, 'cognitive_service_access_key'),
      cognitive_service_location: resource.field(self._.blocks, 'cognitive_service_location'),
      custom_speech_model_id: resource.field(self._.blocks, 'custom_speech_model_id'),
      custom_voice_deployment_id: resource.field(self._.blocks, 'custom_voice_deployment_id'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
    },
    bot_channel_directline(name, block): {
      local resource = blockType.resource('azurerm_bot_channel_directline', name),
      _: resource._(block, {
        bot_name: build.template(block.bot_name),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        resource_group_name: build.template(block.resource_group_name),
      }),
      bot_name: resource.field(self._.blocks, 'bot_name'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
    },
    bot_channel_email(name, block): {
      local resource = blockType.resource('azurerm_bot_channel_email', name),
      _: resource._(block, {
        bot_name: build.template(block.bot_name),
        email_address: build.template(block.email_address),
        email_password: build.template(std.get(block, 'email_password', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        magic_code: build.template(std.get(block, 'magic_code', null)),
        resource_group_name: build.template(block.resource_group_name),
      }),
      bot_name: resource.field(self._.blocks, 'bot_name'),
      email_address: resource.field(self._.blocks, 'email_address'),
      email_password: resource.field(self._.blocks, 'email_password'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      magic_code: resource.field(self._.blocks, 'magic_code'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
    },
    bot_channel_facebook(name, block): {
      local resource = blockType.resource('azurerm_bot_channel_facebook', name),
      _: resource._(block, {
        bot_name: build.template(block.bot_name),
        facebook_application_id: build.template(block.facebook_application_id),
        facebook_application_secret: build.template(block.facebook_application_secret),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        resource_group_name: build.template(block.resource_group_name),
      }),
      bot_name: resource.field(self._.blocks, 'bot_name'),
      facebook_application_id: resource.field(self._.blocks, 'facebook_application_id'),
      facebook_application_secret: resource.field(self._.blocks, 'facebook_application_secret'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
    },
    bot_channel_line(name, block): {
      local resource = blockType.resource('azurerm_bot_channel_line', name),
      _: resource._(block, {
        bot_name: build.template(block.bot_name),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        resource_group_name: build.template(block.resource_group_name),
      }),
      bot_name: resource.field(self._.blocks, 'bot_name'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
    },
    bot_channel_ms_teams(name, block): {
      local resource = blockType.resource('azurerm_bot_channel_ms_teams', name),
      _: resource._(block, {
        bot_name: build.template(block.bot_name),
        calling_web_hook: build.template(std.get(block, 'calling_web_hook', null)),
        deployment_environment: build.template(std.get(block, 'deployment_environment', null)),
        enable_calling: build.template(std.get(block, 'enable_calling', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        resource_group_name: build.template(block.resource_group_name),
      }),
      bot_name: resource.field(self._.blocks, 'bot_name'),
      calling_web_hook: resource.field(self._.blocks, 'calling_web_hook'),
      deployment_environment: resource.field(self._.blocks, 'deployment_environment'),
      enable_calling: resource.field(self._.blocks, 'enable_calling'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
    },
    bot_channel_slack(name, block): {
      local resource = blockType.resource('azurerm_bot_channel_slack', name),
      _: resource._(block, {
        bot_name: build.template(block.bot_name),
        client_id: build.template(block.client_id),
        client_secret: build.template(block.client_secret),
        id: build.template(std.get(block, 'id', null)),
        landing_page_url: build.template(std.get(block, 'landing_page_url', null)),
        location: build.template(block.location),
        resource_group_name: build.template(block.resource_group_name),
        signing_secret: build.template(std.get(block, 'signing_secret', null)),
        verification_token: build.template(block.verification_token),
      }),
      bot_name: resource.field(self._.blocks, 'bot_name'),
      client_id: resource.field(self._.blocks, 'client_id'),
      client_secret: resource.field(self._.blocks, 'client_secret'),
      id: resource.field(self._.blocks, 'id'),
      landing_page_url: resource.field(self._.blocks, 'landing_page_url'),
      location: resource.field(self._.blocks, 'location'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      signing_secret: resource.field(self._.blocks, 'signing_secret'),
      verification_token: resource.field(self._.blocks, 'verification_token'),
    },
    bot_channel_sms(name, block): {
      local resource = blockType.resource('azurerm_bot_channel_sms', name),
      _: resource._(block, {
        bot_name: build.template(block.bot_name),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        phone_number: build.template(block.phone_number),
        resource_group_name: build.template(block.resource_group_name),
        sms_channel_account_security_id: build.template(block.sms_channel_account_security_id),
        sms_channel_auth_token: build.template(block.sms_channel_auth_token),
      }),
      bot_name: resource.field(self._.blocks, 'bot_name'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      phone_number: resource.field(self._.blocks, 'phone_number'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      sms_channel_account_security_id: resource.field(self._.blocks, 'sms_channel_account_security_id'),
      sms_channel_auth_token: resource.field(self._.blocks, 'sms_channel_auth_token'),
    },
    bot_channel_web_chat(name, block): {
      local resource = blockType.resource('azurerm_bot_channel_web_chat', name),
      _: resource._(block, {
        bot_name: build.template(block.bot_name),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        resource_group_name: build.template(block.resource_group_name),
      }),
      bot_name: resource.field(self._.blocks, 'bot_name'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
    },
    bot_channels_registration(name, block): {
      local resource = blockType.resource('azurerm_bot_channels_registration', name),
      _: resource._(block, {
        cmk_key_vault_url: build.template(std.get(block, 'cmk_key_vault_url', null)),
        description: build.template(std.get(block, 'description', null)),
        developer_app_insights_api_key: build.template(std.get(block, 'developer_app_insights_api_key', null)),
        developer_app_insights_application_id: build.template(std.get(block, 'developer_app_insights_application_id', null)),
        developer_app_insights_key: build.template(std.get(block, 'developer_app_insights_key', null)),
        display_name: build.template(std.get(block, 'display_name', null)),
        endpoint: build.template(std.get(block, 'endpoint', null)),
        icon_url: build.template(std.get(block, 'icon_url', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        microsoft_app_id: build.template(block.microsoft_app_id),
        name: build.template(block.name),
        public_network_access_enabled: build.template(std.get(block, 'public_network_access_enabled', null)),
        resource_group_name: build.template(block.resource_group_name),
        sku: build.template(block.sku),
        streaming_endpoint_enabled: build.template(std.get(block, 'streaming_endpoint_enabled', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      cmk_key_vault_url: resource.field(self._.blocks, 'cmk_key_vault_url'),
      description: resource.field(self._.blocks, 'description'),
      developer_app_insights_api_key: resource.field(self._.blocks, 'developer_app_insights_api_key'),
      developer_app_insights_application_id: resource.field(self._.blocks, 'developer_app_insights_application_id'),
      developer_app_insights_key: resource.field(self._.blocks, 'developer_app_insights_key'),
      display_name: resource.field(self._.blocks, 'display_name'),
      endpoint: resource.field(self._.blocks, 'endpoint'),
      icon_url: resource.field(self._.blocks, 'icon_url'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      microsoft_app_id: resource.field(self._.blocks, 'microsoft_app_id'),
      name: resource.field(self._.blocks, 'name'),
      public_network_access_enabled: resource.field(self._.blocks, 'public_network_access_enabled'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      sku: resource.field(self._.blocks, 'sku'),
      streaming_endpoint_enabled: resource.field(self._.blocks, 'streaming_endpoint_enabled'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    bot_connection(name, block): {
      local resource = blockType.resource('azurerm_bot_connection', name),
      _: resource._(block, {
        bot_name: build.template(block.bot_name),
        client_id: build.template(block.client_id),
        client_secret: build.template(block.client_secret),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        parameters: build.template(std.get(block, 'parameters', null)),
        resource_group_name: build.template(block.resource_group_name),
        scopes: build.template(std.get(block, 'scopes', null)),
        service_provider_name: build.template(block.service_provider_name),
      }),
      bot_name: resource.field(self._.blocks, 'bot_name'),
      client_id: resource.field(self._.blocks, 'client_id'),
      client_secret: resource.field(self._.blocks, 'client_secret'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      parameters: resource.field(self._.blocks, 'parameters'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      scopes: resource.field(self._.blocks, 'scopes'),
      service_provider_name: resource.field(self._.blocks, 'service_provider_name'),
    },
    bot_service_azure_bot(name, block): {
      local resource = blockType.resource('azurerm_bot_service_azure_bot', name),
      _: resource._(block, {
        cmk_key_vault_key_url: build.template(std.get(block, 'cmk_key_vault_key_url', null)),
        developer_app_insights_api_key: build.template(std.get(block, 'developer_app_insights_api_key', null)),
        developer_app_insights_application_id: build.template(std.get(block, 'developer_app_insights_application_id', null)),
        developer_app_insights_key: build.template(std.get(block, 'developer_app_insights_key', null)),
        display_name: build.template(std.get(block, 'display_name', null)),
        endpoint: build.template(std.get(block, 'endpoint', null)),
        icon_url: build.template(std.get(block, 'icon_url', null)),
        id: build.template(std.get(block, 'id', null)),
        local_authentication_enabled: build.template(std.get(block, 'local_authentication_enabled', null)),
        location: build.template(block.location),
        luis_app_ids: build.template(std.get(block, 'luis_app_ids', null)),
        luis_key: build.template(std.get(block, 'luis_key', null)),
        microsoft_app_id: build.template(block.microsoft_app_id),
        microsoft_app_msi_id: build.template(std.get(block, 'microsoft_app_msi_id', null)),
        microsoft_app_tenant_id: build.template(std.get(block, 'microsoft_app_tenant_id', null)),
        microsoft_app_type: build.template(std.get(block, 'microsoft_app_type', null)),
        name: build.template(block.name),
        public_network_access_enabled: build.template(std.get(block, 'public_network_access_enabled', null)),
        resource_group_name: build.template(block.resource_group_name),
        sku: build.template(block.sku),
        streaming_endpoint_enabled: build.template(std.get(block, 'streaming_endpoint_enabled', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      cmk_key_vault_key_url: resource.field(self._.blocks, 'cmk_key_vault_key_url'),
      developer_app_insights_api_key: resource.field(self._.blocks, 'developer_app_insights_api_key'),
      developer_app_insights_application_id: resource.field(self._.blocks, 'developer_app_insights_application_id'),
      developer_app_insights_key: resource.field(self._.blocks, 'developer_app_insights_key'),
      display_name: resource.field(self._.blocks, 'display_name'),
      endpoint: resource.field(self._.blocks, 'endpoint'),
      icon_url: resource.field(self._.blocks, 'icon_url'),
      id: resource.field(self._.blocks, 'id'),
      local_authentication_enabled: resource.field(self._.blocks, 'local_authentication_enabled'),
      location: resource.field(self._.blocks, 'location'),
      luis_app_ids: resource.field(self._.blocks, 'luis_app_ids'),
      luis_key: resource.field(self._.blocks, 'luis_key'),
      microsoft_app_id: resource.field(self._.blocks, 'microsoft_app_id'),
      microsoft_app_msi_id: resource.field(self._.blocks, 'microsoft_app_msi_id'),
      microsoft_app_tenant_id: resource.field(self._.blocks, 'microsoft_app_tenant_id'),
      microsoft_app_type: resource.field(self._.blocks, 'microsoft_app_type'),
      name: resource.field(self._.blocks, 'name'),
      public_network_access_enabled: resource.field(self._.blocks, 'public_network_access_enabled'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      sku: resource.field(self._.blocks, 'sku'),
      streaming_endpoint_enabled: resource.field(self._.blocks, 'streaming_endpoint_enabled'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    bot_web_app(name, block): {
      local resource = blockType.resource('azurerm_bot_web_app', name),
      _: resource._(block, {
        developer_app_insights_api_key: build.template(std.get(block, 'developer_app_insights_api_key', null)),
        developer_app_insights_application_id: build.template(std.get(block, 'developer_app_insights_application_id', null)),
        developer_app_insights_key: build.template(std.get(block, 'developer_app_insights_key', null)),
        display_name: build.template(std.get(block, 'display_name', null)),
        endpoint: build.template(std.get(block, 'endpoint', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        luis_app_ids: build.template(std.get(block, 'luis_app_ids', null)),
        luis_key: build.template(std.get(block, 'luis_key', null)),
        microsoft_app_id: build.template(block.microsoft_app_id),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        sku: build.template(block.sku),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      developer_app_insights_api_key: resource.field(self._.blocks, 'developer_app_insights_api_key'),
      developer_app_insights_application_id: resource.field(self._.blocks, 'developer_app_insights_application_id'),
      developer_app_insights_key: resource.field(self._.blocks, 'developer_app_insights_key'),
      display_name: resource.field(self._.blocks, 'display_name'),
      endpoint: resource.field(self._.blocks, 'endpoint'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      luis_app_ids: resource.field(self._.blocks, 'luis_app_ids'),
      luis_key: resource.field(self._.blocks, 'luis_key'),
      microsoft_app_id: resource.field(self._.blocks, 'microsoft_app_id'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      sku: resource.field(self._.blocks, 'sku'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    capacity_reservation(name, block): {
      local resource = blockType.resource('azurerm_capacity_reservation', name),
      _: resource._(block, {
        capacity_reservation_group_id: build.template(block.capacity_reservation_group_id),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        tags: build.template(std.get(block, 'tags', null)),
        zone: build.template(std.get(block, 'zone', null)),
      }),
      capacity_reservation_group_id: resource.field(self._.blocks, 'capacity_reservation_group_id'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      tags: resource.field(self._.blocks, 'tags'),
      zone: resource.field(self._.blocks, 'zone'),
    },
    capacity_reservation_group(name, block): {
      local resource = blockType.resource('azurerm_capacity_reservation_group', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
        zones: build.template(std.get(block, 'zones', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
      zones: resource.field(self._.blocks, 'zones'),
    },
    cdn_endpoint(name, block): {
      local resource = blockType.resource('azurerm_cdn_endpoint', name),
      _: resource._(block, {
        content_types_to_compress: build.template(std.get(block, 'content_types_to_compress', null)),
        fqdn: build.template(std.get(block, 'fqdn', null)),
        id: build.template(std.get(block, 'id', null)),
        is_compression_enabled: build.template(std.get(block, 'is_compression_enabled', null)),
        is_http_allowed: build.template(std.get(block, 'is_http_allowed', null)),
        is_https_allowed: build.template(std.get(block, 'is_https_allowed', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        optimization_type: build.template(std.get(block, 'optimization_type', null)),
        origin_host_header: build.template(std.get(block, 'origin_host_header', null)),
        origin_path: build.template(std.get(block, 'origin_path', null)),
        probe_path: build.template(std.get(block, 'probe_path', null)),
        profile_name: build.template(block.profile_name),
        querystring_caching_behaviour: build.template(std.get(block, 'querystring_caching_behaviour', null)),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      content_types_to_compress: resource.field(self._.blocks, 'content_types_to_compress'),
      fqdn: resource.field(self._.blocks, 'fqdn'),
      id: resource.field(self._.blocks, 'id'),
      is_compression_enabled: resource.field(self._.blocks, 'is_compression_enabled'),
      is_http_allowed: resource.field(self._.blocks, 'is_http_allowed'),
      is_https_allowed: resource.field(self._.blocks, 'is_https_allowed'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      optimization_type: resource.field(self._.blocks, 'optimization_type'),
      origin_host_header: resource.field(self._.blocks, 'origin_host_header'),
      origin_path: resource.field(self._.blocks, 'origin_path'),
      probe_path: resource.field(self._.blocks, 'probe_path'),
      profile_name: resource.field(self._.blocks, 'profile_name'),
      querystring_caching_behaviour: resource.field(self._.blocks, 'querystring_caching_behaviour'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    cdn_endpoint_custom_domain(name, block): {
      local resource = blockType.resource('azurerm_cdn_endpoint_custom_domain', name),
      _: resource._(block, {
        cdn_endpoint_id: build.template(block.cdn_endpoint_id),
        host_name: build.template(block.host_name),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
      }),
      cdn_endpoint_id: resource.field(self._.blocks, 'cdn_endpoint_id'),
      host_name: resource.field(self._.blocks, 'host_name'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
    },
    cdn_frontdoor_custom_domain(name, block): {
      local resource = blockType.resource('azurerm_cdn_frontdoor_custom_domain', name),
      _: resource._(block, {
        cdn_frontdoor_profile_id: build.template(block.cdn_frontdoor_profile_id),
        dns_zone_id: build.template(std.get(block, 'dns_zone_id', null)),
        expiration_date: build.template(std.get(block, 'expiration_date', null)),
        host_name: build.template(block.host_name),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        validation_token: build.template(std.get(block, 'validation_token', null)),
      }),
      cdn_frontdoor_profile_id: resource.field(self._.blocks, 'cdn_frontdoor_profile_id'),
      dns_zone_id: resource.field(self._.blocks, 'dns_zone_id'),
      expiration_date: resource.field(self._.blocks, 'expiration_date'),
      host_name: resource.field(self._.blocks, 'host_name'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      validation_token: resource.field(self._.blocks, 'validation_token'),
    },
    cdn_frontdoor_custom_domain_association(name, block): {
      local resource = blockType.resource('azurerm_cdn_frontdoor_custom_domain_association', name),
      _: resource._(block, {
        cdn_frontdoor_custom_domain_id: build.template(block.cdn_frontdoor_custom_domain_id),
        cdn_frontdoor_route_ids: build.template(block.cdn_frontdoor_route_ids),
        id: build.template(std.get(block, 'id', null)),
      }),
      cdn_frontdoor_custom_domain_id: resource.field(self._.blocks, 'cdn_frontdoor_custom_domain_id'),
      cdn_frontdoor_route_ids: resource.field(self._.blocks, 'cdn_frontdoor_route_ids'),
      id: resource.field(self._.blocks, 'id'),
    },
    cdn_frontdoor_endpoint(name, block): {
      local resource = blockType.resource('azurerm_cdn_frontdoor_endpoint', name),
      _: resource._(block, {
        cdn_frontdoor_profile_id: build.template(block.cdn_frontdoor_profile_id),
        enabled: build.template(std.get(block, 'enabled', null)),
        host_name: build.template(std.get(block, 'host_name', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      cdn_frontdoor_profile_id: resource.field(self._.blocks, 'cdn_frontdoor_profile_id'),
      enabled: resource.field(self._.blocks, 'enabled'),
      host_name: resource.field(self._.blocks, 'host_name'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    cdn_frontdoor_firewall_policy(name, block): {
      local resource = blockType.resource('azurerm_cdn_frontdoor_firewall_policy', name),
      _: resource._(block, {
        custom_block_response_body: build.template(std.get(block, 'custom_block_response_body', null)),
        custom_block_response_status_code: build.template(std.get(block, 'custom_block_response_status_code', null)),
        enabled: build.template(std.get(block, 'enabled', null)),
        frontend_endpoint_ids: build.template(std.get(block, 'frontend_endpoint_ids', null)),
        id: build.template(std.get(block, 'id', null)),
        js_challenge_cookie_expiration_in_minutes: build.template(std.get(block, 'js_challenge_cookie_expiration_in_minutes', null)),
        mode: build.template(block.mode),
        name: build.template(block.name),
        redirect_url: build.template(std.get(block, 'redirect_url', null)),
        request_body_check_enabled: build.template(std.get(block, 'request_body_check_enabled', null)),
        resource_group_name: build.template(block.resource_group_name),
        sku_name: build.template(block.sku_name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      custom_block_response_body: resource.field(self._.blocks, 'custom_block_response_body'),
      custom_block_response_status_code: resource.field(self._.blocks, 'custom_block_response_status_code'),
      enabled: resource.field(self._.blocks, 'enabled'),
      frontend_endpoint_ids: resource.field(self._.blocks, 'frontend_endpoint_ids'),
      id: resource.field(self._.blocks, 'id'),
      js_challenge_cookie_expiration_in_minutes: resource.field(self._.blocks, 'js_challenge_cookie_expiration_in_minutes'),
      mode: resource.field(self._.blocks, 'mode'),
      name: resource.field(self._.blocks, 'name'),
      redirect_url: resource.field(self._.blocks, 'redirect_url'),
      request_body_check_enabled: resource.field(self._.blocks, 'request_body_check_enabled'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      sku_name: resource.field(self._.blocks, 'sku_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    cdn_frontdoor_origin(name, block): {
      local resource = blockType.resource('azurerm_cdn_frontdoor_origin', name),
      _: resource._(block, {
        cdn_frontdoor_origin_group_id: build.template(block.cdn_frontdoor_origin_group_id),
        certificate_name_check_enabled: build.template(block.certificate_name_check_enabled),
        enabled: build.template(std.get(block, 'enabled', null)),
        host_name: build.template(block.host_name),
        http_port: build.template(std.get(block, 'http_port', null)),
        https_port: build.template(std.get(block, 'https_port', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        origin_host_header: build.template(std.get(block, 'origin_host_header', null)),
        priority: build.template(std.get(block, 'priority', null)),
        weight: build.template(std.get(block, 'weight', null)),
      }),
      cdn_frontdoor_origin_group_id: resource.field(self._.blocks, 'cdn_frontdoor_origin_group_id'),
      certificate_name_check_enabled: resource.field(self._.blocks, 'certificate_name_check_enabled'),
      enabled: resource.field(self._.blocks, 'enabled'),
      host_name: resource.field(self._.blocks, 'host_name'),
      http_port: resource.field(self._.blocks, 'http_port'),
      https_port: resource.field(self._.blocks, 'https_port'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      origin_host_header: resource.field(self._.blocks, 'origin_host_header'),
      priority: resource.field(self._.blocks, 'priority'),
      weight: resource.field(self._.blocks, 'weight'),
    },
    cdn_frontdoor_origin_group(name, block): {
      local resource = blockType.resource('azurerm_cdn_frontdoor_origin_group', name),
      _: resource._(block, {
        cdn_frontdoor_profile_id: build.template(block.cdn_frontdoor_profile_id),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        restore_traffic_time_to_healed_or_new_endpoint_in_minutes: build.template(std.get(block, 'restore_traffic_time_to_healed_or_new_endpoint_in_minutes', null)),
        session_affinity_enabled: build.template(std.get(block, 'session_affinity_enabled', null)),
      }),
      cdn_frontdoor_profile_id: resource.field(self._.blocks, 'cdn_frontdoor_profile_id'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      restore_traffic_time_to_healed_or_new_endpoint_in_minutes: resource.field(self._.blocks, 'restore_traffic_time_to_healed_or_new_endpoint_in_minutes'),
      session_affinity_enabled: resource.field(self._.blocks, 'session_affinity_enabled'),
    },
    cdn_frontdoor_profile(name, block): {
      local resource = blockType.resource('azurerm_cdn_frontdoor_profile', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        resource_guid: build.template(std.get(block, 'resource_guid', null)),
        response_timeout_seconds: build.template(std.get(block, 'response_timeout_seconds', null)),
        sku_name: build.template(block.sku_name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      resource_guid: resource.field(self._.blocks, 'resource_guid'),
      response_timeout_seconds: resource.field(self._.blocks, 'response_timeout_seconds'),
      sku_name: resource.field(self._.blocks, 'sku_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    cdn_frontdoor_route(name, block): {
      local resource = blockType.resource('azurerm_cdn_frontdoor_route', name),
      _: resource._(block, {
        cdn_frontdoor_custom_domain_ids: build.template(std.get(block, 'cdn_frontdoor_custom_domain_ids', null)),
        cdn_frontdoor_endpoint_id: build.template(block.cdn_frontdoor_endpoint_id),
        cdn_frontdoor_origin_group_id: build.template(block.cdn_frontdoor_origin_group_id),
        cdn_frontdoor_origin_ids: build.template(block.cdn_frontdoor_origin_ids),
        cdn_frontdoor_origin_path: build.template(std.get(block, 'cdn_frontdoor_origin_path', null)),
        cdn_frontdoor_rule_set_ids: build.template(std.get(block, 'cdn_frontdoor_rule_set_ids', null)),
        enabled: build.template(std.get(block, 'enabled', null)),
        forwarding_protocol: build.template(std.get(block, 'forwarding_protocol', null)),
        https_redirect_enabled: build.template(std.get(block, 'https_redirect_enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        link_to_default_domain: build.template(std.get(block, 'link_to_default_domain', null)),
        name: build.template(block.name),
        patterns_to_match: build.template(block.patterns_to_match),
        supported_protocols: build.template(block.supported_protocols),
      }),
      cdn_frontdoor_custom_domain_ids: resource.field(self._.blocks, 'cdn_frontdoor_custom_domain_ids'),
      cdn_frontdoor_endpoint_id: resource.field(self._.blocks, 'cdn_frontdoor_endpoint_id'),
      cdn_frontdoor_origin_group_id: resource.field(self._.blocks, 'cdn_frontdoor_origin_group_id'),
      cdn_frontdoor_origin_ids: resource.field(self._.blocks, 'cdn_frontdoor_origin_ids'),
      cdn_frontdoor_origin_path: resource.field(self._.blocks, 'cdn_frontdoor_origin_path'),
      cdn_frontdoor_rule_set_ids: resource.field(self._.blocks, 'cdn_frontdoor_rule_set_ids'),
      enabled: resource.field(self._.blocks, 'enabled'),
      forwarding_protocol: resource.field(self._.blocks, 'forwarding_protocol'),
      https_redirect_enabled: resource.field(self._.blocks, 'https_redirect_enabled'),
      id: resource.field(self._.blocks, 'id'),
      link_to_default_domain: resource.field(self._.blocks, 'link_to_default_domain'),
      name: resource.field(self._.blocks, 'name'),
      patterns_to_match: resource.field(self._.blocks, 'patterns_to_match'),
      supported_protocols: resource.field(self._.blocks, 'supported_protocols'),
    },
    cdn_frontdoor_rule(name, block): {
      local resource = blockType.resource('azurerm_cdn_frontdoor_rule', name),
      _: resource._(block, {
        behavior_on_match: build.template(std.get(block, 'behavior_on_match', null)),
        cdn_frontdoor_rule_set_id: build.template(block.cdn_frontdoor_rule_set_id),
        cdn_frontdoor_rule_set_name: build.template(std.get(block, 'cdn_frontdoor_rule_set_name', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        order: build.template(block.order),
      }),
      behavior_on_match: resource.field(self._.blocks, 'behavior_on_match'),
      cdn_frontdoor_rule_set_id: resource.field(self._.blocks, 'cdn_frontdoor_rule_set_id'),
      cdn_frontdoor_rule_set_name: resource.field(self._.blocks, 'cdn_frontdoor_rule_set_name'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      order: resource.field(self._.blocks, 'order'),
    },
    cdn_frontdoor_rule_set(name, block): {
      local resource = blockType.resource('azurerm_cdn_frontdoor_rule_set', name),
      _: resource._(block, {
        cdn_frontdoor_profile_id: build.template(block.cdn_frontdoor_profile_id),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
      }),
      cdn_frontdoor_profile_id: resource.field(self._.blocks, 'cdn_frontdoor_profile_id'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
    },
    cdn_frontdoor_secret(name, block): {
      local resource = blockType.resource('azurerm_cdn_frontdoor_secret', name),
      _: resource._(block, {
        cdn_frontdoor_profile_id: build.template(block.cdn_frontdoor_profile_id),
        cdn_frontdoor_profile_name: build.template(std.get(block, 'cdn_frontdoor_profile_name', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
      }),
      cdn_frontdoor_profile_id: resource.field(self._.blocks, 'cdn_frontdoor_profile_id'),
      cdn_frontdoor_profile_name: resource.field(self._.blocks, 'cdn_frontdoor_profile_name'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
    },
    cdn_frontdoor_security_policy(name, block): {
      local resource = blockType.resource('azurerm_cdn_frontdoor_security_policy', name),
      _: resource._(block, {
        cdn_frontdoor_profile_id: build.template(block.cdn_frontdoor_profile_id),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
      }),
      cdn_frontdoor_profile_id: resource.field(self._.blocks, 'cdn_frontdoor_profile_id'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
    },
    cdn_profile(name, block): {
      local resource = blockType.resource('azurerm_cdn_profile', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        sku: build.template(block.sku),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      sku: resource.field(self._.blocks, 'sku'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    chaos_studio_capability(name, block): {
      local resource = blockType.resource('azurerm_chaos_studio_capability', name),
      _: resource._(block, {
        capability_type: build.template(block.capability_type),
        chaos_studio_target_id: build.template(block.chaos_studio_target_id),
        id: build.template(std.get(block, 'id', null)),
        urn: build.template(std.get(block, 'urn', null)),
      }),
      capability_type: resource.field(self._.blocks, 'capability_type'),
      chaos_studio_target_id: resource.field(self._.blocks, 'chaos_studio_target_id'),
      id: resource.field(self._.blocks, 'id'),
      urn: resource.field(self._.blocks, 'urn'),
    },
    chaos_studio_experiment(name, block): {
      local resource = blockType.resource('azurerm_chaos_studio_experiment', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
      }),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
    },
    chaos_studio_target(name, block): {
      local resource = blockType.resource('azurerm_chaos_studio_target', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        target_resource_id: build.template(block.target_resource_id),
        target_type: build.template(block.target_type),
      }),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      target_resource_id: resource.field(self._.blocks, 'target_resource_id'),
      target_type: resource.field(self._.blocks, 'target_type'),
    },
    cognitive_account(name, block): {
      local resource = blockType.resource('azurerm_cognitive_account', name),
      _: resource._(block, {
        custom_question_answering_search_service_id: build.template(std.get(block, 'custom_question_answering_search_service_id', null)),
        custom_question_answering_search_service_key: build.template(std.get(block, 'custom_question_answering_search_service_key', null)),
        custom_subdomain_name: build.template(std.get(block, 'custom_subdomain_name', null)),
        dynamic_throttling_enabled: build.template(std.get(block, 'dynamic_throttling_enabled', null)),
        endpoint: build.template(std.get(block, 'endpoint', null)),
        fqdns: build.template(std.get(block, 'fqdns', null)),
        id: build.template(std.get(block, 'id', null)),
        kind: build.template(block.kind),
        local_auth_enabled: build.template(std.get(block, 'local_auth_enabled', null)),
        location: build.template(block.location),
        metrics_advisor_aad_client_id: build.template(std.get(block, 'metrics_advisor_aad_client_id', null)),
        metrics_advisor_aad_tenant_id: build.template(std.get(block, 'metrics_advisor_aad_tenant_id', null)),
        metrics_advisor_super_user_name: build.template(std.get(block, 'metrics_advisor_super_user_name', null)),
        metrics_advisor_website_name: build.template(std.get(block, 'metrics_advisor_website_name', null)),
        name: build.template(block.name),
        outbound_network_access_restricted: build.template(std.get(block, 'outbound_network_access_restricted', null)),
        primary_access_key: build.template(std.get(block, 'primary_access_key', null)),
        public_network_access_enabled: build.template(std.get(block, 'public_network_access_enabled', null)),
        qna_runtime_endpoint: build.template(std.get(block, 'qna_runtime_endpoint', null)),
        resource_group_name: build.template(block.resource_group_name),
        secondary_access_key: build.template(std.get(block, 'secondary_access_key', null)),
        sku_name: build.template(block.sku_name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      custom_question_answering_search_service_id: resource.field(self._.blocks, 'custom_question_answering_search_service_id'),
      custom_question_answering_search_service_key: resource.field(self._.blocks, 'custom_question_answering_search_service_key'),
      custom_subdomain_name: resource.field(self._.blocks, 'custom_subdomain_name'),
      dynamic_throttling_enabled: resource.field(self._.blocks, 'dynamic_throttling_enabled'),
      endpoint: resource.field(self._.blocks, 'endpoint'),
      fqdns: resource.field(self._.blocks, 'fqdns'),
      id: resource.field(self._.blocks, 'id'),
      kind: resource.field(self._.blocks, 'kind'),
      local_auth_enabled: resource.field(self._.blocks, 'local_auth_enabled'),
      location: resource.field(self._.blocks, 'location'),
      metrics_advisor_aad_client_id: resource.field(self._.blocks, 'metrics_advisor_aad_client_id'),
      metrics_advisor_aad_tenant_id: resource.field(self._.blocks, 'metrics_advisor_aad_tenant_id'),
      metrics_advisor_super_user_name: resource.field(self._.blocks, 'metrics_advisor_super_user_name'),
      metrics_advisor_website_name: resource.field(self._.blocks, 'metrics_advisor_website_name'),
      name: resource.field(self._.blocks, 'name'),
      outbound_network_access_restricted: resource.field(self._.blocks, 'outbound_network_access_restricted'),
      primary_access_key: resource.field(self._.blocks, 'primary_access_key'),
      public_network_access_enabled: resource.field(self._.blocks, 'public_network_access_enabled'),
      qna_runtime_endpoint: resource.field(self._.blocks, 'qna_runtime_endpoint'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      secondary_access_key: resource.field(self._.blocks, 'secondary_access_key'),
      sku_name: resource.field(self._.blocks, 'sku_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    cognitive_account_customer_managed_key(name, block): {
      local resource = blockType.resource('azurerm_cognitive_account_customer_managed_key', name),
      _: resource._(block, {
        cognitive_account_id: build.template(block.cognitive_account_id),
        id: build.template(std.get(block, 'id', null)),
        identity_client_id: build.template(std.get(block, 'identity_client_id', null)),
        key_vault_key_id: build.template(block.key_vault_key_id),
      }),
      cognitive_account_id: resource.field(self._.blocks, 'cognitive_account_id'),
      id: resource.field(self._.blocks, 'id'),
      identity_client_id: resource.field(self._.blocks, 'identity_client_id'),
      key_vault_key_id: resource.field(self._.blocks, 'key_vault_key_id'),
    },
    cognitive_account_rai_blocklist(name, block): {
      local resource = blockType.resource('azurerm_cognitive_account_rai_blocklist', name),
      _: resource._(block, {
        cognitive_account_id: build.template(block.cognitive_account_id),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
      }),
      cognitive_account_id: resource.field(self._.blocks, 'cognitive_account_id'),
      description: resource.field(self._.blocks, 'description'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
    },
    cognitive_account_rai_policy(name, block): {
      local resource = blockType.resource('azurerm_cognitive_account_rai_policy', name),
      _: resource._(block, {
        base_policy_name: build.template(block.base_policy_name),
        cognitive_account_id: build.template(block.cognitive_account_id),
        id: build.template(std.get(block, 'id', null)),
        mode: build.template(std.get(block, 'mode', null)),
        name: build.template(block.name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      base_policy_name: resource.field(self._.blocks, 'base_policy_name'),
      cognitive_account_id: resource.field(self._.blocks, 'cognitive_account_id'),
      id: resource.field(self._.blocks, 'id'),
      mode: resource.field(self._.blocks, 'mode'),
      name: resource.field(self._.blocks, 'name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    cognitive_deployment(name, block): {
      local resource = blockType.resource('azurerm_cognitive_deployment', name),
      _: resource._(block, {
        cognitive_account_id: build.template(block.cognitive_account_id),
        dynamic_throttling_enabled: build.template(std.get(block, 'dynamic_throttling_enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        rai_policy_name: build.template(std.get(block, 'rai_policy_name', null)),
        version_upgrade_option: build.template(std.get(block, 'version_upgrade_option', null)),
      }),
      cognitive_account_id: resource.field(self._.blocks, 'cognitive_account_id'),
      dynamic_throttling_enabled: resource.field(self._.blocks, 'dynamic_throttling_enabled'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      rai_policy_name: resource.field(self._.blocks, 'rai_policy_name'),
      version_upgrade_option: resource.field(self._.blocks, 'version_upgrade_option'),
    },
    communication_service(name, block): {
      local resource = blockType.resource('azurerm_communication_service', name),
      _: resource._(block, {
        data_location: build.template(std.get(block, 'data_location', null)),
        hostname: build.template(std.get(block, 'hostname', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        primary_connection_string: build.template(std.get(block, 'primary_connection_string', null)),
        primary_key: build.template(std.get(block, 'primary_key', null)),
        resource_group_name: build.template(block.resource_group_name),
        secondary_connection_string: build.template(std.get(block, 'secondary_connection_string', null)),
        secondary_key: build.template(std.get(block, 'secondary_key', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      data_location: resource.field(self._.blocks, 'data_location'),
      hostname: resource.field(self._.blocks, 'hostname'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      primary_connection_string: resource.field(self._.blocks, 'primary_connection_string'),
      primary_key: resource.field(self._.blocks, 'primary_key'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      secondary_connection_string: resource.field(self._.blocks, 'secondary_connection_string'),
      secondary_key: resource.field(self._.blocks, 'secondary_key'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    communication_service_email_domain_association(name, block): {
      local resource = blockType.resource('azurerm_communication_service_email_domain_association', name),
      _: resource._(block, {
        communication_service_id: build.template(block.communication_service_id),
        email_service_domain_id: build.template(block.email_service_domain_id),
        id: build.template(std.get(block, 'id', null)),
      }),
      communication_service_id: resource.field(self._.blocks, 'communication_service_id'),
      email_service_domain_id: resource.field(self._.blocks, 'email_service_domain_id'),
      id: resource.field(self._.blocks, 'id'),
    },
    confidential_ledger(name, block): {
      local resource = blockType.resource('azurerm_confidential_ledger', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        identity_service_endpoint: build.template(std.get(block, 'identity_service_endpoint', null)),
        ledger_endpoint: build.template(std.get(block, 'ledger_endpoint', null)),
        ledger_type: build.template(block.ledger_type),
        location: build.template(block.location),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      identity_service_endpoint: resource.field(self._.blocks, 'identity_service_endpoint'),
      ledger_endpoint: resource.field(self._.blocks, 'ledger_endpoint'),
      ledger_type: resource.field(self._.blocks, 'ledger_type'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    consumption_budget_management_group(name, block): {
      local resource = blockType.resource('azurerm_consumption_budget_management_group', name),
      _: resource._(block, {
        amount: build.template(block.amount),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        management_group_id: build.template(block.management_group_id),
        name: build.template(block.name),
        time_grain: build.template(std.get(block, 'time_grain', null)),
      }),
      amount: resource.field(self._.blocks, 'amount'),
      etag: resource.field(self._.blocks, 'etag'),
      id: resource.field(self._.blocks, 'id'),
      management_group_id: resource.field(self._.blocks, 'management_group_id'),
      name: resource.field(self._.blocks, 'name'),
      time_grain: resource.field(self._.blocks, 'time_grain'),
    },
    consumption_budget_resource_group(name, block): {
      local resource = blockType.resource('azurerm_consumption_budget_resource_group', name),
      _: resource._(block, {
        amount: build.template(block.amount),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        resource_group_id: build.template(block.resource_group_id),
        time_grain: build.template(std.get(block, 'time_grain', null)),
      }),
      amount: resource.field(self._.blocks, 'amount'),
      etag: resource.field(self._.blocks, 'etag'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_id: resource.field(self._.blocks, 'resource_group_id'),
      time_grain: resource.field(self._.blocks, 'time_grain'),
    },
    consumption_budget_subscription(name, block): {
      local resource = blockType.resource('azurerm_consumption_budget_subscription', name),
      _: resource._(block, {
        amount: build.template(block.amount),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        subscription_id: build.template(block.subscription_id),
        time_grain: build.template(std.get(block, 'time_grain', null)),
      }),
      amount: resource.field(self._.blocks, 'amount'),
      etag: resource.field(self._.blocks, 'etag'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      subscription_id: resource.field(self._.blocks, 'subscription_id'),
      time_grain: resource.field(self._.blocks, 'time_grain'),
    },
    container_app(name, block): {
      local resource = blockType.resource('azurerm_container_app', name),
      _: resource._(block, {
        container_app_environment_id: build.template(block.container_app_environment_id),
        custom_domain_verification_id: build.template(std.get(block, 'custom_domain_verification_id', null)),
        id: build.template(std.get(block, 'id', null)),
        latest_revision_fqdn: build.template(std.get(block, 'latest_revision_fqdn', null)),
        latest_revision_name: build.template(std.get(block, 'latest_revision_name', null)),
        location: build.template(std.get(block, 'location', null)),
        max_inactive_revisions: build.template(std.get(block, 'max_inactive_revisions', null)),
        name: build.template(block.name),
        outbound_ip_addresses: build.template(std.get(block, 'outbound_ip_addresses', null)),
        resource_group_name: build.template(block.resource_group_name),
        revision_mode: build.template(block.revision_mode),
        tags: build.template(std.get(block, 'tags', null)),
        workload_profile_name: build.template(std.get(block, 'workload_profile_name', null)),
      }),
      container_app_environment_id: resource.field(self._.blocks, 'container_app_environment_id'),
      custom_domain_verification_id: resource.field(self._.blocks, 'custom_domain_verification_id'),
      id: resource.field(self._.blocks, 'id'),
      latest_revision_fqdn: resource.field(self._.blocks, 'latest_revision_fqdn'),
      latest_revision_name: resource.field(self._.blocks, 'latest_revision_name'),
      location: resource.field(self._.blocks, 'location'),
      max_inactive_revisions: resource.field(self._.blocks, 'max_inactive_revisions'),
      name: resource.field(self._.blocks, 'name'),
      outbound_ip_addresses: resource.field(self._.blocks, 'outbound_ip_addresses'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      revision_mode: resource.field(self._.blocks, 'revision_mode'),
      tags: resource.field(self._.blocks, 'tags'),
      workload_profile_name: resource.field(self._.blocks, 'workload_profile_name'),
    },
    container_app_custom_domain(name, block): {
      local resource = blockType.resource('azurerm_container_app_custom_domain', name),
      _: resource._(block, {
        certificate_binding_type: build.template(std.get(block, 'certificate_binding_type', null)),
        container_app_environment_certificate_id: build.template(std.get(block, 'container_app_environment_certificate_id', null)),
        container_app_environment_managed_certificate_id: build.template(std.get(block, 'container_app_environment_managed_certificate_id', null)),
        container_app_id: build.template(block.container_app_id),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
      }),
      certificate_binding_type: resource.field(self._.blocks, 'certificate_binding_type'),
      container_app_environment_certificate_id: resource.field(self._.blocks, 'container_app_environment_certificate_id'),
      container_app_environment_managed_certificate_id: resource.field(self._.blocks, 'container_app_environment_managed_certificate_id'),
      container_app_id: resource.field(self._.blocks, 'container_app_id'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
    },
    container_app_environment(name, block): {
      local resource = blockType.resource('azurerm_container_app_environment', name),
      _: resource._(block, {
        custom_domain_verification_id: build.template(std.get(block, 'custom_domain_verification_id', null)),
        dapr_application_insights_connection_string: build.template(std.get(block, 'dapr_application_insights_connection_string', null)),
        default_domain: build.template(std.get(block, 'default_domain', null)),
        docker_bridge_cidr: build.template(std.get(block, 'docker_bridge_cidr', null)),
        id: build.template(std.get(block, 'id', null)),
        infrastructure_resource_group_name: build.template(std.get(block, 'infrastructure_resource_group_name', null)),
        infrastructure_subnet_id: build.template(std.get(block, 'infrastructure_subnet_id', null)),
        internal_load_balancer_enabled: build.template(std.get(block, 'internal_load_balancer_enabled', null)),
        location: build.template(block.location),
        log_analytics_workspace_id: build.template(std.get(block, 'log_analytics_workspace_id', null)),
        logs_destination: build.template(std.get(block, 'logs_destination', null)),
        mutual_tls_enabled: build.template(std.get(block, 'mutual_tls_enabled', null)),
        name: build.template(block.name),
        platform_reserved_cidr: build.template(std.get(block, 'platform_reserved_cidr', null)),
        platform_reserved_dns_ip_address: build.template(std.get(block, 'platform_reserved_dns_ip_address', null)),
        resource_group_name: build.template(block.resource_group_name),
        static_ip_address: build.template(std.get(block, 'static_ip_address', null)),
        tags: build.template(std.get(block, 'tags', null)),
        zone_redundancy_enabled: build.template(std.get(block, 'zone_redundancy_enabled', null)),
      }),
      custom_domain_verification_id: resource.field(self._.blocks, 'custom_domain_verification_id'),
      dapr_application_insights_connection_string: resource.field(self._.blocks, 'dapr_application_insights_connection_string'),
      default_domain: resource.field(self._.blocks, 'default_domain'),
      docker_bridge_cidr: resource.field(self._.blocks, 'docker_bridge_cidr'),
      id: resource.field(self._.blocks, 'id'),
      infrastructure_resource_group_name: resource.field(self._.blocks, 'infrastructure_resource_group_name'),
      infrastructure_subnet_id: resource.field(self._.blocks, 'infrastructure_subnet_id'),
      internal_load_balancer_enabled: resource.field(self._.blocks, 'internal_load_balancer_enabled'),
      location: resource.field(self._.blocks, 'location'),
      log_analytics_workspace_id: resource.field(self._.blocks, 'log_analytics_workspace_id'),
      logs_destination: resource.field(self._.blocks, 'logs_destination'),
      mutual_tls_enabled: resource.field(self._.blocks, 'mutual_tls_enabled'),
      name: resource.field(self._.blocks, 'name'),
      platform_reserved_cidr: resource.field(self._.blocks, 'platform_reserved_cidr'),
      platform_reserved_dns_ip_address: resource.field(self._.blocks, 'platform_reserved_dns_ip_address'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      static_ip_address: resource.field(self._.blocks, 'static_ip_address'),
      tags: resource.field(self._.blocks, 'tags'),
      zone_redundancy_enabled: resource.field(self._.blocks, 'zone_redundancy_enabled'),
    },
    container_app_environment_certificate(name, block): {
      local resource = blockType.resource('azurerm_container_app_environment_certificate', name),
      _: resource._(block, {
        certificate_blob_base64: build.template(block.certificate_blob_base64),
        certificate_password: build.template(block.certificate_password),
        container_app_environment_id: build.template(block.container_app_environment_id),
        expiration_date: build.template(std.get(block, 'expiration_date', null)),
        id: build.template(std.get(block, 'id', null)),
        issue_date: build.template(std.get(block, 'issue_date', null)),
        issuer: build.template(std.get(block, 'issuer', null)),
        name: build.template(block.name),
        subject_name: build.template(std.get(block, 'subject_name', null)),
        tags: build.template(std.get(block, 'tags', null)),
        thumbprint: build.template(std.get(block, 'thumbprint', null)),
      }),
      certificate_blob_base64: resource.field(self._.blocks, 'certificate_blob_base64'),
      certificate_password: resource.field(self._.blocks, 'certificate_password'),
      container_app_environment_id: resource.field(self._.blocks, 'container_app_environment_id'),
      expiration_date: resource.field(self._.blocks, 'expiration_date'),
      id: resource.field(self._.blocks, 'id'),
      issue_date: resource.field(self._.blocks, 'issue_date'),
      issuer: resource.field(self._.blocks, 'issuer'),
      name: resource.field(self._.blocks, 'name'),
      subject_name: resource.field(self._.blocks, 'subject_name'),
      tags: resource.field(self._.blocks, 'tags'),
      thumbprint: resource.field(self._.blocks, 'thumbprint'),
    },
    container_app_environment_custom_domain(name, block): {
      local resource = blockType.resource('azurerm_container_app_environment_custom_domain', name),
      _: resource._(block, {
        certificate_blob_base64: build.template(block.certificate_blob_base64),
        certificate_password: build.template(block.certificate_password),
        container_app_environment_id: build.template(block.container_app_environment_id),
        dns_suffix: build.template(block.dns_suffix),
        id: build.template(std.get(block, 'id', null)),
      }),
      certificate_blob_base64: resource.field(self._.blocks, 'certificate_blob_base64'),
      certificate_password: resource.field(self._.blocks, 'certificate_password'),
      container_app_environment_id: resource.field(self._.blocks, 'container_app_environment_id'),
      dns_suffix: resource.field(self._.blocks, 'dns_suffix'),
      id: resource.field(self._.blocks, 'id'),
    },
    container_app_environment_dapr_component(name, block): {
      local resource = blockType.resource('azurerm_container_app_environment_dapr_component', name),
      _: resource._(block, {
        component_type: build.template(block.component_type),
        container_app_environment_id: build.template(block.container_app_environment_id),
        id: build.template(std.get(block, 'id', null)),
        ignore_errors: build.template(std.get(block, 'ignore_errors', null)),
        init_timeout: build.template(std.get(block, 'init_timeout', null)),
        name: build.template(block.name),
        scopes: build.template(std.get(block, 'scopes', null)),
        version: build.template(block.version),
      }),
      component_type: resource.field(self._.blocks, 'component_type'),
      container_app_environment_id: resource.field(self._.blocks, 'container_app_environment_id'),
      id: resource.field(self._.blocks, 'id'),
      ignore_errors: resource.field(self._.blocks, 'ignore_errors'),
      init_timeout: resource.field(self._.blocks, 'init_timeout'),
      name: resource.field(self._.blocks, 'name'),
      scopes: resource.field(self._.blocks, 'scopes'),
      version: resource.field(self._.blocks, 'version'),
    },
    container_app_environment_storage(name, block): {
      local resource = blockType.resource('azurerm_container_app_environment_storage', name),
      _: resource._(block, {
        access_key: build.template(block.access_key),
        access_mode: build.template(block.access_mode),
        account_name: build.template(block.account_name),
        container_app_environment_id: build.template(block.container_app_environment_id),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        share_name: build.template(block.share_name),
      }),
      access_key: resource.field(self._.blocks, 'access_key'),
      access_mode: resource.field(self._.blocks, 'access_mode'),
      account_name: resource.field(self._.blocks, 'account_name'),
      container_app_environment_id: resource.field(self._.blocks, 'container_app_environment_id'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      share_name: resource.field(self._.blocks, 'share_name'),
    },
    container_app_job(name, block): {
      local resource = blockType.resource('azurerm_container_app_job', name),
      _: resource._(block, {
        container_app_environment_id: build.template(block.container_app_environment_id),
        event_stream_endpoint: build.template(std.get(block, 'event_stream_endpoint', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        outbound_ip_addresses: build.template(std.get(block, 'outbound_ip_addresses', null)),
        replica_retry_limit: build.template(std.get(block, 'replica_retry_limit', null)),
        replica_timeout_in_seconds: build.template(block.replica_timeout_in_seconds),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
        workload_profile_name: build.template(std.get(block, 'workload_profile_name', null)),
      }),
      container_app_environment_id: resource.field(self._.blocks, 'container_app_environment_id'),
      event_stream_endpoint: resource.field(self._.blocks, 'event_stream_endpoint'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      outbound_ip_addresses: resource.field(self._.blocks, 'outbound_ip_addresses'),
      replica_retry_limit: resource.field(self._.blocks, 'replica_retry_limit'),
      replica_timeout_in_seconds: resource.field(self._.blocks, 'replica_timeout_in_seconds'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
      workload_profile_name: resource.field(self._.blocks, 'workload_profile_name'),
    },
    container_connected_registry(name, block): {
      local resource = blockType.resource('azurerm_container_connected_registry', name),
      _: resource._(block, {
        audit_log_enabled: build.template(std.get(block, 'audit_log_enabled', null)),
        client_token_ids: build.template(std.get(block, 'client_token_ids', null)),
        container_registry_id: build.template(block.container_registry_id),
        id: build.template(std.get(block, 'id', null)),
        log_level: build.template(std.get(block, 'log_level', null)),
        mode: build.template(std.get(block, 'mode', null)),
        name: build.template(block.name),
        parent_registry_id: build.template(std.get(block, 'parent_registry_id', null)),
        sync_message_ttl: build.template(std.get(block, 'sync_message_ttl', null)),
        sync_schedule: build.template(std.get(block, 'sync_schedule', null)),
        sync_token_id: build.template(block.sync_token_id),
        sync_window: build.template(std.get(block, 'sync_window', null)),
      }),
      audit_log_enabled: resource.field(self._.blocks, 'audit_log_enabled'),
      client_token_ids: resource.field(self._.blocks, 'client_token_ids'),
      container_registry_id: resource.field(self._.blocks, 'container_registry_id'),
      id: resource.field(self._.blocks, 'id'),
      log_level: resource.field(self._.blocks, 'log_level'),
      mode: resource.field(self._.blocks, 'mode'),
      name: resource.field(self._.blocks, 'name'),
      parent_registry_id: resource.field(self._.blocks, 'parent_registry_id'),
      sync_message_ttl: resource.field(self._.blocks, 'sync_message_ttl'),
      sync_schedule: resource.field(self._.blocks, 'sync_schedule'),
      sync_token_id: resource.field(self._.blocks, 'sync_token_id'),
      sync_window: resource.field(self._.blocks, 'sync_window'),
    },
    container_group(name, block): {
      local resource = blockType.resource('azurerm_container_group', name),
      _: resource._(block, {
        dns_name_label: build.template(std.get(block, 'dns_name_label', null)),
        dns_name_label_reuse_policy: build.template(std.get(block, 'dns_name_label_reuse_policy', null)),
        exposed_port: build.template(std.get(block, 'exposed_port', null)),
        fqdn: build.template(std.get(block, 'fqdn', null)),
        id: build.template(std.get(block, 'id', null)),
        ip_address: build.template(std.get(block, 'ip_address', null)),
        ip_address_type: build.template(std.get(block, 'ip_address_type', null)),
        key_vault_key_id: build.template(std.get(block, 'key_vault_key_id', null)),
        key_vault_user_assigned_identity_id: build.template(std.get(block, 'key_vault_user_assigned_identity_id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        network_profile_id: build.template(std.get(block, 'network_profile_id', null)),
        os_type: build.template(block.os_type),
        priority: build.template(std.get(block, 'priority', null)),
        resource_group_name: build.template(block.resource_group_name),
        restart_policy: build.template(std.get(block, 'restart_policy', null)),
        sku: build.template(std.get(block, 'sku', null)),
        subnet_ids: build.template(std.get(block, 'subnet_ids', null)),
        tags: build.template(std.get(block, 'tags', null)),
        zones: build.template(std.get(block, 'zones', null)),
      }),
      dns_name_label: resource.field(self._.blocks, 'dns_name_label'),
      dns_name_label_reuse_policy: resource.field(self._.blocks, 'dns_name_label_reuse_policy'),
      exposed_port: resource.field(self._.blocks, 'exposed_port'),
      fqdn: resource.field(self._.blocks, 'fqdn'),
      id: resource.field(self._.blocks, 'id'),
      ip_address: resource.field(self._.blocks, 'ip_address'),
      ip_address_type: resource.field(self._.blocks, 'ip_address_type'),
      key_vault_key_id: resource.field(self._.blocks, 'key_vault_key_id'),
      key_vault_user_assigned_identity_id: resource.field(self._.blocks, 'key_vault_user_assigned_identity_id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      network_profile_id: resource.field(self._.blocks, 'network_profile_id'),
      os_type: resource.field(self._.blocks, 'os_type'),
      priority: resource.field(self._.blocks, 'priority'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      restart_policy: resource.field(self._.blocks, 'restart_policy'),
      sku: resource.field(self._.blocks, 'sku'),
      subnet_ids: resource.field(self._.blocks, 'subnet_ids'),
      tags: resource.field(self._.blocks, 'tags'),
      zones: resource.field(self._.blocks, 'zones'),
    },
    container_registry(name, block): {
      local resource = blockType.resource('azurerm_container_registry', name),
      _: resource._(block, {
        admin_enabled: build.template(std.get(block, 'admin_enabled', null)),
        admin_password: build.template(std.get(block, 'admin_password', null)),
        admin_username: build.template(std.get(block, 'admin_username', null)),
        anonymous_pull_enabled: build.template(std.get(block, 'anonymous_pull_enabled', null)),
        data_endpoint_enabled: build.template(std.get(block, 'data_endpoint_enabled', null)),
        encryption: build.template(std.get(block, 'encryption', null)),
        export_policy_enabled: build.template(std.get(block, 'export_policy_enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        login_server: build.template(std.get(block, 'login_server', null)),
        name: build.template(block.name),
        network_rule_bypass_option: build.template(std.get(block, 'network_rule_bypass_option', null)),
        network_rule_set: build.template(std.get(block, 'network_rule_set', null)),
        public_network_access_enabled: build.template(std.get(block, 'public_network_access_enabled', null)),
        quarantine_policy_enabled: build.template(std.get(block, 'quarantine_policy_enabled', null)),
        resource_group_name: build.template(block.resource_group_name),
        retention_policy_in_days: build.template(std.get(block, 'retention_policy_in_days', null)),
        sku: build.template(block.sku),
        tags: build.template(std.get(block, 'tags', null)),
        trust_policy_enabled: build.template(std.get(block, 'trust_policy_enabled', null)),
        zone_redundancy_enabled: build.template(std.get(block, 'zone_redundancy_enabled', null)),
      }),
      admin_enabled: resource.field(self._.blocks, 'admin_enabled'),
      admin_password: resource.field(self._.blocks, 'admin_password'),
      admin_username: resource.field(self._.blocks, 'admin_username'),
      anonymous_pull_enabled: resource.field(self._.blocks, 'anonymous_pull_enabled'),
      data_endpoint_enabled: resource.field(self._.blocks, 'data_endpoint_enabled'),
      encryption: resource.field(self._.blocks, 'encryption'),
      export_policy_enabled: resource.field(self._.blocks, 'export_policy_enabled'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      login_server: resource.field(self._.blocks, 'login_server'),
      name: resource.field(self._.blocks, 'name'),
      network_rule_bypass_option: resource.field(self._.blocks, 'network_rule_bypass_option'),
      network_rule_set: resource.field(self._.blocks, 'network_rule_set'),
      public_network_access_enabled: resource.field(self._.blocks, 'public_network_access_enabled'),
      quarantine_policy_enabled: resource.field(self._.blocks, 'quarantine_policy_enabled'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      retention_policy_in_days: resource.field(self._.blocks, 'retention_policy_in_days'),
      sku: resource.field(self._.blocks, 'sku'),
      tags: resource.field(self._.blocks, 'tags'),
      trust_policy_enabled: resource.field(self._.blocks, 'trust_policy_enabled'),
      zone_redundancy_enabled: resource.field(self._.blocks, 'zone_redundancy_enabled'),
    },
    container_registry_agent_pool(name, block): {
      local resource = blockType.resource('azurerm_container_registry_agent_pool', name),
      _: resource._(block, {
        container_registry_name: build.template(block.container_registry_name),
        id: build.template(std.get(block, 'id', null)),
        instance_count: build.template(std.get(block, 'instance_count', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
        tier: build.template(std.get(block, 'tier', null)),
        virtual_network_subnet_id: build.template(std.get(block, 'virtual_network_subnet_id', null)),
      }),
      container_registry_name: resource.field(self._.blocks, 'container_registry_name'),
      id: resource.field(self._.blocks, 'id'),
      instance_count: resource.field(self._.blocks, 'instance_count'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
      tier: resource.field(self._.blocks, 'tier'),
      virtual_network_subnet_id: resource.field(self._.blocks, 'virtual_network_subnet_id'),
    },
    container_registry_cache_rule(name, block): {
      local resource = blockType.resource('azurerm_container_registry_cache_rule', name),
      _: resource._(block, {
        container_registry_id: build.template(block.container_registry_id),
        credential_set_id: build.template(std.get(block, 'credential_set_id', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        source_repo: build.template(block.source_repo),
        target_repo: build.template(block.target_repo),
      }),
      container_registry_id: resource.field(self._.blocks, 'container_registry_id'),
      credential_set_id: resource.field(self._.blocks, 'credential_set_id'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      source_repo: resource.field(self._.blocks, 'source_repo'),
      target_repo: resource.field(self._.blocks, 'target_repo'),
    },
    container_registry_credential_set(name, block): {
      local resource = blockType.resource('azurerm_container_registry_credential_set', name),
      _: resource._(block, {
        container_registry_id: build.template(block.container_registry_id),
        id: build.template(std.get(block, 'id', null)),
        login_server: build.template(block.login_server),
        name: build.template(block.name),
      }),
      container_registry_id: resource.field(self._.blocks, 'container_registry_id'),
      id: resource.field(self._.blocks, 'id'),
      login_server: resource.field(self._.blocks, 'login_server'),
      name: resource.field(self._.blocks, 'name'),
    },
    container_registry_scope_map(name, block): {
      local resource = blockType.resource('azurerm_container_registry_scope_map', name),
      _: resource._(block, {
        actions: build.template(block.actions),
        container_registry_name: build.template(block.container_registry_name),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
      }),
      actions: resource.field(self._.blocks, 'actions'),
      container_registry_name: resource.field(self._.blocks, 'container_registry_name'),
      description: resource.field(self._.blocks, 'description'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
    },
    container_registry_task(name, block): {
      local resource = blockType.resource('azurerm_container_registry_task', name),
      _: resource._(block, {
        agent_pool_name: build.template(std.get(block, 'agent_pool_name', null)),
        container_registry_id: build.template(block.container_registry_id),
        enabled: build.template(std.get(block, 'enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        is_system_task: build.template(std.get(block, 'is_system_task', null)),
        log_template: build.template(std.get(block, 'log_template', null)),
        name: build.template(block.name),
        tags: build.template(std.get(block, 'tags', null)),
        timeout_in_seconds: build.template(std.get(block, 'timeout_in_seconds', null)),
      }),
      agent_pool_name: resource.field(self._.blocks, 'agent_pool_name'),
      container_registry_id: resource.field(self._.blocks, 'container_registry_id'),
      enabled: resource.field(self._.blocks, 'enabled'),
      id: resource.field(self._.blocks, 'id'),
      is_system_task: resource.field(self._.blocks, 'is_system_task'),
      log_template: resource.field(self._.blocks, 'log_template'),
      name: resource.field(self._.blocks, 'name'),
      tags: resource.field(self._.blocks, 'tags'),
      timeout_in_seconds: resource.field(self._.blocks, 'timeout_in_seconds'),
    },
    container_registry_task_schedule_run_now(name, block): {
      local resource = blockType.resource('azurerm_container_registry_task_schedule_run_now', name),
      _: resource._(block, {
        container_registry_task_id: build.template(block.container_registry_task_id),
        id: build.template(std.get(block, 'id', null)),
      }),
      container_registry_task_id: resource.field(self._.blocks, 'container_registry_task_id'),
      id: resource.field(self._.blocks, 'id'),
    },
    container_registry_token(name, block): {
      local resource = blockType.resource('azurerm_container_registry_token', name),
      _: resource._(block, {
        container_registry_name: build.template(block.container_registry_name),
        enabled: build.template(std.get(block, 'enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        scope_map_id: build.template(block.scope_map_id),
      }),
      container_registry_name: resource.field(self._.blocks, 'container_registry_name'),
      enabled: resource.field(self._.blocks, 'enabled'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      scope_map_id: resource.field(self._.blocks, 'scope_map_id'),
    },
    container_registry_token_password(name, block): {
      local resource = blockType.resource('azurerm_container_registry_token_password', name),
      _: resource._(block, {
        container_registry_token_id: build.template(block.container_registry_token_id),
        id: build.template(std.get(block, 'id', null)),
      }),
      container_registry_token_id: resource.field(self._.blocks, 'container_registry_token_id'),
      id: resource.field(self._.blocks, 'id'),
    },
    container_registry_webhook(name, block): {
      local resource = blockType.resource('azurerm_container_registry_webhook', name),
      _: resource._(block, {
        actions: build.template(block.actions),
        custom_headers: build.template(std.get(block, 'custom_headers', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        registry_name: build.template(block.registry_name),
        resource_group_name: build.template(block.resource_group_name),
        scope: build.template(std.get(block, 'scope', null)),
        service_uri: build.template(block.service_uri),
        status: build.template(std.get(block, 'status', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      actions: resource.field(self._.blocks, 'actions'),
      custom_headers: resource.field(self._.blocks, 'custom_headers'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      registry_name: resource.field(self._.blocks, 'registry_name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      scope: resource.field(self._.blocks, 'scope'),
      service_uri: resource.field(self._.blocks, 'service_uri'),
      status: resource.field(self._.blocks, 'status'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    cosmosdb_account(name, block): {
      local resource = blockType.resource('azurerm_cosmosdb_account', name),
      _: resource._(block, {
        access_key_metadata_writes_enabled: build.template(std.get(block, 'access_key_metadata_writes_enabled', null)),
        analytical_storage_enabled: build.template(std.get(block, 'analytical_storage_enabled', null)),
        automatic_failover_enabled: build.template(std.get(block, 'automatic_failover_enabled', null)),
        burst_capacity_enabled: build.template(std.get(block, 'burst_capacity_enabled', null)),
        create_mode: build.template(std.get(block, 'create_mode', null)),
        default_identity_type: build.template(std.get(block, 'default_identity_type', null)),
        endpoint: build.template(std.get(block, 'endpoint', null)),
        free_tier_enabled: build.template(std.get(block, 'free_tier_enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        ip_range_filter: build.template(std.get(block, 'ip_range_filter', null)),
        is_virtual_network_filter_enabled: build.template(std.get(block, 'is_virtual_network_filter_enabled', null)),
        key_vault_key_id: build.template(std.get(block, 'key_vault_key_id', null)),
        kind: build.template(std.get(block, 'kind', null)),
        local_authentication_disabled: build.template(std.get(block, 'local_authentication_disabled', null)),
        location: build.template(block.location),
        managed_hsm_key_id: build.template(std.get(block, 'managed_hsm_key_id', null)),
        minimal_tls_version: build.template(std.get(block, 'minimal_tls_version', null)),
        mongo_server_version: build.template(std.get(block, 'mongo_server_version', null)),
        multiple_write_locations_enabled: build.template(std.get(block, 'multiple_write_locations_enabled', null)),
        name: build.template(block.name),
        network_acl_bypass_for_azure_services: build.template(std.get(block, 'network_acl_bypass_for_azure_services', null)),
        network_acl_bypass_ids: build.template(std.get(block, 'network_acl_bypass_ids', null)),
        offer_type: build.template(block.offer_type),
        partition_merge_enabled: build.template(std.get(block, 'partition_merge_enabled', null)),
        primary_key: build.template(std.get(block, 'primary_key', null)),
        primary_mongodb_connection_string: build.template(std.get(block, 'primary_mongodb_connection_string', null)),
        primary_readonly_key: build.template(std.get(block, 'primary_readonly_key', null)),
        primary_readonly_mongodb_connection_string: build.template(std.get(block, 'primary_readonly_mongodb_connection_string', null)),
        primary_readonly_sql_connection_string: build.template(std.get(block, 'primary_readonly_sql_connection_string', null)),
        primary_sql_connection_string: build.template(std.get(block, 'primary_sql_connection_string', null)),
        public_network_access_enabled: build.template(std.get(block, 'public_network_access_enabled', null)),
        read_endpoints: build.template(std.get(block, 'read_endpoints', null)),
        resource_group_name: build.template(block.resource_group_name),
        secondary_key: build.template(std.get(block, 'secondary_key', null)),
        secondary_mongodb_connection_string: build.template(std.get(block, 'secondary_mongodb_connection_string', null)),
        secondary_readonly_key: build.template(std.get(block, 'secondary_readonly_key', null)),
        secondary_readonly_mongodb_connection_string: build.template(std.get(block, 'secondary_readonly_mongodb_connection_string', null)),
        secondary_readonly_sql_connection_string: build.template(std.get(block, 'secondary_readonly_sql_connection_string', null)),
        secondary_sql_connection_string: build.template(std.get(block, 'secondary_sql_connection_string', null)),
        tags: build.template(std.get(block, 'tags', null)),
        write_endpoints: build.template(std.get(block, 'write_endpoints', null)),
      }),
      access_key_metadata_writes_enabled: resource.field(self._.blocks, 'access_key_metadata_writes_enabled'),
      analytical_storage_enabled: resource.field(self._.blocks, 'analytical_storage_enabled'),
      automatic_failover_enabled: resource.field(self._.blocks, 'automatic_failover_enabled'),
      burst_capacity_enabled: resource.field(self._.blocks, 'burst_capacity_enabled'),
      create_mode: resource.field(self._.blocks, 'create_mode'),
      default_identity_type: resource.field(self._.blocks, 'default_identity_type'),
      endpoint: resource.field(self._.blocks, 'endpoint'),
      free_tier_enabled: resource.field(self._.blocks, 'free_tier_enabled'),
      id: resource.field(self._.blocks, 'id'),
      ip_range_filter: resource.field(self._.blocks, 'ip_range_filter'),
      is_virtual_network_filter_enabled: resource.field(self._.blocks, 'is_virtual_network_filter_enabled'),
      key_vault_key_id: resource.field(self._.blocks, 'key_vault_key_id'),
      kind: resource.field(self._.blocks, 'kind'),
      local_authentication_disabled: resource.field(self._.blocks, 'local_authentication_disabled'),
      location: resource.field(self._.blocks, 'location'),
      managed_hsm_key_id: resource.field(self._.blocks, 'managed_hsm_key_id'),
      minimal_tls_version: resource.field(self._.blocks, 'minimal_tls_version'),
      mongo_server_version: resource.field(self._.blocks, 'mongo_server_version'),
      multiple_write_locations_enabled: resource.field(self._.blocks, 'multiple_write_locations_enabled'),
      name: resource.field(self._.blocks, 'name'),
      network_acl_bypass_for_azure_services: resource.field(self._.blocks, 'network_acl_bypass_for_azure_services'),
      network_acl_bypass_ids: resource.field(self._.blocks, 'network_acl_bypass_ids'),
      offer_type: resource.field(self._.blocks, 'offer_type'),
      partition_merge_enabled: resource.field(self._.blocks, 'partition_merge_enabled'),
      primary_key: resource.field(self._.blocks, 'primary_key'),
      primary_mongodb_connection_string: resource.field(self._.blocks, 'primary_mongodb_connection_string'),
      primary_readonly_key: resource.field(self._.blocks, 'primary_readonly_key'),
      primary_readonly_mongodb_connection_string: resource.field(self._.blocks, 'primary_readonly_mongodb_connection_string'),
      primary_readonly_sql_connection_string: resource.field(self._.blocks, 'primary_readonly_sql_connection_string'),
      primary_sql_connection_string: resource.field(self._.blocks, 'primary_sql_connection_string'),
      public_network_access_enabled: resource.field(self._.blocks, 'public_network_access_enabled'),
      read_endpoints: resource.field(self._.blocks, 'read_endpoints'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      secondary_key: resource.field(self._.blocks, 'secondary_key'),
      secondary_mongodb_connection_string: resource.field(self._.blocks, 'secondary_mongodb_connection_string'),
      secondary_readonly_key: resource.field(self._.blocks, 'secondary_readonly_key'),
      secondary_readonly_mongodb_connection_string: resource.field(self._.blocks, 'secondary_readonly_mongodb_connection_string'),
      secondary_readonly_sql_connection_string: resource.field(self._.blocks, 'secondary_readonly_sql_connection_string'),
      secondary_sql_connection_string: resource.field(self._.blocks, 'secondary_sql_connection_string'),
      tags: resource.field(self._.blocks, 'tags'),
      write_endpoints: resource.field(self._.blocks, 'write_endpoints'),
    },
    cosmosdb_cassandra_cluster(name, block): {
      local resource = blockType.resource('azurerm_cosmosdb_cassandra_cluster', name),
      _: resource._(block, {
        authentication_method: build.template(std.get(block, 'authentication_method', null)),
        client_certificate_pems: build.template(std.get(block, 'client_certificate_pems', null)),
        default_admin_password: build.template(block.default_admin_password),
        delegated_management_subnet_id: build.template(block.delegated_management_subnet_id),
        external_gossip_certificate_pems: build.template(std.get(block, 'external_gossip_certificate_pems', null)),
        external_seed_node_ip_addresses: build.template(std.get(block, 'external_seed_node_ip_addresses', null)),
        hours_between_backups: build.template(std.get(block, 'hours_between_backups', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        repair_enabled: build.template(std.get(block, 'repair_enabled', null)),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
        version: build.template(std.get(block, 'version', null)),
      }),
      authentication_method: resource.field(self._.blocks, 'authentication_method'),
      client_certificate_pems: resource.field(self._.blocks, 'client_certificate_pems'),
      default_admin_password: resource.field(self._.blocks, 'default_admin_password'),
      delegated_management_subnet_id: resource.field(self._.blocks, 'delegated_management_subnet_id'),
      external_gossip_certificate_pems: resource.field(self._.blocks, 'external_gossip_certificate_pems'),
      external_seed_node_ip_addresses: resource.field(self._.blocks, 'external_seed_node_ip_addresses'),
      hours_between_backups: resource.field(self._.blocks, 'hours_between_backups'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      repair_enabled: resource.field(self._.blocks, 'repair_enabled'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
      version: resource.field(self._.blocks, 'version'),
    },
    cosmosdb_cassandra_datacenter(name, block): {
      local resource = blockType.resource('azurerm_cosmosdb_cassandra_datacenter', name),
      _: resource._(block, {
        availability_zones_enabled: build.template(std.get(block, 'availability_zones_enabled', null)),
        backup_storage_customer_key_uri: build.template(std.get(block, 'backup_storage_customer_key_uri', null)),
        base64_encoded_yaml_fragment: build.template(std.get(block, 'base64_encoded_yaml_fragment', null)),
        cassandra_cluster_id: build.template(block.cassandra_cluster_id),
        delegated_management_subnet_id: build.template(block.delegated_management_subnet_id),
        disk_count: build.template(std.get(block, 'disk_count', null)),
        disk_sku: build.template(std.get(block, 'disk_sku', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        managed_disk_customer_key_uri: build.template(std.get(block, 'managed_disk_customer_key_uri', null)),
        name: build.template(block.name),
        node_count: build.template(std.get(block, 'node_count', null)),
        seed_node_ip_addresses: build.template(std.get(block, 'seed_node_ip_addresses', null)),
        sku_name: build.template(std.get(block, 'sku_name', null)),
      }),
      availability_zones_enabled: resource.field(self._.blocks, 'availability_zones_enabled'),
      backup_storage_customer_key_uri: resource.field(self._.blocks, 'backup_storage_customer_key_uri'),
      base64_encoded_yaml_fragment: resource.field(self._.blocks, 'base64_encoded_yaml_fragment'),
      cassandra_cluster_id: resource.field(self._.blocks, 'cassandra_cluster_id'),
      delegated_management_subnet_id: resource.field(self._.blocks, 'delegated_management_subnet_id'),
      disk_count: resource.field(self._.blocks, 'disk_count'),
      disk_sku: resource.field(self._.blocks, 'disk_sku'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      managed_disk_customer_key_uri: resource.field(self._.blocks, 'managed_disk_customer_key_uri'),
      name: resource.field(self._.blocks, 'name'),
      node_count: resource.field(self._.blocks, 'node_count'),
      seed_node_ip_addresses: resource.field(self._.blocks, 'seed_node_ip_addresses'),
      sku_name: resource.field(self._.blocks, 'sku_name'),
    },
    cosmosdb_cassandra_keyspace(name, block): {
      local resource = blockType.resource('azurerm_cosmosdb_cassandra_keyspace', name),
      _: resource._(block, {
        account_name: build.template(block.account_name),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        throughput: build.template(std.get(block, 'throughput', null)),
      }),
      account_name: resource.field(self._.blocks, 'account_name'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      throughput: resource.field(self._.blocks, 'throughput'),
    },
    cosmosdb_cassandra_table(name, block): {
      local resource = blockType.resource('azurerm_cosmosdb_cassandra_table', name),
      _: resource._(block, {
        analytical_storage_ttl: build.template(std.get(block, 'analytical_storage_ttl', null)),
        cassandra_keyspace_id: build.template(block.cassandra_keyspace_id),
        default_ttl: build.template(std.get(block, 'default_ttl', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        throughput: build.template(std.get(block, 'throughput', null)),
      }),
      analytical_storage_ttl: resource.field(self._.blocks, 'analytical_storage_ttl'),
      cassandra_keyspace_id: resource.field(self._.blocks, 'cassandra_keyspace_id'),
      default_ttl: resource.field(self._.blocks, 'default_ttl'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      throughput: resource.field(self._.blocks, 'throughput'),
    },
    cosmosdb_gremlin_database(name, block): {
      local resource = blockType.resource('azurerm_cosmosdb_gremlin_database', name),
      _: resource._(block, {
        account_name: build.template(block.account_name),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        throughput: build.template(std.get(block, 'throughput', null)),
      }),
      account_name: resource.field(self._.blocks, 'account_name'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      throughput: resource.field(self._.blocks, 'throughput'),
    },
    cosmosdb_gremlin_graph(name, block): {
      local resource = blockType.resource('azurerm_cosmosdb_gremlin_graph', name),
      _: resource._(block, {
        account_name: build.template(block.account_name),
        analytical_storage_ttl: build.template(std.get(block, 'analytical_storage_ttl', null)),
        database_name: build.template(block.database_name),
        default_ttl: build.template(std.get(block, 'default_ttl', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        partition_key_path: build.template(block.partition_key_path),
        partition_key_version: build.template(std.get(block, 'partition_key_version', null)),
        resource_group_name: build.template(block.resource_group_name),
        throughput: build.template(std.get(block, 'throughput', null)),
      }),
      account_name: resource.field(self._.blocks, 'account_name'),
      analytical_storage_ttl: resource.field(self._.blocks, 'analytical_storage_ttl'),
      database_name: resource.field(self._.blocks, 'database_name'),
      default_ttl: resource.field(self._.blocks, 'default_ttl'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      partition_key_path: resource.field(self._.blocks, 'partition_key_path'),
      partition_key_version: resource.field(self._.blocks, 'partition_key_version'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      throughput: resource.field(self._.blocks, 'throughput'),
    },
    cosmosdb_mongo_collection(name, block): {
      local resource = blockType.resource('azurerm_cosmosdb_mongo_collection', name),
      _: resource._(block, {
        account_name: build.template(block.account_name),
        analytical_storage_ttl: build.template(std.get(block, 'analytical_storage_ttl', null)),
        database_name: build.template(block.database_name),
        default_ttl_seconds: build.template(std.get(block, 'default_ttl_seconds', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        shard_key: build.template(std.get(block, 'shard_key', null)),
        system_indexes: build.template(std.get(block, 'system_indexes', null)),
        throughput: build.template(std.get(block, 'throughput', null)),
      }),
      account_name: resource.field(self._.blocks, 'account_name'),
      analytical_storage_ttl: resource.field(self._.blocks, 'analytical_storage_ttl'),
      database_name: resource.field(self._.blocks, 'database_name'),
      default_ttl_seconds: resource.field(self._.blocks, 'default_ttl_seconds'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      shard_key: resource.field(self._.blocks, 'shard_key'),
      system_indexes: resource.field(self._.blocks, 'system_indexes'),
      throughput: resource.field(self._.blocks, 'throughput'),
    },
    cosmosdb_mongo_database(name, block): {
      local resource = blockType.resource('azurerm_cosmosdb_mongo_database', name),
      _: resource._(block, {
        account_name: build.template(block.account_name),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        throughput: build.template(std.get(block, 'throughput', null)),
      }),
      account_name: resource.field(self._.blocks, 'account_name'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      throughput: resource.field(self._.blocks, 'throughput'),
    },
    cosmosdb_mongo_role_definition(name, block): {
      local resource = blockType.resource('azurerm_cosmosdb_mongo_role_definition', name),
      _: resource._(block, {
        cosmos_mongo_database_id: build.template(block.cosmos_mongo_database_id),
        id: build.template(std.get(block, 'id', null)),
        inherited_role_names: build.template(std.get(block, 'inherited_role_names', null)),
        role_name: build.template(block.role_name),
      }),
      cosmos_mongo_database_id: resource.field(self._.blocks, 'cosmos_mongo_database_id'),
      id: resource.field(self._.blocks, 'id'),
      inherited_role_names: resource.field(self._.blocks, 'inherited_role_names'),
      role_name: resource.field(self._.blocks, 'role_name'),
    },
    cosmosdb_mongo_user_definition(name, block): {
      local resource = blockType.resource('azurerm_cosmosdb_mongo_user_definition', name),
      _: resource._(block, {
        cosmos_mongo_database_id: build.template(block.cosmos_mongo_database_id),
        id: build.template(std.get(block, 'id', null)),
        inherited_role_names: build.template(std.get(block, 'inherited_role_names', null)),
        password: build.template(block.password),
        username: build.template(block.username),
      }),
      cosmos_mongo_database_id: resource.field(self._.blocks, 'cosmos_mongo_database_id'),
      id: resource.field(self._.blocks, 'id'),
      inherited_role_names: resource.field(self._.blocks, 'inherited_role_names'),
      password: resource.field(self._.blocks, 'password'),
      username: resource.field(self._.blocks, 'username'),
    },
    cosmosdb_postgresql_cluster(name, block): {
      local resource = blockType.resource('azurerm_cosmosdb_postgresql_cluster', name),
      _: resource._(block, {
        administrator_login_password: build.template(std.get(block, 'administrator_login_password', null)),
        citus_version: build.template(std.get(block, 'citus_version', null)),
        coordinator_public_ip_access_enabled: build.template(std.get(block, 'coordinator_public_ip_access_enabled', null)),
        coordinator_server_edition: build.template(std.get(block, 'coordinator_server_edition', null)),
        coordinator_storage_quota_in_mb: build.template(std.get(block, 'coordinator_storage_quota_in_mb', null)),
        coordinator_vcore_count: build.template(std.get(block, 'coordinator_vcore_count', null)),
        earliest_restore_time: build.template(std.get(block, 'earliest_restore_time', null)),
        ha_enabled: build.template(std.get(block, 'ha_enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        node_count: build.template(block.node_count),
        node_public_ip_access_enabled: build.template(std.get(block, 'node_public_ip_access_enabled', null)),
        node_server_edition: build.template(std.get(block, 'node_server_edition', null)),
        node_storage_quota_in_mb: build.template(std.get(block, 'node_storage_quota_in_mb', null)),
        node_vcores: build.template(std.get(block, 'node_vcores', null)),
        point_in_time_in_utc: build.template(std.get(block, 'point_in_time_in_utc', null)),
        preferred_primary_zone: build.template(std.get(block, 'preferred_primary_zone', null)),
        resource_group_name: build.template(block.resource_group_name),
        servers: build.template(std.get(block, 'servers', null)),
        shards_on_coordinator_enabled: build.template(std.get(block, 'shards_on_coordinator_enabled', null)),
        source_location: build.template(std.get(block, 'source_location', null)),
        source_resource_id: build.template(std.get(block, 'source_resource_id', null)),
        sql_version: build.template(std.get(block, 'sql_version', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      administrator_login_password: resource.field(self._.blocks, 'administrator_login_password'),
      citus_version: resource.field(self._.blocks, 'citus_version'),
      coordinator_public_ip_access_enabled: resource.field(self._.blocks, 'coordinator_public_ip_access_enabled'),
      coordinator_server_edition: resource.field(self._.blocks, 'coordinator_server_edition'),
      coordinator_storage_quota_in_mb: resource.field(self._.blocks, 'coordinator_storage_quota_in_mb'),
      coordinator_vcore_count: resource.field(self._.blocks, 'coordinator_vcore_count'),
      earliest_restore_time: resource.field(self._.blocks, 'earliest_restore_time'),
      ha_enabled: resource.field(self._.blocks, 'ha_enabled'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      node_count: resource.field(self._.blocks, 'node_count'),
      node_public_ip_access_enabled: resource.field(self._.blocks, 'node_public_ip_access_enabled'),
      node_server_edition: resource.field(self._.blocks, 'node_server_edition'),
      node_storage_quota_in_mb: resource.field(self._.blocks, 'node_storage_quota_in_mb'),
      node_vcores: resource.field(self._.blocks, 'node_vcores'),
      point_in_time_in_utc: resource.field(self._.blocks, 'point_in_time_in_utc'),
      preferred_primary_zone: resource.field(self._.blocks, 'preferred_primary_zone'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      servers: resource.field(self._.blocks, 'servers'),
      shards_on_coordinator_enabled: resource.field(self._.blocks, 'shards_on_coordinator_enabled'),
      source_location: resource.field(self._.blocks, 'source_location'),
      source_resource_id: resource.field(self._.blocks, 'source_resource_id'),
      sql_version: resource.field(self._.blocks, 'sql_version'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    cosmosdb_postgresql_coordinator_configuration(name, block): {
      local resource = blockType.resource('azurerm_cosmosdb_postgresql_coordinator_configuration', name),
      _: resource._(block, {
        cluster_id: build.template(block.cluster_id),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        value: build.template(block.value),
      }),
      cluster_id: resource.field(self._.blocks, 'cluster_id'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      value: resource.field(self._.blocks, 'value'),
    },
    cosmosdb_postgresql_firewall_rule(name, block): {
      local resource = blockType.resource('azurerm_cosmosdb_postgresql_firewall_rule', name),
      _: resource._(block, {
        cluster_id: build.template(block.cluster_id),
        end_ip_address: build.template(block.end_ip_address),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        start_ip_address: build.template(block.start_ip_address),
      }),
      cluster_id: resource.field(self._.blocks, 'cluster_id'),
      end_ip_address: resource.field(self._.blocks, 'end_ip_address'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      start_ip_address: resource.field(self._.blocks, 'start_ip_address'),
    },
    cosmosdb_postgresql_node_configuration(name, block): {
      local resource = blockType.resource('azurerm_cosmosdb_postgresql_node_configuration', name),
      _: resource._(block, {
        cluster_id: build.template(block.cluster_id),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        value: build.template(block.value),
      }),
      cluster_id: resource.field(self._.blocks, 'cluster_id'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      value: resource.field(self._.blocks, 'value'),
    },
    cosmosdb_postgresql_role(name, block): {
      local resource = blockType.resource('azurerm_cosmosdb_postgresql_role', name),
      _: resource._(block, {
        cluster_id: build.template(block.cluster_id),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        password: build.template(block.password),
      }),
      cluster_id: resource.field(self._.blocks, 'cluster_id'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      password: resource.field(self._.blocks, 'password'),
    },
    cosmosdb_sql_container(name, block): {
      local resource = blockType.resource('azurerm_cosmosdb_sql_container', name),
      _: resource._(block, {
        account_name: build.template(block.account_name),
        analytical_storage_ttl: build.template(std.get(block, 'analytical_storage_ttl', null)),
        database_name: build.template(block.database_name),
        default_ttl: build.template(std.get(block, 'default_ttl', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        partition_key_kind: build.template(std.get(block, 'partition_key_kind', null)),
        partition_key_paths: build.template(block.partition_key_paths),
        partition_key_version: build.template(std.get(block, 'partition_key_version', null)),
        resource_group_name: build.template(block.resource_group_name),
        throughput: build.template(std.get(block, 'throughput', null)),
      }),
      account_name: resource.field(self._.blocks, 'account_name'),
      analytical_storage_ttl: resource.field(self._.blocks, 'analytical_storage_ttl'),
      database_name: resource.field(self._.blocks, 'database_name'),
      default_ttl: resource.field(self._.blocks, 'default_ttl'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      partition_key_kind: resource.field(self._.blocks, 'partition_key_kind'),
      partition_key_paths: resource.field(self._.blocks, 'partition_key_paths'),
      partition_key_version: resource.field(self._.blocks, 'partition_key_version'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      throughput: resource.field(self._.blocks, 'throughput'),
    },
    cosmosdb_sql_database(name, block): {
      local resource = blockType.resource('azurerm_cosmosdb_sql_database', name),
      _: resource._(block, {
        account_name: build.template(block.account_name),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        throughput: build.template(std.get(block, 'throughput', null)),
      }),
      account_name: resource.field(self._.blocks, 'account_name'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      throughput: resource.field(self._.blocks, 'throughput'),
    },
    cosmosdb_sql_dedicated_gateway(name, block): {
      local resource = blockType.resource('azurerm_cosmosdb_sql_dedicated_gateway', name),
      _: resource._(block, {
        cosmosdb_account_id: build.template(block.cosmosdb_account_id),
        id: build.template(std.get(block, 'id', null)),
        instance_count: build.template(block.instance_count),
        instance_size: build.template(block.instance_size),
      }),
      cosmosdb_account_id: resource.field(self._.blocks, 'cosmosdb_account_id'),
      id: resource.field(self._.blocks, 'id'),
      instance_count: resource.field(self._.blocks, 'instance_count'),
      instance_size: resource.field(self._.blocks, 'instance_size'),
    },
    cosmosdb_sql_function(name, block): {
      local resource = blockType.resource('azurerm_cosmosdb_sql_function', name),
      _: resource._(block, {
        body: build.template(block.body),
        container_id: build.template(block.container_id),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
      }),
      body: resource.field(self._.blocks, 'body'),
      container_id: resource.field(self._.blocks, 'container_id'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
    },
    cosmosdb_sql_role_assignment(name, block): {
      local resource = blockType.resource('azurerm_cosmosdb_sql_role_assignment', name),
      _: resource._(block, {
        account_name: build.template(block.account_name),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        principal_id: build.template(block.principal_id),
        resource_group_name: build.template(block.resource_group_name),
        role_definition_id: build.template(block.role_definition_id),
        scope: build.template(block.scope),
      }),
      account_name: resource.field(self._.blocks, 'account_name'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      principal_id: resource.field(self._.blocks, 'principal_id'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      role_definition_id: resource.field(self._.blocks, 'role_definition_id'),
      scope: resource.field(self._.blocks, 'scope'),
    },
    cosmosdb_sql_role_definition(name, block): {
      local resource = blockType.resource('azurerm_cosmosdb_sql_role_definition', name),
      _: resource._(block, {
        account_name: build.template(block.account_name),
        assignable_scopes: build.template(block.assignable_scopes),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        role_definition_id: build.template(std.get(block, 'role_definition_id', null)),
        type: build.template(std.get(block, 'type', null)),
      }),
      account_name: resource.field(self._.blocks, 'account_name'),
      assignable_scopes: resource.field(self._.blocks, 'assignable_scopes'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      role_definition_id: resource.field(self._.blocks, 'role_definition_id'),
      type: resource.field(self._.blocks, 'type'),
    },
    cosmosdb_sql_stored_procedure(name, block): {
      local resource = blockType.resource('azurerm_cosmosdb_sql_stored_procedure', name),
      _: resource._(block, {
        account_name: build.template(block.account_name),
        body: build.template(block.body),
        container_name: build.template(block.container_name),
        database_name: build.template(block.database_name),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
      }),
      account_name: resource.field(self._.blocks, 'account_name'),
      body: resource.field(self._.blocks, 'body'),
      container_name: resource.field(self._.blocks, 'container_name'),
      database_name: resource.field(self._.blocks, 'database_name'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
    },
    cosmosdb_sql_trigger(name, block): {
      local resource = blockType.resource('azurerm_cosmosdb_sql_trigger', name),
      _: resource._(block, {
        body: build.template(block.body),
        container_id: build.template(block.container_id),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        operation: build.template(block.operation),
        type: build.template(block.type),
      }),
      body: resource.field(self._.blocks, 'body'),
      container_id: resource.field(self._.blocks, 'container_id'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      operation: resource.field(self._.blocks, 'operation'),
      type: resource.field(self._.blocks, 'type'),
    },
    cosmosdb_table(name, block): {
      local resource = blockType.resource('azurerm_cosmosdb_table', name),
      _: resource._(block, {
        account_name: build.template(block.account_name),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        throughput: build.template(std.get(block, 'throughput', null)),
      }),
      account_name: resource.field(self._.blocks, 'account_name'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      throughput: resource.field(self._.blocks, 'throughput'),
    },
    cost_anomaly_alert(name, block): {
      local resource = blockType.resource('azurerm_cost_anomaly_alert', name),
      _: resource._(block, {
        display_name: build.template(block.display_name),
        email_addresses: build.template(block.email_addresses),
        email_subject: build.template(block.email_subject),
        id: build.template(std.get(block, 'id', null)),
        message: build.template(std.get(block, 'message', null)),
        name: build.template(block.name),
        notification_email: build.template(std.get(block, 'notification_email', null)),
        subscription_id: build.template(std.get(block, 'subscription_id', null)),
      }),
      display_name: resource.field(self._.blocks, 'display_name'),
      email_addresses: resource.field(self._.blocks, 'email_addresses'),
      email_subject: resource.field(self._.blocks, 'email_subject'),
      id: resource.field(self._.blocks, 'id'),
      message: resource.field(self._.blocks, 'message'),
      name: resource.field(self._.blocks, 'name'),
      notification_email: resource.field(self._.blocks, 'notification_email'),
      subscription_id: resource.field(self._.blocks, 'subscription_id'),
    },
    cost_management_scheduled_action(name, block): {
      local resource = blockType.resource('azurerm_cost_management_scheduled_action', name),
      _: resource._(block, {
        day_of_month: build.template(std.get(block, 'day_of_month', null)),
        days_of_week: build.template(std.get(block, 'days_of_week', null)),
        display_name: build.template(block.display_name),
        email_address_sender: build.template(block.email_address_sender),
        email_addresses: build.template(block.email_addresses),
        email_subject: build.template(block.email_subject),
        end_date: build.template(block.end_date),
        frequency: build.template(block.frequency),
        hour_of_day: build.template(std.get(block, 'hour_of_day', null)),
        id: build.template(std.get(block, 'id', null)),
        message: build.template(std.get(block, 'message', null)),
        name: build.template(block.name),
        start_date: build.template(block.start_date),
        view_id: build.template(block.view_id),
        weeks_of_month: build.template(std.get(block, 'weeks_of_month', null)),
      }),
      day_of_month: resource.field(self._.blocks, 'day_of_month'),
      days_of_week: resource.field(self._.blocks, 'days_of_week'),
      display_name: resource.field(self._.blocks, 'display_name'),
      email_address_sender: resource.field(self._.blocks, 'email_address_sender'),
      email_addresses: resource.field(self._.blocks, 'email_addresses'),
      email_subject: resource.field(self._.blocks, 'email_subject'),
      end_date: resource.field(self._.blocks, 'end_date'),
      frequency: resource.field(self._.blocks, 'frequency'),
      hour_of_day: resource.field(self._.blocks, 'hour_of_day'),
      id: resource.field(self._.blocks, 'id'),
      message: resource.field(self._.blocks, 'message'),
      name: resource.field(self._.blocks, 'name'),
      start_date: resource.field(self._.blocks, 'start_date'),
      view_id: resource.field(self._.blocks, 'view_id'),
      weeks_of_month: resource.field(self._.blocks, 'weeks_of_month'),
    },
    custom_ip_prefix(name, block): {
      local resource = blockType.resource('azurerm_custom_ip_prefix', name),
      _: resource._(block, {
        cidr: build.template(block.cidr),
        commissioning_enabled: build.template(std.get(block, 'commissioning_enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        internet_advertising_disabled: build.template(std.get(block, 'internet_advertising_disabled', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        parent_custom_ip_prefix_id: build.template(std.get(block, 'parent_custom_ip_prefix_id', null)),
        resource_group_name: build.template(block.resource_group_name),
        roa_validity_end_date: build.template(std.get(block, 'roa_validity_end_date', null)),
        tags: build.template(std.get(block, 'tags', null)),
        wan_validation_signed_message: build.template(std.get(block, 'wan_validation_signed_message', null)),
        zones: build.template(std.get(block, 'zones', null)),
      }),
      cidr: resource.field(self._.blocks, 'cidr'),
      commissioning_enabled: resource.field(self._.blocks, 'commissioning_enabled'),
      id: resource.field(self._.blocks, 'id'),
      internet_advertising_disabled: resource.field(self._.blocks, 'internet_advertising_disabled'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      parent_custom_ip_prefix_id: resource.field(self._.blocks, 'parent_custom_ip_prefix_id'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      roa_validity_end_date: resource.field(self._.blocks, 'roa_validity_end_date'),
      tags: resource.field(self._.blocks, 'tags'),
      wan_validation_signed_message: resource.field(self._.blocks, 'wan_validation_signed_message'),
      zones: resource.field(self._.blocks, 'zones'),
    },
    custom_provider(name, block): {
      local resource = blockType.resource('azurerm_custom_provider', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    dashboard_grafana(name, block): {
      local resource = blockType.resource('azurerm_dashboard_grafana', name),
      _: resource._(block, {
        api_key_enabled: build.template(std.get(block, 'api_key_enabled', null)),
        auto_generated_domain_name_label_scope: build.template(std.get(block, 'auto_generated_domain_name_label_scope', null)),
        deterministic_outbound_ip_enabled: build.template(std.get(block, 'deterministic_outbound_ip_enabled', null)),
        endpoint: build.template(std.get(block, 'endpoint', null)),
        grafana_major_version: build.template(block.grafana_major_version),
        grafana_version: build.template(std.get(block, 'grafana_version', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        outbound_ip: build.template(std.get(block, 'outbound_ip', null)),
        public_network_access_enabled: build.template(std.get(block, 'public_network_access_enabled', null)),
        resource_group_name: build.template(block.resource_group_name),
        sku: build.template(std.get(block, 'sku', null)),
        tags: build.template(std.get(block, 'tags', null)),
        zone_redundancy_enabled: build.template(std.get(block, 'zone_redundancy_enabled', null)),
      }),
      api_key_enabled: resource.field(self._.blocks, 'api_key_enabled'),
      auto_generated_domain_name_label_scope: resource.field(self._.blocks, 'auto_generated_domain_name_label_scope'),
      deterministic_outbound_ip_enabled: resource.field(self._.blocks, 'deterministic_outbound_ip_enabled'),
      endpoint: resource.field(self._.blocks, 'endpoint'),
      grafana_major_version: resource.field(self._.blocks, 'grafana_major_version'),
      grafana_version: resource.field(self._.blocks, 'grafana_version'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      outbound_ip: resource.field(self._.blocks, 'outbound_ip'),
      public_network_access_enabled: resource.field(self._.blocks, 'public_network_access_enabled'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      sku: resource.field(self._.blocks, 'sku'),
      tags: resource.field(self._.blocks, 'tags'),
      zone_redundancy_enabled: resource.field(self._.blocks, 'zone_redundancy_enabled'),
    },
    dashboard_grafana_managed_private_endpoint(name, block): {
      local resource = blockType.resource('azurerm_dashboard_grafana_managed_private_endpoint', name),
      _: resource._(block, {
        grafana_id: build.template(block.grafana_id),
        group_ids: build.template(std.get(block, 'group_ids', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        private_link_resource_id: build.template(block.private_link_resource_id),
        private_link_resource_region: build.template(std.get(block, 'private_link_resource_region', null)),
        request_message: build.template(std.get(block, 'request_message', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      grafana_id: resource.field(self._.blocks, 'grafana_id'),
      group_ids: resource.field(self._.blocks, 'group_ids'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      private_link_resource_id: resource.field(self._.blocks, 'private_link_resource_id'),
      private_link_resource_region: resource.field(self._.blocks, 'private_link_resource_region'),
      request_message: resource.field(self._.blocks, 'request_message'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    data_factory(name, block): {
      local resource = blockType.resource('azurerm_data_factory', name),
      _: resource._(block, {
        customer_managed_key_id: build.template(std.get(block, 'customer_managed_key_id', null)),
        customer_managed_key_identity_id: build.template(std.get(block, 'customer_managed_key_identity_id', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        managed_virtual_network_enabled: build.template(std.get(block, 'managed_virtual_network_enabled', null)),
        name: build.template(block.name),
        public_network_enabled: build.template(std.get(block, 'public_network_enabled', null)),
        purview_id: build.template(std.get(block, 'purview_id', null)),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      customer_managed_key_id: resource.field(self._.blocks, 'customer_managed_key_id'),
      customer_managed_key_identity_id: resource.field(self._.blocks, 'customer_managed_key_identity_id'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      managed_virtual_network_enabled: resource.field(self._.blocks, 'managed_virtual_network_enabled'),
      name: resource.field(self._.blocks, 'name'),
      public_network_enabled: resource.field(self._.blocks, 'public_network_enabled'),
      purview_id: resource.field(self._.blocks, 'purview_id'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    data_factory_credential_service_principal(name, block): {
      local resource = blockType.resource('azurerm_data_factory_credential_service_principal', name),
      _: resource._(block, {
        annotations: build.template(std.get(block, 'annotations', null)),
        data_factory_id: build.template(block.data_factory_id),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        service_principal_id: build.template(block.service_principal_id),
        tenant_id: build.template(block.tenant_id),
      }),
      annotations: resource.field(self._.blocks, 'annotations'),
      data_factory_id: resource.field(self._.blocks, 'data_factory_id'),
      description: resource.field(self._.blocks, 'description'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      service_principal_id: resource.field(self._.blocks, 'service_principal_id'),
      tenant_id: resource.field(self._.blocks, 'tenant_id'),
    },
    data_factory_credential_user_managed_identity(name, block): {
      local resource = blockType.resource('azurerm_data_factory_credential_user_managed_identity', name),
      _: resource._(block, {
        annotations: build.template(std.get(block, 'annotations', null)),
        data_factory_id: build.template(block.data_factory_id),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        identity_id: build.template(block.identity_id),
        name: build.template(block.name),
      }),
      annotations: resource.field(self._.blocks, 'annotations'),
      data_factory_id: resource.field(self._.blocks, 'data_factory_id'),
      description: resource.field(self._.blocks, 'description'),
      id: resource.field(self._.blocks, 'id'),
      identity_id: resource.field(self._.blocks, 'identity_id'),
      name: resource.field(self._.blocks, 'name'),
    },
    data_factory_custom_dataset(name, block): {
      local resource = blockType.resource('azurerm_data_factory_custom_dataset', name),
      _: resource._(block, {
        additional_properties: build.template(std.get(block, 'additional_properties', null)),
        annotations: build.template(std.get(block, 'annotations', null)),
        data_factory_id: build.template(block.data_factory_id),
        description: build.template(std.get(block, 'description', null)),
        folder: build.template(std.get(block, 'folder', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        parameters: build.template(std.get(block, 'parameters', null)),
        schema_json: build.template(std.get(block, 'schema_json', null)),
        type: build.template(block.type),
        type_properties_json: build.template(block.type_properties_json),
      }),
      additional_properties: resource.field(self._.blocks, 'additional_properties'),
      annotations: resource.field(self._.blocks, 'annotations'),
      data_factory_id: resource.field(self._.blocks, 'data_factory_id'),
      description: resource.field(self._.blocks, 'description'),
      folder: resource.field(self._.blocks, 'folder'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      parameters: resource.field(self._.blocks, 'parameters'),
      schema_json: resource.field(self._.blocks, 'schema_json'),
      type: resource.field(self._.blocks, 'type'),
      type_properties_json: resource.field(self._.blocks, 'type_properties_json'),
    },
    data_factory_data_flow(name, block): {
      local resource = blockType.resource('azurerm_data_factory_data_flow', name),
      _: resource._(block, {
        annotations: build.template(std.get(block, 'annotations', null)),
        data_factory_id: build.template(block.data_factory_id),
        description: build.template(std.get(block, 'description', null)),
        folder: build.template(std.get(block, 'folder', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        script: build.template(std.get(block, 'script', null)),
        script_lines: build.template(std.get(block, 'script_lines', null)),
      }),
      annotations: resource.field(self._.blocks, 'annotations'),
      data_factory_id: resource.field(self._.blocks, 'data_factory_id'),
      description: resource.field(self._.blocks, 'description'),
      folder: resource.field(self._.blocks, 'folder'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      script: resource.field(self._.blocks, 'script'),
      script_lines: resource.field(self._.blocks, 'script_lines'),
    },
    data_factory_dataset_azure_blob(name, block): {
      local resource = blockType.resource('azurerm_data_factory_dataset_azure_blob', name),
      _: resource._(block, {
        additional_properties: build.template(std.get(block, 'additional_properties', null)),
        annotations: build.template(std.get(block, 'annotations', null)),
        data_factory_id: build.template(block.data_factory_id),
        description: build.template(std.get(block, 'description', null)),
        dynamic_filename_enabled: build.template(std.get(block, 'dynamic_filename_enabled', null)),
        dynamic_path_enabled: build.template(std.get(block, 'dynamic_path_enabled', null)),
        filename: build.template(std.get(block, 'filename', null)),
        folder: build.template(std.get(block, 'folder', null)),
        id: build.template(std.get(block, 'id', null)),
        linked_service_name: build.template(block.linked_service_name),
        name: build.template(block.name),
        parameters: build.template(std.get(block, 'parameters', null)),
        path: build.template(std.get(block, 'path', null)),
      }),
      additional_properties: resource.field(self._.blocks, 'additional_properties'),
      annotations: resource.field(self._.blocks, 'annotations'),
      data_factory_id: resource.field(self._.blocks, 'data_factory_id'),
      description: resource.field(self._.blocks, 'description'),
      dynamic_filename_enabled: resource.field(self._.blocks, 'dynamic_filename_enabled'),
      dynamic_path_enabled: resource.field(self._.blocks, 'dynamic_path_enabled'),
      filename: resource.field(self._.blocks, 'filename'),
      folder: resource.field(self._.blocks, 'folder'),
      id: resource.field(self._.blocks, 'id'),
      linked_service_name: resource.field(self._.blocks, 'linked_service_name'),
      name: resource.field(self._.blocks, 'name'),
      parameters: resource.field(self._.blocks, 'parameters'),
      path: resource.field(self._.blocks, 'path'),
    },
    data_factory_dataset_azure_sql_table(name, block): {
      local resource = blockType.resource('azurerm_data_factory_dataset_azure_sql_table', name),
      _: resource._(block, {
        additional_properties: build.template(std.get(block, 'additional_properties', null)),
        annotations: build.template(std.get(block, 'annotations', null)),
        data_factory_id: build.template(block.data_factory_id),
        description: build.template(std.get(block, 'description', null)),
        folder: build.template(std.get(block, 'folder', null)),
        id: build.template(std.get(block, 'id', null)),
        linked_service_id: build.template(block.linked_service_id),
        name: build.template(block.name),
        parameters: build.template(std.get(block, 'parameters', null)),
        schema: build.template(std.get(block, 'schema', null)),
        table: build.template(std.get(block, 'table', null)),
      }),
      additional_properties: resource.field(self._.blocks, 'additional_properties'),
      annotations: resource.field(self._.blocks, 'annotations'),
      data_factory_id: resource.field(self._.blocks, 'data_factory_id'),
      description: resource.field(self._.blocks, 'description'),
      folder: resource.field(self._.blocks, 'folder'),
      id: resource.field(self._.blocks, 'id'),
      linked_service_id: resource.field(self._.blocks, 'linked_service_id'),
      name: resource.field(self._.blocks, 'name'),
      parameters: resource.field(self._.blocks, 'parameters'),
      schema: resource.field(self._.blocks, 'schema'),
      table: resource.field(self._.blocks, 'table'),
    },
    data_factory_dataset_binary(name, block): {
      local resource = blockType.resource('azurerm_data_factory_dataset_binary', name),
      _: resource._(block, {
        additional_properties: build.template(std.get(block, 'additional_properties', null)),
        annotations: build.template(std.get(block, 'annotations', null)),
        data_factory_id: build.template(block.data_factory_id),
        description: build.template(std.get(block, 'description', null)),
        folder: build.template(std.get(block, 'folder', null)),
        id: build.template(std.get(block, 'id', null)),
        linked_service_name: build.template(block.linked_service_name),
        name: build.template(block.name),
        parameters: build.template(std.get(block, 'parameters', null)),
      }),
      additional_properties: resource.field(self._.blocks, 'additional_properties'),
      annotations: resource.field(self._.blocks, 'annotations'),
      data_factory_id: resource.field(self._.blocks, 'data_factory_id'),
      description: resource.field(self._.blocks, 'description'),
      folder: resource.field(self._.blocks, 'folder'),
      id: resource.field(self._.blocks, 'id'),
      linked_service_name: resource.field(self._.blocks, 'linked_service_name'),
      name: resource.field(self._.blocks, 'name'),
      parameters: resource.field(self._.blocks, 'parameters'),
    },
    data_factory_dataset_cosmosdb_sqlapi(name, block): {
      local resource = blockType.resource('azurerm_data_factory_dataset_cosmosdb_sqlapi', name),
      _: resource._(block, {
        additional_properties: build.template(std.get(block, 'additional_properties', null)),
        annotations: build.template(std.get(block, 'annotations', null)),
        collection_name: build.template(std.get(block, 'collection_name', null)),
        data_factory_id: build.template(block.data_factory_id),
        description: build.template(std.get(block, 'description', null)),
        folder: build.template(std.get(block, 'folder', null)),
        id: build.template(std.get(block, 'id', null)),
        linked_service_name: build.template(block.linked_service_name),
        name: build.template(block.name),
        parameters: build.template(std.get(block, 'parameters', null)),
      }),
      additional_properties: resource.field(self._.blocks, 'additional_properties'),
      annotations: resource.field(self._.blocks, 'annotations'),
      collection_name: resource.field(self._.blocks, 'collection_name'),
      data_factory_id: resource.field(self._.blocks, 'data_factory_id'),
      description: resource.field(self._.blocks, 'description'),
      folder: resource.field(self._.blocks, 'folder'),
      id: resource.field(self._.blocks, 'id'),
      linked_service_name: resource.field(self._.blocks, 'linked_service_name'),
      name: resource.field(self._.blocks, 'name'),
      parameters: resource.field(self._.blocks, 'parameters'),
    },
    data_factory_dataset_delimited_text(name, block): {
      local resource = blockType.resource('azurerm_data_factory_dataset_delimited_text', name),
      _: resource._(block, {
        additional_properties: build.template(std.get(block, 'additional_properties', null)),
        annotations: build.template(std.get(block, 'annotations', null)),
        column_delimiter: build.template(std.get(block, 'column_delimiter', null)),
        compression_codec: build.template(std.get(block, 'compression_codec', null)),
        compression_level: build.template(std.get(block, 'compression_level', null)),
        data_factory_id: build.template(block.data_factory_id),
        description: build.template(std.get(block, 'description', null)),
        encoding: build.template(std.get(block, 'encoding', null)),
        escape_character: build.template(std.get(block, 'escape_character', null)),
        first_row_as_header: build.template(std.get(block, 'first_row_as_header', null)),
        folder: build.template(std.get(block, 'folder', null)),
        id: build.template(std.get(block, 'id', null)),
        linked_service_name: build.template(block.linked_service_name),
        name: build.template(block.name),
        null_value: build.template(std.get(block, 'null_value', null)),
        parameters: build.template(std.get(block, 'parameters', null)),
        quote_character: build.template(std.get(block, 'quote_character', null)),
        row_delimiter: build.template(std.get(block, 'row_delimiter', null)),
      }),
      additional_properties: resource.field(self._.blocks, 'additional_properties'),
      annotations: resource.field(self._.blocks, 'annotations'),
      column_delimiter: resource.field(self._.blocks, 'column_delimiter'),
      compression_codec: resource.field(self._.blocks, 'compression_codec'),
      compression_level: resource.field(self._.blocks, 'compression_level'),
      data_factory_id: resource.field(self._.blocks, 'data_factory_id'),
      description: resource.field(self._.blocks, 'description'),
      encoding: resource.field(self._.blocks, 'encoding'),
      escape_character: resource.field(self._.blocks, 'escape_character'),
      first_row_as_header: resource.field(self._.blocks, 'first_row_as_header'),
      folder: resource.field(self._.blocks, 'folder'),
      id: resource.field(self._.blocks, 'id'),
      linked_service_name: resource.field(self._.blocks, 'linked_service_name'),
      name: resource.field(self._.blocks, 'name'),
      null_value: resource.field(self._.blocks, 'null_value'),
      parameters: resource.field(self._.blocks, 'parameters'),
      quote_character: resource.field(self._.blocks, 'quote_character'),
      row_delimiter: resource.field(self._.blocks, 'row_delimiter'),
    },
    data_factory_dataset_http(name, block): {
      local resource = blockType.resource('azurerm_data_factory_dataset_http', name),
      _: resource._(block, {
        additional_properties: build.template(std.get(block, 'additional_properties', null)),
        annotations: build.template(std.get(block, 'annotations', null)),
        data_factory_id: build.template(block.data_factory_id),
        description: build.template(std.get(block, 'description', null)),
        folder: build.template(std.get(block, 'folder', null)),
        id: build.template(std.get(block, 'id', null)),
        linked_service_name: build.template(block.linked_service_name),
        name: build.template(block.name),
        parameters: build.template(std.get(block, 'parameters', null)),
        relative_url: build.template(std.get(block, 'relative_url', null)),
        request_body: build.template(std.get(block, 'request_body', null)),
        request_method: build.template(std.get(block, 'request_method', null)),
      }),
      additional_properties: resource.field(self._.blocks, 'additional_properties'),
      annotations: resource.field(self._.blocks, 'annotations'),
      data_factory_id: resource.field(self._.blocks, 'data_factory_id'),
      description: resource.field(self._.blocks, 'description'),
      folder: resource.field(self._.blocks, 'folder'),
      id: resource.field(self._.blocks, 'id'),
      linked_service_name: resource.field(self._.blocks, 'linked_service_name'),
      name: resource.field(self._.blocks, 'name'),
      parameters: resource.field(self._.blocks, 'parameters'),
      relative_url: resource.field(self._.blocks, 'relative_url'),
      request_body: resource.field(self._.blocks, 'request_body'),
      request_method: resource.field(self._.blocks, 'request_method'),
    },
    data_factory_dataset_json(name, block): {
      local resource = blockType.resource('azurerm_data_factory_dataset_json', name),
      _: resource._(block, {
        additional_properties: build.template(std.get(block, 'additional_properties', null)),
        annotations: build.template(std.get(block, 'annotations', null)),
        data_factory_id: build.template(block.data_factory_id),
        description: build.template(std.get(block, 'description', null)),
        encoding: build.template(std.get(block, 'encoding', null)),
        folder: build.template(std.get(block, 'folder', null)),
        id: build.template(std.get(block, 'id', null)),
        linked_service_name: build.template(block.linked_service_name),
        name: build.template(block.name),
        parameters: build.template(std.get(block, 'parameters', null)),
      }),
      additional_properties: resource.field(self._.blocks, 'additional_properties'),
      annotations: resource.field(self._.blocks, 'annotations'),
      data_factory_id: resource.field(self._.blocks, 'data_factory_id'),
      description: resource.field(self._.blocks, 'description'),
      encoding: resource.field(self._.blocks, 'encoding'),
      folder: resource.field(self._.blocks, 'folder'),
      id: resource.field(self._.blocks, 'id'),
      linked_service_name: resource.field(self._.blocks, 'linked_service_name'),
      name: resource.field(self._.blocks, 'name'),
      parameters: resource.field(self._.blocks, 'parameters'),
    },
    data_factory_dataset_mysql(name, block): {
      local resource = blockType.resource('azurerm_data_factory_dataset_mysql', name),
      _: resource._(block, {
        additional_properties: build.template(std.get(block, 'additional_properties', null)),
        annotations: build.template(std.get(block, 'annotations', null)),
        data_factory_id: build.template(block.data_factory_id),
        description: build.template(std.get(block, 'description', null)),
        folder: build.template(std.get(block, 'folder', null)),
        id: build.template(std.get(block, 'id', null)),
        linked_service_name: build.template(block.linked_service_name),
        name: build.template(block.name),
        parameters: build.template(std.get(block, 'parameters', null)),
        table_name: build.template(std.get(block, 'table_name', null)),
      }),
      additional_properties: resource.field(self._.blocks, 'additional_properties'),
      annotations: resource.field(self._.blocks, 'annotations'),
      data_factory_id: resource.field(self._.blocks, 'data_factory_id'),
      description: resource.field(self._.blocks, 'description'),
      folder: resource.field(self._.blocks, 'folder'),
      id: resource.field(self._.blocks, 'id'),
      linked_service_name: resource.field(self._.blocks, 'linked_service_name'),
      name: resource.field(self._.blocks, 'name'),
      parameters: resource.field(self._.blocks, 'parameters'),
      table_name: resource.field(self._.blocks, 'table_name'),
    },
    data_factory_dataset_parquet(name, block): {
      local resource = blockType.resource('azurerm_data_factory_dataset_parquet', name),
      _: resource._(block, {
        additional_properties: build.template(std.get(block, 'additional_properties', null)),
        annotations: build.template(std.get(block, 'annotations', null)),
        compression_codec: build.template(std.get(block, 'compression_codec', null)),
        compression_level: build.template(std.get(block, 'compression_level', null)),
        data_factory_id: build.template(block.data_factory_id),
        description: build.template(std.get(block, 'description', null)),
        folder: build.template(std.get(block, 'folder', null)),
        id: build.template(std.get(block, 'id', null)),
        linked_service_name: build.template(block.linked_service_name),
        name: build.template(block.name),
        parameters: build.template(std.get(block, 'parameters', null)),
      }),
      additional_properties: resource.field(self._.blocks, 'additional_properties'),
      annotations: resource.field(self._.blocks, 'annotations'),
      compression_codec: resource.field(self._.blocks, 'compression_codec'),
      compression_level: resource.field(self._.blocks, 'compression_level'),
      data_factory_id: resource.field(self._.blocks, 'data_factory_id'),
      description: resource.field(self._.blocks, 'description'),
      folder: resource.field(self._.blocks, 'folder'),
      id: resource.field(self._.blocks, 'id'),
      linked_service_name: resource.field(self._.blocks, 'linked_service_name'),
      name: resource.field(self._.blocks, 'name'),
      parameters: resource.field(self._.blocks, 'parameters'),
    },
    data_factory_dataset_postgresql(name, block): {
      local resource = blockType.resource('azurerm_data_factory_dataset_postgresql', name),
      _: resource._(block, {
        additional_properties: build.template(std.get(block, 'additional_properties', null)),
        annotations: build.template(std.get(block, 'annotations', null)),
        data_factory_id: build.template(block.data_factory_id),
        description: build.template(std.get(block, 'description', null)),
        folder: build.template(std.get(block, 'folder', null)),
        id: build.template(std.get(block, 'id', null)),
        linked_service_name: build.template(block.linked_service_name),
        name: build.template(block.name),
        parameters: build.template(std.get(block, 'parameters', null)),
        table_name: build.template(std.get(block, 'table_name', null)),
      }),
      additional_properties: resource.field(self._.blocks, 'additional_properties'),
      annotations: resource.field(self._.blocks, 'annotations'),
      data_factory_id: resource.field(self._.blocks, 'data_factory_id'),
      description: resource.field(self._.blocks, 'description'),
      folder: resource.field(self._.blocks, 'folder'),
      id: resource.field(self._.blocks, 'id'),
      linked_service_name: resource.field(self._.blocks, 'linked_service_name'),
      name: resource.field(self._.blocks, 'name'),
      parameters: resource.field(self._.blocks, 'parameters'),
      table_name: resource.field(self._.blocks, 'table_name'),
    },
    data_factory_dataset_snowflake(name, block): {
      local resource = blockType.resource('azurerm_data_factory_dataset_snowflake', name),
      _: resource._(block, {
        additional_properties: build.template(std.get(block, 'additional_properties', null)),
        annotations: build.template(std.get(block, 'annotations', null)),
        data_factory_id: build.template(block.data_factory_id),
        description: build.template(std.get(block, 'description', null)),
        folder: build.template(std.get(block, 'folder', null)),
        id: build.template(std.get(block, 'id', null)),
        linked_service_name: build.template(block.linked_service_name),
        name: build.template(block.name),
        parameters: build.template(std.get(block, 'parameters', null)),
        schema_name: build.template(std.get(block, 'schema_name', null)),
        table_name: build.template(std.get(block, 'table_name', null)),
      }),
      additional_properties: resource.field(self._.blocks, 'additional_properties'),
      annotations: resource.field(self._.blocks, 'annotations'),
      data_factory_id: resource.field(self._.blocks, 'data_factory_id'),
      description: resource.field(self._.blocks, 'description'),
      folder: resource.field(self._.blocks, 'folder'),
      id: resource.field(self._.blocks, 'id'),
      linked_service_name: resource.field(self._.blocks, 'linked_service_name'),
      name: resource.field(self._.blocks, 'name'),
      parameters: resource.field(self._.blocks, 'parameters'),
      schema_name: resource.field(self._.blocks, 'schema_name'),
      table_name: resource.field(self._.blocks, 'table_name'),
    },
    data_factory_dataset_sql_server_table(name, block): {
      local resource = blockType.resource('azurerm_data_factory_dataset_sql_server_table', name),
      _: resource._(block, {
        additional_properties: build.template(std.get(block, 'additional_properties', null)),
        annotations: build.template(std.get(block, 'annotations', null)),
        data_factory_id: build.template(block.data_factory_id),
        description: build.template(std.get(block, 'description', null)),
        folder: build.template(std.get(block, 'folder', null)),
        id: build.template(std.get(block, 'id', null)),
        linked_service_name: build.template(block.linked_service_name),
        name: build.template(block.name),
        parameters: build.template(std.get(block, 'parameters', null)),
        table_name: build.template(std.get(block, 'table_name', null)),
      }),
      additional_properties: resource.field(self._.blocks, 'additional_properties'),
      annotations: resource.field(self._.blocks, 'annotations'),
      data_factory_id: resource.field(self._.blocks, 'data_factory_id'),
      description: resource.field(self._.blocks, 'description'),
      folder: resource.field(self._.blocks, 'folder'),
      id: resource.field(self._.blocks, 'id'),
      linked_service_name: resource.field(self._.blocks, 'linked_service_name'),
      name: resource.field(self._.blocks, 'name'),
      parameters: resource.field(self._.blocks, 'parameters'),
      table_name: resource.field(self._.blocks, 'table_name'),
    },
    data_factory_flowlet_data_flow(name, block): {
      local resource = blockType.resource('azurerm_data_factory_flowlet_data_flow', name),
      _: resource._(block, {
        annotations: build.template(std.get(block, 'annotations', null)),
        data_factory_id: build.template(block.data_factory_id),
        description: build.template(std.get(block, 'description', null)),
        folder: build.template(std.get(block, 'folder', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        script: build.template(std.get(block, 'script', null)),
        script_lines: build.template(std.get(block, 'script_lines', null)),
      }),
      annotations: resource.field(self._.blocks, 'annotations'),
      data_factory_id: resource.field(self._.blocks, 'data_factory_id'),
      description: resource.field(self._.blocks, 'description'),
      folder: resource.field(self._.blocks, 'folder'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      script: resource.field(self._.blocks, 'script'),
      script_lines: resource.field(self._.blocks, 'script_lines'),
    },
    data_factory_integration_runtime_azure(name, block): {
      local resource = blockType.resource('azurerm_data_factory_integration_runtime_azure', name),
      _: resource._(block, {
        cleanup_enabled: build.template(std.get(block, 'cleanup_enabled', null)),
        compute_type: build.template(std.get(block, 'compute_type', null)),
        core_count: build.template(std.get(block, 'core_count', null)),
        data_factory_id: build.template(block.data_factory_id),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        time_to_live_min: build.template(std.get(block, 'time_to_live_min', null)),
        virtual_network_enabled: build.template(std.get(block, 'virtual_network_enabled', null)),
      }),
      cleanup_enabled: resource.field(self._.blocks, 'cleanup_enabled'),
      compute_type: resource.field(self._.blocks, 'compute_type'),
      core_count: resource.field(self._.blocks, 'core_count'),
      data_factory_id: resource.field(self._.blocks, 'data_factory_id'),
      description: resource.field(self._.blocks, 'description'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      time_to_live_min: resource.field(self._.blocks, 'time_to_live_min'),
      virtual_network_enabled: resource.field(self._.blocks, 'virtual_network_enabled'),
    },
    data_factory_integration_runtime_azure_ssis(name, block): {
      local resource = blockType.resource('azurerm_data_factory_integration_runtime_azure_ssis', name),
      _: resource._(block, {
        credential_name: build.template(std.get(block, 'credential_name', null)),
        data_factory_id: build.template(block.data_factory_id),
        description: build.template(std.get(block, 'description', null)),
        edition: build.template(std.get(block, 'edition', null)),
        id: build.template(std.get(block, 'id', null)),
        license_type: build.template(std.get(block, 'license_type', null)),
        location: build.template(block.location),
        max_parallel_executions_per_node: build.template(std.get(block, 'max_parallel_executions_per_node', null)),
        name: build.template(block.name),
        node_size: build.template(block.node_size),
        number_of_nodes: build.template(std.get(block, 'number_of_nodes', null)),
      }),
      credential_name: resource.field(self._.blocks, 'credential_name'),
      data_factory_id: resource.field(self._.blocks, 'data_factory_id'),
      description: resource.field(self._.blocks, 'description'),
      edition: resource.field(self._.blocks, 'edition'),
      id: resource.field(self._.blocks, 'id'),
      license_type: resource.field(self._.blocks, 'license_type'),
      location: resource.field(self._.blocks, 'location'),
      max_parallel_executions_per_node: resource.field(self._.blocks, 'max_parallel_executions_per_node'),
      name: resource.field(self._.blocks, 'name'),
      node_size: resource.field(self._.blocks, 'node_size'),
      number_of_nodes: resource.field(self._.blocks, 'number_of_nodes'),
    },
    data_factory_integration_runtime_self_hosted(name, block): {
      local resource = blockType.resource('azurerm_data_factory_integration_runtime_self_hosted', name),
      _: resource._(block, {
        data_factory_id: build.template(block.data_factory_id),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        primary_authorization_key: build.template(std.get(block, 'primary_authorization_key', null)),
        secondary_authorization_key: build.template(std.get(block, 'secondary_authorization_key', null)),
        self_contained_interactive_authoring_enabled: build.template(std.get(block, 'self_contained_interactive_authoring_enabled', null)),
      }),
      data_factory_id: resource.field(self._.blocks, 'data_factory_id'),
      description: resource.field(self._.blocks, 'description'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      primary_authorization_key: resource.field(self._.blocks, 'primary_authorization_key'),
      secondary_authorization_key: resource.field(self._.blocks, 'secondary_authorization_key'),
      self_contained_interactive_authoring_enabled: resource.field(self._.blocks, 'self_contained_interactive_authoring_enabled'),
    },
    data_factory_linked_custom_service(name, block): {
      local resource = blockType.resource('azurerm_data_factory_linked_custom_service', name),
      _: resource._(block, {
        additional_properties: build.template(std.get(block, 'additional_properties', null)),
        annotations: build.template(std.get(block, 'annotations', null)),
        data_factory_id: build.template(block.data_factory_id),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        parameters: build.template(std.get(block, 'parameters', null)),
        type: build.template(block.type),
        type_properties_json: build.template(block.type_properties_json),
      }),
      additional_properties: resource.field(self._.blocks, 'additional_properties'),
      annotations: resource.field(self._.blocks, 'annotations'),
      data_factory_id: resource.field(self._.blocks, 'data_factory_id'),
      description: resource.field(self._.blocks, 'description'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      parameters: resource.field(self._.blocks, 'parameters'),
      type: resource.field(self._.blocks, 'type'),
      type_properties_json: resource.field(self._.blocks, 'type_properties_json'),
    },
    data_factory_linked_service_azure_blob_storage(name, block): {
      local resource = blockType.resource('azurerm_data_factory_linked_service_azure_blob_storage', name),
      _: resource._(block, {
        additional_properties: build.template(std.get(block, 'additional_properties', null)),
        annotations: build.template(std.get(block, 'annotations', null)),
        connection_string: build.template(std.get(block, 'connection_string', null)),
        connection_string_insecure: build.template(std.get(block, 'connection_string_insecure', null)),
        data_factory_id: build.template(block.data_factory_id),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        integration_runtime_name: build.template(std.get(block, 'integration_runtime_name', null)),
        name: build.template(block.name),
        parameters: build.template(std.get(block, 'parameters', null)),
        sas_uri: build.template(std.get(block, 'sas_uri', null)),
        service_endpoint: build.template(std.get(block, 'service_endpoint', null)),
        service_principal_id: build.template(std.get(block, 'service_principal_id', null)),
        service_principal_key: build.template(std.get(block, 'service_principal_key', null)),
        storage_kind: build.template(std.get(block, 'storage_kind', null)),
        tenant_id: build.template(std.get(block, 'tenant_id', null)),
        use_managed_identity: build.template(std.get(block, 'use_managed_identity', null)),
      }),
      additional_properties: resource.field(self._.blocks, 'additional_properties'),
      annotations: resource.field(self._.blocks, 'annotations'),
      connection_string: resource.field(self._.blocks, 'connection_string'),
      connection_string_insecure: resource.field(self._.blocks, 'connection_string_insecure'),
      data_factory_id: resource.field(self._.blocks, 'data_factory_id'),
      description: resource.field(self._.blocks, 'description'),
      id: resource.field(self._.blocks, 'id'),
      integration_runtime_name: resource.field(self._.blocks, 'integration_runtime_name'),
      name: resource.field(self._.blocks, 'name'),
      parameters: resource.field(self._.blocks, 'parameters'),
      sas_uri: resource.field(self._.blocks, 'sas_uri'),
      service_endpoint: resource.field(self._.blocks, 'service_endpoint'),
      service_principal_id: resource.field(self._.blocks, 'service_principal_id'),
      service_principal_key: resource.field(self._.blocks, 'service_principal_key'),
      storage_kind: resource.field(self._.blocks, 'storage_kind'),
      tenant_id: resource.field(self._.blocks, 'tenant_id'),
      use_managed_identity: resource.field(self._.blocks, 'use_managed_identity'),
    },
    data_factory_linked_service_azure_databricks(name, block): {
      local resource = blockType.resource('azurerm_data_factory_linked_service_azure_databricks', name),
      _: resource._(block, {
        access_token: build.template(std.get(block, 'access_token', null)),
        adb_domain: build.template(block.adb_domain),
        additional_properties: build.template(std.get(block, 'additional_properties', null)),
        annotations: build.template(std.get(block, 'annotations', null)),
        data_factory_id: build.template(block.data_factory_id),
        description: build.template(std.get(block, 'description', null)),
        existing_cluster_id: build.template(std.get(block, 'existing_cluster_id', null)),
        id: build.template(std.get(block, 'id', null)),
        integration_runtime_name: build.template(std.get(block, 'integration_runtime_name', null)),
        msi_work_space_resource_id: build.template(std.get(block, 'msi_work_space_resource_id', null)),
        name: build.template(block.name),
        parameters: build.template(std.get(block, 'parameters', null)),
      }),
      access_token: resource.field(self._.blocks, 'access_token'),
      adb_domain: resource.field(self._.blocks, 'adb_domain'),
      additional_properties: resource.field(self._.blocks, 'additional_properties'),
      annotations: resource.field(self._.blocks, 'annotations'),
      data_factory_id: resource.field(self._.blocks, 'data_factory_id'),
      description: resource.field(self._.blocks, 'description'),
      existing_cluster_id: resource.field(self._.blocks, 'existing_cluster_id'),
      id: resource.field(self._.blocks, 'id'),
      integration_runtime_name: resource.field(self._.blocks, 'integration_runtime_name'),
      msi_work_space_resource_id: resource.field(self._.blocks, 'msi_work_space_resource_id'),
      name: resource.field(self._.blocks, 'name'),
      parameters: resource.field(self._.blocks, 'parameters'),
    },
    data_factory_linked_service_azure_file_storage(name, block): {
      local resource = blockType.resource('azurerm_data_factory_linked_service_azure_file_storage', name),
      _: resource._(block, {
        additional_properties: build.template(std.get(block, 'additional_properties', null)),
        annotations: build.template(std.get(block, 'annotations', null)),
        connection_string: build.template(block.connection_string),
        data_factory_id: build.template(block.data_factory_id),
        description: build.template(std.get(block, 'description', null)),
        file_share: build.template(std.get(block, 'file_share', null)),
        host: build.template(std.get(block, 'host', null)),
        id: build.template(std.get(block, 'id', null)),
        integration_runtime_name: build.template(std.get(block, 'integration_runtime_name', null)),
        name: build.template(block.name),
        parameters: build.template(std.get(block, 'parameters', null)),
        password: build.template(std.get(block, 'password', null)),
        user_id: build.template(std.get(block, 'user_id', null)),
      }),
      additional_properties: resource.field(self._.blocks, 'additional_properties'),
      annotations: resource.field(self._.blocks, 'annotations'),
      connection_string: resource.field(self._.blocks, 'connection_string'),
      data_factory_id: resource.field(self._.blocks, 'data_factory_id'),
      description: resource.field(self._.blocks, 'description'),
      file_share: resource.field(self._.blocks, 'file_share'),
      host: resource.field(self._.blocks, 'host'),
      id: resource.field(self._.blocks, 'id'),
      integration_runtime_name: resource.field(self._.blocks, 'integration_runtime_name'),
      name: resource.field(self._.blocks, 'name'),
      parameters: resource.field(self._.blocks, 'parameters'),
      password: resource.field(self._.blocks, 'password'),
      user_id: resource.field(self._.blocks, 'user_id'),
    },
    data_factory_linked_service_azure_function(name, block): {
      local resource = blockType.resource('azurerm_data_factory_linked_service_azure_function', name),
      _: resource._(block, {
        additional_properties: build.template(std.get(block, 'additional_properties', null)),
        annotations: build.template(std.get(block, 'annotations', null)),
        data_factory_id: build.template(block.data_factory_id),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        integration_runtime_name: build.template(std.get(block, 'integration_runtime_name', null)),
        key: build.template(std.get(block, 'key', null)),
        name: build.template(block.name),
        parameters: build.template(std.get(block, 'parameters', null)),
        url: build.template(block.url),
      }),
      additional_properties: resource.field(self._.blocks, 'additional_properties'),
      annotations: resource.field(self._.blocks, 'annotations'),
      data_factory_id: resource.field(self._.blocks, 'data_factory_id'),
      description: resource.field(self._.blocks, 'description'),
      id: resource.field(self._.blocks, 'id'),
      integration_runtime_name: resource.field(self._.blocks, 'integration_runtime_name'),
      key: resource.field(self._.blocks, 'key'),
      name: resource.field(self._.blocks, 'name'),
      parameters: resource.field(self._.blocks, 'parameters'),
      url: resource.field(self._.blocks, 'url'),
    },
    data_factory_linked_service_azure_search(name, block): {
      local resource = blockType.resource('azurerm_data_factory_linked_service_azure_search', name),
      _: resource._(block, {
        additional_properties: build.template(std.get(block, 'additional_properties', null)),
        annotations: build.template(std.get(block, 'annotations', null)),
        data_factory_id: build.template(block.data_factory_id),
        description: build.template(std.get(block, 'description', null)),
        encrypted_credential: build.template(std.get(block, 'encrypted_credential', null)),
        id: build.template(std.get(block, 'id', null)),
        integration_runtime_name: build.template(std.get(block, 'integration_runtime_name', null)),
        name: build.template(block.name),
        parameters: build.template(std.get(block, 'parameters', null)),
        search_service_key: build.template(block.search_service_key),
        url: build.template(block.url),
      }),
      additional_properties: resource.field(self._.blocks, 'additional_properties'),
      annotations: resource.field(self._.blocks, 'annotations'),
      data_factory_id: resource.field(self._.blocks, 'data_factory_id'),
      description: resource.field(self._.blocks, 'description'),
      encrypted_credential: resource.field(self._.blocks, 'encrypted_credential'),
      id: resource.field(self._.blocks, 'id'),
      integration_runtime_name: resource.field(self._.blocks, 'integration_runtime_name'),
      name: resource.field(self._.blocks, 'name'),
      parameters: resource.field(self._.blocks, 'parameters'),
      search_service_key: resource.field(self._.blocks, 'search_service_key'),
      url: resource.field(self._.blocks, 'url'),
    },
    data_factory_linked_service_azure_sql_database(name, block): {
      local resource = blockType.resource('azurerm_data_factory_linked_service_azure_sql_database', name),
      _: resource._(block, {
        additional_properties: build.template(std.get(block, 'additional_properties', null)),
        annotations: build.template(std.get(block, 'annotations', null)),
        connection_string: build.template(std.get(block, 'connection_string', null)),
        credential_name: build.template(std.get(block, 'credential_name', null)),
        data_factory_id: build.template(block.data_factory_id),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        integration_runtime_name: build.template(std.get(block, 'integration_runtime_name', null)),
        name: build.template(block.name),
        parameters: build.template(std.get(block, 'parameters', null)),
        service_principal_id: build.template(std.get(block, 'service_principal_id', null)),
        service_principal_key: build.template(std.get(block, 'service_principal_key', null)),
        tenant_id: build.template(std.get(block, 'tenant_id', null)),
        use_managed_identity: build.template(std.get(block, 'use_managed_identity', null)),
      }),
      additional_properties: resource.field(self._.blocks, 'additional_properties'),
      annotations: resource.field(self._.blocks, 'annotations'),
      connection_string: resource.field(self._.blocks, 'connection_string'),
      credential_name: resource.field(self._.blocks, 'credential_name'),
      data_factory_id: resource.field(self._.blocks, 'data_factory_id'),
      description: resource.field(self._.blocks, 'description'),
      id: resource.field(self._.blocks, 'id'),
      integration_runtime_name: resource.field(self._.blocks, 'integration_runtime_name'),
      name: resource.field(self._.blocks, 'name'),
      parameters: resource.field(self._.blocks, 'parameters'),
      service_principal_id: resource.field(self._.blocks, 'service_principal_id'),
      service_principal_key: resource.field(self._.blocks, 'service_principal_key'),
      tenant_id: resource.field(self._.blocks, 'tenant_id'),
      use_managed_identity: resource.field(self._.blocks, 'use_managed_identity'),
    },
    data_factory_linked_service_azure_table_storage(name, block): {
      local resource = blockType.resource('azurerm_data_factory_linked_service_azure_table_storage', name),
      _: resource._(block, {
        additional_properties: build.template(std.get(block, 'additional_properties', null)),
        annotations: build.template(std.get(block, 'annotations', null)),
        connection_string: build.template(block.connection_string),
        data_factory_id: build.template(block.data_factory_id),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        integration_runtime_name: build.template(std.get(block, 'integration_runtime_name', null)),
        name: build.template(block.name),
        parameters: build.template(std.get(block, 'parameters', null)),
      }),
      additional_properties: resource.field(self._.blocks, 'additional_properties'),
      annotations: resource.field(self._.blocks, 'annotations'),
      connection_string: resource.field(self._.blocks, 'connection_string'),
      data_factory_id: resource.field(self._.blocks, 'data_factory_id'),
      description: resource.field(self._.blocks, 'description'),
      id: resource.field(self._.blocks, 'id'),
      integration_runtime_name: resource.field(self._.blocks, 'integration_runtime_name'),
      name: resource.field(self._.blocks, 'name'),
      parameters: resource.field(self._.blocks, 'parameters'),
    },
    data_factory_linked_service_cosmosdb(name, block): {
      local resource = blockType.resource('azurerm_data_factory_linked_service_cosmosdb', name),
      _: resource._(block, {
        account_endpoint: build.template(std.get(block, 'account_endpoint', null)),
        account_key: build.template(std.get(block, 'account_key', null)),
        additional_properties: build.template(std.get(block, 'additional_properties', null)),
        annotations: build.template(std.get(block, 'annotations', null)),
        connection_string: build.template(std.get(block, 'connection_string', null)),
        data_factory_id: build.template(block.data_factory_id),
        database: build.template(std.get(block, 'database', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        integration_runtime_name: build.template(std.get(block, 'integration_runtime_name', null)),
        name: build.template(block.name),
        parameters: build.template(std.get(block, 'parameters', null)),
      }),
      account_endpoint: resource.field(self._.blocks, 'account_endpoint'),
      account_key: resource.field(self._.blocks, 'account_key'),
      additional_properties: resource.field(self._.blocks, 'additional_properties'),
      annotations: resource.field(self._.blocks, 'annotations'),
      connection_string: resource.field(self._.blocks, 'connection_string'),
      data_factory_id: resource.field(self._.blocks, 'data_factory_id'),
      database: resource.field(self._.blocks, 'database'),
      description: resource.field(self._.blocks, 'description'),
      id: resource.field(self._.blocks, 'id'),
      integration_runtime_name: resource.field(self._.blocks, 'integration_runtime_name'),
      name: resource.field(self._.blocks, 'name'),
      parameters: resource.field(self._.blocks, 'parameters'),
    },
    data_factory_linked_service_cosmosdb_mongoapi(name, block): {
      local resource = blockType.resource('azurerm_data_factory_linked_service_cosmosdb_mongoapi', name),
      _: resource._(block, {
        additional_properties: build.template(std.get(block, 'additional_properties', null)),
        annotations: build.template(std.get(block, 'annotations', null)),
        connection_string: build.template(std.get(block, 'connection_string', null)),
        data_factory_id: build.template(block.data_factory_id),
        database: build.template(std.get(block, 'database', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        integration_runtime_name: build.template(std.get(block, 'integration_runtime_name', null)),
        name: build.template(block.name),
        parameters: build.template(std.get(block, 'parameters', null)),
        server_version_is_32_or_higher: build.template(std.get(block, 'server_version_is_32_or_higher', null)),
      }),
      additional_properties: resource.field(self._.blocks, 'additional_properties'),
      annotations: resource.field(self._.blocks, 'annotations'),
      connection_string: resource.field(self._.blocks, 'connection_string'),
      data_factory_id: resource.field(self._.blocks, 'data_factory_id'),
      database: resource.field(self._.blocks, 'database'),
      description: resource.field(self._.blocks, 'description'),
      id: resource.field(self._.blocks, 'id'),
      integration_runtime_name: resource.field(self._.blocks, 'integration_runtime_name'),
      name: resource.field(self._.blocks, 'name'),
      parameters: resource.field(self._.blocks, 'parameters'),
      server_version_is_32_or_higher: resource.field(self._.blocks, 'server_version_is_32_or_higher'),
    },
    data_factory_linked_service_data_lake_storage_gen2(name, block): {
      local resource = blockType.resource('azurerm_data_factory_linked_service_data_lake_storage_gen2', name),
      _: resource._(block, {
        additional_properties: build.template(std.get(block, 'additional_properties', null)),
        annotations: build.template(std.get(block, 'annotations', null)),
        data_factory_id: build.template(block.data_factory_id),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        integration_runtime_name: build.template(std.get(block, 'integration_runtime_name', null)),
        name: build.template(block.name),
        parameters: build.template(std.get(block, 'parameters', null)),
        service_principal_id: build.template(std.get(block, 'service_principal_id', null)),
        service_principal_key: build.template(std.get(block, 'service_principal_key', null)),
        storage_account_key: build.template(std.get(block, 'storage_account_key', null)),
        tenant: build.template(std.get(block, 'tenant', null)),
        url: build.template(block.url),
        use_managed_identity: build.template(std.get(block, 'use_managed_identity', null)),
      }),
      additional_properties: resource.field(self._.blocks, 'additional_properties'),
      annotations: resource.field(self._.blocks, 'annotations'),
      data_factory_id: resource.field(self._.blocks, 'data_factory_id'),
      description: resource.field(self._.blocks, 'description'),
      id: resource.field(self._.blocks, 'id'),
      integration_runtime_name: resource.field(self._.blocks, 'integration_runtime_name'),
      name: resource.field(self._.blocks, 'name'),
      parameters: resource.field(self._.blocks, 'parameters'),
      service_principal_id: resource.field(self._.blocks, 'service_principal_id'),
      service_principal_key: resource.field(self._.blocks, 'service_principal_key'),
      storage_account_key: resource.field(self._.blocks, 'storage_account_key'),
      tenant: resource.field(self._.blocks, 'tenant'),
      url: resource.field(self._.blocks, 'url'),
      use_managed_identity: resource.field(self._.blocks, 'use_managed_identity'),
    },
    data_factory_linked_service_key_vault(name, block): {
      local resource = blockType.resource('azurerm_data_factory_linked_service_key_vault', name),
      _: resource._(block, {
        additional_properties: build.template(std.get(block, 'additional_properties', null)),
        annotations: build.template(std.get(block, 'annotations', null)),
        data_factory_id: build.template(block.data_factory_id),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        integration_runtime_name: build.template(std.get(block, 'integration_runtime_name', null)),
        key_vault_id: build.template(block.key_vault_id),
        name: build.template(block.name),
        parameters: build.template(std.get(block, 'parameters', null)),
      }),
      additional_properties: resource.field(self._.blocks, 'additional_properties'),
      annotations: resource.field(self._.blocks, 'annotations'),
      data_factory_id: resource.field(self._.blocks, 'data_factory_id'),
      description: resource.field(self._.blocks, 'description'),
      id: resource.field(self._.blocks, 'id'),
      integration_runtime_name: resource.field(self._.blocks, 'integration_runtime_name'),
      key_vault_id: resource.field(self._.blocks, 'key_vault_id'),
      name: resource.field(self._.blocks, 'name'),
      parameters: resource.field(self._.blocks, 'parameters'),
    },
    data_factory_linked_service_kusto(name, block): {
      local resource = blockType.resource('azurerm_data_factory_linked_service_kusto', name),
      _: resource._(block, {
        additional_properties: build.template(std.get(block, 'additional_properties', null)),
        annotations: build.template(std.get(block, 'annotations', null)),
        data_factory_id: build.template(block.data_factory_id),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        integration_runtime_name: build.template(std.get(block, 'integration_runtime_name', null)),
        kusto_database_name: build.template(block.kusto_database_name),
        kusto_endpoint: build.template(block.kusto_endpoint),
        name: build.template(block.name),
        parameters: build.template(std.get(block, 'parameters', null)),
        service_principal_id: build.template(std.get(block, 'service_principal_id', null)),
        service_principal_key: build.template(std.get(block, 'service_principal_key', null)),
        tenant: build.template(std.get(block, 'tenant', null)),
        use_managed_identity: build.template(std.get(block, 'use_managed_identity', null)),
      }),
      additional_properties: resource.field(self._.blocks, 'additional_properties'),
      annotations: resource.field(self._.blocks, 'annotations'),
      data_factory_id: resource.field(self._.blocks, 'data_factory_id'),
      description: resource.field(self._.blocks, 'description'),
      id: resource.field(self._.blocks, 'id'),
      integration_runtime_name: resource.field(self._.blocks, 'integration_runtime_name'),
      kusto_database_name: resource.field(self._.blocks, 'kusto_database_name'),
      kusto_endpoint: resource.field(self._.blocks, 'kusto_endpoint'),
      name: resource.field(self._.blocks, 'name'),
      parameters: resource.field(self._.blocks, 'parameters'),
      service_principal_id: resource.field(self._.blocks, 'service_principal_id'),
      service_principal_key: resource.field(self._.blocks, 'service_principal_key'),
      tenant: resource.field(self._.blocks, 'tenant'),
      use_managed_identity: resource.field(self._.blocks, 'use_managed_identity'),
    },
    data_factory_linked_service_mysql(name, block): {
      local resource = blockType.resource('azurerm_data_factory_linked_service_mysql', name),
      _: resource._(block, {
        additional_properties: build.template(std.get(block, 'additional_properties', null)),
        annotations: build.template(std.get(block, 'annotations', null)),
        connection_string: build.template(block.connection_string),
        data_factory_id: build.template(block.data_factory_id),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        integration_runtime_name: build.template(std.get(block, 'integration_runtime_name', null)),
        name: build.template(block.name),
        parameters: build.template(std.get(block, 'parameters', null)),
      }),
      additional_properties: resource.field(self._.blocks, 'additional_properties'),
      annotations: resource.field(self._.blocks, 'annotations'),
      connection_string: resource.field(self._.blocks, 'connection_string'),
      data_factory_id: resource.field(self._.blocks, 'data_factory_id'),
      description: resource.field(self._.blocks, 'description'),
      id: resource.field(self._.blocks, 'id'),
      integration_runtime_name: resource.field(self._.blocks, 'integration_runtime_name'),
      name: resource.field(self._.blocks, 'name'),
      parameters: resource.field(self._.blocks, 'parameters'),
    },
    data_factory_linked_service_odata(name, block): {
      local resource = blockType.resource('azurerm_data_factory_linked_service_odata', name),
      _: resource._(block, {
        additional_properties: build.template(std.get(block, 'additional_properties', null)),
        annotations: build.template(std.get(block, 'annotations', null)),
        data_factory_id: build.template(block.data_factory_id),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        integration_runtime_name: build.template(std.get(block, 'integration_runtime_name', null)),
        name: build.template(block.name),
        parameters: build.template(std.get(block, 'parameters', null)),
        url: build.template(block.url),
      }),
      additional_properties: resource.field(self._.blocks, 'additional_properties'),
      annotations: resource.field(self._.blocks, 'annotations'),
      data_factory_id: resource.field(self._.blocks, 'data_factory_id'),
      description: resource.field(self._.blocks, 'description'),
      id: resource.field(self._.blocks, 'id'),
      integration_runtime_name: resource.field(self._.blocks, 'integration_runtime_name'),
      name: resource.field(self._.blocks, 'name'),
      parameters: resource.field(self._.blocks, 'parameters'),
      url: resource.field(self._.blocks, 'url'),
    },
    data_factory_linked_service_odbc(name, block): {
      local resource = blockType.resource('azurerm_data_factory_linked_service_odbc', name),
      _: resource._(block, {
        additional_properties: build.template(std.get(block, 'additional_properties', null)),
        annotations: build.template(std.get(block, 'annotations', null)),
        connection_string: build.template(block.connection_string),
        data_factory_id: build.template(block.data_factory_id),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        integration_runtime_name: build.template(std.get(block, 'integration_runtime_name', null)),
        name: build.template(block.name),
        parameters: build.template(std.get(block, 'parameters', null)),
      }),
      additional_properties: resource.field(self._.blocks, 'additional_properties'),
      annotations: resource.field(self._.blocks, 'annotations'),
      connection_string: resource.field(self._.blocks, 'connection_string'),
      data_factory_id: resource.field(self._.blocks, 'data_factory_id'),
      description: resource.field(self._.blocks, 'description'),
      id: resource.field(self._.blocks, 'id'),
      integration_runtime_name: resource.field(self._.blocks, 'integration_runtime_name'),
      name: resource.field(self._.blocks, 'name'),
      parameters: resource.field(self._.blocks, 'parameters'),
    },
    data_factory_linked_service_postgresql(name, block): {
      local resource = blockType.resource('azurerm_data_factory_linked_service_postgresql', name),
      _: resource._(block, {
        additional_properties: build.template(std.get(block, 'additional_properties', null)),
        annotations: build.template(std.get(block, 'annotations', null)),
        connection_string: build.template(block.connection_string),
        data_factory_id: build.template(block.data_factory_id),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        integration_runtime_name: build.template(std.get(block, 'integration_runtime_name', null)),
        name: build.template(block.name),
        parameters: build.template(std.get(block, 'parameters', null)),
      }),
      additional_properties: resource.field(self._.blocks, 'additional_properties'),
      annotations: resource.field(self._.blocks, 'annotations'),
      connection_string: resource.field(self._.blocks, 'connection_string'),
      data_factory_id: resource.field(self._.blocks, 'data_factory_id'),
      description: resource.field(self._.blocks, 'description'),
      id: resource.field(self._.blocks, 'id'),
      integration_runtime_name: resource.field(self._.blocks, 'integration_runtime_name'),
      name: resource.field(self._.blocks, 'name'),
      parameters: resource.field(self._.blocks, 'parameters'),
    },
    data_factory_linked_service_sftp(name, block): {
      local resource = blockType.resource('azurerm_data_factory_linked_service_sftp', name),
      _: resource._(block, {
        additional_properties: build.template(std.get(block, 'additional_properties', null)),
        annotations: build.template(std.get(block, 'annotations', null)),
        authentication_type: build.template(block.authentication_type),
        data_factory_id: build.template(block.data_factory_id),
        description: build.template(std.get(block, 'description', null)),
        host: build.template(block.host),
        host_key_fingerprint: build.template(std.get(block, 'host_key_fingerprint', null)),
        id: build.template(std.get(block, 'id', null)),
        integration_runtime_name: build.template(std.get(block, 'integration_runtime_name', null)),
        name: build.template(block.name),
        parameters: build.template(std.get(block, 'parameters', null)),
        password: build.template(block.password),
        port: build.template(block.port),
        skip_host_key_validation: build.template(std.get(block, 'skip_host_key_validation', null)),
        username: build.template(block.username),
      }),
      additional_properties: resource.field(self._.blocks, 'additional_properties'),
      annotations: resource.field(self._.blocks, 'annotations'),
      authentication_type: resource.field(self._.blocks, 'authentication_type'),
      data_factory_id: resource.field(self._.blocks, 'data_factory_id'),
      description: resource.field(self._.blocks, 'description'),
      host: resource.field(self._.blocks, 'host'),
      host_key_fingerprint: resource.field(self._.blocks, 'host_key_fingerprint'),
      id: resource.field(self._.blocks, 'id'),
      integration_runtime_name: resource.field(self._.blocks, 'integration_runtime_name'),
      name: resource.field(self._.blocks, 'name'),
      parameters: resource.field(self._.blocks, 'parameters'),
      password: resource.field(self._.blocks, 'password'),
      port: resource.field(self._.blocks, 'port'),
      skip_host_key_validation: resource.field(self._.blocks, 'skip_host_key_validation'),
      username: resource.field(self._.blocks, 'username'),
    },
    data_factory_linked_service_snowflake(name, block): {
      local resource = blockType.resource('azurerm_data_factory_linked_service_snowflake', name),
      _: resource._(block, {
        additional_properties: build.template(std.get(block, 'additional_properties', null)),
        annotations: build.template(std.get(block, 'annotations', null)),
        connection_string: build.template(block.connection_string),
        data_factory_id: build.template(block.data_factory_id),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        integration_runtime_name: build.template(std.get(block, 'integration_runtime_name', null)),
        name: build.template(block.name),
        parameters: build.template(std.get(block, 'parameters', null)),
      }),
      additional_properties: resource.field(self._.blocks, 'additional_properties'),
      annotations: resource.field(self._.blocks, 'annotations'),
      connection_string: resource.field(self._.blocks, 'connection_string'),
      data_factory_id: resource.field(self._.blocks, 'data_factory_id'),
      description: resource.field(self._.blocks, 'description'),
      id: resource.field(self._.blocks, 'id'),
      integration_runtime_name: resource.field(self._.blocks, 'integration_runtime_name'),
      name: resource.field(self._.blocks, 'name'),
      parameters: resource.field(self._.blocks, 'parameters'),
    },
    data_factory_linked_service_sql_server(name, block): {
      local resource = blockType.resource('azurerm_data_factory_linked_service_sql_server', name),
      _: resource._(block, {
        additional_properties: build.template(std.get(block, 'additional_properties', null)),
        annotations: build.template(std.get(block, 'annotations', null)),
        connection_string: build.template(std.get(block, 'connection_string', null)),
        data_factory_id: build.template(block.data_factory_id),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        integration_runtime_name: build.template(std.get(block, 'integration_runtime_name', null)),
        name: build.template(block.name),
        parameters: build.template(std.get(block, 'parameters', null)),
        user_name: build.template(std.get(block, 'user_name', null)),
      }),
      additional_properties: resource.field(self._.blocks, 'additional_properties'),
      annotations: resource.field(self._.blocks, 'annotations'),
      connection_string: resource.field(self._.blocks, 'connection_string'),
      data_factory_id: resource.field(self._.blocks, 'data_factory_id'),
      description: resource.field(self._.blocks, 'description'),
      id: resource.field(self._.blocks, 'id'),
      integration_runtime_name: resource.field(self._.blocks, 'integration_runtime_name'),
      name: resource.field(self._.blocks, 'name'),
      parameters: resource.field(self._.blocks, 'parameters'),
      user_name: resource.field(self._.blocks, 'user_name'),
    },
    data_factory_linked_service_synapse(name, block): {
      local resource = blockType.resource('azurerm_data_factory_linked_service_synapse', name),
      _: resource._(block, {
        additional_properties: build.template(std.get(block, 'additional_properties', null)),
        annotations: build.template(std.get(block, 'annotations', null)),
        connection_string: build.template(block.connection_string),
        data_factory_id: build.template(block.data_factory_id),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        integration_runtime_name: build.template(std.get(block, 'integration_runtime_name', null)),
        name: build.template(block.name),
        parameters: build.template(std.get(block, 'parameters', null)),
      }),
      additional_properties: resource.field(self._.blocks, 'additional_properties'),
      annotations: resource.field(self._.blocks, 'annotations'),
      connection_string: resource.field(self._.blocks, 'connection_string'),
      data_factory_id: resource.field(self._.blocks, 'data_factory_id'),
      description: resource.field(self._.blocks, 'description'),
      id: resource.field(self._.blocks, 'id'),
      integration_runtime_name: resource.field(self._.blocks, 'integration_runtime_name'),
      name: resource.field(self._.blocks, 'name'),
      parameters: resource.field(self._.blocks, 'parameters'),
    },
    data_factory_linked_service_web(name, block): {
      local resource = blockType.resource('azurerm_data_factory_linked_service_web', name),
      _: resource._(block, {
        additional_properties: build.template(std.get(block, 'additional_properties', null)),
        annotations: build.template(std.get(block, 'annotations', null)),
        authentication_type: build.template(block.authentication_type),
        data_factory_id: build.template(block.data_factory_id),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        integration_runtime_name: build.template(std.get(block, 'integration_runtime_name', null)),
        name: build.template(block.name),
        parameters: build.template(std.get(block, 'parameters', null)),
        password: build.template(std.get(block, 'password', null)),
        url: build.template(block.url),
        username: build.template(std.get(block, 'username', null)),
      }),
      additional_properties: resource.field(self._.blocks, 'additional_properties'),
      annotations: resource.field(self._.blocks, 'annotations'),
      authentication_type: resource.field(self._.blocks, 'authentication_type'),
      data_factory_id: resource.field(self._.blocks, 'data_factory_id'),
      description: resource.field(self._.blocks, 'description'),
      id: resource.field(self._.blocks, 'id'),
      integration_runtime_name: resource.field(self._.blocks, 'integration_runtime_name'),
      name: resource.field(self._.blocks, 'name'),
      parameters: resource.field(self._.blocks, 'parameters'),
      password: resource.field(self._.blocks, 'password'),
      url: resource.field(self._.blocks, 'url'),
      username: resource.field(self._.blocks, 'username'),
    },
    data_factory_managed_private_endpoint(name, block): {
      local resource = blockType.resource('azurerm_data_factory_managed_private_endpoint', name),
      _: resource._(block, {
        data_factory_id: build.template(block.data_factory_id),
        fqdns: build.template(std.get(block, 'fqdns', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        subresource_name: build.template(std.get(block, 'subresource_name', null)),
        target_resource_id: build.template(block.target_resource_id),
      }),
      data_factory_id: resource.field(self._.blocks, 'data_factory_id'),
      fqdns: resource.field(self._.blocks, 'fqdns'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      subresource_name: resource.field(self._.blocks, 'subresource_name'),
      target_resource_id: resource.field(self._.blocks, 'target_resource_id'),
    },
    data_factory_pipeline(name, block): {
      local resource = blockType.resource('azurerm_data_factory_pipeline', name),
      _: resource._(block, {
        activities_json: build.template(std.get(block, 'activities_json', null)),
        annotations: build.template(std.get(block, 'annotations', null)),
        concurrency: build.template(std.get(block, 'concurrency', null)),
        data_factory_id: build.template(block.data_factory_id),
        description: build.template(std.get(block, 'description', null)),
        folder: build.template(std.get(block, 'folder', null)),
        id: build.template(std.get(block, 'id', null)),
        moniter_metrics_after_duration: build.template(std.get(block, 'moniter_metrics_after_duration', null)),
        name: build.template(block.name),
        parameters: build.template(std.get(block, 'parameters', null)),
        variables: build.template(std.get(block, 'variables', null)),
      }),
      activities_json: resource.field(self._.blocks, 'activities_json'),
      annotations: resource.field(self._.blocks, 'annotations'),
      concurrency: resource.field(self._.blocks, 'concurrency'),
      data_factory_id: resource.field(self._.blocks, 'data_factory_id'),
      description: resource.field(self._.blocks, 'description'),
      folder: resource.field(self._.blocks, 'folder'),
      id: resource.field(self._.blocks, 'id'),
      moniter_metrics_after_duration: resource.field(self._.blocks, 'moniter_metrics_after_duration'),
      name: resource.field(self._.blocks, 'name'),
      parameters: resource.field(self._.blocks, 'parameters'),
      variables: resource.field(self._.blocks, 'variables'),
    },
    data_factory_trigger_blob_event(name, block): {
      local resource = blockType.resource('azurerm_data_factory_trigger_blob_event', name),
      _: resource._(block, {
        activated: build.template(std.get(block, 'activated', null)),
        additional_properties: build.template(std.get(block, 'additional_properties', null)),
        annotations: build.template(std.get(block, 'annotations', null)),
        blob_path_begins_with: build.template(std.get(block, 'blob_path_begins_with', null)),
        blob_path_ends_with: build.template(std.get(block, 'blob_path_ends_with', null)),
        data_factory_id: build.template(block.data_factory_id),
        description: build.template(std.get(block, 'description', null)),
        events: build.template(block.events),
        id: build.template(std.get(block, 'id', null)),
        ignore_empty_blobs: build.template(std.get(block, 'ignore_empty_blobs', null)),
        name: build.template(block.name),
        storage_account_id: build.template(block.storage_account_id),
      }),
      activated: resource.field(self._.blocks, 'activated'),
      additional_properties: resource.field(self._.blocks, 'additional_properties'),
      annotations: resource.field(self._.blocks, 'annotations'),
      blob_path_begins_with: resource.field(self._.blocks, 'blob_path_begins_with'),
      blob_path_ends_with: resource.field(self._.blocks, 'blob_path_ends_with'),
      data_factory_id: resource.field(self._.blocks, 'data_factory_id'),
      description: resource.field(self._.blocks, 'description'),
      events: resource.field(self._.blocks, 'events'),
      id: resource.field(self._.blocks, 'id'),
      ignore_empty_blobs: resource.field(self._.blocks, 'ignore_empty_blobs'),
      name: resource.field(self._.blocks, 'name'),
      storage_account_id: resource.field(self._.blocks, 'storage_account_id'),
    },
    data_factory_trigger_custom_event(name, block): {
      local resource = blockType.resource('azurerm_data_factory_trigger_custom_event', name),
      _: resource._(block, {
        activated: build.template(std.get(block, 'activated', null)),
        additional_properties: build.template(std.get(block, 'additional_properties', null)),
        annotations: build.template(std.get(block, 'annotations', null)),
        data_factory_id: build.template(block.data_factory_id),
        description: build.template(std.get(block, 'description', null)),
        eventgrid_topic_id: build.template(block.eventgrid_topic_id),
        events: build.template(block.events),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        subject_begins_with: build.template(std.get(block, 'subject_begins_with', null)),
        subject_ends_with: build.template(std.get(block, 'subject_ends_with', null)),
      }),
      activated: resource.field(self._.blocks, 'activated'),
      additional_properties: resource.field(self._.blocks, 'additional_properties'),
      annotations: resource.field(self._.blocks, 'annotations'),
      data_factory_id: resource.field(self._.blocks, 'data_factory_id'),
      description: resource.field(self._.blocks, 'description'),
      eventgrid_topic_id: resource.field(self._.blocks, 'eventgrid_topic_id'),
      events: resource.field(self._.blocks, 'events'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      subject_begins_with: resource.field(self._.blocks, 'subject_begins_with'),
      subject_ends_with: resource.field(self._.blocks, 'subject_ends_with'),
    },
    data_factory_trigger_schedule(name, block): {
      local resource = blockType.resource('azurerm_data_factory_trigger_schedule', name),
      _: resource._(block, {
        activated: build.template(std.get(block, 'activated', null)),
        annotations: build.template(std.get(block, 'annotations', null)),
        data_factory_id: build.template(block.data_factory_id),
        description: build.template(std.get(block, 'description', null)),
        end_time: build.template(std.get(block, 'end_time', null)),
        frequency: build.template(std.get(block, 'frequency', null)),
        id: build.template(std.get(block, 'id', null)),
        interval: build.template(std.get(block, 'interval', null)),
        name: build.template(block.name),
        pipeline_name: build.template(std.get(block, 'pipeline_name', null)),
        pipeline_parameters: build.template(std.get(block, 'pipeline_parameters', null)),
        start_time: build.template(std.get(block, 'start_time', null)),
        time_zone: build.template(std.get(block, 'time_zone', null)),
      }),
      activated: resource.field(self._.blocks, 'activated'),
      annotations: resource.field(self._.blocks, 'annotations'),
      data_factory_id: resource.field(self._.blocks, 'data_factory_id'),
      description: resource.field(self._.blocks, 'description'),
      end_time: resource.field(self._.blocks, 'end_time'),
      frequency: resource.field(self._.blocks, 'frequency'),
      id: resource.field(self._.blocks, 'id'),
      interval: resource.field(self._.blocks, 'interval'),
      name: resource.field(self._.blocks, 'name'),
      pipeline_name: resource.field(self._.blocks, 'pipeline_name'),
      pipeline_parameters: resource.field(self._.blocks, 'pipeline_parameters'),
      start_time: resource.field(self._.blocks, 'start_time'),
      time_zone: resource.field(self._.blocks, 'time_zone'),
    },
    data_factory_trigger_tumbling_window(name, block): {
      local resource = blockType.resource('azurerm_data_factory_trigger_tumbling_window', name),
      _: resource._(block, {
        activated: build.template(std.get(block, 'activated', null)),
        additional_properties: build.template(std.get(block, 'additional_properties', null)),
        annotations: build.template(std.get(block, 'annotations', null)),
        data_factory_id: build.template(block.data_factory_id),
        delay: build.template(std.get(block, 'delay', null)),
        description: build.template(std.get(block, 'description', null)),
        end_time: build.template(std.get(block, 'end_time', null)),
        frequency: build.template(block.frequency),
        id: build.template(std.get(block, 'id', null)),
        interval: build.template(block.interval),
        max_concurrency: build.template(std.get(block, 'max_concurrency', null)),
        name: build.template(block.name),
        start_time: build.template(block.start_time),
      }),
      activated: resource.field(self._.blocks, 'activated'),
      additional_properties: resource.field(self._.blocks, 'additional_properties'),
      annotations: resource.field(self._.blocks, 'annotations'),
      data_factory_id: resource.field(self._.blocks, 'data_factory_id'),
      delay: resource.field(self._.blocks, 'delay'),
      description: resource.field(self._.blocks, 'description'),
      end_time: resource.field(self._.blocks, 'end_time'),
      frequency: resource.field(self._.blocks, 'frequency'),
      id: resource.field(self._.blocks, 'id'),
      interval: resource.field(self._.blocks, 'interval'),
      max_concurrency: resource.field(self._.blocks, 'max_concurrency'),
      name: resource.field(self._.blocks, 'name'),
      start_time: resource.field(self._.blocks, 'start_time'),
    },
    data_protection_backup_instance_blob_storage(name, block): {
      local resource = blockType.resource('azurerm_data_protection_backup_instance_blob_storage', name),
      _: resource._(block, {
        backup_policy_id: build.template(block.backup_policy_id),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        storage_account_container_names: build.template(std.get(block, 'storage_account_container_names', null)),
        storage_account_id: build.template(block.storage_account_id),
        vault_id: build.template(block.vault_id),
      }),
      backup_policy_id: resource.field(self._.blocks, 'backup_policy_id'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      storage_account_container_names: resource.field(self._.blocks, 'storage_account_container_names'),
      storage_account_id: resource.field(self._.blocks, 'storage_account_id'),
      vault_id: resource.field(self._.blocks, 'vault_id'),
    },
    data_protection_backup_instance_disk(name, block): {
      local resource = blockType.resource('azurerm_data_protection_backup_instance_disk', name),
      _: resource._(block, {
        backup_policy_id: build.template(block.backup_policy_id),
        disk_id: build.template(block.disk_id),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        snapshot_resource_group_name: build.template(block.snapshot_resource_group_name),
        vault_id: build.template(block.vault_id),
      }),
      backup_policy_id: resource.field(self._.blocks, 'backup_policy_id'),
      disk_id: resource.field(self._.blocks, 'disk_id'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      snapshot_resource_group_name: resource.field(self._.blocks, 'snapshot_resource_group_name'),
      vault_id: resource.field(self._.blocks, 'vault_id'),
    },
    data_protection_backup_instance_kubernetes_cluster(name, block): {
      local resource = blockType.resource('azurerm_data_protection_backup_instance_kubernetes_cluster', name),
      _: resource._(block, {
        backup_policy_id: build.template(block.backup_policy_id),
        id: build.template(std.get(block, 'id', null)),
        kubernetes_cluster_id: build.template(block.kubernetes_cluster_id),
        location: build.template(block.location),
        name: build.template(block.name),
        snapshot_resource_group_name: build.template(block.snapshot_resource_group_name),
        vault_id: build.template(block.vault_id),
      }),
      backup_policy_id: resource.field(self._.blocks, 'backup_policy_id'),
      id: resource.field(self._.blocks, 'id'),
      kubernetes_cluster_id: resource.field(self._.blocks, 'kubernetes_cluster_id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      snapshot_resource_group_name: resource.field(self._.blocks, 'snapshot_resource_group_name'),
      vault_id: resource.field(self._.blocks, 'vault_id'),
    },
    data_protection_backup_instance_mysql_flexible_server(name, block): {
      local resource = blockType.resource('azurerm_data_protection_backup_instance_mysql_flexible_server', name),
      _: resource._(block, {
        backup_policy_id: build.template(block.backup_policy_id),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        server_id: build.template(block.server_id),
        vault_id: build.template(block.vault_id),
      }),
      backup_policy_id: resource.field(self._.blocks, 'backup_policy_id'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      server_id: resource.field(self._.blocks, 'server_id'),
      vault_id: resource.field(self._.blocks, 'vault_id'),
    },
    data_protection_backup_instance_postgresql(name, block): {
      local resource = blockType.resource('azurerm_data_protection_backup_instance_postgresql', name),
      _: resource._(block, {
        backup_policy_id: build.template(block.backup_policy_id),
        database_credential_key_vault_secret_id: build.template(std.get(block, 'database_credential_key_vault_secret_id', null)),
        database_id: build.template(block.database_id),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        vault_id: build.template(block.vault_id),
      }),
      backup_policy_id: resource.field(self._.blocks, 'backup_policy_id'),
      database_credential_key_vault_secret_id: resource.field(self._.blocks, 'database_credential_key_vault_secret_id'),
      database_id: resource.field(self._.blocks, 'database_id'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      vault_id: resource.field(self._.blocks, 'vault_id'),
    },
    data_protection_backup_instance_postgresql_flexible_server(name, block): {
      local resource = blockType.resource('azurerm_data_protection_backup_instance_postgresql_flexible_server', name),
      _: resource._(block, {
        backup_policy_id: build.template(block.backup_policy_id),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        server_id: build.template(block.server_id),
        vault_id: build.template(block.vault_id),
      }),
      backup_policy_id: resource.field(self._.blocks, 'backup_policy_id'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      server_id: resource.field(self._.blocks, 'server_id'),
      vault_id: resource.field(self._.blocks, 'vault_id'),
    },
    data_protection_backup_policy_blob_storage(name, block): {
      local resource = blockType.resource('azurerm_data_protection_backup_policy_blob_storage', name),
      _: resource._(block, {
        backup_repeating_time_intervals: build.template(std.get(block, 'backup_repeating_time_intervals', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        operational_default_retention_duration: build.template(std.get(block, 'operational_default_retention_duration', null)),
        time_zone: build.template(std.get(block, 'time_zone', null)),
        vault_default_retention_duration: build.template(std.get(block, 'vault_default_retention_duration', null)),
        vault_id: build.template(block.vault_id),
      }),
      backup_repeating_time_intervals: resource.field(self._.blocks, 'backup_repeating_time_intervals'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      operational_default_retention_duration: resource.field(self._.blocks, 'operational_default_retention_duration'),
      time_zone: resource.field(self._.blocks, 'time_zone'),
      vault_default_retention_duration: resource.field(self._.blocks, 'vault_default_retention_duration'),
      vault_id: resource.field(self._.blocks, 'vault_id'),
    },
    data_protection_backup_policy_disk(name, block): {
      local resource = blockType.resource('azurerm_data_protection_backup_policy_disk', name),
      _: resource._(block, {
        backup_repeating_time_intervals: build.template(block.backup_repeating_time_intervals),
        default_retention_duration: build.template(block.default_retention_duration),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        time_zone: build.template(std.get(block, 'time_zone', null)),
        vault_id: build.template(block.vault_id),
      }),
      backup_repeating_time_intervals: resource.field(self._.blocks, 'backup_repeating_time_intervals'),
      default_retention_duration: resource.field(self._.blocks, 'default_retention_duration'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      time_zone: resource.field(self._.blocks, 'time_zone'),
      vault_id: resource.field(self._.blocks, 'vault_id'),
    },
    data_protection_backup_policy_kubernetes_cluster(name, block): {
      local resource = blockType.resource('azurerm_data_protection_backup_policy_kubernetes_cluster', name),
      _: resource._(block, {
        backup_repeating_time_intervals: build.template(block.backup_repeating_time_intervals),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        time_zone: build.template(std.get(block, 'time_zone', null)),
        vault_name: build.template(block.vault_name),
      }),
      backup_repeating_time_intervals: resource.field(self._.blocks, 'backup_repeating_time_intervals'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      time_zone: resource.field(self._.blocks, 'time_zone'),
      vault_name: resource.field(self._.blocks, 'vault_name'),
    },
    data_protection_backup_policy_mysql_flexible_server(name, block): {
      local resource = blockType.resource('azurerm_data_protection_backup_policy_mysql_flexible_server', name),
      _: resource._(block, {
        backup_repeating_time_intervals: build.template(block.backup_repeating_time_intervals),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        time_zone: build.template(std.get(block, 'time_zone', null)),
        vault_id: build.template(block.vault_id),
      }),
      backup_repeating_time_intervals: resource.field(self._.blocks, 'backup_repeating_time_intervals'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      time_zone: resource.field(self._.blocks, 'time_zone'),
      vault_id: resource.field(self._.blocks, 'vault_id'),
    },
    data_protection_backup_policy_postgresql(name, block): {
      local resource = blockType.resource('azurerm_data_protection_backup_policy_postgresql', name),
      _: resource._(block, {
        backup_repeating_time_intervals: build.template(block.backup_repeating_time_intervals),
        default_retention_duration: build.template(block.default_retention_duration),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        time_zone: build.template(std.get(block, 'time_zone', null)),
        vault_name: build.template(block.vault_name),
      }),
      backup_repeating_time_intervals: resource.field(self._.blocks, 'backup_repeating_time_intervals'),
      default_retention_duration: resource.field(self._.blocks, 'default_retention_duration'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      time_zone: resource.field(self._.blocks, 'time_zone'),
      vault_name: resource.field(self._.blocks, 'vault_name'),
    },
    data_protection_backup_policy_postgresql_flexible_server(name, block): {
      local resource = blockType.resource('azurerm_data_protection_backup_policy_postgresql_flexible_server', name),
      _: resource._(block, {
        backup_repeating_time_intervals: build.template(block.backup_repeating_time_intervals),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        time_zone: build.template(std.get(block, 'time_zone', null)),
        vault_id: build.template(block.vault_id),
      }),
      backup_repeating_time_intervals: resource.field(self._.blocks, 'backup_repeating_time_intervals'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      time_zone: resource.field(self._.blocks, 'time_zone'),
      vault_id: resource.field(self._.blocks, 'vault_id'),
    },
    data_protection_backup_vault(name, block): {
      local resource = blockType.resource('azurerm_data_protection_backup_vault', name),
      _: resource._(block, {
        cross_region_restore_enabled: build.template(std.get(block, 'cross_region_restore_enabled', null)),
        datastore_type: build.template(block.datastore_type),
        id: build.template(std.get(block, 'id', null)),
        immutability: build.template(std.get(block, 'immutability', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        redundancy: build.template(block.redundancy),
        resource_group_name: build.template(block.resource_group_name),
        retention_duration_in_days: build.template(std.get(block, 'retention_duration_in_days', null)),
        soft_delete: build.template(std.get(block, 'soft_delete', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      cross_region_restore_enabled: resource.field(self._.blocks, 'cross_region_restore_enabled'),
      datastore_type: resource.field(self._.blocks, 'datastore_type'),
      id: resource.field(self._.blocks, 'id'),
      immutability: resource.field(self._.blocks, 'immutability'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      redundancy: resource.field(self._.blocks, 'redundancy'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      retention_duration_in_days: resource.field(self._.blocks, 'retention_duration_in_days'),
      soft_delete: resource.field(self._.blocks, 'soft_delete'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    data_protection_backup_vault_customer_managed_key(name, block): {
      local resource = blockType.resource('azurerm_data_protection_backup_vault_customer_managed_key', name),
      _: resource._(block, {
        data_protection_backup_vault_id: build.template(block.data_protection_backup_vault_id),
        id: build.template(std.get(block, 'id', null)),
        key_vault_key_id: build.template(block.key_vault_key_id),
      }),
      data_protection_backup_vault_id: resource.field(self._.blocks, 'data_protection_backup_vault_id'),
      id: resource.field(self._.blocks, 'id'),
      key_vault_key_id: resource.field(self._.blocks, 'key_vault_key_id'),
    },
    data_protection_resource_guard(name, block): {
      local resource = blockType.resource('azurerm_data_protection_resource_guard', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
        vault_critical_operation_exclusion_list: build.template(std.get(block, 'vault_critical_operation_exclusion_list', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
      vault_critical_operation_exclusion_list: resource.field(self._.blocks, 'vault_critical_operation_exclusion_list'),
    },
    data_share(name, block): {
      local resource = blockType.resource('azurerm_data_share', name),
      _: resource._(block, {
        account_id: build.template(block.account_id),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        kind: build.template(block.kind),
        name: build.template(block.name),
        terms: build.template(std.get(block, 'terms', null)),
      }),
      account_id: resource.field(self._.blocks, 'account_id'),
      description: resource.field(self._.blocks, 'description'),
      id: resource.field(self._.blocks, 'id'),
      kind: resource.field(self._.blocks, 'kind'),
      name: resource.field(self._.blocks, 'name'),
      terms: resource.field(self._.blocks, 'terms'),
    },
    data_share_account(name, block): {
      local resource = blockType.resource('azurerm_data_share_account', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    data_share_dataset_blob_storage(name, block): {
      local resource = blockType.resource('azurerm_data_share_dataset_blob_storage', name),
      _: resource._(block, {
        container_name: build.template(block.container_name),
        data_share_id: build.template(block.data_share_id),
        display_name: build.template(std.get(block, 'display_name', null)),
        file_path: build.template(std.get(block, 'file_path', null)),
        folder_path: build.template(std.get(block, 'folder_path', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
      }),
      container_name: resource.field(self._.blocks, 'container_name'),
      data_share_id: resource.field(self._.blocks, 'data_share_id'),
      display_name: resource.field(self._.blocks, 'display_name'),
      file_path: resource.field(self._.blocks, 'file_path'),
      folder_path: resource.field(self._.blocks, 'folder_path'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
    },
    data_share_dataset_data_lake_gen2(name, block): {
      local resource = blockType.resource('azurerm_data_share_dataset_data_lake_gen2', name),
      _: resource._(block, {
        display_name: build.template(std.get(block, 'display_name', null)),
        file_path: build.template(std.get(block, 'file_path', null)),
        file_system_name: build.template(block.file_system_name),
        folder_path: build.template(std.get(block, 'folder_path', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        share_id: build.template(block.share_id),
        storage_account_id: build.template(block.storage_account_id),
      }),
      display_name: resource.field(self._.blocks, 'display_name'),
      file_path: resource.field(self._.blocks, 'file_path'),
      file_system_name: resource.field(self._.blocks, 'file_system_name'),
      folder_path: resource.field(self._.blocks, 'folder_path'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      share_id: resource.field(self._.blocks, 'share_id'),
      storage_account_id: resource.field(self._.blocks, 'storage_account_id'),
    },
    data_share_dataset_kusto_cluster(name, block): {
      local resource = blockType.resource('azurerm_data_share_dataset_kusto_cluster', name),
      _: resource._(block, {
        display_name: build.template(std.get(block, 'display_name', null)),
        id: build.template(std.get(block, 'id', null)),
        kusto_cluster_id: build.template(block.kusto_cluster_id),
        kusto_cluster_location: build.template(std.get(block, 'kusto_cluster_location', null)),
        name: build.template(block.name),
        share_id: build.template(block.share_id),
      }),
      display_name: resource.field(self._.blocks, 'display_name'),
      id: resource.field(self._.blocks, 'id'),
      kusto_cluster_id: resource.field(self._.blocks, 'kusto_cluster_id'),
      kusto_cluster_location: resource.field(self._.blocks, 'kusto_cluster_location'),
      name: resource.field(self._.blocks, 'name'),
      share_id: resource.field(self._.blocks, 'share_id'),
    },
    data_share_dataset_kusto_database(name, block): {
      local resource = blockType.resource('azurerm_data_share_dataset_kusto_database', name),
      _: resource._(block, {
        display_name: build.template(std.get(block, 'display_name', null)),
        id: build.template(std.get(block, 'id', null)),
        kusto_cluster_location: build.template(std.get(block, 'kusto_cluster_location', null)),
        kusto_database_id: build.template(block.kusto_database_id),
        name: build.template(block.name),
        share_id: build.template(block.share_id),
      }),
      display_name: resource.field(self._.blocks, 'display_name'),
      id: resource.field(self._.blocks, 'id'),
      kusto_cluster_location: resource.field(self._.blocks, 'kusto_cluster_location'),
      kusto_database_id: resource.field(self._.blocks, 'kusto_database_id'),
      name: resource.field(self._.blocks, 'name'),
      share_id: resource.field(self._.blocks, 'share_id'),
    },
    database_migration_project(name, block): {
      local resource = blockType.resource('azurerm_database_migration_project', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        service_name: build.template(block.service_name),
        source_platform: build.template(block.source_platform),
        tags: build.template(std.get(block, 'tags', null)),
        target_platform: build.template(block.target_platform),
      }),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      service_name: resource.field(self._.blocks, 'service_name'),
      source_platform: resource.field(self._.blocks, 'source_platform'),
      tags: resource.field(self._.blocks, 'tags'),
      target_platform: resource.field(self._.blocks, 'target_platform'),
    },
    database_migration_service(name, block): {
      local resource = blockType.resource('azurerm_database_migration_service', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        sku_name: build.template(block.sku_name),
        subnet_id: build.template(block.subnet_id),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      sku_name: resource.field(self._.blocks, 'sku_name'),
      subnet_id: resource.field(self._.blocks, 'subnet_id'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    databox_edge_device(name, block): {
      local resource = blockType.resource('azurerm_databox_edge_device', name),
      _: resource._(block, {
        device_properties: build.template(std.get(block, 'device_properties', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        sku_name: build.template(block.sku_name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      device_properties: resource.field(self._.blocks, 'device_properties'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      sku_name: resource.field(self._.blocks, 'sku_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    databricks_access_connector(name, block): {
      local resource = blockType.resource('azurerm_databricks_access_connector', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    databricks_virtual_network_peering(name, block): {
      local resource = blockType.resource('azurerm_databricks_virtual_network_peering', name),
      _: resource._(block, {
        address_space_prefixes: build.template(std.get(block, 'address_space_prefixes', null)),
        allow_forwarded_traffic: build.template(std.get(block, 'allow_forwarded_traffic', null)),
        allow_gateway_transit: build.template(std.get(block, 'allow_gateway_transit', null)),
        allow_virtual_network_access: build.template(std.get(block, 'allow_virtual_network_access', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        remote_address_space_prefixes: build.template(block.remote_address_space_prefixes),
        remote_virtual_network_id: build.template(block.remote_virtual_network_id),
        resource_group_name: build.template(block.resource_group_name),
        use_remote_gateways: build.template(std.get(block, 'use_remote_gateways', null)),
        virtual_network_id: build.template(std.get(block, 'virtual_network_id', null)),
        workspace_id: build.template(block.workspace_id),
      }),
      address_space_prefixes: resource.field(self._.blocks, 'address_space_prefixes'),
      allow_forwarded_traffic: resource.field(self._.blocks, 'allow_forwarded_traffic'),
      allow_gateway_transit: resource.field(self._.blocks, 'allow_gateway_transit'),
      allow_virtual_network_access: resource.field(self._.blocks, 'allow_virtual_network_access'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      remote_address_space_prefixes: resource.field(self._.blocks, 'remote_address_space_prefixes'),
      remote_virtual_network_id: resource.field(self._.blocks, 'remote_virtual_network_id'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      use_remote_gateways: resource.field(self._.blocks, 'use_remote_gateways'),
      virtual_network_id: resource.field(self._.blocks, 'virtual_network_id'),
      workspace_id: resource.field(self._.blocks, 'workspace_id'),
    },
    databricks_workspace(name, block): {
      local resource = blockType.resource('azurerm_databricks_workspace', name),
      _: resource._(block, {
        access_connector_id: build.template(std.get(block, 'access_connector_id', null)),
        customer_managed_key_enabled: build.template(std.get(block, 'customer_managed_key_enabled', null)),
        default_storage_firewall_enabled: build.template(std.get(block, 'default_storage_firewall_enabled', null)),
        disk_encryption_set_id: build.template(std.get(block, 'disk_encryption_set_id', null)),
        id: build.template(std.get(block, 'id', null)),
        infrastructure_encryption_enabled: build.template(std.get(block, 'infrastructure_encryption_enabled', null)),
        load_balancer_backend_address_pool_id: build.template(std.get(block, 'load_balancer_backend_address_pool_id', null)),
        location: build.template(block.location),
        managed_disk_cmk_key_vault_id: build.template(std.get(block, 'managed_disk_cmk_key_vault_id', null)),
        managed_disk_cmk_key_vault_key_id: build.template(std.get(block, 'managed_disk_cmk_key_vault_key_id', null)),
        managed_disk_cmk_rotation_to_latest_version_enabled: build.template(std.get(block, 'managed_disk_cmk_rotation_to_latest_version_enabled', null)),
        managed_disk_identity: build.template(std.get(block, 'managed_disk_identity', null)),
        managed_resource_group_id: build.template(std.get(block, 'managed_resource_group_id', null)),
        managed_resource_group_name: build.template(std.get(block, 'managed_resource_group_name', null)),
        managed_services_cmk_key_vault_id: build.template(std.get(block, 'managed_services_cmk_key_vault_id', null)),
        managed_services_cmk_key_vault_key_id: build.template(std.get(block, 'managed_services_cmk_key_vault_key_id', null)),
        name: build.template(block.name),
        network_security_group_rules_required: build.template(std.get(block, 'network_security_group_rules_required', null)),
        public_network_access_enabled: build.template(std.get(block, 'public_network_access_enabled', null)),
        resource_group_name: build.template(block.resource_group_name),
        sku: build.template(block.sku),
        storage_account_identity: build.template(std.get(block, 'storage_account_identity', null)),
        tags: build.template(std.get(block, 'tags', null)),
        workspace_id: build.template(std.get(block, 'workspace_id', null)),
        workspace_url: build.template(std.get(block, 'workspace_url', null)),
      }),
      access_connector_id: resource.field(self._.blocks, 'access_connector_id'),
      customer_managed_key_enabled: resource.field(self._.blocks, 'customer_managed_key_enabled'),
      default_storage_firewall_enabled: resource.field(self._.blocks, 'default_storage_firewall_enabled'),
      disk_encryption_set_id: resource.field(self._.blocks, 'disk_encryption_set_id'),
      id: resource.field(self._.blocks, 'id'),
      infrastructure_encryption_enabled: resource.field(self._.blocks, 'infrastructure_encryption_enabled'),
      load_balancer_backend_address_pool_id: resource.field(self._.blocks, 'load_balancer_backend_address_pool_id'),
      location: resource.field(self._.blocks, 'location'),
      managed_disk_cmk_key_vault_id: resource.field(self._.blocks, 'managed_disk_cmk_key_vault_id'),
      managed_disk_cmk_key_vault_key_id: resource.field(self._.blocks, 'managed_disk_cmk_key_vault_key_id'),
      managed_disk_cmk_rotation_to_latest_version_enabled: resource.field(self._.blocks, 'managed_disk_cmk_rotation_to_latest_version_enabled'),
      managed_disk_identity: resource.field(self._.blocks, 'managed_disk_identity'),
      managed_resource_group_id: resource.field(self._.blocks, 'managed_resource_group_id'),
      managed_resource_group_name: resource.field(self._.blocks, 'managed_resource_group_name'),
      managed_services_cmk_key_vault_id: resource.field(self._.blocks, 'managed_services_cmk_key_vault_id'),
      managed_services_cmk_key_vault_key_id: resource.field(self._.blocks, 'managed_services_cmk_key_vault_key_id'),
      name: resource.field(self._.blocks, 'name'),
      network_security_group_rules_required: resource.field(self._.blocks, 'network_security_group_rules_required'),
      public_network_access_enabled: resource.field(self._.blocks, 'public_network_access_enabled'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      sku: resource.field(self._.blocks, 'sku'),
      storage_account_identity: resource.field(self._.blocks, 'storage_account_identity'),
      tags: resource.field(self._.blocks, 'tags'),
      workspace_id: resource.field(self._.blocks, 'workspace_id'),
      workspace_url: resource.field(self._.blocks, 'workspace_url'),
    },
    databricks_workspace_customer_managed_key(name, block): {
      local resource = blockType.resource('azurerm_databricks_workspace_customer_managed_key', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        key_vault_key_id: build.template(block.key_vault_key_id),
        workspace_id: build.template(block.workspace_id),
      }),
      id: resource.field(self._.blocks, 'id'),
      key_vault_key_id: resource.field(self._.blocks, 'key_vault_key_id'),
      workspace_id: resource.field(self._.blocks, 'workspace_id'),
    },
    databricks_workspace_root_dbfs_customer_managed_key(name, block): {
      local resource = blockType.resource('azurerm_databricks_workspace_root_dbfs_customer_managed_key', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        key_vault_id: build.template(std.get(block, 'key_vault_id', null)),
        key_vault_key_id: build.template(block.key_vault_key_id),
        workspace_id: build.template(block.workspace_id),
      }),
      id: resource.field(self._.blocks, 'id'),
      key_vault_id: resource.field(self._.blocks, 'key_vault_id'),
      key_vault_key_id: resource.field(self._.blocks, 'key_vault_key_id'),
      workspace_id: resource.field(self._.blocks, 'workspace_id'),
    },
    datadog_monitor(name, block): {
      local resource = blockType.resource('azurerm_datadog_monitor', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        marketplace_subscription_status: build.template(std.get(block, 'marketplace_subscription_status', null)),
        monitoring_enabled: build.template(std.get(block, 'monitoring_enabled', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        sku_name: build.template(block.sku_name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      marketplace_subscription_status: resource.field(self._.blocks, 'marketplace_subscription_status'),
      monitoring_enabled: resource.field(self._.blocks, 'monitoring_enabled'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      sku_name: resource.field(self._.blocks, 'sku_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    datadog_monitor_sso_configuration(name, block): {
      local resource = blockType.resource('azurerm_datadog_monitor_sso_configuration', name),
      _: resource._(block, {
        datadog_monitor_id: build.template(block.datadog_monitor_id),
        enterprise_application_id: build.template(block.enterprise_application_id),
        id: build.template(std.get(block, 'id', null)),
        login_url: build.template(std.get(block, 'login_url', null)),
        name: build.template(std.get(block, 'name', null)),
        single_sign_on: build.template(std.get(block, 'single_sign_on', null)),
        single_sign_on_enabled: build.template(std.get(block, 'single_sign_on_enabled', null)),
      }),
      datadog_monitor_id: resource.field(self._.blocks, 'datadog_monitor_id'),
      enterprise_application_id: resource.field(self._.blocks, 'enterprise_application_id'),
      id: resource.field(self._.blocks, 'id'),
      login_url: resource.field(self._.blocks, 'login_url'),
      name: resource.field(self._.blocks, 'name'),
      single_sign_on: resource.field(self._.blocks, 'single_sign_on'),
      single_sign_on_enabled: resource.field(self._.blocks, 'single_sign_on_enabled'),
    },
    datadog_monitor_tag_rule(name, block): {
      local resource = blockType.resource('azurerm_datadog_monitor_tag_rule', name),
      _: resource._(block, {
        datadog_monitor_id: build.template(block.datadog_monitor_id),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
      }),
      datadog_monitor_id: resource.field(self._.blocks, 'datadog_monitor_id'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
    },
    dedicated_hardware_security_module(name, block): {
      local resource = blockType.resource('azurerm_dedicated_hardware_security_module', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        sku_name: build.template(block.sku_name),
        stamp_id: build.template(std.get(block, 'stamp_id', null)),
        tags: build.template(std.get(block, 'tags', null)),
        zones: build.template(std.get(block, 'zones', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      sku_name: resource.field(self._.blocks, 'sku_name'),
      stamp_id: resource.field(self._.blocks, 'stamp_id'),
      tags: resource.field(self._.blocks, 'tags'),
      zones: resource.field(self._.blocks, 'zones'),
    },
    dedicated_host(name, block): {
      local resource = blockType.resource('azurerm_dedicated_host', name),
      _: resource._(block, {
        auto_replace_on_failure: build.template(std.get(block, 'auto_replace_on_failure', null)),
        dedicated_host_group_id: build.template(block.dedicated_host_group_id),
        id: build.template(std.get(block, 'id', null)),
        license_type: build.template(std.get(block, 'license_type', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        platform_fault_domain: build.template(block.platform_fault_domain),
        sku_name: build.template(block.sku_name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      auto_replace_on_failure: resource.field(self._.blocks, 'auto_replace_on_failure'),
      dedicated_host_group_id: resource.field(self._.blocks, 'dedicated_host_group_id'),
      id: resource.field(self._.blocks, 'id'),
      license_type: resource.field(self._.blocks, 'license_type'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      platform_fault_domain: resource.field(self._.blocks, 'platform_fault_domain'),
      sku_name: resource.field(self._.blocks, 'sku_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    dedicated_host_group(name, block): {
      local resource = blockType.resource('azurerm_dedicated_host_group', name),
      _: resource._(block, {
        automatic_placement_enabled: build.template(std.get(block, 'automatic_placement_enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        platform_fault_domain_count: build.template(block.platform_fault_domain_count),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
        zone: build.template(std.get(block, 'zone', null)),
      }),
      automatic_placement_enabled: resource.field(self._.blocks, 'automatic_placement_enabled'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      platform_fault_domain_count: resource.field(self._.blocks, 'platform_fault_domain_count'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
      zone: resource.field(self._.blocks, 'zone'),
    },
    dev_center(name, block): {
      local resource = blockType.resource('azurerm_dev_center', name),
      _: resource._(block, {
        dev_center_uri: build.template(std.get(block, 'dev_center_uri', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      dev_center_uri: resource.field(self._.blocks, 'dev_center_uri'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    dev_center_attached_network(name, block): {
      local resource = blockType.resource('azurerm_dev_center_attached_network', name),
      _: resource._(block, {
        dev_center_id: build.template(block.dev_center_id),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        network_connection_id: build.template(block.network_connection_id),
      }),
      dev_center_id: resource.field(self._.blocks, 'dev_center_id'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      network_connection_id: resource.field(self._.blocks, 'network_connection_id'),
    },
    dev_center_catalog(name, block): {
      local resource = blockType.resource('azurerm_dev_center_catalog', name),
      _: resource._(block, {
        dev_center_id: build.template(block.dev_center_id),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
      }),
      dev_center_id: resource.field(self._.blocks, 'dev_center_id'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
    },
    dev_center_dev_box_definition(name, block): {
      local resource = blockType.resource('azurerm_dev_center_dev_box_definition', name),
      _: resource._(block, {
        dev_center_id: build.template(block.dev_center_id),
        id: build.template(std.get(block, 'id', null)),
        image_reference_id: build.template(block.image_reference_id),
        location: build.template(block.location),
        name: build.template(block.name),
        sku_name: build.template(block.sku_name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      dev_center_id: resource.field(self._.blocks, 'dev_center_id'),
      id: resource.field(self._.blocks, 'id'),
      image_reference_id: resource.field(self._.blocks, 'image_reference_id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      sku_name: resource.field(self._.blocks, 'sku_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    dev_center_environment_type(name, block): {
      local resource = blockType.resource('azurerm_dev_center_environment_type', name),
      _: resource._(block, {
        dev_center_id: build.template(block.dev_center_id),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      dev_center_id: resource.field(self._.blocks, 'dev_center_id'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    dev_center_gallery(name, block): {
      local resource = blockType.resource('azurerm_dev_center_gallery', name),
      _: resource._(block, {
        dev_center_id: build.template(block.dev_center_id),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        shared_gallery_id: build.template(block.shared_gallery_id),
      }),
      dev_center_id: resource.field(self._.blocks, 'dev_center_id'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      shared_gallery_id: resource.field(self._.blocks, 'shared_gallery_id'),
    },
    dev_center_network_connection(name, block): {
      local resource = blockType.resource('azurerm_dev_center_network_connection', name),
      _: resource._(block, {
        domain_join_type: build.template(block.domain_join_type),
        domain_name: build.template(std.get(block, 'domain_name', null)),
        domain_password: build.template(std.get(block, 'domain_password', null)),
        domain_username: build.template(std.get(block, 'domain_username', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        organization_unit: build.template(std.get(block, 'organization_unit', null)),
        resource_group_name: build.template(block.resource_group_name),
        subnet_id: build.template(block.subnet_id),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      domain_join_type: resource.field(self._.blocks, 'domain_join_type'),
      domain_name: resource.field(self._.blocks, 'domain_name'),
      domain_password: resource.field(self._.blocks, 'domain_password'),
      domain_username: resource.field(self._.blocks, 'domain_username'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      organization_unit: resource.field(self._.blocks, 'organization_unit'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      subnet_id: resource.field(self._.blocks, 'subnet_id'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    dev_center_project(name, block): {
      local resource = blockType.resource('azurerm_dev_center_project', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        dev_center_id: build.template(block.dev_center_id),
        dev_center_uri: build.template(std.get(block, 'dev_center_uri', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        maximum_dev_boxes_per_user: build.template(std.get(block, 'maximum_dev_boxes_per_user', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      description: resource.field(self._.blocks, 'description'),
      dev_center_id: resource.field(self._.blocks, 'dev_center_id'),
      dev_center_uri: resource.field(self._.blocks, 'dev_center_uri'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      maximum_dev_boxes_per_user: resource.field(self._.blocks, 'maximum_dev_boxes_per_user'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    dev_center_project_environment_type(name, block): {
      local resource = blockType.resource('azurerm_dev_center_project_environment_type', name),
      _: resource._(block, {
        creator_role_assignment_roles: build.template(std.get(block, 'creator_role_assignment_roles', null)),
        deployment_target_id: build.template(block.deployment_target_id),
        dev_center_project_id: build.template(block.dev_center_project_id),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      creator_role_assignment_roles: resource.field(self._.blocks, 'creator_role_assignment_roles'),
      deployment_target_id: resource.field(self._.blocks, 'deployment_target_id'),
      dev_center_project_id: resource.field(self._.blocks, 'dev_center_project_id'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    dev_center_project_pool(name, block): {
      local resource = blockType.resource('azurerm_dev_center_project_pool', name),
      _: resource._(block, {
        dev_box_definition_name: build.template(block.dev_box_definition_name),
        dev_center_attached_network_name: build.template(block.dev_center_attached_network_name),
        dev_center_project_id: build.template(block.dev_center_project_id),
        id: build.template(std.get(block, 'id', null)),
        local_administrator_enabled: build.template(block.local_administrator_enabled),
        location: build.template(block.location),
        name: build.template(block.name),
        stop_on_disconnect_grace_period_minutes: build.template(std.get(block, 'stop_on_disconnect_grace_period_minutes', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      dev_box_definition_name: resource.field(self._.blocks, 'dev_box_definition_name'),
      dev_center_attached_network_name: resource.field(self._.blocks, 'dev_center_attached_network_name'),
      dev_center_project_id: resource.field(self._.blocks, 'dev_center_project_id'),
      id: resource.field(self._.blocks, 'id'),
      local_administrator_enabled: resource.field(self._.blocks, 'local_administrator_enabled'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      stop_on_disconnect_grace_period_minutes: resource.field(self._.blocks, 'stop_on_disconnect_grace_period_minutes'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    dev_test_global_vm_shutdown_schedule(name, block): {
      local resource = blockType.resource('azurerm_dev_test_global_vm_shutdown_schedule', name),
      _: resource._(block, {
        daily_recurrence_time: build.template(block.daily_recurrence_time),
        enabled: build.template(std.get(block, 'enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        tags: build.template(std.get(block, 'tags', null)),
        timezone: build.template(block.timezone),
        virtual_machine_id: build.template(block.virtual_machine_id),
      }),
      daily_recurrence_time: resource.field(self._.blocks, 'daily_recurrence_time'),
      enabled: resource.field(self._.blocks, 'enabled'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      tags: resource.field(self._.blocks, 'tags'),
      timezone: resource.field(self._.blocks, 'timezone'),
      virtual_machine_id: resource.field(self._.blocks, 'virtual_machine_id'),
    },
    dev_test_lab(name, block): {
      local resource = blockType.resource('azurerm_dev_test_lab', name),
      _: resource._(block, {
        artifacts_storage_account_id: build.template(std.get(block, 'artifacts_storage_account_id', null)),
        default_premium_storage_account_id: build.template(std.get(block, 'default_premium_storage_account_id', null)),
        default_storage_account_id: build.template(std.get(block, 'default_storage_account_id', null)),
        id: build.template(std.get(block, 'id', null)),
        key_vault_id: build.template(std.get(block, 'key_vault_id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        premium_data_disk_storage_account_id: build.template(std.get(block, 'premium_data_disk_storage_account_id', null)),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
        unique_identifier: build.template(std.get(block, 'unique_identifier', null)),
      }),
      artifacts_storage_account_id: resource.field(self._.blocks, 'artifacts_storage_account_id'),
      default_premium_storage_account_id: resource.field(self._.blocks, 'default_premium_storage_account_id'),
      default_storage_account_id: resource.field(self._.blocks, 'default_storage_account_id'),
      id: resource.field(self._.blocks, 'id'),
      key_vault_id: resource.field(self._.blocks, 'key_vault_id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      premium_data_disk_storage_account_id: resource.field(self._.blocks, 'premium_data_disk_storage_account_id'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
      unique_identifier: resource.field(self._.blocks, 'unique_identifier'),
    },
    dev_test_linux_virtual_machine(name, block): {
      local resource = blockType.resource('azurerm_dev_test_linux_virtual_machine', name),
      _: resource._(block, {
        allow_claim: build.template(std.get(block, 'allow_claim', null)),
        disallow_public_ip_address: build.template(std.get(block, 'disallow_public_ip_address', null)),
        fqdn: build.template(std.get(block, 'fqdn', null)),
        id: build.template(std.get(block, 'id', null)),
        lab_name: build.template(block.lab_name),
        lab_subnet_name: build.template(block.lab_subnet_name),
        lab_virtual_network_id: build.template(block.lab_virtual_network_id),
        location: build.template(block.location),
        name: build.template(block.name),
        notes: build.template(std.get(block, 'notes', null)),
        password: build.template(std.get(block, 'password', null)),
        resource_group_name: build.template(block.resource_group_name),
        size: build.template(block.size),
        ssh_key: build.template(std.get(block, 'ssh_key', null)),
        storage_type: build.template(block.storage_type),
        tags: build.template(std.get(block, 'tags', null)),
        unique_identifier: build.template(std.get(block, 'unique_identifier', null)),
        username: build.template(block.username),
      }),
      allow_claim: resource.field(self._.blocks, 'allow_claim'),
      disallow_public_ip_address: resource.field(self._.blocks, 'disallow_public_ip_address'),
      fqdn: resource.field(self._.blocks, 'fqdn'),
      id: resource.field(self._.blocks, 'id'),
      lab_name: resource.field(self._.blocks, 'lab_name'),
      lab_subnet_name: resource.field(self._.blocks, 'lab_subnet_name'),
      lab_virtual_network_id: resource.field(self._.blocks, 'lab_virtual_network_id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      notes: resource.field(self._.blocks, 'notes'),
      password: resource.field(self._.blocks, 'password'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      size: resource.field(self._.blocks, 'size'),
      ssh_key: resource.field(self._.blocks, 'ssh_key'),
      storage_type: resource.field(self._.blocks, 'storage_type'),
      tags: resource.field(self._.blocks, 'tags'),
      unique_identifier: resource.field(self._.blocks, 'unique_identifier'),
      username: resource.field(self._.blocks, 'username'),
    },
    dev_test_policy(name, block): {
      local resource = blockType.resource('azurerm_dev_test_policy', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        evaluator_type: build.template(block.evaluator_type),
        fact_data: build.template(std.get(block, 'fact_data', null)),
        id: build.template(std.get(block, 'id', null)),
        lab_name: build.template(block.lab_name),
        name: build.template(block.name),
        policy_set_name: build.template(block.policy_set_name),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
        threshold: build.template(block.threshold),
      }),
      description: resource.field(self._.blocks, 'description'),
      evaluator_type: resource.field(self._.blocks, 'evaluator_type'),
      fact_data: resource.field(self._.blocks, 'fact_data'),
      id: resource.field(self._.blocks, 'id'),
      lab_name: resource.field(self._.blocks, 'lab_name'),
      name: resource.field(self._.blocks, 'name'),
      policy_set_name: resource.field(self._.blocks, 'policy_set_name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
      threshold: resource.field(self._.blocks, 'threshold'),
    },
    dev_test_schedule(name, block): {
      local resource = blockType.resource('azurerm_dev_test_schedule', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        lab_name: build.template(block.lab_name),
        location: build.template(block.location),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        status: build.template(std.get(block, 'status', null)),
        tags: build.template(std.get(block, 'tags', null)),
        task_type: build.template(block.task_type),
        time_zone_id: build.template(block.time_zone_id),
      }),
      id: resource.field(self._.blocks, 'id'),
      lab_name: resource.field(self._.blocks, 'lab_name'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      status: resource.field(self._.blocks, 'status'),
      tags: resource.field(self._.blocks, 'tags'),
      task_type: resource.field(self._.blocks, 'task_type'),
      time_zone_id: resource.field(self._.blocks, 'time_zone_id'),
    },
    dev_test_virtual_network(name, block): {
      local resource = blockType.resource('azurerm_dev_test_virtual_network', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        lab_name: build.template(block.lab_name),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
        unique_identifier: build.template(std.get(block, 'unique_identifier', null)),
      }),
      description: resource.field(self._.blocks, 'description'),
      id: resource.field(self._.blocks, 'id'),
      lab_name: resource.field(self._.blocks, 'lab_name'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
      unique_identifier: resource.field(self._.blocks, 'unique_identifier'),
    },
    dev_test_windows_virtual_machine(name, block): {
      local resource = blockType.resource('azurerm_dev_test_windows_virtual_machine', name),
      _: resource._(block, {
        allow_claim: build.template(std.get(block, 'allow_claim', null)),
        disallow_public_ip_address: build.template(std.get(block, 'disallow_public_ip_address', null)),
        fqdn: build.template(std.get(block, 'fqdn', null)),
        id: build.template(std.get(block, 'id', null)),
        lab_name: build.template(block.lab_name),
        lab_subnet_name: build.template(block.lab_subnet_name),
        lab_virtual_network_id: build.template(block.lab_virtual_network_id),
        location: build.template(block.location),
        name: build.template(block.name),
        notes: build.template(std.get(block, 'notes', null)),
        password: build.template(block.password),
        resource_group_name: build.template(block.resource_group_name),
        size: build.template(block.size),
        storage_type: build.template(block.storage_type),
        tags: build.template(std.get(block, 'tags', null)),
        unique_identifier: build.template(std.get(block, 'unique_identifier', null)),
        username: build.template(block.username),
      }),
      allow_claim: resource.field(self._.blocks, 'allow_claim'),
      disallow_public_ip_address: resource.field(self._.blocks, 'disallow_public_ip_address'),
      fqdn: resource.field(self._.blocks, 'fqdn'),
      id: resource.field(self._.blocks, 'id'),
      lab_name: resource.field(self._.blocks, 'lab_name'),
      lab_subnet_name: resource.field(self._.blocks, 'lab_subnet_name'),
      lab_virtual_network_id: resource.field(self._.blocks, 'lab_virtual_network_id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      notes: resource.field(self._.blocks, 'notes'),
      password: resource.field(self._.blocks, 'password'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      size: resource.field(self._.blocks, 'size'),
      storage_type: resource.field(self._.blocks, 'storage_type'),
      tags: resource.field(self._.blocks, 'tags'),
      unique_identifier: resource.field(self._.blocks, 'unique_identifier'),
      username: resource.field(self._.blocks, 'username'),
    },
    digital_twins_endpoint_eventgrid(name, block): {
      local resource = blockType.resource('azurerm_digital_twins_endpoint_eventgrid', name),
      _: resource._(block, {
        dead_letter_storage_secret: build.template(std.get(block, 'dead_letter_storage_secret', null)),
        digital_twins_id: build.template(block.digital_twins_id),
        eventgrid_topic_endpoint: build.template(block.eventgrid_topic_endpoint),
        eventgrid_topic_primary_access_key: build.template(block.eventgrid_topic_primary_access_key),
        eventgrid_topic_secondary_access_key: build.template(block.eventgrid_topic_secondary_access_key),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
      }),
      dead_letter_storage_secret: resource.field(self._.blocks, 'dead_letter_storage_secret'),
      digital_twins_id: resource.field(self._.blocks, 'digital_twins_id'),
      eventgrid_topic_endpoint: resource.field(self._.blocks, 'eventgrid_topic_endpoint'),
      eventgrid_topic_primary_access_key: resource.field(self._.blocks, 'eventgrid_topic_primary_access_key'),
      eventgrid_topic_secondary_access_key: resource.field(self._.blocks, 'eventgrid_topic_secondary_access_key'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
    },
    digital_twins_endpoint_eventhub(name, block): {
      local resource = blockType.resource('azurerm_digital_twins_endpoint_eventhub', name),
      _: resource._(block, {
        dead_letter_storage_secret: build.template(std.get(block, 'dead_letter_storage_secret', null)),
        digital_twins_id: build.template(block.digital_twins_id),
        eventhub_primary_connection_string: build.template(block.eventhub_primary_connection_string),
        eventhub_secondary_connection_string: build.template(block.eventhub_secondary_connection_string),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
      }),
      dead_letter_storage_secret: resource.field(self._.blocks, 'dead_letter_storage_secret'),
      digital_twins_id: resource.field(self._.blocks, 'digital_twins_id'),
      eventhub_primary_connection_string: resource.field(self._.blocks, 'eventhub_primary_connection_string'),
      eventhub_secondary_connection_string: resource.field(self._.blocks, 'eventhub_secondary_connection_string'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
    },
    digital_twins_endpoint_servicebus(name, block): {
      local resource = blockType.resource('azurerm_digital_twins_endpoint_servicebus', name),
      _: resource._(block, {
        dead_letter_storage_secret: build.template(std.get(block, 'dead_letter_storage_secret', null)),
        digital_twins_id: build.template(block.digital_twins_id),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        servicebus_primary_connection_string: build.template(block.servicebus_primary_connection_string),
        servicebus_secondary_connection_string: build.template(block.servicebus_secondary_connection_string),
      }),
      dead_letter_storage_secret: resource.field(self._.blocks, 'dead_letter_storage_secret'),
      digital_twins_id: resource.field(self._.blocks, 'digital_twins_id'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      servicebus_primary_connection_string: resource.field(self._.blocks, 'servicebus_primary_connection_string'),
      servicebus_secondary_connection_string: resource.field(self._.blocks, 'servicebus_secondary_connection_string'),
    },
    digital_twins_instance(name, block): {
      local resource = blockType.resource('azurerm_digital_twins_instance', name),
      _: resource._(block, {
        host_name: build.template(std.get(block, 'host_name', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      host_name: resource.field(self._.blocks, 'host_name'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    digital_twins_time_series_database_connection(name, block): {
      local resource = blockType.resource('azurerm_digital_twins_time_series_database_connection', name),
      _: resource._(block, {
        digital_twins_id: build.template(block.digital_twins_id),
        eventhub_consumer_group_name: build.template(std.get(block, 'eventhub_consumer_group_name', null)),
        eventhub_name: build.template(block.eventhub_name),
        eventhub_namespace_endpoint_uri: build.template(block.eventhub_namespace_endpoint_uri),
        eventhub_namespace_id: build.template(block.eventhub_namespace_id),
        id: build.template(std.get(block, 'id', null)),
        kusto_cluster_id: build.template(block.kusto_cluster_id),
        kusto_cluster_uri: build.template(block.kusto_cluster_uri),
        kusto_database_name: build.template(block.kusto_database_name),
        kusto_table_name: build.template(std.get(block, 'kusto_table_name', null)),
        name: build.template(block.name),
      }),
      digital_twins_id: resource.field(self._.blocks, 'digital_twins_id'),
      eventhub_consumer_group_name: resource.field(self._.blocks, 'eventhub_consumer_group_name'),
      eventhub_name: resource.field(self._.blocks, 'eventhub_name'),
      eventhub_namespace_endpoint_uri: resource.field(self._.blocks, 'eventhub_namespace_endpoint_uri'),
      eventhub_namespace_id: resource.field(self._.blocks, 'eventhub_namespace_id'),
      id: resource.field(self._.blocks, 'id'),
      kusto_cluster_id: resource.field(self._.blocks, 'kusto_cluster_id'),
      kusto_cluster_uri: resource.field(self._.blocks, 'kusto_cluster_uri'),
      kusto_database_name: resource.field(self._.blocks, 'kusto_database_name'),
      kusto_table_name: resource.field(self._.blocks, 'kusto_table_name'),
      name: resource.field(self._.blocks, 'name'),
    },
    disk_access(name, block): {
      local resource = blockType.resource('azurerm_disk_access', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    disk_encryption_set(name, block): {
      local resource = blockType.resource('azurerm_disk_encryption_set', name),
      _: resource._(block, {
        auto_key_rotation_enabled: build.template(std.get(block, 'auto_key_rotation_enabled', null)),
        encryption_type: build.template(std.get(block, 'encryption_type', null)),
        federated_client_id: build.template(std.get(block, 'federated_client_id', null)),
        id: build.template(std.get(block, 'id', null)),
        key_vault_key_id: build.template(std.get(block, 'key_vault_key_id', null)),
        key_vault_key_url: build.template(std.get(block, 'key_vault_key_url', null)),
        location: build.template(block.location),
        managed_hsm_key_id: build.template(std.get(block, 'managed_hsm_key_id', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      auto_key_rotation_enabled: resource.field(self._.blocks, 'auto_key_rotation_enabled'),
      encryption_type: resource.field(self._.blocks, 'encryption_type'),
      federated_client_id: resource.field(self._.blocks, 'federated_client_id'),
      id: resource.field(self._.blocks, 'id'),
      key_vault_key_id: resource.field(self._.blocks, 'key_vault_key_id'),
      key_vault_key_url: resource.field(self._.blocks, 'key_vault_key_url'),
      location: resource.field(self._.blocks, 'location'),
      managed_hsm_key_id: resource.field(self._.blocks, 'managed_hsm_key_id'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    dns_a_record(name, block): {
      local resource = blockType.resource('azurerm_dns_a_record', name),
      _: resource._(block, {
        fqdn: build.template(std.get(block, 'fqdn', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        records: build.template(std.get(block, 'records', null)),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
        target_resource_id: build.template(std.get(block, 'target_resource_id', null)),
        ttl: build.template(block.ttl),
        zone_name: build.template(block.zone_name),
      }),
      fqdn: resource.field(self._.blocks, 'fqdn'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      records: resource.field(self._.blocks, 'records'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
      target_resource_id: resource.field(self._.blocks, 'target_resource_id'),
      ttl: resource.field(self._.blocks, 'ttl'),
      zone_name: resource.field(self._.blocks, 'zone_name'),
    },
    dns_aaaa_record(name, block): {
      local resource = blockType.resource('azurerm_dns_aaaa_record', name),
      _: resource._(block, {
        fqdn: build.template(std.get(block, 'fqdn', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        records: build.template(std.get(block, 'records', null)),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
        target_resource_id: build.template(std.get(block, 'target_resource_id', null)),
        ttl: build.template(block.ttl),
        zone_name: build.template(block.zone_name),
      }),
      fqdn: resource.field(self._.blocks, 'fqdn'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      records: resource.field(self._.blocks, 'records'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
      target_resource_id: resource.field(self._.blocks, 'target_resource_id'),
      ttl: resource.field(self._.blocks, 'ttl'),
      zone_name: resource.field(self._.blocks, 'zone_name'),
    },
    dns_caa_record(name, block): {
      local resource = blockType.resource('azurerm_dns_caa_record', name),
      _: resource._(block, {
        fqdn: build.template(std.get(block, 'fqdn', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
        ttl: build.template(block.ttl),
        zone_name: build.template(block.zone_name),
      }),
      fqdn: resource.field(self._.blocks, 'fqdn'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
      ttl: resource.field(self._.blocks, 'ttl'),
      zone_name: resource.field(self._.blocks, 'zone_name'),
    },
    dns_cname_record(name, block): {
      local resource = blockType.resource('azurerm_dns_cname_record', name),
      _: resource._(block, {
        fqdn: build.template(std.get(block, 'fqdn', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        record: build.template(std.get(block, 'record', null)),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
        target_resource_id: build.template(std.get(block, 'target_resource_id', null)),
        ttl: build.template(block.ttl),
        zone_name: build.template(block.zone_name),
      }),
      fqdn: resource.field(self._.blocks, 'fqdn'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      record: resource.field(self._.blocks, 'record'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
      target_resource_id: resource.field(self._.blocks, 'target_resource_id'),
      ttl: resource.field(self._.blocks, 'ttl'),
      zone_name: resource.field(self._.blocks, 'zone_name'),
    },
    dns_mx_record(name, block): {
      local resource = blockType.resource('azurerm_dns_mx_record', name),
      _: resource._(block, {
        fqdn: build.template(std.get(block, 'fqdn', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
        ttl: build.template(block.ttl),
        zone_name: build.template(block.zone_name),
      }),
      fqdn: resource.field(self._.blocks, 'fqdn'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
      ttl: resource.field(self._.blocks, 'ttl'),
      zone_name: resource.field(self._.blocks, 'zone_name'),
    },
    dns_ns_record(name, block): {
      local resource = blockType.resource('azurerm_dns_ns_record', name),
      _: resource._(block, {
        fqdn: build.template(std.get(block, 'fqdn', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        records: build.template(block.records),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
        ttl: build.template(block.ttl),
        zone_name: build.template(block.zone_name),
      }),
      fqdn: resource.field(self._.blocks, 'fqdn'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      records: resource.field(self._.blocks, 'records'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
      ttl: resource.field(self._.blocks, 'ttl'),
      zone_name: resource.field(self._.blocks, 'zone_name'),
    },
    dns_ptr_record(name, block): {
      local resource = blockType.resource('azurerm_dns_ptr_record', name),
      _: resource._(block, {
        fqdn: build.template(std.get(block, 'fqdn', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        records: build.template(block.records),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
        ttl: build.template(block.ttl),
        zone_name: build.template(block.zone_name),
      }),
      fqdn: resource.field(self._.blocks, 'fqdn'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      records: resource.field(self._.blocks, 'records'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
      ttl: resource.field(self._.blocks, 'ttl'),
      zone_name: resource.field(self._.blocks, 'zone_name'),
    },
    dns_srv_record(name, block): {
      local resource = blockType.resource('azurerm_dns_srv_record', name),
      _: resource._(block, {
        fqdn: build.template(std.get(block, 'fqdn', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
        ttl: build.template(block.ttl),
        zone_name: build.template(block.zone_name),
      }),
      fqdn: resource.field(self._.blocks, 'fqdn'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
      ttl: resource.field(self._.blocks, 'ttl'),
      zone_name: resource.field(self._.blocks, 'zone_name'),
    },
    dns_txt_record(name, block): {
      local resource = blockType.resource('azurerm_dns_txt_record', name),
      _: resource._(block, {
        fqdn: build.template(std.get(block, 'fqdn', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
        ttl: build.template(block.ttl),
        zone_name: build.template(block.zone_name),
      }),
      fqdn: resource.field(self._.blocks, 'fqdn'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
      ttl: resource.field(self._.blocks, 'ttl'),
      zone_name: resource.field(self._.blocks, 'zone_name'),
    },
    dns_zone(name, block): {
      local resource = blockType.resource('azurerm_dns_zone', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        max_number_of_record_sets: build.template(std.get(block, 'max_number_of_record_sets', null)),
        name: build.template(block.name),
        name_servers: build.template(std.get(block, 'name_servers', null)),
        number_of_record_sets: build.template(std.get(block, 'number_of_record_sets', null)),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      max_number_of_record_sets: resource.field(self._.blocks, 'max_number_of_record_sets'),
      name: resource.field(self._.blocks, 'name'),
      name_servers: resource.field(self._.blocks, 'name_servers'),
      number_of_record_sets: resource.field(self._.blocks, 'number_of_record_sets'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    dynatrace_monitor(name, block): {
      local resource = blockType.resource('azurerm_dynatrace_monitor', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        marketplace_subscription: build.template(block.marketplace_subscription),
        monitoring_enabled: build.template(std.get(block, 'monitoring_enabled', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      marketplace_subscription: resource.field(self._.blocks, 'marketplace_subscription'),
      monitoring_enabled: resource.field(self._.blocks, 'monitoring_enabled'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    dynatrace_tag_rules(name, block): {
      local resource = blockType.resource('azurerm_dynatrace_tag_rules', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        monitor_id: build.template(block.monitor_id),
        name: build.template(block.name),
      }),
      id: resource.field(self._.blocks, 'id'),
      monitor_id: resource.field(self._.blocks, 'monitor_id'),
      name: resource.field(self._.blocks, 'name'),
    },
    elastic_cloud_elasticsearch(name, block): {
      local resource = blockType.resource('azurerm_elastic_cloud_elasticsearch', name),
      _: resource._(block, {
        elastic_cloud_deployment_id: build.template(std.get(block, 'elastic_cloud_deployment_id', null)),
        elastic_cloud_email_address: build.template(block.elastic_cloud_email_address),
        elastic_cloud_sso_default_url: build.template(std.get(block, 'elastic_cloud_sso_default_url', null)),
        elastic_cloud_user_id: build.template(std.get(block, 'elastic_cloud_user_id', null)),
        elasticsearch_service_url: build.template(std.get(block, 'elasticsearch_service_url', null)),
        id: build.template(std.get(block, 'id', null)),
        kibana_service_url: build.template(std.get(block, 'kibana_service_url', null)),
        kibana_sso_uri: build.template(std.get(block, 'kibana_sso_uri', null)),
        location: build.template(block.location),
        monitoring_enabled: build.template(std.get(block, 'monitoring_enabled', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        sku_name: build.template(block.sku_name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      elastic_cloud_deployment_id: resource.field(self._.blocks, 'elastic_cloud_deployment_id'),
      elastic_cloud_email_address: resource.field(self._.blocks, 'elastic_cloud_email_address'),
      elastic_cloud_sso_default_url: resource.field(self._.blocks, 'elastic_cloud_sso_default_url'),
      elastic_cloud_user_id: resource.field(self._.blocks, 'elastic_cloud_user_id'),
      elasticsearch_service_url: resource.field(self._.blocks, 'elasticsearch_service_url'),
      id: resource.field(self._.blocks, 'id'),
      kibana_service_url: resource.field(self._.blocks, 'kibana_service_url'),
      kibana_sso_uri: resource.field(self._.blocks, 'kibana_sso_uri'),
      location: resource.field(self._.blocks, 'location'),
      monitoring_enabled: resource.field(self._.blocks, 'monitoring_enabled'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      sku_name: resource.field(self._.blocks, 'sku_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    elastic_san(name, block): {
      local resource = blockType.resource('azurerm_elastic_san', name),
      _: resource._(block, {
        base_size_in_tib: build.template(block.base_size_in_tib),
        extended_size_in_tib: build.template(std.get(block, 'extended_size_in_tib', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
        total_iops: build.template(std.get(block, 'total_iops', null)),
        total_mbps: build.template(std.get(block, 'total_mbps', null)),
        total_size_in_tib: build.template(std.get(block, 'total_size_in_tib', null)),
        total_volume_size_in_gib: build.template(std.get(block, 'total_volume_size_in_gib', null)),
        volume_group_count: build.template(std.get(block, 'volume_group_count', null)),
        zones: build.template(std.get(block, 'zones', null)),
      }),
      base_size_in_tib: resource.field(self._.blocks, 'base_size_in_tib'),
      extended_size_in_tib: resource.field(self._.blocks, 'extended_size_in_tib'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
      total_iops: resource.field(self._.blocks, 'total_iops'),
      total_mbps: resource.field(self._.blocks, 'total_mbps'),
      total_size_in_tib: resource.field(self._.blocks, 'total_size_in_tib'),
      total_volume_size_in_gib: resource.field(self._.blocks, 'total_volume_size_in_gib'),
      volume_group_count: resource.field(self._.blocks, 'volume_group_count'),
      zones: resource.field(self._.blocks, 'zones'),
    },
    elastic_san_volume(name, block): {
      local resource = blockType.resource('azurerm_elastic_san_volume', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        size_in_gib: build.template(block.size_in_gib),
        target_iqn: build.template(std.get(block, 'target_iqn', null)),
        target_portal_hostname: build.template(std.get(block, 'target_portal_hostname', null)),
        target_portal_port: build.template(std.get(block, 'target_portal_port', null)),
        volume_group_id: build.template(block.volume_group_id),
        volume_id: build.template(std.get(block, 'volume_id', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      size_in_gib: resource.field(self._.blocks, 'size_in_gib'),
      target_iqn: resource.field(self._.blocks, 'target_iqn'),
      target_portal_hostname: resource.field(self._.blocks, 'target_portal_hostname'),
      target_portal_port: resource.field(self._.blocks, 'target_portal_port'),
      volume_group_id: resource.field(self._.blocks, 'volume_group_id'),
      volume_id: resource.field(self._.blocks, 'volume_id'),
    },
    elastic_san_volume_group(name, block): {
      local resource = blockType.resource('azurerm_elastic_san_volume_group', name),
      _: resource._(block, {
        elastic_san_id: build.template(block.elastic_san_id),
        encryption_type: build.template(std.get(block, 'encryption_type', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        protocol_type: build.template(std.get(block, 'protocol_type', null)),
      }),
      elastic_san_id: resource.field(self._.blocks, 'elastic_san_id'),
      encryption_type: resource.field(self._.blocks, 'encryption_type'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      protocol_type: resource.field(self._.blocks, 'protocol_type'),
    },
    email_communication_service(name, block): {
      local resource = blockType.resource('azurerm_email_communication_service', name),
      _: resource._(block, {
        data_location: build.template(block.data_location),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      data_location: resource.field(self._.blocks, 'data_location'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    email_communication_service_domain(name, block): {
      local resource = blockType.resource('azurerm_email_communication_service_domain', name),
      _: resource._(block, {
        domain_management: build.template(block.domain_management),
        email_service_id: build.template(block.email_service_id),
        from_sender_domain: build.template(std.get(block, 'from_sender_domain', null)),
        id: build.template(std.get(block, 'id', null)),
        mail_from_sender_domain: build.template(std.get(block, 'mail_from_sender_domain', null)),
        name: build.template(block.name),
        tags: build.template(std.get(block, 'tags', null)),
        user_engagement_tracking_enabled: build.template(std.get(block, 'user_engagement_tracking_enabled', null)),
        verification_records: build.template(std.get(block, 'verification_records', null)),
      }),
      domain_management: resource.field(self._.blocks, 'domain_management'),
      email_service_id: resource.field(self._.blocks, 'email_service_id'),
      from_sender_domain: resource.field(self._.blocks, 'from_sender_domain'),
      id: resource.field(self._.blocks, 'id'),
      mail_from_sender_domain: resource.field(self._.blocks, 'mail_from_sender_domain'),
      name: resource.field(self._.blocks, 'name'),
      tags: resource.field(self._.blocks, 'tags'),
      user_engagement_tracking_enabled: resource.field(self._.blocks, 'user_engagement_tracking_enabled'),
      verification_records: resource.field(self._.blocks, 'verification_records'),
    },
    eventgrid_domain(name, block): {
      local resource = blockType.resource('azurerm_eventgrid_domain', name),
      _: resource._(block, {
        auto_create_topic_with_first_subscription: build.template(std.get(block, 'auto_create_topic_with_first_subscription', null)),
        auto_delete_topic_with_last_subscription: build.template(std.get(block, 'auto_delete_topic_with_last_subscription', null)),
        endpoint: build.template(std.get(block, 'endpoint', null)),
        id: build.template(std.get(block, 'id', null)),
        inbound_ip_rule: build.template(std.get(block, 'inbound_ip_rule', null)),
        input_schema: build.template(std.get(block, 'input_schema', null)),
        local_auth_enabled: build.template(std.get(block, 'local_auth_enabled', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        primary_access_key: build.template(std.get(block, 'primary_access_key', null)),
        public_network_access_enabled: build.template(std.get(block, 'public_network_access_enabled', null)),
        resource_group_name: build.template(block.resource_group_name),
        secondary_access_key: build.template(std.get(block, 'secondary_access_key', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      auto_create_topic_with_first_subscription: resource.field(self._.blocks, 'auto_create_topic_with_first_subscription'),
      auto_delete_topic_with_last_subscription: resource.field(self._.blocks, 'auto_delete_topic_with_last_subscription'),
      endpoint: resource.field(self._.blocks, 'endpoint'),
      id: resource.field(self._.blocks, 'id'),
      inbound_ip_rule: resource.field(self._.blocks, 'inbound_ip_rule'),
      input_schema: resource.field(self._.blocks, 'input_schema'),
      local_auth_enabled: resource.field(self._.blocks, 'local_auth_enabled'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      primary_access_key: resource.field(self._.blocks, 'primary_access_key'),
      public_network_access_enabled: resource.field(self._.blocks, 'public_network_access_enabled'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      secondary_access_key: resource.field(self._.blocks, 'secondary_access_key'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    eventgrid_domain_topic(name, block): {
      local resource = blockType.resource('azurerm_eventgrid_domain_topic', name),
      _: resource._(block, {
        domain_name: build.template(block.domain_name),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
      }),
      domain_name: resource.field(self._.blocks, 'domain_name'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
    },
    eventgrid_event_subscription(name, block): {
      local resource = blockType.resource('azurerm_eventgrid_event_subscription', name),
      _: resource._(block, {
        advanced_filtering_on_arrays_enabled: build.template(std.get(block, 'advanced_filtering_on_arrays_enabled', null)),
        event_delivery_schema: build.template(std.get(block, 'event_delivery_schema', null)),
        eventhub_endpoint_id: build.template(std.get(block, 'eventhub_endpoint_id', null)),
        expiration_time_utc: build.template(std.get(block, 'expiration_time_utc', null)),
        hybrid_connection_endpoint_id: build.template(std.get(block, 'hybrid_connection_endpoint_id', null)),
        id: build.template(std.get(block, 'id', null)),
        included_event_types: build.template(std.get(block, 'included_event_types', null)),
        labels: build.template(std.get(block, 'labels', null)),
        name: build.template(block.name),
        scope: build.template(block.scope),
        service_bus_queue_endpoint_id: build.template(std.get(block, 'service_bus_queue_endpoint_id', null)),
        service_bus_topic_endpoint_id: build.template(std.get(block, 'service_bus_topic_endpoint_id', null)),
      }),
      advanced_filtering_on_arrays_enabled: resource.field(self._.blocks, 'advanced_filtering_on_arrays_enabled'),
      event_delivery_schema: resource.field(self._.blocks, 'event_delivery_schema'),
      eventhub_endpoint_id: resource.field(self._.blocks, 'eventhub_endpoint_id'),
      expiration_time_utc: resource.field(self._.blocks, 'expiration_time_utc'),
      hybrid_connection_endpoint_id: resource.field(self._.blocks, 'hybrid_connection_endpoint_id'),
      id: resource.field(self._.blocks, 'id'),
      included_event_types: resource.field(self._.blocks, 'included_event_types'),
      labels: resource.field(self._.blocks, 'labels'),
      name: resource.field(self._.blocks, 'name'),
      scope: resource.field(self._.blocks, 'scope'),
      service_bus_queue_endpoint_id: resource.field(self._.blocks, 'service_bus_queue_endpoint_id'),
      service_bus_topic_endpoint_id: resource.field(self._.blocks, 'service_bus_topic_endpoint_id'),
    },
    eventgrid_namespace(name, block): {
      local resource = blockType.resource('azurerm_eventgrid_namespace', name),
      _: resource._(block, {
        capacity: build.template(std.get(block, 'capacity', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        public_network_access: build.template(std.get(block, 'public_network_access', null)),
        resource_group_name: build.template(block.resource_group_name),
        sku: build.template(std.get(block, 'sku', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      capacity: resource.field(self._.blocks, 'capacity'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      public_network_access: resource.field(self._.blocks, 'public_network_access'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      sku: resource.field(self._.blocks, 'sku'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    eventgrid_system_topic(name, block): {
      local resource = blockType.resource('azurerm_eventgrid_system_topic', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        metric_arm_resource_id: build.template(std.get(block, 'metric_arm_resource_id', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        source_arm_resource_id: build.template(block.source_arm_resource_id),
        tags: build.template(std.get(block, 'tags', null)),
        topic_type: build.template(block.topic_type),
      }),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      metric_arm_resource_id: resource.field(self._.blocks, 'metric_arm_resource_id'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      source_arm_resource_id: resource.field(self._.blocks, 'source_arm_resource_id'),
      tags: resource.field(self._.blocks, 'tags'),
      topic_type: resource.field(self._.blocks, 'topic_type'),
    },
    eventgrid_system_topic_event_subscription(name, block): {
      local resource = blockType.resource('azurerm_eventgrid_system_topic_event_subscription', name),
      _: resource._(block, {
        advanced_filtering_on_arrays_enabled: build.template(std.get(block, 'advanced_filtering_on_arrays_enabled', null)),
        event_delivery_schema: build.template(std.get(block, 'event_delivery_schema', null)),
        eventhub_endpoint_id: build.template(std.get(block, 'eventhub_endpoint_id', null)),
        expiration_time_utc: build.template(std.get(block, 'expiration_time_utc', null)),
        hybrid_connection_endpoint_id: build.template(std.get(block, 'hybrid_connection_endpoint_id', null)),
        id: build.template(std.get(block, 'id', null)),
        included_event_types: build.template(std.get(block, 'included_event_types', null)),
        labels: build.template(std.get(block, 'labels', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        service_bus_queue_endpoint_id: build.template(std.get(block, 'service_bus_queue_endpoint_id', null)),
        service_bus_topic_endpoint_id: build.template(std.get(block, 'service_bus_topic_endpoint_id', null)),
        system_topic: build.template(block.system_topic),
      }),
      advanced_filtering_on_arrays_enabled: resource.field(self._.blocks, 'advanced_filtering_on_arrays_enabled'),
      event_delivery_schema: resource.field(self._.blocks, 'event_delivery_schema'),
      eventhub_endpoint_id: resource.field(self._.blocks, 'eventhub_endpoint_id'),
      expiration_time_utc: resource.field(self._.blocks, 'expiration_time_utc'),
      hybrid_connection_endpoint_id: resource.field(self._.blocks, 'hybrid_connection_endpoint_id'),
      id: resource.field(self._.blocks, 'id'),
      included_event_types: resource.field(self._.blocks, 'included_event_types'),
      labels: resource.field(self._.blocks, 'labels'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      service_bus_queue_endpoint_id: resource.field(self._.blocks, 'service_bus_queue_endpoint_id'),
      service_bus_topic_endpoint_id: resource.field(self._.blocks, 'service_bus_topic_endpoint_id'),
      system_topic: resource.field(self._.blocks, 'system_topic'),
    },
    eventgrid_topic(name, block): {
      local resource = blockType.resource('azurerm_eventgrid_topic', name),
      _: resource._(block, {
        endpoint: build.template(std.get(block, 'endpoint', null)),
        id: build.template(std.get(block, 'id', null)),
        inbound_ip_rule: build.template(std.get(block, 'inbound_ip_rule', null)),
        input_schema: build.template(std.get(block, 'input_schema', null)),
        local_auth_enabled: build.template(std.get(block, 'local_auth_enabled', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        primary_access_key: build.template(std.get(block, 'primary_access_key', null)),
        public_network_access_enabled: build.template(std.get(block, 'public_network_access_enabled', null)),
        resource_group_name: build.template(block.resource_group_name),
        secondary_access_key: build.template(std.get(block, 'secondary_access_key', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      endpoint: resource.field(self._.blocks, 'endpoint'),
      id: resource.field(self._.blocks, 'id'),
      inbound_ip_rule: resource.field(self._.blocks, 'inbound_ip_rule'),
      input_schema: resource.field(self._.blocks, 'input_schema'),
      local_auth_enabled: resource.field(self._.blocks, 'local_auth_enabled'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      primary_access_key: resource.field(self._.blocks, 'primary_access_key'),
      public_network_access_enabled: resource.field(self._.blocks, 'public_network_access_enabled'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      secondary_access_key: resource.field(self._.blocks, 'secondary_access_key'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    eventhub(name, block): {
      local resource = blockType.resource('azurerm_eventhub', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        message_retention: build.template(block.message_retention),
        name: build.template(block.name),
        namespace_id: build.template(std.get(block, 'namespace_id', null)),
        namespace_name: build.template(std.get(block, 'namespace_name', null)),
        partition_count: build.template(block.partition_count),
        partition_ids: build.template(std.get(block, 'partition_ids', null)),
        resource_group_name: build.template(std.get(block, 'resource_group_name', null)),
        status: build.template(std.get(block, 'status', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      message_retention: resource.field(self._.blocks, 'message_retention'),
      name: resource.field(self._.blocks, 'name'),
      namespace_id: resource.field(self._.blocks, 'namespace_id'),
      namespace_name: resource.field(self._.blocks, 'namespace_name'),
      partition_count: resource.field(self._.blocks, 'partition_count'),
      partition_ids: resource.field(self._.blocks, 'partition_ids'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      status: resource.field(self._.blocks, 'status'),
    },
    eventhub_authorization_rule(name, block): {
      local resource = blockType.resource('azurerm_eventhub_authorization_rule', name),
      _: resource._(block, {
        eventhub_name: build.template(block.eventhub_name),
        id: build.template(std.get(block, 'id', null)),
        listen: build.template(std.get(block, 'listen', null)),
        manage: build.template(std.get(block, 'manage', null)),
        name: build.template(block.name),
        namespace_name: build.template(block.namespace_name),
        primary_connection_string: build.template(std.get(block, 'primary_connection_string', null)),
        primary_connection_string_alias: build.template(std.get(block, 'primary_connection_string_alias', null)),
        primary_key: build.template(std.get(block, 'primary_key', null)),
        resource_group_name: build.template(block.resource_group_name),
        secondary_connection_string: build.template(std.get(block, 'secondary_connection_string', null)),
        secondary_connection_string_alias: build.template(std.get(block, 'secondary_connection_string_alias', null)),
        secondary_key: build.template(std.get(block, 'secondary_key', null)),
        send: build.template(std.get(block, 'send', null)),
      }),
      eventhub_name: resource.field(self._.blocks, 'eventhub_name'),
      id: resource.field(self._.blocks, 'id'),
      listen: resource.field(self._.blocks, 'listen'),
      manage: resource.field(self._.blocks, 'manage'),
      name: resource.field(self._.blocks, 'name'),
      namespace_name: resource.field(self._.blocks, 'namespace_name'),
      primary_connection_string: resource.field(self._.blocks, 'primary_connection_string'),
      primary_connection_string_alias: resource.field(self._.blocks, 'primary_connection_string_alias'),
      primary_key: resource.field(self._.blocks, 'primary_key'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      secondary_connection_string: resource.field(self._.blocks, 'secondary_connection_string'),
      secondary_connection_string_alias: resource.field(self._.blocks, 'secondary_connection_string_alias'),
      secondary_key: resource.field(self._.blocks, 'secondary_key'),
      send: resource.field(self._.blocks, 'send'),
    },
    eventhub_cluster(name, block): {
      local resource = blockType.resource('azurerm_eventhub_cluster', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        sku_name: build.template(block.sku_name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      sku_name: resource.field(self._.blocks, 'sku_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    eventhub_consumer_group(name, block): {
      local resource = blockType.resource('azurerm_eventhub_consumer_group', name),
      _: resource._(block, {
        eventhub_name: build.template(block.eventhub_name),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        namespace_name: build.template(block.namespace_name),
        resource_group_name: build.template(block.resource_group_name),
        user_metadata: build.template(std.get(block, 'user_metadata', null)),
      }),
      eventhub_name: resource.field(self._.blocks, 'eventhub_name'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      namespace_name: resource.field(self._.blocks, 'namespace_name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      user_metadata: resource.field(self._.blocks, 'user_metadata'),
    },
    eventhub_namespace(name, block): {
      local resource = blockType.resource('azurerm_eventhub_namespace', name),
      _: resource._(block, {
        auto_inflate_enabled: build.template(std.get(block, 'auto_inflate_enabled', null)),
        capacity: build.template(std.get(block, 'capacity', null)),
        dedicated_cluster_id: build.template(std.get(block, 'dedicated_cluster_id', null)),
        default_primary_connection_string: build.template(std.get(block, 'default_primary_connection_string', null)),
        default_primary_connection_string_alias: build.template(std.get(block, 'default_primary_connection_string_alias', null)),
        default_primary_key: build.template(std.get(block, 'default_primary_key', null)),
        default_secondary_connection_string: build.template(std.get(block, 'default_secondary_connection_string', null)),
        default_secondary_connection_string_alias: build.template(std.get(block, 'default_secondary_connection_string_alias', null)),
        default_secondary_key: build.template(std.get(block, 'default_secondary_key', null)),
        id: build.template(std.get(block, 'id', null)),
        local_authentication_enabled: build.template(std.get(block, 'local_authentication_enabled', null)),
        location: build.template(block.location),
        maximum_throughput_units: build.template(std.get(block, 'maximum_throughput_units', null)),
        minimum_tls_version: build.template(std.get(block, 'minimum_tls_version', null)),
        name: build.template(block.name),
        network_rulesets: build.template(std.get(block, 'network_rulesets', null)),
        public_network_access_enabled: build.template(std.get(block, 'public_network_access_enabled', null)),
        resource_group_name: build.template(block.resource_group_name),
        sku: build.template(block.sku),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      auto_inflate_enabled: resource.field(self._.blocks, 'auto_inflate_enabled'),
      capacity: resource.field(self._.blocks, 'capacity'),
      dedicated_cluster_id: resource.field(self._.blocks, 'dedicated_cluster_id'),
      default_primary_connection_string: resource.field(self._.blocks, 'default_primary_connection_string'),
      default_primary_connection_string_alias: resource.field(self._.blocks, 'default_primary_connection_string_alias'),
      default_primary_key: resource.field(self._.blocks, 'default_primary_key'),
      default_secondary_connection_string: resource.field(self._.blocks, 'default_secondary_connection_string'),
      default_secondary_connection_string_alias: resource.field(self._.blocks, 'default_secondary_connection_string_alias'),
      default_secondary_key: resource.field(self._.blocks, 'default_secondary_key'),
      id: resource.field(self._.blocks, 'id'),
      local_authentication_enabled: resource.field(self._.blocks, 'local_authentication_enabled'),
      location: resource.field(self._.blocks, 'location'),
      maximum_throughput_units: resource.field(self._.blocks, 'maximum_throughput_units'),
      minimum_tls_version: resource.field(self._.blocks, 'minimum_tls_version'),
      name: resource.field(self._.blocks, 'name'),
      network_rulesets: resource.field(self._.blocks, 'network_rulesets'),
      public_network_access_enabled: resource.field(self._.blocks, 'public_network_access_enabled'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      sku: resource.field(self._.blocks, 'sku'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    eventhub_namespace_authorization_rule(name, block): {
      local resource = blockType.resource('azurerm_eventhub_namespace_authorization_rule', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        listen: build.template(std.get(block, 'listen', null)),
        manage: build.template(std.get(block, 'manage', null)),
        name: build.template(block.name),
        namespace_name: build.template(block.namespace_name),
        primary_connection_string: build.template(std.get(block, 'primary_connection_string', null)),
        primary_connection_string_alias: build.template(std.get(block, 'primary_connection_string_alias', null)),
        primary_key: build.template(std.get(block, 'primary_key', null)),
        resource_group_name: build.template(block.resource_group_name),
        secondary_connection_string: build.template(std.get(block, 'secondary_connection_string', null)),
        secondary_connection_string_alias: build.template(std.get(block, 'secondary_connection_string_alias', null)),
        secondary_key: build.template(std.get(block, 'secondary_key', null)),
        send: build.template(std.get(block, 'send', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      listen: resource.field(self._.blocks, 'listen'),
      manage: resource.field(self._.blocks, 'manage'),
      name: resource.field(self._.blocks, 'name'),
      namespace_name: resource.field(self._.blocks, 'namespace_name'),
      primary_connection_string: resource.field(self._.blocks, 'primary_connection_string'),
      primary_connection_string_alias: resource.field(self._.blocks, 'primary_connection_string_alias'),
      primary_key: resource.field(self._.blocks, 'primary_key'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      secondary_connection_string: resource.field(self._.blocks, 'secondary_connection_string'),
      secondary_connection_string_alias: resource.field(self._.blocks, 'secondary_connection_string_alias'),
      secondary_key: resource.field(self._.blocks, 'secondary_key'),
      send: resource.field(self._.blocks, 'send'),
    },
    eventhub_namespace_customer_managed_key(name, block): {
      local resource = blockType.resource('azurerm_eventhub_namespace_customer_managed_key', name),
      _: resource._(block, {
        eventhub_namespace_id: build.template(block.eventhub_namespace_id),
        id: build.template(std.get(block, 'id', null)),
        infrastructure_encryption_enabled: build.template(std.get(block, 'infrastructure_encryption_enabled', null)),
        key_vault_key_ids: build.template(block.key_vault_key_ids),
        user_assigned_identity_id: build.template(std.get(block, 'user_assigned_identity_id', null)),
      }),
      eventhub_namespace_id: resource.field(self._.blocks, 'eventhub_namespace_id'),
      id: resource.field(self._.blocks, 'id'),
      infrastructure_encryption_enabled: resource.field(self._.blocks, 'infrastructure_encryption_enabled'),
      key_vault_key_ids: resource.field(self._.blocks, 'key_vault_key_ids'),
      user_assigned_identity_id: resource.field(self._.blocks, 'user_assigned_identity_id'),
    },
    eventhub_namespace_disaster_recovery_config(name, block): {
      local resource = blockType.resource('azurerm_eventhub_namespace_disaster_recovery_config', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        namespace_name: build.template(block.namespace_name),
        partner_namespace_id: build.template(block.partner_namespace_id),
        resource_group_name: build.template(block.resource_group_name),
      }),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      namespace_name: resource.field(self._.blocks, 'namespace_name'),
      partner_namespace_id: resource.field(self._.blocks, 'partner_namespace_id'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
    },
    eventhub_namespace_schema_group(name, block): {
      local resource = blockType.resource('azurerm_eventhub_namespace_schema_group', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        namespace_id: build.template(block.namespace_id),
        schema_compatibility: build.template(block.schema_compatibility),
        schema_type: build.template(block.schema_type),
      }),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      namespace_id: resource.field(self._.blocks, 'namespace_id'),
      schema_compatibility: resource.field(self._.blocks, 'schema_compatibility'),
      schema_type: resource.field(self._.blocks, 'schema_type'),
    },
    express_route_circuit(name, block): {
      local resource = blockType.resource('azurerm_express_route_circuit', name),
      _: resource._(block, {
        allow_classic_operations: build.template(std.get(block, 'allow_classic_operations', null)),
        authorization_key: build.template(std.get(block, 'authorization_key', null)),
        bandwidth_in_gbps: build.template(std.get(block, 'bandwidth_in_gbps', null)),
        bandwidth_in_mbps: build.template(std.get(block, 'bandwidth_in_mbps', null)),
        express_route_port_id: build.template(std.get(block, 'express_route_port_id', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        peering_location: build.template(std.get(block, 'peering_location', null)),
        rate_limiting_enabled: build.template(std.get(block, 'rate_limiting_enabled', null)),
        resource_group_name: build.template(block.resource_group_name),
        service_key: build.template(std.get(block, 'service_key', null)),
        service_provider_name: build.template(std.get(block, 'service_provider_name', null)),
        service_provider_provisioning_state: build.template(std.get(block, 'service_provider_provisioning_state', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      allow_classic_operations: resource.field(self._.blocks, 'allow_classic_operations'),
      authorization_key: resource.field(self._.blocks, 'authorization_key'),
      bandwidth_in_gbps: resource.field(self._.blocks, 'bandwidth_in_gbps'),
      bandwidth_in_mbps: resource.field(self._.blocks, 'bandwidth_in_mbps'),
      express_route_port_id: resource.field(self._.blocks, 'express_route_port_id'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      peering_location: resource.field(self._.blocks, 'peering_location'),
      rate_limiting_enabled: resource.field(self._.blocks, 'rate_limiting_enabled'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      service_key: resource.field(self._.blocks, 'service_key'),
      service_provider_name: resource.field(self._.blocks, 'service_provider_name'),
      service_provider_provisioning_state: resource.field(self._.blocks, 'service_provider_provisioning_state'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    express_route_circuit_authorization(name, block): {
      local resource = blockType.resource('azurerm_express_route_circuit_authorization', name),
      _: resource._(block, {
        authorization_key: build.template(std.get(block, 'authorization_key', null)),
        authorization_use_status: build.template(std.get(block, 'authorization_use_status', null)),
        express_route_circuit_name: build.template(block.express_route_circuit_name),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
      }),
      authorization_key: resource.field(self._.blocks, 'authorization_key'),
      authorization_use_status: resource.field(self._.blocks, 'authorization_use_status'),
      express_route_circuit_name: resource.field(self._.blocks, 'express_route_circuit_name'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
    },
    express_route_circuit_connection(name, block): {
      local resource = blockType.resource('azurerm_express_route_circuit_connection', name),
      _: resource._(block, {
        address_prefix_ipv4: build.template(block.address_prefix_ipv4),
        address_prefix_ipv6: build.template(std.get(block, 'address_prefix_ipv6', null)),
        authorization_key: build.template(std.get(block, 'authorization_key', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        peer_peering_id: build.template(block.peer_peering_id),
        peering_id: build.template(block.peering_id),
      }),
      address_prefix_ipv4: resource.field(self._.blocks, 'address_prefix_ipv4'),
      address_prefix_ipv6: resource.field(self._.blocks, 'address_prefix_ipv6'),
      authorization_key: resource.field(self._.blocks, 'authorization_key'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      peer_peering_id: resource.field(self._.blocks, 'peer_peering_id'),
      peering_id: resource.field(self._.blocks, 'peering_id'),
    },
    express_route_circuit_peering(name, block): {
      local resource = blockType.resource('azurerm_express_route_circuit_peering', name),
      _: resource._(block, {
        azure_asn: build.template(std.get(block, 'azure_asn', null)),
        express_route_circuit_name: build.template(block.express_route_circuit_name),
        gateway_manager_etag: build.template(std.get(block, 'gateway_manager_etag', null)),
        id: build.template(std.get(block, 'id', null)),
        ipv4_enabled: build.template(std.get(block, 'ipv4_enabled', null)),
        peer_asn: build.template(std.get(block, 'peer_asn', null)),
        peering_type: build.template(block.peering_type),
        primary_azure_port: build.template(std.get(block, 'primary_azure_port', null)),
        primary_peer_address_prefix: build.template(std.get(block, 'primary_peer_address_prefix', null)),
        resource_group_name: build.template(block.resource_group_name),
        route_filter_id: build.template(std.get(block, 'route_filter_id', null)),
        secondary_azure_port: build.template(std.get(block, 'secondary_azure_port', null)),
        secondary_peer_address_prefix: build.template(std.get(block, 'secondary_peer_address_prefix', null)),
        shared_key: build.template(std.get(block, 'shared_key', null)),
        vlan_id: build.template(block.vlan_id),
      }),
      azure_asn: resource.field(self._.blocks, 'azure_asn'),
      express_route_circuit_name: resource.field(self._.blocks, 'express_route_circuit_name'),
      gateway_manager_etag: resource.field(self._.blocks, 'gateway_manager_etag'),
      id: resource.field(self._.blocks, 'id'),
      ipv4_enabled: resource.field(self._.blocks, 'ipv4_enabled'),
      peer_asn: resource.field(self._.blocks, 'peer_asn'),
      peering_type: resource.field(self._.blocks, 'peering_type'),
      primary_azure_port: resource.field(self._.blocks, 'primary_azure_port'),
      primary_peer_address_prefix: resource.field(self._.blocks, 'primary_peer_address_prefix'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      route_filter_id: resource.field(self._.blocks, 'route_filter_id'),
      secondary_azure_port: resource.field(self._.blocks, 'secondary_azure_port'),
      secondary_peer_address_prefix: resource.field(self._.blocks, 'secondary_peer_address_prefix'),
      shared_key: resource.field(self._.blocks, 'shared_key'),
      vlan_id: resource.field(self._.blocks, 'vlan_id'),
    },
    express_route_connection(name, block): {
      local resource = blockType.resource('azurerm_express_route_connection', name),
      _: resource._(block, {
        authorization_key: build.template(std.get(block, 'authorization_key', null)),
        enable_internet_security: build.template(std.get(block, 'enable_internet_security', null)),
        express_route_circuit_peering_id: build.template(block.express_route_circuit_peering_id),
        express_route_gateway_bypass_enabled: build.template(std.get(block, 'express_route_gateway_bypass_enabled', null)),
        express_route_gateway_id: build.template(block.express_route_gateway_id),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        private_link_fast_path_enabled: build.template(std.get(block, 'private_link_fast_path_enabled', null)),
        routing_weight: build.template(std.get(block, 'routing_weight', null)),
      }),
      authorization_key: resource.field(self._.blocks, 'authorization_key'),
      enable_internet_security: resource.field(self._.blocks, 'enable_internet_security'),
      express_route_circuit_peering_id: resource.field(self._.blocks, 'express_route_circuit_peering_id'),
      express_route_gateway_bypass_enabled: resource.field(self._.blocks, 'express_route_gateway_bypass_enabled'),
      express_route_gateway_id: resource.field(self._.blocks, 'express_route_gateway_id'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      private_link_fast_path_enabled: resource.field(self._.blocks, 'private_link_fast_path_enabled'),
      routing_weight: resource.field(self._.blocks, 'routing_weight'),
    },
    express_route_gateway(name, block): {
      local resource = blockType.resource('azurerm_express_route_gateway', name),
      _: resource._(block, {
        allow_non_virtual_wan_traffic: build.template(std.get(block, 'allow_non_virtual_wan_traffic', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        scale_units: build.template(block.scale_units),
        tags: build.template(std.get(block, 'tags', null)),
        virtual_hub_id: build.template(block.virtual_hub_id),
      }),
      allow_non_virtual_wan_traffic: resource.field(self._.blocks, 'allow_non_virtual_wan_traffic'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      scale_units: resource.field(self._.blocks, 'scale_units'),
      tags: resource.field(self._.blocks, 'tags'),
      virtual_hub_id: resource.field(self._.blocks, 'virtual_hub_id'),
    },
    express_route_port(name, block): {
      local resource = blockType.resource('azurerm_express_route_port', name),
      _: resource._(block, {
        bandwidth_in_gbps: build.template(block.bandwidth_in_gbps),
        billing_type: build.template(std.get(block, 'billing_type', null)),
        encapsulation: build.template(block.encapsulation),
        ethertype: build.template(std.get(block, 'ethertype', null)),
        guid: build.template(std.get(block, 'guid', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        mtu: build.template(std.get(block, 'mtu', null)),
        name: build.template(block.name),
        peering_location: build.template(block.peering_location),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      bandwidth_in_gbps: resource.field(self._.blocks, 'bandwidth_in_gbps'),
      billing_type: resource.field(self._.blocks, 'billing_type'),
      encapsulation: resource.field(self._.blocks, 'encapsulation'),
      ethertype: resource.field(self._.blocks, 'ethertype'),
      guid: resource.field(self._.blocks, 'guid'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      mtu: resource.field(self._.blocks, 'mtu'),
      name: resource.field(self._.blocks, 'name'),
      peering_location: resource.field(self._.blocks, 'peering_location'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    express_route_port_authorization(name, block): {
      local resource = blockType.resource('azurerm_express_route_port_authorization', name),
      _: resource._(block, {
        authorization_key: build.template(std.get(block, 'authorization_key', null)),
        authorization_use_status: build.template(std.get(block, 'authorization_use_status', null)),
        express_route_port_name: build.template(block.express_route_port_name),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
      }),
      authorization_key: resource.field(self._.blocks, 'authorization_key'),
      authorization_use_status: resource.field(self._.blocks, 'authorization_use_status'),
      express_route_port_name: resource.field(self._.blocks, 'express_route_port_name'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
    },
    extended_custom_location(name, block): {
      local resource = blockType.resource('azurerm_extended_custom_location', name),
      _: resource._(block, {
        cluster_extension_ids: build.template(block.cluster_extension_ids),
        display_name: build.template(std.get(block, 'display_name', null)),
        host_resource_id: build.template(block.host_resource_id),
        host_type: build.template(std.get(block, 'host_type', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        namespace: build.template(block.namespace),
        resource_group_name: build.template(block.resource_group_name),
      }),
      cluster_extension_ids: resource.field(self._.blocks, 'cluster_extension_ids'),
      display_name: resource.field(self._.blocks, 'display_name'),
      host_resource_id: resource.field(self._.blocks, 'host_resource_id'),
      host_type: resource.field(self._.blocks, 'host_type'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      namespace: resource.field(self._.blocks, 'namespace'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
    },
    extended_location_custom_location(name, block): {
      local resource = blockType.resource('azurerm_extended_location_custom_location', name),
      _: resource._(block, {
        cluster_extension_ids: build.template(block.cluster_extension_ids),
        display_name: build.template(std.get(block, 'display_name', null)),
        host_resource_id: build.template(block.host_resource_id),
        host_type: build.template(std.get(block, 'host_type', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        namespace: build.template(block.namespace),
        resource_group_name: build.template(block.resource_group_name),
      }),
      cluster_extension_ids: resource.field(self._.blocks, 'cluster_extension_ids'),
      display_name: resource.field(self._.blocks, 'display_name'),
      host_resource_id: resource.field(self._.blocks, 'host_resource_id'),
      host_type: resource.field(self._.blocks, 'host_type'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      namespace: resource.field(self._.blocks, 'namespace'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
    },
    fabric_capacity(name, block): {
      local resource = blockType.resource('azurerm_fabric_capacity', name),
      _: resource._(block, {
        administration_members: build.template(std.get(block, 'administration_members', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      administration_members: resource.field(self._.blocks, 'administration_members'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    federated_identity_credential(name, block): {
      local resource = blockType.resource('azurerm_federated_identity_credential', name),
      _: resource._(block, {
        audience: build.template(block.audience),
        id: build.template(std.get(block, 'id', null)),
        issuer: build.template(block.issuer),
        name: build.template(block.name),
        parent_id: build.template(block.parent_id),
        resource_group_name: build.template(block.resource_group_name),
        subject: build.template(block.subject),
      }),
      audience: resource.field(self._.blocks, 'audience'),
      id: resource.field(self._.blocks, 'id'),
      issuer: resource.field(self._.blocks, 'issuer'),
      name: resource.field(self._.blocks, 'name'),
      parent_id: resource.field(self._.blocks, 'parent_id'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      subject: resource.field(self._.blocks, 'subject'),
    },
    firewall(name, block): {
      local resource = blockType.resource('azurerm_firewall', name),
      _: resource._(block, {
        dns_proxy_enabled: build.template(std.get(block, 'dns_proxy_enabled', null)),
        dns_servers: build.template(std.get(block, 'dns_servers', null)),
        firewall_policy_id: build.template(std.get(block, 'firewall_policy_id', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        private_ip_ranges: build.template(std.get(block, 'private_ip_ranges', null)),
        resource_group_name: build.template(block.resource_group_name),
        sku_name: build.template(block.sku_name),
        sku_tier: build.template(block.sku_tier),
        tags: build.template(std.get(block, 'tags', null)),
        threat_intel_mode: build.template(std.get(block, 'threat_intel_mode', null)),
        zones: build.template(std.get(block, 'zones', null)),
      }),
      dns_proxy_enabled: resource.field(self._.blocks, 'dns_proxy_enabled'),
      dns_servers: resource.field(self._.blocks, 'dns_servers'),
      firewall_policy_id: resource.field(self._.blocks, 'firewall_policy_id'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      private_ip_ranges: resource.field(self._.blocks, 'private_ip_ranges'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      sku_name: resource.field(self._.blocks, 'sku_name'),
      sku_tier: resource.field(self._.blocks, 'sku_tier'),
      tags: resource.field(self._.blocks, 'tags'),
      threat_intel_mode: resource.field(self._.blocks, 'threat_intel_mode'),
      zones: resource.field(self._.blocks, 'zones'),
    },
    firewall_application_rule_collection(name, block): {
      local resource = blockType.resource('azurerm_firewall_application_rule_collection', name),
      _: resource._(block, {
        action: build.template(block.action),
        azure_firewall_name: build.template(block.azure_firewall_name),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        priority: build.template(block.priority),
        resource_group_name: build.template(block.resource_group_name),
      }),
      action: resource.field(self._.blocks, 'action'),
      azure_firewall_name: resource.field(self._.blocks, 'azure_firewall_name'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      priority: resource.field(self._.blocks, 'priority'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
    },
    firewall_nat_rule_collection(name, block): {
      local resource = blockType.resource('azurerm_firewall_nat_rule_collection', name),
      _: resource._(block, {
        action: build.template(block.action),
        azure_firewall_name: build.template(block.azure_firewall_name),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        priority: build.template(block.priority),
        resource_group_name: build.template(block.resource_group_name),
      }),
      action: resource.field(self._.blocks, 'action'),
      azure_firewall_name: resource.field(self._.blocks, 'azure_firewall_name'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      priority: resource.field(self._.blocks, 'priority'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
    },
    firewall_network_rule_collection(name, block): {
      local resource = blockType.resource('azurerm_firewall_network_rule_collection', name),
      _: resource._(block, {
        action: build.template(block.action),
        azure_firewall_name: build.template(block.azure_firewall_name),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        priority: build.template(block.priority),
        resource_group_name: build.template(block.resource_group_name),
      }),
      action: resource.field(self._.blocks, 'action'),
      azure_firewall_name: resource.field(self._.blocks, 'azure_firewall_name'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      priority: resource.field(self._.blocks, 'priority'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
    },
    firewall_policy(name, block): {
      local resource = blockType.resource('azurerm_firewall_policy', name),
      _: resource._(block, {
        auto_learn_private_ranges_enabled: build.template(std.get(block, 'auto_learn_private_ranges_enabled', null)),
        base_policy_id: build.template(std.get(block, 'base_policy_id', null)),
        child_policies: build.template(std.get(block, 'child_policies', null)),
        firewalls: build.template(std.get(block, 'firewalls', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        private_ip_ranges: build.template(std.get(block, 'private_ip_ranges', null)),
        resource_group_name: build.template(block.resource_group_name),
        rule_collection_groups: build.template(std.get(block, 'rule_collection_groups', null)),
        sku: build.template(std.get(block, 'sku', null)),
        sql_redirect_allowed: build.template(std.get(block, 'sql_redirect_allowed', null)),
        tags: build.template(std.get(block, 'tags', null)),
        threat_intelligence_mode: build.template(std.get(block, 'threat_intelligence_mode', null)),
      }),
      auto_learn_private_ranges_enabled: resource.field(self._.blocks, 'auto_learn_private_ranges_enabled'),
      base_policy_id: resource.field(self._.blocks, 'base_policy_id'),
      child_policies: resource.field(self._.blocks, 'child_policies'),
      firewalls: resource.field(self._.blocks, 'firewalls'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      private_ip_ranges: resource.field(self._.blocks, 'private_ip_ranges'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      rule_collection_groups: resource.field(self._.blocks, 'rule_collection_groups'),
      sku: resource.field(self._.blocks, 'sku'),
      sql_redirect_allowed: resource.field(self._.blocks, 'sql_redirect_allowed'),
      tags: resource.field(self._.blocks, 'tags'),
      threat_intelligence_mode: resource.field(self._.blocks, 'threat_intelligence_mode'),
    },
    firewall_policy_rule_collection_group(name, block): {
      local resource = blockType.resource('azurerm_firewall_policy_rule_collection_group', name),
      _: resource._(block, {
        firewall_policy_id: build.template(block.firewall_policy_id),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        priority: build.template(block.priority),
      }),
      firewall_policy_id: resource.field(self._.blocks, 'firewall_policy_id'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      priority: resource.field(self._.blocks, 'priority'),
    },
    fluid_relay_server(name, block): {
      local resource = blockType.resource('azurerm_fluid_relay_server', name),
      _: resource._(block, {
        frs_tenant_id: build.template(std.get(block, 'frs_tenant_id', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        orderer_endpoints: build.template(std.get(block, 'orderer_endpoints', null)),
        primary_key: build.template(std.get(block, 'primary_key', null)),
        resource_group_name: build.template(block.resource_group_name),
        secondary_key: build.template(std.get(block, 'secondary_key', null)),
        service_endpoints: build.template(std.get(block, 'service_endpoints', null)),
        storage_endpoints: build.template(std.get(block, 'storage_endpoints', null)),
        storage_sku: build.template(std.get(block, 'storage_sku', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      frs_tenant_id: resource.field(self._.blocks, 'frs_tenant_id'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      orderer_endpoints: resource.field(self._.blocks, 'orderer_endpoints'),
      primary_key: resource.field(self._.blocks, 'primary_key'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      secondary_key: resource.field(self._.blocks, 'secondary_key'),
      service_endpoints: resource.field(self._.blocks, 'service_endpoints'),
      storage_endpoints: resource.field(self._.blocks, 'storage_endpoints'),
      storage_sku: resource.field(self._.blocks, 'storage_sku'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    frontdoor(name, block): {
      local resource = blockType.resource('azurerm_frontdoor', name),
      _: resource._(block, {
        backend_pool_health_probes: build.template(std.get(block, 'backend_pool_health_probes', null)),
        backend_pool_load_balancing_settings: build.template(std.get(block, 'backend_pool_load_balancing_settings', null)),
        backend_pools: build.template(std.get(block, 'backend_pools', null)),
        cname: build.template(std.get(block, 'cname', null)),
        explicit_resource_order: build.template(std.get(block, 'explicit_resource_order', null)),
        friendly_name: build.template(std.get(block, 'friendly_name', null)),
        frontend_endpoints: build.template(std.get(block, 'frontend_endpoints', null)),
        header_frontdoor_id: build.template(std.get(block, 'header_frontdoor_id', null)),
        id: build.template(std.get(block, 'id', null)),
        load_balancer_enabled: build.template(std.get(block, 'load_balancer_enabled', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        routing_rules: build.template(std.get(block, 'routing_rules', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      backend_pool_health_probes: resource.field(self._.blocks, 'backend_pool_health_probes'),
      backend_pool_load_balancing_settings: resource.field(self._.blocks, 'backend_pool_load_balancing_settings'),
      backend_pools: resource.field(self._.blocks, 'backend_pools'),
      cname: resource.field(self._.blocks, 'cname'),
      explicit_resource_order: resource.field(self._.blocks, 'explicit_resource_order'),
      friendly_name: resource.field(self._.blocks, 'friendly_name'),
      frontend_endpoints: resource.field(self._.blocks, 'frontend_endpoints'),
      header_frontdoor_id: resource.field(self._.blocks, 'header_frontdoor_id'),
      id: resource.field(self._.blocks, 'id'),
      load_balancer_enabled: resource.field(self._.blocks, 'load_balancer_enabled'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      routing_rules: resource.field(self._.blocks, 'routing_rules'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    frontdoor_custom_https_configuration(name, block): {
      local resource = blockType.resource('azurerm_frontdoor_custom_https_configuration', name),
      _: resource._(block, {
        custom_https_provisioning_enabled: build.template(block.custom_https_provisioning_enabled),
        frontend_endpoint_id: build.template(block.frontend_endpoint_id),
        id: build.template(std.get(block, 'id', null)),
      }),
      custom_https_provisioning_enabled: resource.field(self._.blocks, 'custom_https_provisioning_enabled'),
      frontend_endpoint_id: resource.field(self._.blocks, 'frontend_endpoint_id'),
      id: resource.field(self._.blocks, 'id'),
    },
    frontdoor_firewall_policy(name, block): {
      local resource = blockType.resource('azurerm_frontdoor_firewall_policy', name),
      _: resource._(block, {
        custom_block_response_body: build.template(std.get(block, 'custom_block_response_body', null)),
        custom_block_response_status_code: build.template(std.get(block, 'custom_block_response_status_code', null)),
        enabled: build.template(std.get(block, 'enabled', null)),
        frontend_endpoint_ids: build.template(std.get(block, 'frontend_endpoint_ids', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        mode: build.template(std.get(block, 'mode', null)),
        name: build.template(block.name),
        redirect_url: build.template(std.get(block, 'redirect_url', null)),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      custom_block_response_body: resource.field(self._.blocks, 'custom_block_response_body'),
      custom_block_response_status_code: resource.field(self._.blocks, 'custom_block_response_status_code'),
      enabled: resource.field(self._.blocks, 'enabled'),
      frontend_endpoint_ids: resource.field(self._.blocks, 'frontend_endpoint_ids'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      mode: resource.field(self._.blocks, 'mode'),
      name: resource.field(self._.blocks, 'name'),
      redirect_url: resource.field(self._.blocks, 'redirect_url'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    frontdoor_rules_engine(name, block): {
      local resource = blockType.resource('azurerm_frontdoor_rules_engine', name),
      _: resource._(block, {
        enabled: build.template(std.get(block, 'enabled', null)),
        frontdoor_name: build.template(block.frontdoor_name),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
      }),
      enabled: resource.field(self._.blocks, 'enabled'),
      frontdoor_name: resource.field(self._.blocks, 'frontdoor_name'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
    },
    function_app(name, block): {
      local resource = blockType.resource('azurerm_function_app', name),
      _: resource._(block, {
        app_service_plan_id: build.template(block.app_service_plan_id),
        app_settings: build.template(std.get(block, 'app_settings', null)),
        client_cert_mode: build.template(std.get(block, 'client_cert_mode', null)),
        custom_domain_verification_id: build.template(std.get(block, 'custom_domain_verification_id', null)),
        daily_memory_time_quota: build.template(std.get(block, 'daily_memory_time_quota', null)),
        default_hostname: build.template(std.get(block, 'default_hostname', null)),
        enable_builtin_logging: build.template(std.get(block, 'enable_builtin_logging', null)),
        enabled: build.template(std.get(block, 'enabled', null)),
        https_only: build.template(std.get(block, 'https_only', null)),
        id: build.template(std.get(block, 'id', null)),
        key_vault_reference_identity_id: build.template(std.get(block, 'key_vault_reference_identity_id', null)),
        kind: build.template(std.get(block, 'kind', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        os_type: build.template(std.get(block, 'os_type', null)),
        outbound_ip_addresses: build.template(std.get(block, 'outbound_ip_addresses', null)),
        possible_outbound_ip_addresses: build.template(std.get(block, 'possible_outbound_ip_addresses', null)),
        resource_group_name: build.template(block.resource_group_name),
        site_credential: build.template(std.get(block, 'site_credential', null)),
        storage_account_access_key: build.template(block.storage_account_access_key),
        storage_account_name: build.template(block.storage_account_name),
        tags: build.template(std.get(block, 'tags', null)),
        version: build.template(std.get(block, 'version', null)),
      }),
      app_service_plan_id: resource.field(self._.blocks, 'app_service_plan_id'),
      app_settings: resource.field(self._.blocks, 'app_settings'),
      client_cert_mode: resource.field(self._.blocks, 'client_cert_mode'),
      custom_domain_verification_id: resource.field(self._.blocks, 'custom_domain_verification_id'),
      daily_memory_time_quota: resource.field(self._.blocks, 'daily_memory_time_quota'),
      default_hostname: resource.field(self._.blocks, 'default_hostname'),
      enable_builtin_logging: resource.field(self._.blocks, 'enable_builtin_logging'),
      enabled: resource.field(self._.blocks, 'enabled'),
      https_only: resource.field(self._.blocks, 'https_only'),
      id: resource.field(self._.blocks, 'id'),
      key_vault_reference_identity_id: resource.field(self._.blocks, 'key_vault_reference_identity_id'),
      kind: resource.field(self._.blocks, 'kind'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      os_type: resource.field(self._.blocks, 'os_type'),
      outbound_ip_addresses: resource.field(self._.blocks, 'outbound_ip_addresses'),
      possible_outbound_ip_addresses: resource.field(self._.blocks, 'possible_outbound_ip_addresses'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      site_credential: resource.field(self._.blocks, 'site_credential'),
      storage_account_access_key: resource.field(self._.blocks, 'storage_account_access_key'),
      storage_account_name: resource.field(self._.blocks, 'storage_account_name'),
      tags: resource.field(self._.blocks, 'tags'),
      version: resource.field(self._.blocks, 'version'),
    },
    function_app_active_slot(name, block): {
      local resource = blockType.resource('azurerm_function_app_active_slot', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        last_successful_swap: build.template(std.get(block, 'last_successful_swap', null)),
        overwrite_network_config: build.template(std.get(block, 'overwrite_network_config', null)),
        slot_id: build.template(block.slot_id),
      }),
      id: resource.field(self._.blocks, 'id'),
      last_successful_swap: resource.field(self._.blocks, 'last_successful_swap'),
      overwrite_network_config: resource.field(self._.blocks, 'overwrite_network_config'),
      slot_id: resource.field(self._.blocks, 'slot_id'),
    },
    function_app_connection(name, block): {
      local resource = blockType.resource('azurerm_function_app_connection', name),
      _: resource._(block, {
        client_type: build.template(std.get(block, 'client_type', null)),
        function_app_id: build.template(block.function_app_id),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        target_resource_id: build.template(block.target_resource_id),
        vnet_solution: build.template(std.get(block, 'vnet_solution', null)),
      }),
      client_type: resource.field(self._.blocks, 'client_type'),
      function_app_id: resource.field(self._.blocks, 'function_app_id'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      target_resource_id: resource.field(self._.blocks, 'target_resource_id'),
      vnet_solution: resource.field(self._.blocks, 'vnet_solution'),
    },
    function_app_flex_consumption(name, block): {
      local resource = blockType.resource('azurerm_function_app_flex_consumption', name),
      _: resource._(block, {
        app_settings: build.template(std.get(block, 'app_settings', null)),
        client_certificate_enabled: build.template(std.get(block, 'client_certificate_enabled', null)),
        client_certificate_exclusion_paths: build.template(std.get(block, 'client_certificate_exclusion_paths', null)),
        client_certificate_mode: build.template(std.get(block, 'client_certificate_mode', null)),
        custom_domain_verification_id: build.template(std.get(block, 'custom_domain_verification_id', null)),
        default_hostname: build.template(std.get(block, 'default_hostname', null)),
        enabled: build.template(std.get(block, 'enabled', null)),
        hosting_environment_id: build.template(std.get(block, 'hosting_environment_id', null)),
        id: build.template(std.get(block, 'id', null)),
        instance_memory_in_mb: build.template(std.get(block, 'instance_memory_in_mb', null)),
        kind: build.template(std.get(block, 'kind', null)),
        location: build.template(block.location),
        maximum_instance_count: build.template(std.get(block, 'maximum_instance_count', null)),
        name: build.template(block.name),
        outbound_ip_address_list: build.template(std.get(block, 'outbound_ip_address_list', null)),
        outbound_ip_addresses: build.template(std.get(block, 'outbound_ip_addresses', null)),
        possible_outbound_ip_address_list: build.template(std.get(block, 'possible_outbound_ip_address_list', null)),
        possible_outbound_ip_addresses: build.template(std.get(block, 'possible_outbound_ip_addresses', null)),
        public_network_access_enabled: build.template(std.get(block, 'public_network_access_enabled', null)),
        resource_group_name: build.template(block.resource_group_name),
        runtime_name: build.template(block.runtime_name),
        runtime_version: build.template(block.runtime_version),
        service_plan_id: build.template(block.service_plan_id),
        site_credential: build.template(std.get(block, 'site_credential', null)),
        storage_access_key: build.template(std.get(block, 'storage_access_key', null)),
        storage_authentication_type: build.template(block.storage_authentication_type),
        storage_container_endpoint: build.template(block.storage_container_endpoint),
        storage_container_type: build.template(block.storage_container_type),
        storage_user_assigned_identity_id: build.template(std.get(block, 'storage_user_assigned_identity_id', null)),
        tags: build.template(std.get(block, 'tags', null)),
        virtual_network_subnet_id: build.template(std.get(block, 'virtual_network_subnet_id', null)),
        webdeploy_publish_basic_authentication_enabled: build.template(std.get(block, 'webdeploy_publish_basic_authentication_enabled', null)),
        zip_deploy_file: build.template(std.get(block, 'zip_deploy_file', null)),
      }),
      app_settings: resource.field(self._.blocks, 'app_settings'),
      client_certificate_enabled: resource.field(self._.blocks, 'client_certificate_enabled'),
      client_certificate_exclusion_paths: resource.field(self._.blocks, 'client_certificate_exclusion_paths'),
      client_certificate_mode: resource.field(self._.blocks, 'client_certificate_mode'),
      custom_domain_verification_id: resource.field(self._.blocks, 'custom_domain_verification_id'),
      default_hostname: resource.field(self._.blocks, 'default_hostname'),
      enabled: resource.field(self._.blocks, 'enabled'),
      hosting_environment_id: resource.field(self._.blocks, 'hosting_environment_id'),
      id: resource.field(self._.blocks, 'id'),
      instance_memory_in_mb: resource.field(self._.blocks, 'instance_memory_in_mb'),
      kind: resource.field(self._.blocks, 'kind'),
      location: resource.field(self._.blocks, 'location'),
      maximum_instance_count: resource.field(self._.blocks, 'maximum_instance_count'),
      name: resource.field(self._.blocks, 'name'),
      outbound_ip_address_list: resource.field(self._.blocks, 'outbound_ip_address_list'),
      outbound_ip_addresses: resource.field(self._.blocks, 'outbound_ip_addresses'),
      possible_outbound_ip_address_list: resource.field(self._.blocks, 'possible_outbound_ip_address_list'),
      possible_outbound_ip_addresses: resource.field(self._.blocks, 'possible_outbound_ip_addresses'),
      public_network_access_enabled: resource.field(self._.blocks, 'public_network_access_enabled'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      runtime_name: resource.field(self._.blocks, 'runtime_name'),
      runtime_version: resource.field(self._.blocks, 'runtime_version'),
      service_plan_id: resource.field(self._.blocks, 'service_plan_id'),
      site_credential: resource.field(self._.blocks, 'site_credential'),
      storage_access_key: resource.field(self._.blocks, 'storage_access_key'),
      storage_authentication_type: resource.field(self._.blocks, 'storage_authentication_type'),
      storage_container_endpoint: resource.field(self._.blocks, 'storage_container_endpoint'),
      storage_container_type: resource.field(self._.blocks, 'storage_container_type'),
      storage_user_assigned_identity_id: resource.field(self._.blocks, 'storage_user_assigned_identity_id'),
      tags: resource.field(self._.blocks, 'tags'),
      virtual_network_subnet_id: resource.field(self._.blocks, 'virtual_network_subnet_id'),
      webdeploy_publish_basic_authentication_enabled: resource.field(self._.blocks, 'webdeploy_publish_basic_authentication_enabled'),
      zip_deploy_file: resource.field(self._.blocks, 'zip_deploy_file'),
    },
    function_app_function(name, block): {
      local resource = blockType.resource('azurerm_function_app_function', name),
      _: resource._(block, {
        config_json: build.template(block.config_json),
        config_url: build.template(std.get(block, 'config_url', null)),
        enabled: build.template(std.get(block, 'enabled', null)),
        function_app_id: build.template(block.function_app_id),
        id: build.template(std.get(block, 'id', null)),
        invocation_url: build.template(std.get(block, 'invocation_url', null)),
        language: build.template(std.get(block, 'language', null)),
        name: build.template(block.name),
        script_root_path_url: build.template(std.get(block, 'script_root_path_url', null)),
        script_url: build.template(std.get(block, 'script_url', null)),
        secrets_file_url: build.template(std.get(block, 'secrets_file_url', null)),
        test_data: build.template(std.get(block, 'test_data', null)),
        test_data_url: build.template(std.get(block, 'test_data_url', null)),
        url: build.template(std.get(block, 'url', null)),
      }),
      config_json: resource.field(self._.blocks, 'config_json'),
      config_url: resource.field(self._.blocks, 'config_url'),
      enabled: resource.field(self._.blocks, 'enabled'),
      function_app_id: resource.field(self._.blocks, 'function_app_id'),
      id: resource.field(self._.blocks, 'id'),
      invocation_url: resource.field(self._.blocks, 'invocation_url'),
      language: resource.field(self._.blocks, 'language'),
      name: resource.field(self._.blocks, 'name'),
      script_root_path_url: resource.field(self._.blocks, 'script_root_path_url'),
      script_url: resource.field(self._.blocks, 'script_url'),
      secrets_file_url: resource.field(self._.blocks, 'secrets_file_url'),
      test_data: resource.field(self._.blocks, 'test_data'),
      test_data_url: resource.field(self._.blocks, 'test_data_url'),
      url: resource.field(self._.blocks, 'url'),
    },
    function_app_hybrid_connection(name, block): {
      local resource = blockType.resource('azurerm_function_app_hybrid_connection', name),
      _: resource._(block, {
        function_app_id: build.template(block.function_app_id),
        hostname: build.template(block.hostname),
        id: build.template(std.get(block, 'id', null)),
        namespace_name: build.template(std.get(block, 'namespace_name', null)),
        port: build.template(block.port),
        relay_id: build.template(block.relay_id),
        relay_name: build.template(std.get(block, 'relay_name', null)),
        send_key_name: build.template(std.get(block, 'send_key_name', null)),
        send_key_value: build.template(std.get(block, 'send_key_value', null)),
        service_bus_namespace: build.template(std.get(block, 'service_bus_namespace', null)),
        service_bus_suffix: build.template(std.get(block, 'service_bus_suffix', null)),
      }),
      function_app_id: resource.field(self._.blocks, 'function_app_id'),
      hostname: resource.field(self._.blocks, 'hostname'),
      id: resource.field(self._.blocks, 'id'),
      namespace_name: resource.field(self._.blocks, 'namespace_name'),
      port: resource.field(self._.blocks, 'port'),
      relay_id: resource.field(self._.blocks, 'relay_id'),
      relay_name: resource.field(self._.blocks, 'relay_name'),
      send_key_name: resource.field(self._.blocks, 'send_key_name'),
      send_key_value: resource.field(self._.blocks, 'send_key_value'),
      service_bus_namespace: resource.field(self._.blocks, 'service_bus_namespace'),
      service_bus_suffix: resource.field(self._.blocks, 'service_bus_suffix'),
    },
    function_app_slot(name, block): {
      local resource = blockType.resource('azurerm_function_app_slot', name),
      _: resource._(block, {
        app_service_plan_id: build.template(block.app_service_plan_id),
        app_settings: build.template(std.get(block, 'app_settings', null)),
        daily_memory_time_quota: build.template(std.get(block, 'daily_memory_time_quota', null)),
        default_hostname: build.template(std.get(block, 'default_hostname', null)),
        enable_builtin_logging: build.template(std.get(block, 'enable_builtin_logging', null)),
        enabled: build.template(std.get(block, 'enabled', null)),
        function_app_name: build.template(block.function_app_name),
        https_only: build.template(std.get(block, 'https_only', null)),
        id: build.template(std.get(block, 'id', null)),
        kind: build.template(std.get(block, 'kind', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        os_type: build.template(std.get(block, 'os_type', null)),
        outbound_ip_addresses: build.template(std.get(block, 'outbound_ip_addresses', null)),
        possible_outbound_ip_addresses: build.template(std.get(block, 'possible_outbound_ip_addresses', null)),
        resource_group_name: build.template(block.resource_group_name),
        site_credential: build.template(std.get(block, 'site_credential', null)),
        storage_account_access_key: build.template(block.storage_account_access_key),
        storage_account_name: build.template(block.storage_account_name),
        tags: build.template(std.get(block, 'tags', null)),
        version: build.template(std.get(block, 'version', null)),
      }),
      app_service_plan_id: resource.field(self._.blocks, 'app_service_plan_id'),
      app_settings: resource.field(self._.blocks, 'app_settings'),
      daily_memory_time_quota: resource.field(self._.blocks, 'daily_memory_time_quota'),
      default_hostname: resource.field(self._.blocks, 'default_hostname'),
      enable_builtin_logging: resource.field(self._.blocks, 'enable_builtin_logging'),
      enabled: resource.field(self._.blocks, 'enabled'),
      function_app_name: resource.field(self._.blocks, 'function_app_name'),
      https_only: resource.field(self._.blocks, 'https_only'),
      id: resource.field(self._.blocks, 'id'),
      kind: resource.field(self._.blocks, 'kind'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      os_type: resource.field(self._.blocks, 'os_type'),
      outbound_ip_addresses: resource.field(self._.blocks, 'outbound_ip_addresses'),
      possible_outbound_ip_addresses: resource.field(self._.blocks, 'possible_outbound_ip_addresses'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      site_credential: resource.field(self._.blocks, 'site_credential'),
      storage_account_access_key: resource.field(self._.blocks, 'storage_account_access_key'),
      storage_account_name: resource.field(self._.blocks, 'storage_account_name'),
      tags: resource.field(self._.blocks, 'tags'),
      version: resource.field(self._.blocks, 'version'),
    },
    gallery_application(name, block): {
      local resource = blockType.resource('azurerm_gallery_application', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        end_of_life_date: build.template(std.get(block, 'end_of_life_date', null)),
        eula: build.template(std.get(block, 'eula', null)),
        gallery_id: build.template(block.gallery_id),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        privacy_statement_uri: build.template(std.get(block, 'privacy_statement_uri', null)),
        release_note_uri: build.template(std.get(block, 'release_note_uri', null)),
        supported_os_type: build.template(block.supported_os_type),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      description: resource.field(self._.blocks, 'description'),
      end_of_life_date: resource.field(self._.blocks, 'end_of_life_date'),
      eula: resource.field(self._.blocks, 'eula'),
      gallery_id: resource.field(self._.blocks, 'gallery_id'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      privacy_statement_uri: resource.field(self._.blocks, 'privacy_statement_uri'),
      release_note_uri: resource.field(self._.blocks, 'release_note_uri'),
      supported_os_type: resource.field(self._.blocks, 'supported_os_type'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    gallery_application_version(name, block): {
      local resource = blockType.resource('azurerm_gallery_application_version', name),
      _: resource._(block, {
        config_file: build.template(std.get(block, 'config_file', null)),
        enable_health_check: build.template(std.get(block, 'enable_health_check', null)),
        end_of_life_date: build.template(std.get(block, 'end_of_life_date', null)),
        exclude_from_latest: build.template(std.get(block, 'exclude_from_latest', null)),
        gallery_application_id: build.template(block.gallery_application_id),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        package_file: build.template(std.get(block, 'package_file', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      config_file: resource.field(self._.blocks, 'config_file'),
      enable_health_check: resource.field(self._.blocks, 'enable_health_check'),
      end_of_life_date: resource.field(self._.blocks, 'end_of_life_date'),
      exclude_from_latest: resource.field(self._.blocks, 'exclude_from_latest'),
      gallery_application_id: resource.field(self._.blocks, 'gallery_application_id'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      package_file: resource.field(self._.blocks, 'package_file'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    graph_services_account(name, block): {
      local resource = blockType.resource('azurerm_graph_services_account', name),
      _: resource._(block, {
        application_id: build.template(block.application_id),
        billing_plan_id: build.template(std.get(block, 'billing_plan_id', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      application_id: resource.field(self._.blocks, 'application_id'),
      billing_plan_id: resource.field(self._.blocks, 'billing_plan_id'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    hdinsight_hadoop_cluster(name, block): {
      local resource = blockType.resource('azurerm_hdinsight_hadoop_cluster', name),
      _: resource._(block, {
        cluster_version: build.template(block.cluster_version),
        https_endpoint: build.template(std.get(block, 'https_endpoint', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        ssh_endpoint: build.template(std.get(block, 'ssh_endpoint', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tier: build.template(block.tier),
        tls_min_version: build.template(std.get(block, 'tls_min_version', null)),
      }),
      cluster_version: resource.field(self._.blocks, 'cluster_version'),
      https_endpoint: resource.field(self._.blocks, 'https_endpoint'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      ssh_endpoint: resource.field(self._.blocks, 'ssh_endpoint'),
      tags: resource.field(self._.blocks, 'tags'),
      tier: resource.field(self._.blocks, 'tier'),
      tls_min_version: resource.field(self._.blocks, 'tls_min_version'),
    },
    hdinsight_hbase_cluster(name, block): {
      local resource = blockType.resource('azurerm_hdinsight_hbase_cluster', name),
      _: resource._(block, {
        cluster_version: build.template(block.cluster_version),
        https_endpoint: build.template(std.get(block, 'https_endpoint', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        ssh_endpoint: build.template(std.get(block, 'ssh_endpoint', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tier: build.template(block.tier),
        tls_min_version: build.template(std.get(block, 'tls_min_version', null)),
      }),
      cluster_version: resource.field(self._.blocks, 'cluster_version'),
      https_endpoint: resource.field(self._.blocks, 'https_endpoint'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      ssh_endpoint: resource.field(self._.blocks, 'ssh_endpoint'),
      tags: resource.field(self._.blocks, 'tags'),
      tier: resource.field(self._.blocks, 'tier'),
      tls_min_version: resource.field(self._.blocks, 'tls_min_version'),
    },
    hdinsight_interactive_query_cluster(name, block): {
      local resource = blockType.resource('azurerm_hdinsight_interactive_query_cluster', name),
      _: resource._(block, {
        cluster_version: build.template(block.cluster_version),
        encryption_in_transit_enabled: build.template(std.get(block, 'encryption_in_transit_enabled', null)),
        https_endpoint: build.template(std.get(block, 'https_endpoint', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        ssh_endpoint: build.template(std.get(block, 'ssh_endpoint', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tier: build.template(block.tier),
        tls_min_version: build.template(std.get(block, 'tls_min_version', null)),
      }),
      cluster_version: resource.field(self._.blocks, 'cluster_version'),
      encryption_in_transit_enabled: resource.field(self._.blocks, 'encryption_in_transit_enabled'),
      https_endpoint: resource.field(self._.blocks, 'https_endpoint'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      ssh_endpoint: resource.field(self._.blocks, 'ssh_endpoint'),
      tags: resource.field(self._.blocks, 'tags'),
      tier: resource.field(self._.blocks, 'tier'),
      tls_min_version: resource.field(self._.blocks, 'tls_min_version'),
    },
    hdinsight_kafka_cluster(name, block): {
      local resource = blockType.resource('azurerm_hdinsight_kafka_cluster', name),
      _: resource._(block, {
        cluster_version: build.template(block.cluster_version),
        encryption_in_transit_enabled: build.template(std.get(block, 'encryption_in_transit_enabled', null)),
        https_endpoint: build.template(std.get(block, 'https_endpoint', null)),
        id: build.template(std.get(block, 'id', null)),
        kafka_rest_proxy_endpoint: build.template(std.get(block, 'kafka_rest_proxy_endpoint', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        ssh_endpoint: build.template(std.get(block, 'ssh_endpoint', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tier: build.template(block.tier),
        tls_min_version: build.template(std.get(block, 'tls_min_version', null)),
      }),
      cluster_version: resource.field(self._.blocks, 'cluster_version'),
      encryption_in_transit_enabled: resource.field(self._.blocks, 'encryption_in_transit_enabled'),
      https_endpoint: resource.field(self._.blocks, 'https_endpoint'),
      id: resource.field(self._.blocks, 'id'),
      kafka_rest_proxy_endpoint: resource.field(self._.blocks, 'kafka_rest_proxy_endpoint'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      ssh_endpoint: resource.field(self._.blocks, 'ssh_endpoint'),
      tags: resource.field(self._.blocks, 'tags'),
      tier: resource.field(self._.blocks, 'tier'),
      tls_min_version: resource.field(self._.blocks, 'tls_min_version'),
    },
    hdinsight_spark_cluster(name, block): {
      local resource = blockType.resource('azurerm_hdinsight_spark_cluster', name),
      _: resource._(block, {
        cluster_version: build.template(block.cluster_version),
        encryption_in_transit_enabled: build.template(std.get(block, 'encryption_in_transit_enabled', null)),
        https_endpoint: build.template(std.get(block, 'https_endpoint', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        ssh_endpoint: build.template(std.get(block, 'ssh_endpoint', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tier: build.template(block.tier),
        tls_min_version: build.template(std.get(block, 'tls_min_version', null)),
      }),
      cluster_version: resource.field(self._.blocks, 'cluster_version'),
      encryption_in_transit_enabled: resource.field(self._.blocks, 'encryption_in_transit_enabled'),
      https_endpoint: resource.field(self._.blocks, 'https_endpoint'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      ssh_endpoint: resource.field(self._.blocks, 'ssh_endpoint'),
      tags: resource.field(self._.blocks, 'tags'),
      tier: resource.field(self._.blocks, 'tier'),
      tls_min_version: resource.field(self._.blocks, 'tls_min_version'),
    },
    healthbot(name, block): {
      local resource = blockType.resource('azurerm_healthbot', name),
      _: resource._(block, {
        bot_management_portal_url: build.template(std.get(block, 'bot_management_portal_url', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        sku_name: build.template(block.sku_name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      bot_management_portal_url: resource.field(self._.blocks, 'bot_management_portal_url'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      sku_name: resource.field(self._.blocks, 'sku_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    healthcare_dicom_service(name, block): {
      local resource = blockType.resource('azurerm_healthcare_dicom_service', name),
      _: resource._(block, {
        authentication: build.template(std.get(block, 'authentication', null)),
        data_partitions_enabled: build.template(std.get(block, 'data_partitions_enabled', null)),
        encryption_key_url: build.template(std.get(block, 'encryption_key_url', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        private_endpoint: build.template(std.get(block, 'private_endpoint', null)),
        public_network_access_enabled: build.template(std.get(block, 'public_network_access_enabled', null)),
        service_url: build.template(std.get(block, 'service_url', null)),
        tags: build.template(std.get(block, 'tags', null)),
        workspace_id: build.template(block.workspace_id),
      }),
      authentication: resource.field(self._.blocks, 'authentication'),
      data_partitions_enabled: resource.field(self._.blocks, 'data_partitions_enabled'),
      encryption_key_url: resource.field(self._.blocks, 'encryption_key_url'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      private_endpoint: resource.field(self._.blocks, 'private_endpoint'),
      public_network_access_enabled: resource.field(self._.blocks, 'public_network_access_enabled'),
      service_url: resource.field(self._.blocks, 'service_url'),
      tags: resource.field(self._.blocks, 'tags'),
      workspace_id: resource.field(self._.blocks, 'workspace_id'),
    },
    healthcare_fhir_service(name, block): {
      local resource = blockType.resource('azurerm_healthcare_fhir_service', name),
      _: resource._(block, {
        access_policy_object_ids: build.template(std.get(block, 'access_policy_object_ids', null)),
        configuration_export_storage_account_name: build.template(std.get(block, 'configuration_export_storage_account_name', null)),
        container_registry_login_server_url: build.template(std.get(block, 'container_registry_login_server_url', null)),
        id: build.template(std.get(block, 'id', null)),
        kind: build.template(std.get(block, 'kind', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        public_network_access_enabled: build.template(std.get(block, 'public_network_access_enabled', null)),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
        workspace_id: build.template(block.workspace_id),
      }),
      access_policy_object_ids: resource.field(self._.blocks, 'access_policy_object_ids'),
      configuration_export_storage_account_name: resource.field(self._.blocks, 'configuration_export_storage_account_name'),
      container_registry_login_server_url: resource.field(self._.blocks, 'container_registry_login_server_url'),
      id: resource.field(self._.blocks, 'id'),
      kind: resource.field(self._.blocks, 'kind'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      public_network_access_enabled: resource.field(self._.blocks, 'public_network_access_enabled'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
      workspace_id: resource.field(self._.blocks, 'workspace_id'),
    },
    healthcare_medtech_service(name, block): {
      local resource = blockType.resource('azurerm_healthcare_medtech_service', name),
      _: resource._(block, {
        device_mapping_json: build.template(block.device_mapping_json),
        eventhub_consumer_group_name: build.template(block.eventhub_consumer_group_name),
        eventhub_name: build.template(block.eventhub_name),
        eventhub_namespace_name: build.template(block.eventhub_namespace_name),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        tags: build.template(std.get(block, 'tags', null)),
        workspace_id: build.template(block.workspace_id),
      }),
      device_mapping_json: resource.field(self._.blocks, 'device_mapping_json'),
      eventhub_consumer_group_name: resource.field(self._.blocks, 'eventhub_consumer_group_name'),
      eventhub_name: resource.field(self._.blocks, 'eventhub_name'),
      eventhub_namespace_name: resource.field(self._.blocks, 'eventhub_namespace_name'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      tags: resource.field(self._.blocks, 'tags'),
      workspace_id: resource.field(self._.blocks, 'workspace_id'),
    },
    healthcare_medtech_service_fhir_destination(name, block): {
      local resource = blockType.resource('azurerm_healthcare_medtech_service_fhir_destination', name),
      _: resource._(block, {
        destination_fhir_mapping_json: build.template(block.destination_fhir_mapping_json),
        destination_fhir_service_id: build.template(block.destination_fhir_service_id),
        destination_identity_resolution_type: build.template(block.destination_identity_resolution_type),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        medtech_service_id: build.template(block.medtech_service_id),
        name: build.template(block.name),
      }),
      destination_fhir_mapping_json: resource.field(self._.blocks, 'destination_fhir_mapping_json'),
      destination_fhir_service_id: resource.field(self._.blocks, 'destination_fhir_service_id'),
      destination_identity_resolution_type: resource.field(self._.blocks, 'destination_identity_resolution_type'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      medtech_service_id: resource.field(self._.blocks, 'medtech_service_id'),
      name: resource.field(self._.blocks, 'name'),
    },
    healthcare_service(name, block): {
      local resource = blockType.resource('azurerm_healthcare_service', name),
      _: resource._(block, {
        access_policy_object_ids: build.template(std.get(block, 'access_policy_object_ids', null)),
        configuration_export_storage_account_name: build.template(std.get(block, 'configuration_export_storage_account_name', null)),
        cosmosdb_key_vault_key_versionless_id: build.template(std.get(block, 'cosmosdb_key_vault_key_versionless_id', null)),
        cosmosdb_throughput: build.template(std.get(block, 'cosmosdb_throughput', null)),
        id: build.template(std.get(block, 'id', null)),
        kind: build.template(std.get(block, 'kind', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        public_network_access_enabled: build.template(std.get(block, 'public_network_access_enabled', null)),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      access_policy_object_ids: resource.field(self._.blocks, 'access_policy_object_ids'),
      configuration_export_storage_account_name: resource.field(self._.blocks, 'configuration_export_storage_account_name'),
      cosmosdb_key_vault_key_versionless_id: resource.field(self._.blocks, 'cosmosdb_key_vault_key_versionless_id'),
      cosmosdb_throughput: resource.field(self._.blocks, 'cosmosdb_throughput'),
      id: resource.field(self._.blocks, 'id'),
      kind: resource.field(self._.blocks, 'kind'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      public_network_access_enabled: resource.field(self._.blocks, 'public_network_access_enabled'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    healthcare_workspace(name, block): {
      local resource = blockType.resource('azurerm_healthcare_workspace', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        private_endpoint_connection: build.template(std.get(block, 'private_endpoint_connection', null)),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      private_endpoint_connection: resource.field(self._.blocks, 'private_endpoint_connection'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    hpc_cache(name, block): {
      local resource = blockType.resource('azurerm_hpc_cache', name),
      _: resource._(block, {
        automatically_rotate_key_to_latest_enabled: build.template(std.get(block, 'automatically_rotate_key_to_latest_enabled', null)),
        cache_size_in_gb: build.template(block.cache_size_in_gb),
        id: build.template(std.get(block, 'id', null)),
        key_vault_key_id: build.template(std.get(block, 'key_vault_key_id', null)),
        location: build.template(block.location),
        mount_addresses: build.template(std.get(block, 'mount_addresses', null)),
        mtu: build.template(std.get(block, 'mtu', null)),
        name: build.template(block.name),
        ntp_server: build.template(std.get(block, 'ntp_server', null)),
        resource_group_name: build.template(block.resource_group_name),
        sku_name: build.template(block.sku_name),
        subnet_id: build.template(block.subnet_id),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      automatically_rotate_key_to_latest_enabled: resource.field(self._.blocks, 'automatically_rotate_key_to_latest_enabled'),
      cache_size_in_gb: resource.field(self._.blocks, 'cache_size_in_gb'),
      id: resource.field(self._.blocks, 'id'),
      key_vault_key_id: resource.field(self._.blocks, 'key_vault_key_id'),
      location: resource.field(self._.blocks, 'location'),
      mount_addresses: resource.field(self._.blocks, 'mount_addresses'),
      mtu: resource.field(self._.blocks, 'mtu'),
      name: resource.field(self._.blocks, 'name'),
      ntp_server: resource.field(self._.blocks, 'ntp_server'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      sku_name: resource.field(self._.blocks, 'sku_name'),
      subnet_id: resource.field(self._.blocks, 'subnet_id'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    hpc_cache_access_policy(name, block): {
      local resource = blockType.resource('azurerm_hpc_cache_access_policy', name),
      _: resource._(block, {
        hpc_cache_id: build.template(block.hpc_cache_id),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
      }),
      hpc_cache_id: resource.field(self._.blocks, 'hpc_cache_id'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
    },
    hpc_cache_blob_nfs_target(name, block): {
      local resource = blockType.resource('azurerm_hpc_cache_blob_nfs_target', name),
      _: resource._(block, {
        access_policy_name: build.template(std.get(block, 'access_policy_name', null)),
        cache_name: build.template(block.cache_name),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        namespace_path: build.template(block.namespace_path),
        resource_group_name: build.template(block.resource_group_name),
        storage_container_id: build.template(block.storage_container_id),
        usage_model: build.template(block.usage_model),
        verification_timer_in_seconds: build.template(std.get(block, 'verification_timer_in_seconds', null)),
        write_back_timer_in_seconds: build.template(std.get(block, 'write_back_timer_in_seconds', null)),
      }),
      access_policy_name: resource.field(self._.blocks, 'access_policy_name'),
      cache_name: resource.field(self._.blocks, 'cache_name'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      namespace_path: resource.field(self._.blocks, 'namespace_path'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      storage_container_id: resource.field(self._.blocks, 'storage_container_id'),
      usage_model: resource.field(self._.blocks, 'usage_model'),
      verification_timer_in_seconds: resource.field(self._.blocks, 'verification_timer_in_seconds'),
      write_back_timer_in_seconds: resource.field(self._.blocks, 'write_back_timer_in_seconds'),
    },
    hpc_cache_blob_target(name, block): {
      local resource = blockType.resource('azurerm_hpc_cache_blob_target', name),
      _: resource._(block, {
        access_policy_name: build.template(std.get(block, 'access_policy_name', null)),
        cache_name: build.template(block.cache_name),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        namespace_path: build.template(block.namespace_path),
        resource_group_name: build.template(block.resource_group_name),
        storage_container_id: build.template(block.storage_container_id),
      }),
      access_policy_name: resource.field(self._.blocks, 'access_policy_name'),
      cache_name: resource.field(self._.blocks, 'cache_name'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      namespace_path: resource.field(self._.blocks, 'namespace_path'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      storage_container_id: resource.field(self._.blocks, 'storage_container_id'),
    },
    hpc_cache_nfs_target(name, block): {
      local resource = blockType.resource('azurerm_hpc_cache_nfs_target', name),
      _: resource._(block, {
        cache_name: build.template(block.cache_name),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        target_host_name: build.template(block.target_host_name),
        usage_model: build.template(block.usage_model),
        verification_timer_in_seconds: build.template(std.get(block, 'verification_timer_in_seconds', null)),
        write_back_timer_in_seconds: build.template(std.get(block, 'write_back_timer_in_seconds', null)),
      }),
      cache_name: resource.field(self._.blocks, 'cache_name'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      target_host_name: resource.field(self._.blocks, 'target_host_name'),
      usage_model: resource.field(self._.blocks, 'usage_model'),
      verification_timer_in_seconds: resource.field(self._.blocks, 'verification_timer_in_seconds'),
      write_back_timer_in_seconds: resource.field(self._.blocks, 'write_back_timer_in_seconds'),
    },
    image(name, block): {
      local resource = blockType.resource('azurerm_image', name),
      _: resource._(block, {
        hyper_v_generation: build.template(std.get(block, 'hyper_v_generation', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        source_virtual_machine_id: build.template(std.get(block, 'source_virtual_machine_id', null)),
        tags: build.template(std.get(block, 'tags', null)),
        zone_resilient: build.template(std.get(block, 'zone_resilient', null)),
      }),
      hyper_v_generation: resource.field(self._.blocks, 'hyper_v_generation'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      source_virtual_machine_id: resource.field(self._.blocks, 'source_virtual_machine_id'),
      tags: resource.field(self._.blocks, 'tags'),
      zone_resilient: resource.field(self._.blocks, 'zone_resilient'),
    },
    iot_security_device_group(name, block): {
      local resource = blockType.resource('azurerm_iot_security_device_group', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        iothub_id: build.template(block.iothub_id),
        name: build.template(block.name),
      }),
      id: resource.field(self._.blocks, 'id'),
      iothub_id: resource.field(self._.blocks, 'iothub_id'),
      name: resource.field(self._.blocks, 'name'),
    },
    iot_security_solution(name, block): {
      local resource = blockType.resource('azurerm_iot_security_solution', name),
      _: resource._(block, {
        disabled_data_sources: build.template(std.get(block, 'disabled_data_sources', null)),
        display_name: build.template(block.display_name),
        enabled: build.template(std.get(block, 'enabled', null)),
        events_to_export: build.template(std.get(block, 'events_to_export', null)),
        id: build.template(std.get(block, 'id', null)),
        iothub_ids: build.template(block.iothub_ids),
        location: build.template(block.location),
        log_analytics_workspace_id: build.template(std.get(block, 'log_analytics_workspace_id', null)),
        log_unmasked_ips_enabled: build.template(std.get(block, 'log_unmasked_ips_enabled', null)),
        name: build.template(block.name),
        query_for_resources: build.template(std.get(block, 'query_for_resources', null)),
        query_subscription_ids: build.template(std.get(block, 'query_subscription_ids', null)),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      disabled_data_sources: resource.field(self._.blocks, 'disabled_data_sources'),
      display_name: resource.field(self._.blocks, 'display_name'),
      enabled: resource.field(self._.blocks, 'enabled'),
      events_to_export: resource.field(self._.blocks, 'events_to_export'),
      id: resource.field(self._.blocks, 'id'),
      iothub_ids: resource.field(self._.blocks, 'iothub_ids'),
      location: resource.field(self._.blocks, 'location'),
      log_analytics_workspace_id: resource.field(self._.blocks, 'log_analytics_workspace_id'),
      log_unmasked_ips_enabled: resource.field(self._.blocks, 'log_unmasked_ips_enabled'),
      name: resource.field(self._.blocks, 'name'),
      query_for_resources: resource.field(self._.blocks, 'query_for_resources'),
      query_subscription_ids: resource.field(self._.blocks, 'query_subscription_ids'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    iotcentral_application(name, block): {
      local resource = blockType.resource('azurerm_iotcentral_application', name),
      _: resource._(block, {
        display_name: build.template(std.get(block, 'display_name', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        public_network_access_enabled: build.template(std.get(block, 'public_network_access_enabled', null)),
        resource_group_name: build.template(block.resource_group_name),
        sku: build.template(std.get(block, 'sku', null)),
        sub_domain: build.template(block.sub_domain),
        tags: build.template(std.get(block, 'tags', null)),
        template: build.template(std.get(block, 'template', null)),
      }),
      display_name: resource.field(self._.blocks, 'display_name'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      public_network_access_enabled: resource.field(self._.blocks, 'public_network_access_enabled'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      sku: resource.field(self._.blocks, 'sku'),
      sub_domain: resource.field(self._.blocks, 'sub_domain'),
      tags: resource.field(self._.blocks, 'tags'),
      template: resource.field(self._.blocks, 'template'),
    },
    iotcentral_application_network_rule_set(name, block): {
      local resource = blockType.resource('azurerm_iotcentral_application_network_rule_set', name),
      _: resource._(block, {
        apply_to_device: build.template(std.get(block, 'apply_to_device', null)),
        default_action: build.template(std.get(block, 'default_action', null)),
        id: build.template(std.get(block, 'id', null)),
        iotcentral_application_id: build.template(block.iotcentral_application_id),
      }),
      apply_to_device: resource.field(self._.blocks, 'apply_to_device'),
      default_action: resource.field(self._.blocks, 'default_action'),
      id: resource.field(self._.blocks, 'id'),
      iotcentral_application_id: resource.field(self._.blocks, 'iotcentral_application_id'),
    },
    iotcentral_organization(name, block): {
      local resource = blockType.resource('azurerm_iotcentral_organization', name),
      _: resource._(block, {
        display_name: build.template(block.display_name),
        id: build.template(std.get(block, 'id', null)),
        iotcentral_application_id: build.template(block.iotcentral_application_id),
        organization_id: build.template(block.organization_id),
        parent_organization_id: build.template(std.get(block, 'parent_organization_id', null)),
      }),
      display_name: resource.field(self._.blocks, 'display_name'),
      id: resource.field(self._.blocks, 'id'),
      iotcentral_application_id: resource.field(self._.blocks, 'iotcentral_application_id'),
      organization_id: resource.field(self._.blocks, 'organization_id'),
      parent_organization_id: resource.field(self._.blocks, 'parent_organization_id'),
    },
    iothub(name, block): {
      local resource = blockType.resource('azurerm_iothub', name),
      _: resource._(block, {
        endpoint: build.template(std.get(block, 'endpoint', null)),
        enrichment: build.template(std.get(block, 'enrichment', null)),
        event_hub_events_endpoint: build.template(std.get(block, 'event_hub_events_endpoint', null)),
        event_hub_events_namespace: build.template(std.get(block, 'event_hub_events_namespace', null)),
        event_hub_events_path: build.template(std.get(block, 'event_hub_events_path', null)),
        event_hub_operations_endpoint: build.template(std.get(block, 'event_hub_operations_endpoint', null)),
        event_hub_operations_path: build.template(std.get(block, 'event_hub_operations_path', null)),
        event_hub_partition_count: build.template(std.get(block, 'event_hub_partition_count', null)),
        event_hub_retention_in_days: build.template(std.get(block, 'event_hub_retention_in_days', null)),
        hostname: build.template(std.get(block, 'hostname', null)),
        id: build.template(std.get(block, 'id', null)),
        local_authentication_enabled: build.template(std.get(block, 'local_authentication_enabled', null)),
        location: build.template(block.location),
        min_tls_version: build.template(std.get(block, 'min_tls_version', null)),
        name: build.template(block.name),
        public_network_access_enabled: build.template(std.get(block, 'public_network_access_enabled', null)),
        resource_group_name: build.template(block.resource_group_name),
        route: build.template(std.get(block, 'route', null)),
        shared_access_policy: build.template(std.get(block, 'shared_access_policy', null)),
        tags: build.template(std.get(block, 'tags', null)),
        type: build.template(std.get(block, 'type', null)),
      }),
      endpoint: resource.field(self._.blocks, 'endpoint'),
      enrichment: resource.field(self._.blocks, 'enrichment'),
      event_hub_events_endpoint: resource.field(self._.blocks, 'event_hub_events_endpoint'),
      event_hub_events_namespace: resource.field(self._.blocks, 'event_hub_events_namespace'),
      event_hub_events_path: resource.field(self._.blocks, 'event_hub_events_path'),
      event_hub_operations_endpoint: resource.field(self._.blocks, 'event_hub_operations_endpoint'),
      event_hub_operations_path: resource.field(self._.blocks, 'event_hub_operations_path'),
      event_hub_partition_count: resource.field(self._.blocks, 'event_hub_partition_count'),
      event_hub_retention_in_days: resource.field(self._.blocks, 'event_hub_retention_in_days'),
      hostname: resource.field(self._.blocks, 'hostname'),
      id: resource.field(self._.blocks, 'id'),
      local_authentication_enabled: resource.field(self._.blocks, 'local_authentication_enabled'),
      location: resource.field(self._.blocks, 'location'),
      min_tls_version: resource.field(self._.blocks, 'min_tls_version'),
      name: resource.field(self._.blocks, 'name'),
      public_network_access_enabled: resource.field(self._.blocks, 'public_network_access_enabled'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      route: resource.field(self._.blocks, 'route'),
      shared_access_policy: resource.field(self._.blocks, 'shared_access_policy'),
      tags: resource.field(self._.blocks, 'tags'),
      type: resource.field(self._.blocks, 'type'),
    },
    iothub_certificate(name, block): {
      local resource = blockType.resource('azurerm_iothub_certificate', name),
      _: resource._(block, {
        certificate_content: build.template(block.certificate_content),
        id: build.template(std.get(block, 'id', null)),
        iothub_name: build.template(block.iothub_name),
        is_verified: build.template(std.get(block, 'is_verified', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
      }),
      certificate_content: resource.field(self._.blocks, 'certificate_content'),
      id: resource.field(self._.blocks, 'id'),
      iothub_name: resource.field(self._.blocks, 'iothub_name'),
      is_verified: resource.field(self._.blocks, 'is_verified'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
    },
    iothub_consumer_group(name, block): {
      local resource = blockType.resource('azurerm_iothub_consumer_group', name),
      _: resource._(block, {
        eventhub_endpoint_name: build.template(block.eventhub_endpoint_name),
        id: build.template(std.get(block, 'id', null)),
        iothub_name: build.template(block.iothub_name),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
      }),
      eventhub_endpoint_name: resource.field(self._.blocks, 'eventhub_endpoint_name'),
      id: resource.field(self._.blocks, 'id'),
      iothub_name: resource.field(self._.blocks, 'iothub_name'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
    },
    iothub_device_update_account(name, block): {
      local resource = blockType.resource('azurerm_iothub_device_update_account', name),
      _: resource._(block, {
        host_name: build.template(std.get(block, 'host_name', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        public_network_access_enabled: build.template(std.get(block, 'public_network_access_enabled', null)),
        resource_group_name: build.template(block.resource_group_name),
        sku: build.template(std.get(block, 'sku', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      host_name: resource.field(self._.blocks, 'host_name'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      public_network_access_enabled: resource.field(self._.blocks, 'public_network_access_enabled'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      sku: resource.field(self._.blocks, 'sku'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    iothub_device_update_instance(name, block): {
      local resource = blockType.resource('azurerm_iothub_device_update_instance', name),
      _: resource._(block, {
        device_update_account_id: build.template(block.device_update_account_id),
        diagnostic_enabled: build.template(std.get(block, 'diagnostic_enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        iothub_id: build.template(block.iothub_id),
        name: build.template(block.name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      device_update_account_id: resource.field(self._.blocks, 'device_update_account_id'),
      diagnostic_enabled: resource.field(self._.blocks, 'diagnostic_enabled'),
      id: resource.field(self._.blocks, 'id'),
      iothub_id: resource.field(self._.blocks, 'iothub_id'),
      name: resource.field(self._.blocks, 'name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    iothub_dps(name, block): {
      local resource = blockType.resource('azurerm_iothub_dps', name),
      _: resource._(block, {
        allocation_policy: build.template(std.get(block, 'allocation_policy', null)),
        data_residency_enabled: build.template(std.get(block, 'data_residency_enabled', null)),
        device_provisioning_host_name: build.template(std.get(block, 'device_provisioning_host_name', null)),
        id: build.template(std.get(block, 'id', null)),
        id_scope: build.template(std.get(block, 'id_scope', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        public_network_access_enabled: build.template(std.get(block, 'public_network_access_enabled', null)),
        resource_group_name: build.template(block.resource_group_name),
        service_operations_host_name: build.template(std.get(block, 'service_operations_host_name', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      allocation_policy: resource.field(self._.blocks, 'allocation_policy'),
      data_residency_enabled: resource.field(self._.blocks, 'data_residency_enabled'),
      device_provisioning_host_name: resource.field(self._.blocks, 'device_provisioning_host_name'),
      id: resource.field(self._.blocks, 'id'),
      id_scope: resource.field(self._.blocks, 'id_scope'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      public_network_access_enabled: resource.field(self._.blocks, 'public_network_access_enabled'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      service_operations_host_name: resource.field(self._.blocks, 'service_operations_host_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    iothub_dps_certificate(name, block): {
      local resource = blockType.resource('azurerm_iothub_dps_certificate', name),
      _: resource._(block, {
        certificate_content: build.template(block.certificate_content),
        id: build.template(std.get(block, 'id', null)),
        iot_dps_name: build.template(block.iot_dps_name),
        is_verified: build.template(std.get(block, 'is_verified', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
      }),
      certificate_content: resource.field(self._.blocks, 'certificate_content'),
      id: resource.field(self._.blocks, 'id'),
      iot_dps_name: resource.field(self._.blocks, 'iot_dps_name'),
      is_verified: resource.field(self._.blocks, 'is_verified'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
    },
    iothub_dps_shared_access_policy(name, block): {
      local resource = blockType.resource('azurerm_iothub_dps_shared_access_policy', name),
      _: resource._(block, {
        enrollment_read: build.template(std.get(block, 'enrollment_read', null)),
        enrollment_write: build.template(std.get(block, 'enrollment_write', null)),
        id: build.template(std.get(block, 'id', null)),
        iothub_dps_name: build.template(block.iothub_dps_name),
        name: build.template(block.name),
        primary_connection_string: build.template(std.get(block, 'primary_connection_string', null)),
        primary_key: build.template(std.get(block, 'primary_key', null)),
        registration_read: build.template(std.get(block, 'registration_read', null)),
        registration_write: build.template(std.get(block, 'registration_write', null)),
        resource_group_name: build.template(block.resource_group_name),
        secondary_connection_string: build.template(std.get(block, 'secondary_connection_string', null)),
        secondary_key: build.template(std.get(block, 'secondary_key', null)),
        service_config: build.template(std.get(block, 'service_config', null)),
      }),
      enrollment_read: resource.field(self._.blocks, 'enrollment_read'),
      enrollment_write: resource.field(self._.blocks, 'enrollment_write'),
      id: resource.field(self._.blocks, 'id'),
      iothub_dps_name: resource.field(self._.blocks, 'iothub_dps_name'),
      name: resource.field(self._.blocks, 'name'),
      primary_connection_string: resource.field(self._.blocks, 'primary_connection_string'),
      primary_key: resource.field(self._.blocks, 'primary_key'),
      registration_read: resource.field(self._.blocks, 'registration_read'),
      registration_write: resource.field(self._.blocks, 'registration_write'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      secondary_connection_string: resource.field(self._.blocks, 'secondary_connection_string'),
      secondary_key: resource.field(self._.blocks, 'secondary_key'),
      service_config: resource.field(self._.blocks, 'service_config'),
    },
    iothub_endpoint_cosmosdb_account(name, block): {
      local resource = blockType.resource('azurerm_iothub_endpoint_cosmosdb_account', name),
      _: resource._(block, {
        authentication_type: build.template(std.get(block, 'authentication_type', null)),
        container_name: build.template(block.container_name),
        database_name: build.template(block.database_name),
        endpoint_uri: build.template(block.endpoint_uri),
        id: build.template(std.get(block, 'id', null)),
        identity_id: build.template(std.get(block, 'identity_id', null)),
        iothub_id: build.template(block.iothub_id),
        name: build.template(block.name),
        partition_key_name: build.template(std.get(block, 'partition_key_name', null)),
        partition_key_template: build.template(std.get(block, 'partition_key_template', null)),
        primary_key: build.template(std.get(block, 'primary_key', null)),
        resource_group_name: build.template(block.resource_group_name),
        secondary_key: build.template(std.get(block, 'secondary_key', null)),
      }),
      authentication_type: resource.field(self._.blocks, 'authentication_type'),
      container_name: resource.field(self._.blocks, 'container_name'),
      database_name: resource.field(self._.blocks, 'database_name'),
      endpoint_uri: resource.field(self._.blocks, 'endpoint_uri'),
      id: resource.field(self._.blocks, 'id'),
      identity_id: resource.field(self._.blocks, 'identity_id'),
      iothub_id: resource.field(self._.blocks, 'iothub_id'),
      name: resource.field(self._.blocks, 'name'),
      partition_key_name: resource.field(self._.blocks, 'partition_key_name'),
      partition_key_template: resource.field(self._.blocks, 'partition_key_template'),
      primary_key: resource.field(self._.blocks, 'primary_key'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      secondary_key: resource.field(self._.blocks, 'secondary_key'),
    },
    iothub_endpoint_eventhub(name, block): {
      local resource = blockType.resource('azurerm_iothub_endpoint_eventhub', name),
      _: resource._(block, {
        authentication_type: build.template(std.get(block, 'authentication_type', null)),
        connection_string: build.template(std.get(block, 'connection_string', null)),
        endpoint_uri: build.template(std.get(block, 'endpoint_uri', null)),
        entity_path: build.template(std.get(block, 'entity_path', null)),
        id: build.template(std.get(block, 'id', null)),
        identity_id: build.template(std.get(block, 'identity_id', null)),
        iothub_id: build.template(block.iothub_id),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
      }),
      authentication_type: resource.field(self._.blocks, 'authentication_type'),
      connection_string: resource.field(self._.blocks, 'connection_string'),
      endpoint_uri: resource.field(self._.blocks, 'endpoint_uri'),
      entity_path: resource.field(self._.blocks, 'entity_path'),
      id: resource.field(self._.blocks, 'id'),
      identity_id: resource.field(self._.blocks, 'identity_id'),
      iothub_id: resource.field(self._.blocks, 'iothub_id'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
    },
    iothub_endpoint_servicebus_queue(name, block): {
      local resource = blockType.resource('azurerm_iothub_endpoint_servicebus_queue', name),
      _: resource._(block, {
        authentication_type: build.template(std.get(block, 'authentication_type', null)),
        connection_string: build.template(std.get(block, 'connection_string', null)),
        endpoint_uri: build.template(std.get(block, 'endpoint_uri', null)),
        entity_path: build.template(std.get(block, 'entity_path', null)),
        id: build.template(std.get(block, 'id', null)),
        identity_id: build.template(std.get(block, 'identity_id', null)),
        iothub_id: build.template(block.iothub_id),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
      }),
      authentication_type: resource.field(self._.blocks, 'authentication_type'),
      connection_string: resource.field(self._.blocks, 'connection_string'),
      endpoint_uri: resource.field(self._.blocks, 'endpoint_uri'),
      entity_path: resource.field(self._.blocks, 'entity_path'),
      id: resource.field(self._.blocks, 'id'),
      identity_id: resource.field(self._.blocks, 'identity_id'),
      iothub_id: resource.field(self._.blocks, 'iothub_id'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
    },
    iothub_endpoint_servicebus_topic(name, block): {
      local resource = blockType.resource('azurerm_iothub_endpoint_servicebus_topic', name),
      _: resource._(block, {
        authentication_type: build.template(std.get(block, 'authentication_type', null)),
        connection_string: build.template(std.get(block, 'connection_string', null)),
        endpoint_uri: build.template(std.get(block, 'endpoint_uri', null)),
        entity_path: build.template(std.get(block, 'entity_path', null)),
        id: build.template(std.get(block, 'id', null)),
        identity_id: build.template(std.get(block, 'identity_id', null)),
        iothub_id: build.template(block.iothub_id),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
      }),
      authentication_type: resource.field(self._.blocks, 'authentication_type'),
      connection_string: resource.field(self._.blocks, 'connection_string'),
      endpoint_uri: resource.field(self._.blocks, 'endpoint_uri'),
      entity_path: resource.field(self._.blocks, 'entity_path'),
      id: resource.field(self._.blocks, 'id'),
      identity_id: resource.field(self._.blocks, 'identity_id'),
      iothub_id: resource.field(self._.blocks, 'iothub_id'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
    },
    iothub_endpoint_storage_container(name, block): {
      local resource = blockType.resource('azurerm_iothub_endpoint_storage_container', name),
      _: resource._(block, {
        authentication_type: build.template(std.get(block, 'authentication_type', null)),
        batch_frequency_in_seconds: build.template(std.get(block, 'batch_frequency_in_seconds', null)),
        connection_string: build.template(std.get(block, 'connection_string', null)),
        container_name: build.template(block.container_name),
        encoding: build.template(std.get(block, 'encoding', null)),
        endpoint_uri: build.template(std.get(block, 'endpoint_uri', null)),
        file_name_format: build.template(std.get(block, 'file_name_format', null)),
        id: build.template(std.get(block, 'id', null)),
        identity_id: build.template(std.get(block, 'identity_id', null)),
        iothub_id: build.template(block.iothub_id),
        max_chunk_size_in_bytes: build.template(std.get(block, 'max_chunk_size_in_bytes', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
      }),
      authentication_type: resource.field(self._.blocks, 'authentication_type'),
      batch_frequency_in_seconds: resource.field(self._.blocks, 'batch_frequency_in_seconds'),
      connection_string: resource.field(self._.blocks, 'connection_string'),
      container_name: resource.field(self._.blocks, 'container_name'),
      encoding: resource.field(self._.blocks, 'encoding'),
      endpoint_uri: resource.field(self._.blocks, 'endpoint_uri'),
      file_name_format: resource.field(self._.blocks, 'file_name_format'),
      id: resource.field(self._.blocks, 'id'),
      identity_id: resource.field(self._.blocks, 'identity_id'),
      iothub_id: resource.field(self._.blocks, 'iothub_id'),
      max_chunk_size_in_bytes: resource.field(self._.blocks, 'max_chunk_size_in_bytes'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
    },
    iothub_enrichment(name, block): {
      local resource = blockType.resource('azurerm_iothub_enrichment', name),
      _: resource._(block, {
        endpoint_names: build.template(block.endpoint_names),
        id: build.template(std.get(block, 'id', null)),
        iothub_name: build.template(block.iothub_name),
        key: build.template(block.key),
        resource_group_name: build.template(block.resource_group_name),
        value: build.template(block.value),
      }),
      endpoint_names: resource.field(self._.blocks, 'endpoint_names'),
      id: resource.field(self._.blocks, 'id'),
      iothub_name: resource.field(self._.blocks, 'iothub_name'),
      key: resource.field(self._.blocks, 'key'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      value: resource.field(self._.blocks, 'value'),
    },
    iothub_fallback_route(name, block): {
      local resource = blockType.resource('azurerm_iothub_fallback_route', name),
      _: resource._(block, {
        condition: build.template(std.get(block, 'condition', null)),
        enabled: build.template(block.enabled),
        endpoint_names: build.template(block.endpoint_names),
        id: build.template(std.get(block, 'id', null)),
        iothub_name: build.template(block.iothub_name),
        resource_group_name: build.template(block.resource_group_name),
        source: build.template(std.get(block, 'source', null)),
      }),
      condition: resource.field(self._.blocks, 'condition'),
      enabled: resource.field(self._.blocks, 'enabled'),
      endpoint_names: resource.field(self._.blocks, 'endpoint_names'),
      id: resource.field(self._.blocks, 'id'),
      iothub_name: resource.field(self._.blocks, 'iothub_name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      source: resource.field(self._.blocks, 'source'),
    },
    iothub_file_upload(name, block): {
      local resource = blockType.resource('azurerm_iothub_file_upload', name),
      _: resource._(block, {
        authentication_type: build.template(std.get(block, 'authentication_type', null)),
        connection_string: build.template(block.connection_string),
        container_name: build.template(block.container_name),
        default_ttl: build.template(std.get(block, 'default_ttl', null)),
        id: build.template(std.get(block, 'id', null)),
        identity_id: build.template(std.get(block, 'identity_id', null)),
        iothub_id: build.template(block.iothub_id),
        lock_duration: build.template(std.get(block, 'lock_duration', null)),
        max_delivery_count: build.template(std.get(block, 'max_delivery_count', null)),
        notifications_enabled: build.template(std.get(block, 'notifications_enabled', null)),
        sas_ttl: build.template(std.get(block, 'sas_ttl', null)),
      }),
      authentication_type: resource.field(self._.blocks, 'authentication_type'),
      connection_string: resource.field(self._.blocks, 'connection_string'),
      container_name: resource.field(self._.blocks, 'container_name'),
      default_ttl: resource.field(self._.blocks, 'default_ttl'),
      id: resource.field(self._.blocks, 'id'),
      identity_id: resource.field(self._.blocks, 'identity_id'),
      iothub_id: resource.field(self._.blocks, 'iothub_id'),
      lock_duration: resource.field(self._.blocks, 'lock_duration'),
      max_delivery_count: resource.field(self._.blocks, 'max_delivery_count'),
      notifications_enabled: resource.field(self._.blocks, 'notifications_enabled'),
      sas_ttl: resource.field(self._.blocks, 'sas_ttl'),
    },
    iothub_route(name, block): {
      local resource = blockType.resource('azurerm_iothub_route', name),
      _: resource._(block, {
        condition: build.template(std.get(block, 'condition', null)),
        enabled: build.template(block.enabled),
        endpoint_names: build.template(block.endpoint_names),
        id: build.template(std.get(block, 'id', null)),
        iothub_name: build.template(block.iothub_name),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        source: build.template(block.source),
      }),
      condition: resource.field(self._.blocks, 'condition'),
      enabled: resource.field(self._.blocks, 'enabled'),
      endpoint_names: resource.field(self._.blocks, 'endpoint_names'),
      id: resource.field(self._.blocks, 'id'),
      iothub_name: resource.field(self._.blocks, 'iothub_name'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      source: resource.field(self._.blocks, 'source'),
    },
    iothub_shared_access_policy(name, block): {
      local resource = blockType.resource('azurerm_iothub_shared_access_policy', name),
      _: resource._(block, {
        device_connect: build.template(std.get(block, 'device_connect', null)),
        id: build.template(std.get(block, 'id', null)),
        iothub_name: build.template(block.iothub_name),
        name: build.template(block.name),
        primary_connection_string: build.template(std.get(block, 'primary_connection_string', null)),
        primary_key: build.template(std.get(block, 'primary_key', null)),
        registry_read: build.template(std.get(block, 'registry_read', null)),
        registry_write: build.template(std.get(block, 'registry_write', null)),
        resource_group_name: build.template(block.resource_group_name),
        secondary_connection_string: build.template(std.get(block, 'secondary_connection_string', null)),
        secondary_key: build.template(std.get(block, 'secondary_key', null)),
        service_connect: build.template(std.get(block, 'service_connect', null)),
      }),
      device_connect: resource.field(self._.blocks, 'device_connect'),
      id: resource.field(self._.blocks, 'id'),
      iothub_name: resource.field(self._.blocks, 'iothub_name'),
      name: resource.field(self._.blocks, 'name'),
      primary_connection_string: resource.field(self._.blocks, 'primary_connection_string'),
      primary_key: resource.field(self._.blocks, 'primary_key'),
      registry_read: resource.field(self._.blocks, 'registry_read'),
      registry_write: resource.field(self._.blocks, 'registry_write'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      secondary_connection_string: resource.field(self._.blocks, 'secondary_connection_string'),
      secondary_key: resource.field(self._.blocks, 'secondary_key'),
      service_connect: resource.field(self._.blocks, 'service_connect'),
    },
    ip_group(name, block): {
      local resource = blockType.resource('azurerm_ip_group', name),
      _: resource._(block, {
        cidrs: build.template(std.get(block, 'cidrs', null)),
        firewall_ids: build.template(std.get(block, 'firewall_ids', null)),
        firewall_policy_ids: build.template(std.get(block, 'firewall_policy_ids', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      cidrs: resource.field(self._.blocks, 'cidrs'),
      firewall_ids: resource.field(self._.blocks, 'firewall_ids'),
      firewall_policy_ids: resource.field(self._.blocks, 'firewall_policy_ids'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    ip_group_cidr(name, block): {
      local resource = blockType.resource('azurerm_ip_group_cidr', name),
      _: resource._(block, {
        cidr: build.template(block.cidr),
        id: build.template(std.get(block, 'id', null)),
        ip_group_id: build.template(block.ip_group_id),
      }),
      cidr: resource.field(self._.blocks, 'cidr'),
      id: resource.field(self._.blocks, 'id'),
      ip_group_id: resource.field(self._.blocks, 'ip_group_id'),
    },
    key_vault(name, block): {
      local resource = blockType.resource('azurerm_key_vault', name),
      _: resource._(block, {
        access_policy: build.template(std.get(block, 'access_policy', null)),
        enable_rbac_authorization: build.template(std.get(block, 'enable_rbac_authorization', null)),
        enabled_for_deployment: build.template(std.get(block, 'enabled_for_deployment', null)),
        enabled_for_disk_encryption: build.template(std.get(block, 'enabled_for_disk_encryption', null)),
        enabled_for_template_deployment: build.template(std.get(block, 'enabled_for_template_deployment', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        public_network_access_enabled: build.template(std.get(block, 'public_network_access_enabled', null)),
        purge_protection_enabled: build.template(std.get(block, 'purge_protection_enabled', null)),
        resource_group_name: build.template(block.resource_group_name),
        sku_name: build.template(block.sku_name),
        soft_delete_retention_days: build.template(std.get(block, 'soft_delete_retention_days', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tenant_id: build.template(block.tenant_id),
        vault_uri: build.template(std.get(block, 'vault_uri', null)),
      }),
      access_policy: resource.field(self._.blocks, 'access_policy'),
      enable_rbac_authorization: resource.field(self._.blocks, 'enable_rbac_authorization'),
      enabled_for_deployment: resource.field(self._.blocks, 'enabled_for_deployment'),
      enabled_for_disk_encryption: resource.field(self._.blocks, 'enabled_for_disk_encryption'),
      enabled_for_template_deployment: resource.field(self._.blocks, 'enabled_for_template_deployment'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      public_network_access_enabled: resource.field(self._.blocks, 'public_network_access_enabled'),
      purge_protection_enabled: resource.field(self._.blocks, 'purge_protection_enabled'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      sku_name: resource.field(self._.blocks, 'sku_name'),
      soft_delete_retention_days: resource.field(self._.blocks, 'soft_delete_retention_days'),
      tags: resource.field(self._.blocks, 'tags'),
      tenant_id: resource.field(self._.blocks, 'tenant_id'),
      vault_uri: resource.field(self._.blocks, 'vault_uri'),
    },
    key_vault_access_policy(name, block): {
      local resource = blockType.resource('azurerm_key_vault_access_policy', name),
      _: resource._(block, {
        application_id: build.template(std.get(block, 'application_id', null)),
        certificate_permissions: build.template(std.get(block, 'certificate_permissions', null)),
        id: build.template(std.get(block, 'id', null)),
        key_permissions: build.template(std.get(block, 'key_permissions', null)),
        key_vault_id: build.template(block.key_vault_id),
        object_id: build.template(block.object_id),
        secret_permissions: build.template(std.get(block, 'secret_permissions', null)),
        storage_permissions: build.template(std.get(block, 'storage_permissions', null)),
        tenant_id: build.template(block.tenant_id),
      }),
      application_id: resource.field(self._.blocks, 'application_id'),
      certificate_permissions: resource.field(self._.blocks, 'certificate_permissions'),
      id: resource.field(self._.blocks, 'id'),
      key_permissions: resource.field(self._.blocks, 'key_permissions'),
      key_vault_id: resource.field(self._.blocks, 'key_vault_id'),
      object_id: resource.field(self._.blocks, 'object_id'),
      secret_permissions: resource.field(self._.blocks, 'secret_permissions'),
      storage_permissions: resource.field(self._.blocks, 'storage_permissions'),
      tenant_id: resource.field(self._.blocks, 'tenant_id'),
    },
    key_vault_certificate(name, block): {
      local resource = blockType.resource('azurerm_key_vault_certificate', name),
      _: resource._(block, {
        certificate_attribute: build.template(std.get(block, 'certificate_attribute', null)),
        certificate_data: build.template(std.get(block, 'certificate_data', null)),
        certificate_data_base64: build.template(std.get(block, 'certificate_data_base64', null)),
        id: build.template(std.get(block, 'id', null)),
        key_vault_id: build.template(block.key_vault_id),
        name: build.template(block.name),
        resource_manager_id: build.template(std.get(block, 'resource_manager_id', null)),
        resource_manager_versionless_id: build.template(std.get(block, 'resource_manager_versionless_id', null)),
        secret_id: build.template(std.get(block, 'secret_id', null)),
        tags: build.template(std.get(block, 'tags', null)),
        thumbprint: build.template(std.get(block, 'thumbprint', null)),
        version: build.template(std.get(block, 'version', null)),
        versionless_id: build.template(std.get(block, 'versionless_id', null)),
        versionless_secret_id: build.template(std.get(block, 'versionless_secret_id', null)),
      }),
      certificate_attribute: resource.field(self._.blocks, 'certificate_attribute'),
      certificate_data: resource.field(self._.blocks, 'certificate_data'),
      certificate_data_base64: resource.field(self._.blocks, 'certificate_data_base64'),
      id: resource.field(self._.blocks, 'id'),
      key_vault_id: resource.field(self._.blocks, 'key_vault_id'),
      name: resource.field(self._.blocks, 'name'),
      resource_manager_id: resource.field(self._.blocks, 'resource_manager_id'),
      resource_manager_versionless_id: resource.field(self._.blocks, 'resource_manager_versionless_id'),
      secret_id: resource.field(self._.blocks, 'secret_id'),
      tags: resource.field(self._.blocks, 'tags'),
      thumbprint: resource.field(self._.blocks, 'thumbprint'),
      version: resource.field(self._.blocks, 'version'),
      versionless_id: resource.field(self._.blocks, 'versionless_id'),
      versionless_secret_id: resource.field(self._.blocks, 'versionless_secret_id'),
    },
    key_vault_certificate_contacts(name, block): {
      local resource = blockType.resource('azurerm_key_vault_certificate_contacts', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        key_vault_id: build.template(block.key_vault_id),
      }),
      id: resource.field(self._.blocks, 'id'),
      key_vault_id: resource.field(self._.blocks, 'key_vault_id'),
    },
    key_vault_certificate_issuer(name, block): {
      local resource = blockType.resource('azurerm_key_vault_certificate_issuer', name),
      _: resource._(block, {
        account_id: build.template(std.get(block, 'account_id', null)),
        id: build.template(std.get(block, 'id', null)),
        key_vault_id: build.template(block.key_vault_id),
        name: build.template(block.name),
        org_id: build.template(std.get(block, 'org_id', null)),
        password: build.template(std.get(block, 'password', null)),
        provider_name: build.template(block.provider_name),
      }),
      account_id: resource.field(self._.blocks, 'account_id'),
      id: resource.field(self._.blocks, 'id'),
      key_vault_id: resource.field(self._.blocks, 'key_vault_id'),
      name: resource.field(self._.blocks, 'name'),
      org_id: resource.field(self._.blocks, 'org_id'),
      password: resource.field(self._.blocks, 'password'),
      provider_name: resource.field(self._.blocks, 'provider_name'),
    },
    key_vault_key(name, block): {
      local resource = blockType.resource('azurerm_key_vault_key', name),
      _: resource._(block, {
        curve: build.template(std.get(block, 'curve', null)),
        e: build.template(std.get(block, 'e', null)),
        expiration_date: build.template(std.get(block, 'expiration_date', null)),
        id: build.template(std.get(block, 'id', null)),
        key_opts: build.template(block.key_opts),
        key_size: build.template(std.get(block, 'key_size', null)),
        key_type: build.template(block.key_type),
        key_vault_id: build.template(block.key_vault_id),
        n: build.template(std.get(block, 'n', null)),
        name: build.template(block.name),
        not_before_date: build.template(std.get(block, 'not_before_date', null)),
        public_key_openssh: build.template(std.get(block, 'public_key_openssh', null)),
        public_key_pem: build.template(std.get(block, 'public_key_pem', null)),
        resource_id: build.template(std.get(block, 'resource_id', null)),
        resource_versionless_id: build.template(std.get(block, 'resource_versionless_id', null)),
        tags: build.template(std.get(block, 'tags', null)),
        version: build.template(std.get(block, 'version', null)),
        versionless_id: build.template(std.get(block, 'versionless_id', null)),
        x: build.template(std.get(block, 'x', null)),
        y: build.template(std.get(block, 'y', null)),
      }),
      curve: resource.field(self._.blocks, 'curve'),
      e: resource.field(self._.blocks, 'e'),
      expiration_date: resource.field(self._.blocks, 'expiration_date'),
      id: resource.field(self._.blocks, 'id'),
      key_opts: resource.field(self._.blocks, 'key_opts'),
      key_size: resource.field(self._.blocks, 'key_size'),
      key_type: resource.field(self._.blocks, 'key_type'),
      key_vault_id: resource.field(self._.blocks, 'key_vault_id'),
      n: resource.field(self._.blocks, 'n'),
      name: resource.field(self._.blocks, 'name'),
      not_before_date: resource.field(self._.blocks, 'not_before_date'),
      public_key_openssh: resource.field(self._.blocks, 'public_key_openssh'),
      public_key_pem: resource.field(self._.blocks, 'public_key_pem'),
      resource_id: resource.field(self._.blocks, 'resource_id'),
      resource_versionless_id: resource.field(self._.blocks, 'resource_versionless_id'),
      tags: resource.field(self._.blocks, 'tags'),
      version: resource.field(self._.blocks, 'version'),
      versionless_id: resource.field(self._.blocks, 'versionless_id'),
      x: resource.field(self._.blocks, 'x'),
      y: resource.field(self._.blocks, 'y'),
    },
    key_vault_managed_hardware_security_module(name, block): {
      local resource = blockType.resource('azurerm_key_vault_managed_hardware_security_module', name),
      _: resource._(block, {
        admin_object_ids: build.template(block.admin_object_ids),
        hsm_uri: build.template(std.get(block, 'hsm_uri', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        public_network_access_enabled: build.template(std.get(block, 'public_network_access_enabled', null)),
        purge_protection_enabled: build.template(std.get(block, 'purge_protection_enabled', null)),
        resource_group_name: build.template(block.resource_group_name),
        security_domain_encrypted_data: build.template(std.get(block, 'security_domain_encrypted_data', null)),
        security_domain_key_vault_certificate_ids: build.template(std.get(block, 'security_domain_key_vault_certificate_ids', null)),
        security_domain_quorum: build.template(std.get(block, 'security_domain_quorum', null)),
        sku_name: build.template(block.sku_name),
        soft_delete_retention_days: build.template(std.get(block, 'soft_delete_retention_days', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tenant_id: build.template(block.tenant_id),
      }),
      admin_object_ids: resource.field(self._.blocks, 'admin_object_ids'),
      hsm_uri: resource.field(self._.blocks, 'hsm_uri'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      public_network_access_enabled: resource.field(self._.blocks, 'public_network_access_enabled'),
      purge_protection_enabled: resource.field(self._.blocks, 'purge_protection_enabled'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      security_domain_encrypted_data: resource.field(self._.blocks, 'security_domain_encrypted_data'),
      security_domain_key_vault_certificate_ids: resource.field(self._.blocks, 'security_domain_key_vault_certificate_ids'),
      security_domain_quorum: resource.field(self._.blocks, 'security_domain_quorum'),
      sku_name: resource.field(self._.blocks, 'sku_name'),
      soft_delete_retention_days: resource.field(self._.blocks, 'soft_delete_retention_days'),
      tags: resource.field(self._.blocks, 'tags'),
      tenant_id: resource.field(self._.blocks, 'tenant_id'),
    },
    key_vault_managed_hardware_security_module_key(name, block): {
      local resource = blockType.resource('azurerm_key_vault_managed_hardware_security_module_key', name),
      _: resource._(block, {
        curve: build.template(std.get(block, 'curve', null)),
        expiration_date: build.template(std.get(block, 'expiration_date', null)),
        id: build.template(std.get(block, 'id', null)),
        key_opts: build.template(block.key_opts),
        key_size: build.template(std.get(block, 'key_size', null)),
        key_type: build.template(block.key_type),
        managed_hsm_id: build.template(block.managed_hsm_id),
        name: build.template(block.name),
        not_before_date: build.template(std.get(block, 'not_before_date', null)),
        tags: build.template(std.get(block, 'tags', null)),
        versioned_id: build.template(std.get(block, 'versioned_id', null)),
      }),
      curve: resource.field(self._.blocks, 'curve'),
      expiration_date: resource.field(self._.blocks, 'expiration_date'),
      id: resource.field(self._.blocks, 'id'),
      key_opts: resource.field(self._.blocks, 'key_opts'),
      key_size: resource.field(self._.blocks, 'key_size'),
      key_type: resource.field(self._.blocks, 'key_type'),
      managed_hsm_id: resource.field(self._.blocks, 'managed_hsm_id'),
      name: resource.field(self._.blocks, 'name'),
      not_before_date: resource.field(self._.blocks, 'not_before_date'),
      tags: resource.field(self._.blocks, 'tags'),
      versioned_id: resource.field(self._.blocks, 'versioned_id'),
    },
    key_vault_managed_hardware_security_module_key_rotation_policy(name, block): {
      local resource = blockType.resource('azurerm_key_vault_managed_hardware_security_module_key_rotation_policy', name),
      _: resource._(block, {
        expire_after: build.template(block.expire_after),
        id: build.template(std.get(block, 'id', null)),
        managed_hsm_key_id: build.template(block.managed_hsm_key_id),
        time_after_creation: build.template(std.get(block, 'time_after_creation', null)),
        time_before_expiry: build.template(std.get(block, 'time_before_expiry', null)),
      }),
      expire_after: resource.field(self._.blocks, 'expire_after'),
      id: resource.field(self._.blocks, 'id'),
      managed_hsm_key_id: resource.field(self._.blocks, 'managed_hsm_key_id'),
      time_after_creation: resource.field(self._.blocks, 'time_after_creation'),
      time_before_expiry: resource.field(self._.blocks, 'time_before_expiry'),
    },
    key_vault_managed_hardware_security_module_role_assignment(name, block): {
      local resource = blockType.resource('azurerm_key_vault_managed_hardware_security_module_role_assignment', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        managed_hsm_id: build.template(block.managed_hsm_id),
        name: build.template(block.name),
        principal_id: build.template(block.principal_id),
        resource_id: build.template(std.get(block, 'resource_id', null)),
        role_definition_id: build.template(block.role_definition_id),
        scope: build.template(block.scope),
      }),
      id: resource.field(self._.blocks, 'id'),
      managed_hsm_id: resource.field(self._.blocks, 'managed_hsm_id'),
      name: resource.field(self._.blocks, 'name'),
      principal_id: resource.field(self._.blocks, 'principal_id'),
      resource_id: resource.field(self._.blocks, 'resource_id'),
      role_definition_id: resource.field(self._.blocks, 'role_definition_id'),
      scope: resource.field(self._.blocks, 'scope'),
    },
    key_vault_managed_hardware_security_module_role_definition(name, block): {
      local resource = blockType.resource('azurerm_key_vault_managed_hardware_security_module_role_definition', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        managed_hsm_id: build.template(block.managed_hsm_id),
        name: build.template(block.name),
        resource_manager_id: build.template(std.get(block, 'resource_manager_id', null)),
        role_name: build.template(std.get(block, 'role_name', null)),
        role_type: build.template(std.get(block, 'role_type', null)),
      }),
      description: resource.field(self._.blocks, 'description'),
      id: resource.field(self._.blocks, 'id'),
      managed_hsm_id: resource.field(self._.blocks, 'managed_hsm_id'),
      name: resource.field(self._.blocks, 'name'),
      resource_manager_id: resource.field(self._.blocks, 'resource_manager_id'),
      role_name: resource.field(self._.blocks, 'role_name'),
      role_type: resource.field(self._.blocks, 'role_type'),
    },
    key_vault_managed_storage_account(name, block): {
      local resource = blockType.resource('azurerm_key_vault_managed_storage_account', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        key_vault_id: build.template(block.key_vault_id),
        name: build.template(block.name),
        regenerate_key_automatically: build.template(std.get(block, 'regenerate_key_automatically', null)),
        regeneration_period: build.template(std.get(block, 'regeneration_period', null)),
        storage_account_id: build.template(block.storage_account_id),
        storage_account_key: build.template(block.storage_account_key),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      key_vault_id: resource.field(self._.blocks, 'key_vault_id'),
      name: resource.field(self._.blocks, 'name'),
      regenerate_key_automatically: resource.field(self._.blocks, 'regenerate_key_automatically'),
      regeneration_period: resource.field(self._.blocks, 'regeneration_period'),
      storage_account_id: resource.field(self._.blocks, 'storage_account_id'),
      storage_account_key: resource.field(self._.blocks, 'storage_account_key'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    key_vault_managed_storage_account_sas_token_definition(name, block): {
      local resource = blockType.resource('azurerm_key_vault_managed_storage_account_sas_token_definition', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        managed_storage_account_id: build.template(block.managed_storage_account_id),
        name: build.template(block.name),
        sas_template_uri: build.template(block.sas_template_uri),
        sas_type: build.template(block.sas_type),
        secret_id: build.template(std.get(block, 'secret_id', null)),
        tags: build.template(std.get(block, 'tags', null)),
        validity_period: build.template(block.validity_period),
      }),
      id: resource.field(self._.blocks, 'id'),
      managed_storage_account_id: resource.field(self._.blocks, 'managed_storage_account_id'),
      name: resource.field(self._.blocks, 'name'),
      sas_template_uri: resource.field(self._.blocks, 'sas_template_uri'),
      sas_type: resource.field(self._.blocks, 'sas_type'),
      secret_id: resource.field(self._.blocks, 'secret_id'),
      tags: resource.field(self._.blocks, 'tags'),
      validity_period: resource.field(self._.blocks, 'validity_period'),
    },
    key_vault_secret(name, block): {
      local resource = blockType.resource('azurerm_key_vault_secret', name),
      _: resource._(block, {
        content_type: build.template(std.get(block, 'content_type', null)),
        expiration_date: build.template(std.get(block, 'expiration_date', null)),
        id: build.template(std.get(block, 'id', null)),
        key_vault_id: build.template(block.key_vault_id),
        name: build.template(block.name),
        not_before_date: build.template(std.get(block, 'not_before_date', null)),
        resource_id: build.template(std.get(block, 'resource_id', null)),
        resource_versionless_id: build.template(std.get(block, 'resource_versionless_id', null)),
        tags: build.template(std.get(block, 'tags', null)),
        value: build.template(std.get(block, 'value', null)),
        value_wo: build.template(std.get(block, 'value_wo', null)),
        value_wo_version: build.template(std.get(block, 'value_wo_version', null)),
        version: build.template(std.get(block, 'version', null)),
        versionless_id: build.template(std.get(block, 'versionless_id', null)),
      }),
      content_type: resource.field(self._.blocks, 'content_type'),
      expiration_date: resource.field(self._.blocks, 'expiration_date'),
      id: resource.field(self._.blocks, 'id'),
      key_vault_id: resource.field(self._.blocks, 'key_vault_id'),
      name: resource.field(self._.blocks, 'name'),
      not_before_date: resource.field(self._.blocks, 'not_before_date'),
      resource_id: resource.field(self._.blocks, 'resource_id'),
      resource_versionless_id: resource.field(self._.blocks, 'resource_versionless_id'),
      tags: resource.field(self._.blocks, 'tags'),
      value: resource.field(self._.blocks, 'value'),
      value_wo: resource.field(self._.blocks, 'value_wo'),
      value_wo_version: resource.field(self._.blocks, 'value_wo_version'),
      version: resource.field(self._.blocks, 'version'),
      versionless_id: resource.field(self._.blocks, 'versionless_id'),
    },
    kubernetes_cluster(name, block): {
      local resource = blockType.resource('azurerm_kubernetes_cluster', name),
      _: resource._(block, {
        automatic_upgrade_channel: build.template(std.get(block, 'automatic_upgrade_channel', null)),
        azure_policy_enabled: build.template(std.get(block, 'azure_policy_enabled', null)),
        cost_analysis_enabled: build.template(std.get(block, 'cost_analysis_enabled', null)),
        current_kubernetes_version: build.template(std.get(block, 'current_kubernetes_version', null)),
        disk_encryption_set_id: build.template(std.get(block, 'disk_encryption_set_id', null)),
        dns_prefix: build.template(std.get(block, 'dns_prefix', null)),
        dns_prefix_private_cluster: build.template(std.get(block, 'dns_prefix_private_cluster', null)),
        edge_zone: build.template(std.get(block, 'edge_zone', null)),
        fqdn: build.template(std.get(block, 'fqdn', null)),
        http_application_routing_enabled: build.template(std.get(block, 'http_application_routing_enabled', null)),
        http_application_routing_zone_name: build.template(std.get(block, 'http_application_routing_zone_name', null)),
        id: build.template(std.get(block, 'id', null)),
        image_cleaner_enabled: build.template(std.get(block, 'image_cleaner_enabled', null)),
        image_cleaner_interval_hours: build.template(std.get(block, 'image_cleaner_interval_hours', null)),
        kube_admin_config: build.template(std.get(block, 'kube_admin_config', null)),
        kube_admin_config_raw: build.template(std.get(block, 'kube_admin_config_raw', null)),
        kube_config: build.template(std.get(block, 'kube_config', null)),
        kube_config_raw: build.template(std.get(block, 'kube_config_raw', null)),
        kubernetes_version: build.template(std.get(block, 'kubernetes_version', null)),
        local_account_disabled: build.template(std.get(block, 'local_account_disabled', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        node_os_upgrade_channel: build.template(std.get(block, 'node_os_upgrade_channel', null)),
        node_resource_group: build.template(std.get(block, 'node_resource_group', null)),
        node_resource_group_id: build.template(std.get(block, 'node_resource_group_id', null)),
        oidc_issuer_enabled: build.template(std.get(block, 'oidc_issuer_enabled', null)),
        oidc_issuer_url: build.template(std.get(block, 'oidc_issuer_url', null)),
        open_service_mesh_enabled: build.template(std.get(block, 'open_service_mesh_enabled', null)),
        portal_fqdn: build.template(std.get(block, 'portal_fqdn', null)),
        private_cluster_enabled: build.template(std.get(block, 'private_cluster_enabled', null)),
        private_cluster_public_fqdn_enabled: build.template(std.get(block, 'private_cluster_public_fqdn_enabled', null)),
        private_dns_zone_id: build.template(std.get(block, 'private_dns_zone_id', null)),
        private_fqdn: build.template(std.get(block, 'private_fqdn', null)),
        resource_group_name: build.template(block.resource_group_name),
        role_based_access_control_enabled: build.template(std.get(block, 'role_based_access_control_enabled', null)),
        run_command_enabled: build.template(std.get(block, 'run_command_enabled', null)),
        sku_tier: build.template(std.get(block, 'sku_tier', null)),
        support_plan: build.template(std.get(block, 'support_plan', null)),
        tags: build.template(std.get(block, 'tags', null)),
        workload_identity_enabled: build.template(std.get(block, 'workload_identity_enabled', null)),
      }),
      automatic_upgrade_channel: resource.field(self._.blocks, 'automatic_upgrade_channel'),
      azure_policy_enabled: resource.field(self._.blocks, 'azure_policy_enabled'),
      cost_analysis_enabled: resource.field(self._.blocks, 'cost_analysis_enabled'),
      current_kubernetes_version: resource.field(self._.blocks, 'current_kubernetes_version'),
      disk_encryption_set_id: resource.field(self._.blocks, 'disk_encryption_set_id'),
      dns_prefix: resource.field(self._.blocks, 'dns_prefix'),
      dns_prefix_private_cluster: resource.field(self._.blocks, 'dns_prefix_private_cluster'),
      edge_zone: resource.field(self._.blocks, 'edge_zone'),
      fqdn: resource.field(self._.blocks, 'fqdn'),
      http_application_routing_enabled: resource.field(self._.blocks, 'http_application_routing_enabled'),
      http_application_routing_zone_name: resource.field(self._.blocks, 'http_application_routing_zone_name'),
      id: resource.field(self._.blocks, 'id'),
      image_cleaner_enabled: resource.field(self._.blocks, 'image_cleaner_enabled'),
      image_cleaner_interval_hours: resource.field(self._.blocks, 'image_cleaner_interval_hours'),
      kube_admin_config: resource.field(self._.blocks, 'kube_admin_config'),
      kube_admin_config_raw: resource.field(self._.blocks, 'kube_admin_config_raw'),
      kube_config: resource.field(self._.blocks, 'kube_config'),
      kube_config_raw: resource.field(self._.blocks, 'kube_config_raw'),
      kubernetes_version: resource.field(self._.blocks, 'kubernetes_version'),
      local_account_disabled: resource.field(self._.blocks, 'local_account_disabled'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      node_os_upgrade_channel: resource.field(self._.blocks, 'node_os_upgrade_channel'),
      node_resource_group: resource.field(self._.blocks, 'node_resource_group'),
      node_resource_group_id: resource.field(self._.blocks, 'node_resource_group_id'),
      oidc_issuer_enabled: resource.field(self._.blocks, 'oidc_issuer_enabled'),
      oidc_issuer_url: resource.field(self._.blocks, 'oidc_issuer_url'),
      open_service_mesh_enabled: resource.field(self._.blocks, 'open_service_mesh_enabled'),
      portal_fqdn: resource.field(self._.blocks, 'portal_fqdn'),
      private_cluster_enabled: resource.field(self._.blocks, 'private_cluster_enabled'),
      private_cluster_public_fqdn_enabled: resource.field(self._.blocks, 'private_cluster_public_fqdn_enabled'),
      private_dns_zone_id: resource.field(self._.blocks, 'private_dns_zone_id'),
      private_fqdn: resource.field(self._.blocks, 'private_fqdn'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      role_based_access_control_enabled: resource.field(self._.blocks, 'role_based_access_control_enabled'),
      run_command_enabled: resource.field(self._.blocks, 'run_command_enabled'),
      sku_tier: resource.field(self._.blocks, 'sku_tier'),
      support_plan: resource.field(self._.blocks, 'support_plan'),
      tags: resource.field(self._.blocks, 'tags'),
      workload_identity_enabled: resource.field(self._.blocks, 'workload_identity_enabled'),
    },
    kubernetes_cluster_extension(name, block): {
      local resource = blockType.resource('azurerm_kubernetes_cluster_extension', name),
      _: resource._(block, {
        aks_assigned_identity: build.template(std.get(block, 'aks_assigned_identity', null)),
        cluster_id: build.template(block.cluster_id),
        configuration_protected_settings: build.template(std.get(block, 'configuration_protected_settings', null)),
        configuration_settings: build.template(std.get(block, 'configuration_settings', null)),
        current_version: build.template(std.get(block, 'current_version', null)),
        extension_type: build.template(block.extension_type),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        release_namespace: build.template(std.get(block, 'release_namespace', null)),
        release_train: build.template(std.get(block, 'release_train', null)),
        target_namespace: build.template(std.get(block, 'target_namespace', null)),
        version: build.template(std.get(block, 'version', null)),
      }),
      aks_assigned_identity: resource.field(self._.blocks, 'aks_assigned_identity'),
      cluster_id: resource.field(self._.blocks, 'cluster_id'),
      configuration_protected_settings: resource.field(self._.blocks, 'configuration_protected_settings'),
      configuration_settings: resource.field(self._.blocks, 'configuration_settings'),
      current_version: resource.field(self._.blocks, 'current_version'),
      extension_type: resource.field(self._.blocks, 'extension_type'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      release_namespace: resource.field(self._.blocks, 'release_namespace'),
      release_train: resource.field(self._.blocks, 'release_train'),
      target_namespace: resource.field(self._.blocks, 'target_namespace'),
      version: resource.field(self._.blocks, 'version'),
    },
    kubernetes_cluster_node_pool(name, block): {
      local resource = blockType.resource('azurerm_kubernetes_cluster_node_pool', name),
      _: resource._(block, {
        auto_scaling_enabled: build.template(std.get(block, 'auto_scaling_enabled', null)),
        capacity_reservation_group_id: build.template(std.get(block, 'capacity_reservation_group_id', null)),
        eviction_policy: build.template(std.get(block, 'eviction_policy', null)),
        fips_enabled: build.template(std.get(block, 'fips_enabled', null)),
        gpu_instance: build.template(std.get(block, 'gpu_instance', null)),
        host_encryption_enabled: build.template(std.get(block, 'host_encryption_enabled', null)),
        host_group_id: build.template(std.get(block, 'host_group_id', null)),
        id: build.template(std.get(block, 'id', null)),
        kubelet_disk_type: build.template(std.get(block, 'kubelet_disk_type', null)),
        kubernetes_cluster_id: build.template(block.kubernetes_cluster_id),
        max_count: build.template(std.get(block, 'max_count', null)),
        max_pods: build.template(std.get(block, 'max_pods', null)),
        min_count: build.template(std.get(block, 'min_count', null)),
        mode: build.template(std.get(block, 'mode', null)),
        name: build.template(block.name),
        node_count: build.template(std.get(block, 'node_count', null)),
        node_labels: build.template(std.get(block, 'node_labels', null)),
        node_public_ip_enabled: build.template(std.get(block, 'node_public_ip_enabled', null)),
        node_public_ip_prefix_id: build.template(std.get(block, 'node_public_ip_prefix_id', null)),
        node_taints: build.template(std.get(block, 'node_taints', null)),
        orchestrator_version: build.template(std.get(block, 'orchestrator_version', null)),
        os_disk_size_gb: build.template(std.get(block, 'os_disk_size_gb', null)),
        os_disk_type: build.template(std.get(block, 'os_disk_type', null)),
        os_sku: build.template(std.get(block, 'os_sku', null)),
        os_type: build.template(std.get(block, 'os_type', null)),
        pod_subnet_id: build.template(std.get(block, 'pod_subnet_id', null)),
        priority: build.template(std.get(block, 'priority', null)),
        proximity_placement_group_id: build.template(std.get(block, 'proximity_placement_group_id', null)),
        scale_down_mode: build.template(std.get(block, 'scale_down_mode', null)),
        snapshot_id: build.template(std.get(block, 'snapshot_id', null)),
        spot_max_price: build.template(std.get(block, 'spot_max_price', null)),
        tags: build.template(std.get(block, 'tags', null)),
        temporary_name_for_rotation: build.template(std.get(block, 'temporary_name_for_rotation', null)),
        ultra_ssd_enabled: build.template(std.get(block, 'ultra_ssd_enabled', null)),
        vm_size: build.template(block.vm_size),
        vnet_subnet_id: build.template(std.get(block, 'vnet_subnet_id', null)),
        workload_runtime: build.template(std.get(block, 'workload_runtime', null)),
        zones: build.template(std.get(block, 'zones', null)),
      }),
      auto_scaling_enabled: resource.field(self._.blocks, 'auto_scaling_enabled'),
      capacity_reservation_group_id: resource.field(self._.blocks, 'capacity_reservation_group_id'),
      eviction_policy: resource.field(self._.blocks, 'eviction_policy'),
      fips_enabled: resource.field(self._.blocks, 'fips_enabled'),
      gpu_instance: resource.field(self._.blocks, 'gpu_instance'),
      host_encryption_enabled: resource.field(self._.blocks, 'host_encryption_enabled'),
      host_group_id: resource.field(self._.blocks, 'host_group_id'),
      id: resource.field(self._.blocks, 'id'),
      kubelet_disk_type: resource.field(self._.blocks, 'kubelet_disk_type'),
      kubernetes_cluster_id: resource.field(self._.blocks, 'kubernetes_cluster_id'),
      max_count: resource.field(self._.blocks, 'max_count'),
      max_pods: resource.field(self._.blocks, 'max_pods'),
      min_count: resource.field(self._.blocks, 'min_count'),
      mode: resource.field(self._.blocks, 'mode'),
      name: resource.field(self._.blocks, 'name'),
      node_count: resource.field(self._.blocks, 'node_count'),
      node_labels: resource.field(self._.blocks, 'node_labels'),
      node_public_ip_enabled: resource.field(self._.blocks, 'node_public_ip_enabled'),
      node_public_ip_prefix_id: resource.field(self._.blocks, 'node_public_ip_prefix_id'),
      node_taints: resource.field(self._.blocks, 'node_taints'),
      orchestrator_version: resource.field(self._.blocks, 'orchestrator_version'),
      os_disk_size_gb: resource.field(self._.blocks, 'os_disk_size_gb'),
      os_disk_type: resource.field(self._.blocks, 'os_disk_type'),
      os_sku: resource.field(self._.blocks, 'os_sku'),
      os_type: resource.field(self._.blocks, 'os_type'),
      pod_subnet_id: resource.field(self._.blocks, 'pod_subnet_id'),
      priority: resource.field(self._.blocks, 'priority'),
      proximity_placement_group_id: resource.field(self._.blocks, 'proximity_placement_group_id'),
      scale_down_mode: resource.field(self._.blocks, 'scale_down_mode'),
      snapshot_id: resource.field(self._.blocks, 'snapshot_id'),
      spot_max_price: resource.field(self._.blocks, 'spot_max_price'),
      tags: resource.field(self._.blocks, 'tags'),
      temporary_name_for_rotation: resource.field(self._.blocks, 'temporary_name_for_rotation'),
      ultra_ssd_enabled: resource.field(self._.blocks, 'ultra_ssd_enabled'),
      vm_size: resource.field(self._.blocks, 'vm_size'),
      vnet_subnet_id: resource.field(self._.blocks, 'vnet_subnet_id'),
      workload_runtime: resource.field(self._.blocks, 'workload_runtime'),
      zones: resource.field(self._.blocks, 'zones'),
    },
    kubernetes_cluster_trusted_access_role_binding(name, block): {
      local resource = blockType.resource('azurerm_kubernetes_cluster_trusted_access_role_binding', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        kubernetes_cluster_id: build.template(block.kubernetes_cluster_id),
        name: build.template(block.name),
        roles: build.template(block.roles),
        source_resource_id: build.template(block.source_resource_id),
      }),
      id: resource.field(self._.blocks, 'id'),
      kubernetes_cluster_id: resource.field(self._.blocks, 'kubernetes_cluster_id'),
      name: resource.field(self._.blocks, 'name'),
      roles: resource.field(self._.blocks, 'roles'),
      source_resource_id: resource.field(self._.blocks, 'source_resource_id'),
    },
    kubernetes_fleet_manager(name, block): {
      local resource = blockType.resource('azurerm_kubernetes_fleet_manager', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    kubernetes_fleet_member(name, block): {
      local resource = blockType.resource('azurerm_kubernetes_fleet_member', name),
      _: resource._(block, {
        group: build.template(std.get(block, 'group', null)),
        id: build.template(std.get(block, 'id', null)),
        kubernetes_cluster_id: build.template(block.kubernetes_cluster_id),
        kubernetes_fleet_id: build.template(block.kubernetes_fleet_id),
        name: build.template(block.name),
      }),
      group: resource.field(self._.blocks, 'group'),
      id: resource.field(self._.blocks, 'id'),
      kubernetes_cluster_id: resource.field(self._.blocks, 'kubernetes_cluster_id'),
      kubernetes_fleet_id: resource.field(self._.blocks, 'kubernetes_fleet_id'),
      name: resource.field(self._.blocks, 'name'),
    },
    kubernetes_fleet_update_run(name, block): {
      local resource = blockType.resource('azurerm_kubernetes_fleet_update_run', name),
      _: resource._(block, {
        fleet_update_strategy_id: build.template(std.get(block, 'fleet_update_strategy_id', null)),
        id: build.template(std.get(block, 'id', null)),
        kubernetes_fleet_manager_id: build.template(block.kubernetes_fleet_manager_id),
        name: build.template(block.name),
      }),
      fleet_update_strategy_id: resource.field(self._.blocks, 'fleet_update_strategy_id'),
      id: resource.field(self._.blocks, 'id'),
      kubernetes_fleet_manager_id: resource.field(self._.blocks, 'kubernetes_fleet_manager_id'),
      name: resource.field(self._.blocks, 'name'),
    },
    kubernetes_fleet_update_strategy(name, block): {
      local resource = blockType.resource('azurerm_kubernetes_fleet_update_strategy', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        kubernetes_fleet_manager_id: build.template(block.kubernetes_fleet_manager_id),
        name: build.template(block.name),
      }),
      id: resource.field(self._.blocks, 'id'),
      kubernetes_fleet_manager_id: resource.field(self._.blocks, 'kubernetes_fleet_manager_id'),
      name: resource.field(self._.blocks, 'name'),
    },
    kubernetes_flux_configuration(name, block): {
      local resource = blockType.resource('azurerm_kubernetes_flux_configuration', name),
      _: resource._(block, {
        cluster_id: build.template(block.cluster_id),
        continuous_reconciliation_enabled: build.template(std.get(block, 'continuous_reconciliation_enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        namespace: build.template(block.namespace),
        scope: build.template(std.get(block, 'scope', null)),
      }),
      cluster_id: resource.field(self._.blocks, 'cluster_id'),
      continuous_reconciliation_enabled: resource.field(self._.blocks, 'continuous_reconciliation_enabled'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      namespace: resource.field(self._.blocks, 'namespace'),
      scope: resource.field(self._.blocks, 'scope'),
    },
    kusto_attached_database_configuration(name, block): {
      local resource = blockType.resource('azurerm_kusto_attached_database_configuration', name),
      _: resource._(block, {
        attached_database_names: build.template(std.get(block, 'attached_database_names', null)),
        cluster_id: build.template(std.get(block, 'cluster_id', null)),
        cluster_name: build.template(block.cluster_name),
        cluster_resource_id: build.template(std.get(block, 'cluster_resource_id', null)),
        database_name: build.template(block.database_name),
        default_principal_modification_kind: build.template(std.get(block, 'default_principal_modification_kind', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
      }),
      attached_database_names: resource.field(self._.blocks, 'attached_database_names'),
      cluster_id: resource.field(self._.blocks, 'cluster_id'),
      cluster_name: resource.field(self._.blocks, 'cluster_name'),
      cluster_resource_id: resource.field(self._.blocks, 'cluster_resource_id'),
      database_name: resource.field(self._.blocks, 'database_name'),
      default_principal_modification_kind: resource.field(self._.blocks, 'default_principal_modification_kind'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
    },
    kusto_cluster(name, block): {
      local resource = blockType.resource('azurerm_kusto_cluster', name),
      _: resource._(block, {
        allowed_fqdns: build.template(std.get(block, 'allowed_fqdns', null)),
        allowed_ip_ranges: build.template(std.get(block, 'allowed_ip_ranges', null)),
        auto_stop_enabled: build.template(std.get(block, 'auto_stop_enabled', null)),
        data_ingestion_uri: build.template(std.get(block, 'data_ingestion_uri', null)),
        disk_encryption_enabled: build.template(std.get(block, 'disk_encryption_enabled', null)),
        double_encryption_enabled: build.template(std.get(block, 'double_encryption_enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        outbound_network_access_restricted: build.template(std.get(block, 'outbound_network_access_restricted', null)),
        public_ip_type: build.template(std.get(block, 'public_ip_type', null)),
        public_network_access_enabled: build.template(std.get(block, 'public_network_access_enabled', null)),
        purge_enabled: build.template(std.get(block, 'purge_enabled', null)),
        resource_group_name: build.template(block.resource_group_name),
        streaming_ingestion_enabled: build.template(std.get(block, 'streaming_ingestion_enabled', null)),
        tags: build.template(std.get(block, 'tags', null)),
        trusted_external_tenants: build.template(std.get(block, 'trusted_external_tenants', null)),
        uri: build.template(std.get(block, 'uri', null)),
        zones: build.template(std.get(block, 'zones', null)),
      }),
      allowed_fqdns: resource.field(self._.blocks, 'allowed_fqdns'),
      allowed_ip_ranges: resource.field(self._.blocks, 'allowed_ip_ranges'),
      auto_stop_enabled: resource.field(self._.blocks, 'auto_stop_enabled'),
      data_ingestion_uri: resource.field(self._.blocks, 'data_ingestion_uri'),
      disk_encryption_enabled: resource.field(self._.blocks, 'disk_encryption_enabled'),
      double_encryption_enabled: resource.field(self._.blocks, 'double_encryption_enabled'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      outbound_network_access_restricted: resource.field(self._.blocks, 'outbound_network_access_restricted'),
      public_ip_type: resource.field(self._.blocks, 'public_ip_type'),
      public_network_access_enabled: resource.field(self._.blocks, 'public_network_access_enabled'),
      purge_enabled: resource.field(self._.blocks, 'purge_enabled'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      streaming_ingestion_enabled: resource.field(self._.blocks, 'streaming_ingestion_enabled'),
      tags: resource.field(self._.blocks, 'tags'),
      trusted_external_tenants: resource.field(self._.blocks, 'trusted_external_tenants'),
      uri: resource.field(self._.blocks, 'uri'),
      zones: resource.field(self._.blocks, 'zones'),
    },
    kusto_cluster_customer_managed_key(name, block): {
      local resource = blockType.resource('azurerm_kusto_cluster_customer_managed_key', name),
      _: resource._(block, {
        cluster_id: build.template(block.cluster_id),
        id: build.template(std.get(block, 'id', null)),
        key_name: build.template(block.key_name),
        key_vault_id: build.template(block.key_vault_id),
        key_version: build.template(std.get(block, 'key_version', null)),
        user_identity: build.template(std.get(block, 'user_identity', null)),
      }),
      cluster_id: resource.field(self._.blocks, 'cluster_id'),
      id: resource.field(self._.blocks, 'id'),
      key_name: resource.field(self._.blocks, 'key_name'),
      key_vault_id: resource.field(self._.blocks, 'key_vault_id'),
      key_version: resource.field(self._.blocks, 'key_version'),
      user_identity: resource.field(self._.blocks, 'user_identity'),
    },
    kusto_cluster_managed_private_endpoint(name, block): {
      local resource = blockType.resource('azurerm_kusto_cluster_managed_private_endpoint', name),
      _: resource._(block, {
        cluster_name: build.template(block.cluster_name),
        group_id: build.template(block.group_id),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        private_link_resource_id: build.template(block.private_link_resource_id),
        private_link_resource_region: build.template(std.get(block, 'private_link_resource_region', null)),
        request_message: build.template(std.get(block, 'request_message', null)),
        resource_group_name: build.template(block.resource_group_name),
      }),
      cluster_name: resource.field(self._.blocks, 'cluster_name'),
      group_id: resource.field(self._.blocks, 'group_id'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      private_link_resource_id: resource.field(self._.blocks, 'private_link_resource_id'),
      private_link_resource_region: resource.field(self._.blocks, 'private_link_resource_region'),
      request_message: resource.field(self._.blocks, 'request_message'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
    },
    kusto_cluster_principal_assignment(name, block): {
      local resource = blockType.resource('azurerm_kusto_cluster_principal_assignment', name),
      _: resource._(block, {
        cluster_name: build.template(block.cluster_name),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        principal_id: build.template(block.principal_id),
        principal_name: build.template(std.get(block, 'principal_name', null)),
        principal_type: build.template(block.principal_type),
        resource_group_name: build.template(block.resource_group_name),
        role: build.template(block.role),
        tenant_id: build.template(block.tenant_id),
        tenant_name: build.template(std.get(block, 'tenant_name', null)),
      }),
      cluster_name: resource.field(self._.blocks, 'cluster_name'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      principal_id: resource.field(self._.blocks, 'principal_id'),
      principal_name: resource.field(self._.blocks, 'principal_name'),
      principal_type: resource.field(self._.blocks, 'principal_type'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      role: resource.field(self._.blocks, 'role'),
      tenant_id: resource.field(self._.blocks, 'tenant_id'),
      tenant_name: resource.field(self._.blocks, 'tenant_name'),
    },
    kusto_cosmosdb_data_connection(name, block): {
      local resource = blockType.resource('azurerm_kusto_cosmosdb_data_connection', name),
      _: resource._(block, {
        cosmosdb_container_id: build.template(block.cosmosdb_container_id),
        id: build.template(std.get(block, 'id', null)),
        kusto_database_id: build.template(block.kusto_database_id),
        location: build.template(block.location),
        managed_identity_id: build.template(block.managed_identity_id),
        mapping_rule_name: build.template(std.get(block, 'mapping_rule_name', null)),
        name: build.template(block.name),
        retrieval_start_date: build.template(std.get(block, 'retrieval_start_date', null)),
        table_name: build.template(block.table_name),
      }),
      cosmosdb_container_id: resource.field(self._.blocks, 'cosmosdb_container_id'),
      id: resource.field(self._.blocks, 'id'),
      kusto_database_id: resource.field(self._.blocks, 'kusto_database_id'),
      location: resource.field(self._.blocks, 'location'),
      managed_identity_id: resource.field(self._.blocks, 'managed_identity_id'),
      mapping_rule_name: resource.field(self._.blocks, 'mapping_rule_name'),
      name: resource.field(self._.blocks, 'name'),
      retrieval_start_date: resource.field(self._.blocks, 'retrieval_start_date'),
      table_name: resource.field(self._.blocks, 'table_name'),
    },
    kusto_database(name, block): {
      local resource = blockType.resource('azurerm_kusto_database', name),
      _: resource._(block, {
        cluster_name: build.template(block.cluster_name),
        hot_cache_period: build.template(std.get(block, 'hot_cache_period', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        size: build.template(std.get(block, 'size', null)),
        soft_delete_period: build.template(std.get(block, 'soft_delete_period', null)),
      }),
      cluster_name: resource.field(self._.blocks, 'cluster_name'),
      hot_cache_period: resource.field(self._.blocks, 'hot_cache_period'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      size: resource.field(self._.blocks, 'size'),
      soft_delete_period: resource.field(self._.blocks, 'soft_delete_period'),
    },
    kusto_database_principal_assignment(name, block): {
      local resource = blockType.resource('azurerm_kusto_database_principal_assignment', name),
      _: resource._(block, {
        cluster_name: build.template(block.cluster_name),
        database_name: build.template(block.database_name),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        principal_id: build.template(block.principal_id),
        principal_name: build.template(std.get(block, 'principal_name', null)),
        principal_type: build.template(block.principal_type),
        resource_group_name: build.template(block.resource_group_name),
        role: build.template(block.role),
        tenant_id: build.template(block.tenant_id),
        tenant_name: build.template(std.get(block, 'tenant_name', null)),
      }),
      cluster_name: resource.field(self._.blocks, 'cluster_name'),
      database_name: resource.field(self._.blocks, 'database_name'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      principal_id: resource.field(self._.blocks, 'principal_id'),
      principal_name: resource.field(self._.blocks, 'principal_name'),
      principal_type: resource.field(self._.blocks, 'principal_type'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      role: resource.field(self._.blocks, 'role'),
      tenant_id: resource.field(self._.blocks, 'tenant_id'),
      tenant_name: resource.field(self._.blocks, 'tenant_name'),
    },
    kusto_eventgrid_data_connection(name, block): {
      local resource = blockType.resource('azurerm_kusto_eventgrid_data_connection', name),
      _: resource._(block, {
        blob_storage_event_type: build.template(std.get(block, 'blob_storage_event_type', null)),
        cluster_name: build.template(block.cluster_name),
        data_format: build.template(std.get(block, 'data_format', null)),
        database_name: build.template(block.database_name),
        database_routing_type: build.template(std.get(block, 'database_routing_type', null)),
        eventgrid_event_subscription_id: build.template(std.get(block, 'eventgrid_event_subscription_id', null)),
        eventgrid_resource_id: build.template(std.get(block, 'eventgrid_resource_id', null)),
        eventhub_consumer_group_name: build.template(block.eventhub_consumer_group_name),
        eventhub_id: build.template(block.eventhub_id),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        managed_identity_id: build.template(std.get(block, 'managed_identity_id', null)),
        managed_identity_resource_id: build.template(std.get(block, 'managed_identity_resource_id', null)),
        mapping_rule_name: build.template(std.get(block, 'mapping_rule_name', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        skip_first_record: build.template(std.get(block, 'skip_first_record', null)),
        storage_account_id: build.template(block.storage_account_id),
        table_name: build.template(std.get(block, 'table_name', null)),
      }),
      blob_storage_event_type: resource.field(self._.blocks, 'blob_storage_event_type'),
      cluster_name: resource.field(self._.blocks, 'cluster_name'),
      data_format: resource.field(self._.blocks, 'data_format'),
      database_name: resource.field(self._.blocks, 'database_name'),
      database_routing_type: resource.field(self._.blocks, 'database_routing_type'),
      eventgrid_event_subscription_id: resource.field(self._.blocks, 'eventgrid_event_subscription_id'),
      eventgrid_resource_id: resource.field(self._.blocks, 'eventgrid_resource_id'),
      eventhub_consumer_group_name: resource.field(self._.blocks, 'eventhub_consumer_group_name'),
      eventhub_id: resource.field(self._.blocks, 'eventhub_id'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      managed_identity_id: resource.field(self._.blocks, 'managed_identity_id'),
      managed_identity_resource_id: resource.field(self._.blocks, 'managed_identity_resource_id'),
      mapping_rule_name: resource.field(self._.blocks, 'mapping_rule_name'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      skip_first_record: resource.field(self._.blocks, 'skip_first_record'),
      storage_account_id: resource.field(self._.blocks, 'storage_account_id'),
      table_name: resource.field(self._.blocks, 'table_name'),
    },
    kusto_eventhub_data_connection(name, block): {
      local resource = blockType.resource('azurerm_kusto_eventhub_data_connection', name),
      _: resource._(block, {
        cluster_name: build.template(block.cluster_name),
        compression: build.template(std.get(block, 'compression', null)),
        consumer_group: build.template(block.consumer_group),
        data_format: build.template(std.get(block, 'data_format', null)),
        database_name: build.template(block.database_name),
        database_routing_type: build.template(std.get(block, 'database_routing_type', null)),
        event_system_properties: build.template(std.get(block, 'event_system_properties', null)),
        eventhub_id: build.template(block.eventhub_id),
        id: build.template(std.get(block, 'id', null)),
        identity_id: build.template(std.get(block, 'identity_id', null)),
        location: build.template(block.location),
        mapping_rule_name: build.template(std.get(block, 'mapping_rule_name', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        table_name: build.template(std.get(block, 'table_name', null)),
      }),
      cluster_name: resource.field(self._.blocks, 'cluster_name'),
      compression: resource.field(self._.blocks, 'compression'),
      consumer_group: resource.field(self._.blocks, 'consumer_group'),
      data_format: resource.field(self._.blocks, 'data_format'),
      database_name: resource.field(self._.blocks, 'database_name'),
      database_routing_type: resource.field(self._.blocks, 'database_routing_type'),
      event_system_properties: resource.field(self._.blocks, 'event_system_properties'),
      eventhub_id: resource.field(self._.blocks, 'eventhub_id'),
      id: resource.field(self._.blocks, 'id'),
      identity_id: resource.field(self._.blocks, 'identity_id'),
      location: resource.field(self._.blocks, 'location'),
      mapping_rule_name: resource.field(self._.blocks, 'mapping_rule_name'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      table_name: resource.field(self._.blocks, 'table_name'),
    },
    kusto_iothub_data_connection(name, block): {
      local resource = blockType.resource('azurerm_kusto_iothub_data_connection', name),
      _: resource._(block, {
        cluster_name: build.template(block.cluster_name),
        consumer_group: build.template(block.consumer_group),
        data_format: build.template(std.get(block, 'data_format', null)),
        database_name: build.template(block.database_name),
        database_routing_type: build.template(std.get(block, 'database_routing_type', null)),
        event_system_properties: build.template(std.get(block, 'event_system_properties', null)),
        id: build.template(std.get(block, 'id', null)),
        iothub_id: build.template(block.iothub_id),
        location: build.template(block.location),
        mapping_rule_name: build.template(std.get(block, 'mapping_rule_name', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        shared_access_policy_name: build.template(block.shared_access_policy_name),
        table_name: build.template(std.get(block, 'table_name', null)),
      }),
      cluster_name: resource.field(self._.blocks, 'cluster_name'),
      consumer_group: resource.field(self._.blocks, 'consumer_group'),
      data_format: resource.field(self._.blocks, 'data_format'),
      database_name: resource.field(self._.blocks, 'database_name'),
      database_routing_type: resource.field(self._.blocks, 'database_routing_type'),
      event_system_properties: resource.field(self._.blocks, 'event_system_properties'),
      id: resource.field(self._.blocks, 'id'),
      iothub_id: resource.field(self._.blocks, 'iothub_id'),
      location: resource.field(self._.blocks, 'location'),
      mapping_rule_name: resource.field(self._.blocks, 'mapping_rule_name'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      shared_access_policy_name: resource.field(self._.blocks, 'shared_access_policy_name'),
      table_name: resource.field(self._.blocks, 'table_name'),
    },
    kusto_script(name, block): {
      local resource = blockType.resource('azurerm_kusto_script', name),
      _: resource._(block, {
        continue_on_errors_enabled: build.template(std.get(block, 'continue_on_errors_enabled', null)),
        database_id: build.template(block.database_id),
        force_an_update_when_value_changed: build.template(std.get(block, 'force_an_update_when_value_changed', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        sas_token: build.template(std.get(block, 'sas_token', null)),
        script_content: build.template(std.get(block, 'script_content', null)),
        url: build.template(std.get(block, 'url', null)),
      }),
      continue_on_errors_enabled: resource.field(self._.blocks, 'continue_on_errors_enabled'),
      database_id: resource.field(self._.blocks, 'database_id'),
      force_an_update_when_value_changed: resource.field(self._.blocks, 'force_an_update_when_value_changed'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      sas_token: resource.field(self._.blocks, 'sas_token'),
      script_content: resource.field(self._.blocks, 'script_content'),
      url: resource.field(self._.blocks, 'url'),
    },
    lb(name, block): {
      local resource = blockType.resource('azurerm_lb', name),
      _: resource._(block, {
        edge_zone: build.template(std.get(block, 'edge_zone', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        private_ip_address: build.template(std.get(block, 'private_ip_address', null)),
        private_ip_addresses: build.template(std.get(block, 'private_ip_addresses', null)),
        resource_group_name: build.template(block.resource_group_name),
        sku: build.template(std.get(block, 'sku', null)),
        sku_tier: build.template(std.get(block, 'sku_tier', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      edge_zone: resource.field(self._.blocks, 'edge_zone'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      private_ip_address: resource.field(self._.blocks, 'private_ip_address'),
      private_ip_addresses: resource.field(self._.blocks, 'private_ip_addresses'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      sku: resource.field(self._.blocks, 'sku'),
      sku_tier: resource.field(self._.blocks, 'sku_tier'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    lb_backend_address_pool(name, block): {
      local resource = blockType.resource('azurerm_lb_backend_address_pool', name),
      _: resource._(block, {
        backend_ip_configurations: build.template(std.get(block, 'backend_ip_configurations', null)),
        id: build.template(std.get(block, 'id', null)),
        inbound_nat_rules: build.template(std.get(block, 'inbound_nat_rules', null)),
        load_balancing_rules: build.template(std.get(block, 'load_balancing_rules', null)),
        loadbalancer_id: build.template(block.loadbalancer_id),
        name: build.template(block.name),
        outbound_rules: build.template(std.get(block, 'outbound_rules', null)),
        synchronous_mode: build.template(std.get(block, 'synchronous_mode', null)),
        virtual_network_id: build.template(std.get(block, 'virtual_network_id', null)),
      }),
      backend_ip_configurations: resource.field(self._.blocks, 'backend_ip_configurations'),
      id: resource.field(self._.blocks, 'id'),
      inbound_nat_rules: resource.field(self._.blocks, 'inbound_nat_rules'),
      load_balancing_rules: resource.field(self._.blocks, 'load_balancing_rules'),
      loadbalancer_id: resource.field(self._.blocks, 'loadbalancer_id'),
      name: resource.field(self._.blocks, 'name'),
      outbound_rules: resource.field(self._.blocks, 'outbound_rules'),
      synchronous_mode: resource.field(self._.blocks, 'synchronous_mode'),
      virtual_network_id: resource.field(self._.blocks, 'virtual_network_id'),
    },
    lb_backend_address_pool_address(name, block): {
      local resource = blockType.resource('azurerm_lb_backend_address_pool_address', name),
      _: resource._(block, {
        backend_address_ip_configuration_id: build.template(std.get(block, 'backend_address_ip_configuration_id', null)),
        backend_address_pool_id: build.template(block.backend_address_pool_id),
        id: build.template(std.get(block, 'id', null)),
        inbound_nat_rule_port_mapping: build.template(std.get(block, 'inbound_nat_rule_port_mapping', null)),
        ip_address: build.template(std.get(block, 'ip_address', null)),
        name: build.template(block.name),
        virtual_network_id: build.template(std.get(block, 'virtual_network_id', null)),
      }),
      backend_address_ip_configuration_id: resource.field(self._.blocks, 'backend_address_ip_configuration_id'),
      backend_address_pool_id: resource.field(self._.blocks, 'backend_address_pool_id'),
      id: resource.field(self._.blocks, 'id'),
      inbound_nat_rule_port_mapping: resource.field(self._.blocks, 'inbound_nat_rule_port_mapping'),
      ip_address: resource.field(self._.blocks, 'ip_address'),
      name: resource.field(self._.blocks, 'name'),
      virtual_network_id: resource.field(self._.blocks, 'virtual_network_id'),
    },
    lb_nat_pool(name, block): {
      local resource = blockType.resource('azurerm_lb_nat_pool', name),
      _: resource._(block, {
        backend_port: build.template(block.backend_port),
        floating_ip_enabled: build.template(std.get(block, 'floating_ip_enabled', null)),
        frontend_ip_configuration_id: build.template(std.get(block, 'frontend_ip_configuration_id', null)),
        frontend_ip_configuration_name: build.template(block.frontend_ip_configuration_name),
        frontend_port_end: build.template(block.frontend_port_end),
        frontend_port_start: build.template(block.frontend_port_start),
        id: build.template(std.get(block, 'id', null)),
        idle_timeout_in_minutes: build.template(std.get(block, 'idle_timeout_in_minutes', null)),
        loadbalancer_id: build.template(block.loadbalancer_id),
        name: build.template(block.name),
        protocol: build.template(block.protocol),
        resource_group_name: build.template(block.resource_group_name),
        tcp_reset_enabled: build.template(std.get(block, 'tcp_reset_enabled', null)),
      }),
      backend_port: resource.field(self._.blocks, 'backend_port'),
      floating_ip_enabled: resource.field(self._.blocks, 'floating_ip_enabled'),
      frontend_ip_configuration_id: resource.field(self._.blocks, 'frontend_ip_configuration_id'),
      frontend_ip_configuration_name: resource.field(self._.blocks, 'frontend_ip_configuration_name'),
      frontend_port_end: resource.field(self._.blocks, 'frontend_port_end'),
      frontend_port_start: resource.field(self._.blocks, 'frontend_port_start'),
      id: resource.field(self._.blocks, 'id'),
      idle_timeout_in_minutes: resource.field(self._.blocks, 'idle_timeout_in_minutes'),
      loadbalancer_id: resource.field(self._.blocks, 'loadbalancer_id'),
      name: resource.field(self._.blocks, 'name'),
      protocol: resource.field(self._.blocks, 'protocol'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tcp_reset_enabled: resource.field(self._.blocks, 'tcp_reset_enabled'),
    },
    lb_nat_rule(name, block): {
      local resource = blockType.resource('azurerm_lb_nat_rule', name),
      _: resource._(block, {
        backend_address_pool_id: build.template(std.get(block, 'backend_address_pool_id', null)),
        backend_ip_configuration_id: build.template(std.get(block, 'backend_ip_configuration_id', null)),
        backend_port: build.template(block.backend_port),
        enable_floating_ip: build.template(std.get(block, 'enable_floating_ip', null)),
        enable_tcp_reset: build.template(std.get(block, 'enable_tcp_reset', null)),
        frontend_ip_configuration_id: build.template(std.get(block, 'frontend_ip_configuration_id', null)),
        frontend_ip_configuration_name: build.template(block.frontend_ip_configuration_name),
        frontend_port: build.template(std.get(block, 'frontend_port', null)),
        frontend_port_end: build.template(std.get(block, 'frontend_port_end', null)),
        frontend_port_start: build.template(std.get(block, 'frontend_port_start', null)),
        id: build.template(std.get(block, 'id', null)),
        idle_timeout_in_minutes: build.template(std.get(block, 'idle_timeout_in_minutes', null)),
        loadbalancer_id: build.template(block.loadbalancer_id),
        name: build.template(block.name),
        protocol: build.template(block.protocol),
        resource_group_name: build.template(block.resource_group_name),
      }),
      backend_address_pool_id: resource.field(self._.blocks, 'backend_address_pool_id'),
      backend_ip_configuration_id: resource.field(self._.blocks, 'backend_ip_configuration_id'),
      backend_port: resource.field(self._.blocks, 'backend_port'),
      enable_floating_ip: resource.field(self._.blocks, 'enable_floating_ip'),
      enable_tcp_reset: resource.field(self._.blocks, 'enable_tcp_reset'),
      frontend_ip_configuration_id: resource.field(self._.blocks, 'frontend_ip_configuration_id'),
      frontend_ip_configuration_name: resource.field(self._.blocks, 'frontend_ip_configuration_name'),
      frontend_port: resource.field(self._.blocks, 'frontend_port'),
      frontend_port_end: resource.field(self._.blocks, 'frontend_port_end'),
      frontend_port_start: resource.field(self._.blocks, 'frontend_port_start'),
      id: resource.field(self._.blocks, 'id'),
      idle_timeout_in_minutes: resource.field(self._.blocks, 'idle_timeout_in_minutes'),
      loadbalancer_id: resource.field(self._.blocks, 'loadbalancer_id'),
      name: resource.field(self._.blocks, 'name'),
      protocol: resource.field(self._.blocks, 'protocol'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
    },
    lb_outbound_rule(name, block): {
      local resource = blockType.resource('azurerm_lb_outbound_rule', name),
      _: resource._(block, {
        allocated_outbound_ports: build.template(std.get(block, 'allocated_outbound_ports', null)),
        backend_address_pool_id: build.template(block.backend_address_pool_id),
        enable_tcp_reset: build.template(std.get(block, 'enable_tcp_reset', null)),
        id: build.template(std.get(block, 'id', null)),
        idle_timeout_in_minutes: build.template(std.get(block, 'idle_timeout_in_minutes', null)),
        loadbalancer_id: build.template(block.loadbalancer_id),
        name: build.template(block.name),
        protocol: build.template(block.protocol),
      }),
      allocated_outbound_ports: resource.field(self._.blocks, 'allocated_outbound_ports'),
      backend_address_pool_id: resource.field(self._.blocks, 'backend_address_pool_id'),
      enable_tcp_reset: resource.field(self._.blocks, 'enable_tcp_reset'),
      id: resource.field(self._.blocks, 'id'),
      idle_timeout_in_minutes: resource.field(self._.blocks, 'idle_timeout_in_minutes'),
      loadbalancer_id: resource.field(self._.blocks, 'loadbalancer_id'),
      name: resource.field(self._.blocks, 'name'),
      protocol: resource.field(self._.blocks, 'protocol'),
    },
    lb_probe(name, block): {
      local resource = blockType.resource('azurerm_lb_probe', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        interval_in_seconds: build.template(std.get(block, 'interval_in_seconds', null)),
        load_balancer_rules: build.template(std.get(block, 'load_balancer_rules', null)),
        loadbalancer_id: build.template(block.loadbalancer_id),
        name: build.template(block.name),
        number_of_probes: build.template(std.get(block, 'number_of_probes', null)),
        port: build.template(block.port),
        probe_threshold: build.template(std.get(block, 'probe_threshold', null)),
        protocol: build.template(std.get(block, 'protocol', null)),
        request_path: build.template(std.get(block, 'request_path', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      interval_in_seconds: resource.field(self._.blocks, 'interval_in_seconds'),
      load_balancer_rules: resource.field(self._.blocks, 'load_balancer_rules'),
      loadbalancer_id: resource.field(self._.blocks, 'loadbalancer_id'),
      name: resource.field(self._.blocks, 'name'),
      number_of_probes: resource.field(self._.blocks, 'number_of_probes'),
      port: resource.field(self._.blocks, 'port'),
      probe_threshold: resource.field(self._.blocks, 'probe_threshold'),
      protocol: resource.field(self._.blocks, 'protocol'),
      request_path: resource.field(self._.blocks, 'request_path'),
    },
    lb_rule(name, block): {
      local resource = blockType.resource('azurerm_lb_rule', name),
      _: resource._(block, {
        backend_address_pool_ids: build.template(std.get(block, 'backend_address_pool_ids', null)),
        backend_port: build.template(block.backend_port),
        disable_outbound_snat: build.template(std.get(block, 'disable_outbound_snat', null)),
        enable_floating_ip: build.template(std.get(block, 'enable_floating_ip', null)),
        enable_tcp_reset: build.template(std.get(block, 'enable_tcp_reset', null)),
        frontend_ip_configuration_id: build.template(std.get(block, 'frontend_ip_configuration_id', null)),
        frontend_ip_configuration_name: build.template(block.frontend_ip_configuration_name),
        frontend_port: build.template(block.frontend_port),
        id: build.template(std.get(block, 'id', null)),
        idle_timeout_in_minutes: build.template(std.get(block, 'idle_timeout_in_minutes', null)),
        load_distribution: build.template(std.get(block, 'load_distribution', null)),
        loadbalancer_id: build.template(block.loadbalancer_id),
        name: build.template(block.name),
        probe_id: build.template(std.get(block, 'probe_id', null)),
        protocol: build.template(block.protocol),
      }),
      backend_address_pool_ids: resource.field(self._.blocks, 'backend_address_pool_ids'),
      backend_port: resource.field(self._.blocks, 'backend_port'),
      disable_outbound_snat: resource.field(self._.blocks, 'disable_outbound_snat'),
      enable_floating_ip: resource.field(self._.blocks, 'enable_floating_ip'),
      enable_tcp_reset: resource.field(self._.blocks, 'enable_tcp_reset'),
      frontend_ip_configuration_id: resource.field(self._.blocks, 'frontend_ip_configuration_id'),
      frontend_ip_configuration_name: resource.field(self._.blocks, 'frontend_ip_configuration_name'),
      frontend_port: resource.field(self._.blocks, 'frontend_port'),
      id: resource.field(self._.blocks, 'id'),
      idle_timeout_in_minutes: resource.field(self._.blocks, 'idle_timeout_in_minutes'),
      load_distribution: resource.field(self._.blocks, 'load_distribution'),
      loadbalancer_id: resource.field(self._.blocks, 'loadbalancer_id'),
      name: resource.field(self._.blocks, 'name'),
      probe_id: resource.field(self._.blocks, 'probe_id'),
      protocol: resource.field(self._.blocks, 'protocol'),
    },
    lighthouse_assignment(name, block): {
      local resource = blockType.resource('azurerm_lighthouse_assignment', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        lighthouse_definition_id: build.template(block.lighthouse_definition_id),
        name: build.template(std.get(block, 'name', null)),
        scope: build.template(block.scope),
      }),
      id: resource.field(self._.blocks, 'id'),
      lighthouse_definition_id: resource.field(self._.blocks, 'lighthouse_definition_id'),
      name: resource.field(self._.blocks, 'name'),
      scope: resource.field(self._.blocks, 'scope'),
    },
    lighthouse_definition(name, block): {
      local resource = blockType.resource('azurerm_lighthouse_definition', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        lighthouse_definition_id: build.template(std.get(block, 'lighthouse_definition_id', null)),
        managing_tenant_id: build.template(block.managing_tenant_id),
        name: build.template(block.name),
        scope: build.template(block.scope),
      }),
      description: resource.field(self._.blocks, 'description'),
      id: resource.field(self._.blocks, 'id'),
      lighthouse_definition_id: resource.field(self._.blocks, 'lighthouse_definition_id'),
      managing_tenant_id: resource.field(self._.blocks, 'managing_tenant_id'),
      name: resource.field(self._.blocks, 'name'),
      scope: resource.field(self._.blocks, 'scope'),
    },
    linux_function_app(name, block): {
      local resource = blockType.resource('azurerm_linux_function_app', name),
      _: resource._(block, {
        app_settings: build.template(std.get(block, 'app_settings', null)),
        builtin_logging_enabled: build.template(std.get(block, 'builtin_logging_enabled', null)),
        client_certificate_enabled: build.template(std.get(block, 'client_certificate_enabled', null)),
        client_certificate_exclusion_paths: build.template(std.get(block, 'client_certificate_exclusion_paths', null)),
        client_certificate_mode: build.template(std.get(block, 'client_certificate_mode', null)),
        content_share_force_disabled: build.template(std.get(block, 'content_share_force_disabled', null)),
        custom_domain_verification_id: build.template(std.get(block, 'custom_domain_verification_id', null)),
        daily_memory_time_quota: build.template(std.get(block, 'daily_memory_time_quota', null)),
        default_hostname: build.template(std.get(block, 'default_hostname', null)),
        enabled: build.template(std.get(block, 'enabled', null)),
        ftp_publish_basic_authentication_enabled: build.template(std.get(block, 'ftp_publish_basic_authentication_enabled', null)),
        functions_extension_version: build.template(std.get(block, 'functions_extension_version', null)),
        hosting_environment_id: build.template(std.get(block, 'hosting_environment_id', null)),
        https_only: build.template(std.get(block, 'https_only', null)),
        id: build.template(std.get(block, 'id', null)),
        key_vault_reference_identity_id: build.template(std.get(block, 'key_vault_reference_identity_id', null)),
        kind: build.template(std.get(block, 'kind', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        outbound_ip_address_list: build.template(std.get(block, 'outbound_ip_address_list', null)),
        outbound_ip_addresses: build.template(std.get(block, 'outbound_ip_addresses', null)),
        possible_outbound_ip_address_list: build.template(std.get(block, 'possible_outbound_ip_address_list', null)),
        possible_outbound_ip_addresses: build.template(std.get(block, 'possible_outbound_ip_addresses', null)),
        public_network_access_enabled: build.template(std.get(block, 'public_network_access_enabled', null)),
        resource_group_name: build.template(block.resource_group_name),
        service_plan_id: build.template(block.service_plan_id),
        site_credential: build.template(std.get(block, 'site_credential', null)),
        storage_account_access_key: build.template(std.get(block, 'storage_account_access_key', null)),
        storage_account_name: build.template(std.get(block, 'storage_account_name', null)),
        storage_key_vault_secret_id: build.template(std.get(block, 'storage_key_vault_secret_id', null)),
        storage_uses_managed_identity: build.template(std.get(block, 'storage_uses_managed_identity', null)),
        tags: build.template(std.get(block, 'tags', null)),
        virtual_network_subnet_id: build.template(std.get(block, 'virtual_network_subnet_id', null)),
        vnet_image_pull_enabled: build.template(std.get(block, 'vnet_image_pull_enabled', null)),
        webdeploy_publish_basic_authentication_enabled: build.template(std.get(block, 'webdeploy_publish_basic_authentication_enabled', null)),
        zip_deploy_file: build.template(std.get(block, 'zip_deploy_file', null)),
      }),
      app_settings: resource.field(self._.blocks, 'app_settings'),
      builtin_logging_enabled: resource.field(self._.blocks, 'builtin_logging_enabled'),
      client_certificate_enabled: resource.field(self._.blocks, 'client_certificate_enabled'),
      client_certificate_exclusion_paths: resource.field(self._.blocks, 'client_certificate_exclusion_paths'),
      client_certificate_mode: resource.field(self._.blocks, 'client_certificate_mode'),
      content_share_force_disabled: resource.field(self._.blocks, 'content_share_force_disabled'),
      custom_domain_verification_id: resource.field(self._.blocks, 'custom_domain_verification_id'),
      daily_memory_time_quota: resource.field(self._.blocks, 'daily_memory_time_quota'),
      default_hostname: resource.field(self._.blocks, 'default_hostname'),
      enabled: resource.field(self._.blocks, 'enabled'),
      ftp_publish_basic_authentication_enabled: resource.field(self._.blocks, 'ftp_publish_basic_authentication_enabled'),
      functions_extension_version: resource.field(self._.blocks, 'functions_extension_version'),
      hosting_environment_id: resource.field(self._.blocks, 'hosting_environment_id'),
      https_only: resource.field(self._.blocks, 'https_only'),
      id: resource.field(self._.blocks, 'id'),
      key_vault_reference_identity_id: resource.field(self._.blocks, 'key_vault_reference_identity_id'),
      kind: resource.field(self._.blocks, 'kind'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      outbound_ip_address_list: resource.field(self._.blocks, 'outbound_ip_address_list'),
      outbound_ip_addresses: resource.field(self._.blocks, 'outbound_ip_addresses'),
      possible_outbound_ip_address_list: resource.field(self._.blocks, 'possible_outbound_ip_address_list'),
      possible_outbound_ip_addresses: resource.field(self._.blocks, 'possible_outbound_ip_addresses'),
      public_network_access_enabled: resource.field(self._.blocks, 'public_network_access_enabled'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      service_plan_id: resource.field(self._.blocks, 'service_plan_id'),
      site_credential: resource.field(self._.blocks, 'site_credential'),
      storage_account_access_key: resource.field(self._.blocks, 'storage_account_access_key'),
      storage_account_name: resource.field(self._.blocks, 'storage_account_name'),
      storage_key_vault_secret_id: resource.field(self._.blocks, 'storage_key_vault_secret_id'),
      storage_uses_managed_identity: resource.field(self._.blocks, 'storage_uses_managed_identity'),
      tags: resource.field(self._.blocks, 'tags'),
      virtual_network_subnet_id: resource.field(self._.blocks, 'virtual_network_subnet_id'),
      vnet_image_pull_enabled: resource.field(self._.blocks, 'vnet_image_pull_enabled'),
      webdeploy_publish_basic_authentication_enabled: resource.field(self._.blocks, 'webdeploy_publish_basic_authentication_enabled'),
      zip_deploy_file: resource.field(self._.blocks, 'zip_deploy_file'),
    },
    linux_function_app_slot(name, block): {
      local resource = blockType.resource('azurerm_linux_function_app_slot', name),
      _: resource._(block, {
        app_settings: build.template(std.get(block, 'app_settings', null)),
        builtin_logging_enabled: build.template(std.get(block, 'builtin_logging_enabled', null)),
        client_certificate_enabled: build.template(std.get(block, 'client_certificate_enabled', null)),
        client_certificate_exclusion_paths: build.template(std.get(block, 'client_certificate_exclusion_paths', null)),
        client_certificate_mode: build.template(std.get(block, 'client_certificate_mode', null)),
        content_share_force_disabled: build.template(std.get(block, 'content_share_force_disabled', null)),
        custom_domain_verification_id: build.template(std.get(block, 'custom_domain_verification_id', null)),
        daily_memory_time_quota: build.template(std.get(block, 'daily_memory_time_quota', null)),
        default_hostname: build.template(std.get(block, 'default_hostname', null)),
        enabled: build.template(std.get(block, 'enabled', null)),
        ftp_publish_basic_authentication_enabled: build.template(std.get(block, 'ftp_publish_basic_authentication_enabled', null)),
        function_app_id: build.template(block.function_app_id),
        functions_extension_version: build.template(std.get(block, 'functions_extension_version', null)),
        hosting_environment_id: build.template(std.get(block, 'hosting_environment_id', null)),
        https_only: build.template(std.get(block, 'https_only', null)),
        id: build.template(std.get(block, 'id', null)),
        key_vault_reference_identity_id: build.template(std.get(block, 'key_vault_reference_identity_id', null)),
        kind: build.template(std.get(block, 'kind', null)),
        name: build.template(block.name),
        outbound_ip_address_list: build.template(std.get(block, 'outbound_ip_address_list', null)),
        outbound_ip_addresses: build.template(std.get(block, 'outbound_ip_addresses', null)),
        possible_outbound_ip_address_list: build.template(std.get(block, 'possible_outbound_ip_address_list', null)),
        possible_outbound_ip_addresses: build.template(std.get(block, 'possible_outbound_ip_addresses', null)),
        public_network_access_enabled: build.template(std.get(block, 'public_network_access_enabled', null)),
        service_plan_id: build.template(std.get(block, 'service_plan_id', null)),
        site_credential: build.template(std.get(block, 'site_credential', null)),
        storage_account_access_key: build.template(std.get(block, 'storage_account_access_key', null)),
        storage_account_name: build.template(std.get(block, 'storage_account_name', null)),
        storage_key_vault_secret_id: build.template(std.get(block, 'storage_key_vault_secret_id', null)),
        storage_uses_managed_identity: build.template(std.get(block, 'storage_uses_managed_identity', null)),
        tags: build.template(std.get(block, 'tags', null)),
        virtual_network_subnet_id: build.template(std.get(block, 'virtual_network_subnet_id', null)),
        vnet_image_pull_enabled: build.template(std.get(block, 'vnet_image_pull_enabled', null)),
        webdeploy_publish_basic_authentication_enabled: build.template(std.get(block, 'webdeploy_publish_basic_authentication_enabled', null)),
      }),
      app_settings: resource.field(self._.blocks, 'app_settings'),
      builtin_logging_enabled: resource.field(self._.blocks, 'builtin_logging_enabled'),
      client_certificate_enabled: resource.field(self._.blocks, 'client_certificate_enabled'),
      client_certificate_exclusion_paths: resource.field(self._.blocks, 'client_certificate_exclusion_paths'),
      client_certificate_mode: resource.field(self._.blocks, 'client_certificate_mode'),
      content_share_force_disabled: resource.field(self._.blocks, 'content_share_force_disabled'),
      custom_domain_verification_id: resource.field(self._.blocks, 'custom_domain_verification_id'),
      daily_memory_time_quota: resource.field(self._.blocks, 'daily_memory_time_quota'),
      default_hostname: resource.field(self._.blocks, 'default_hostname'),
      enabled: resource.field(self._.blocks, 'enabled'),
      ftp_publish_basic_authentication_enabled: resource.field(self._.blocks, 'ftp_publish_basic_authentication_enabled'),
      function_app_id: resource.field(self._.blocks, 'function_app_id'),
      functions_extension_version: resource.field(self._.blocks, 'functions_extension_version'),
      hosting_environment_id: resource.field(self._.blocks, 'hosting_environment_id'),
      https_only: resource.field(self._.blocks, 'https_only'),
      id: resource.field(self._.blocks, 'id'),
      key_vault_reference_identity_id: resource.field(self._.blocks, 'key_vault_reference_identity_id'),
      kind: resource.field(self._.blocks, 'kind'),
      name: resource.field(self._.blocks, 'name'),
      outbound_ip_address_list: resource.field(self._.blocks, 'outbound_ip_address_list'),
      outbound_ip_addresses: resource.field(self._.blocks, 'outbound_ip_addresses'),
      possible_outbound_ip_address_list: resource.field(self._.blocks, 'possible_outbound_ip_address_list'),
      possible_outbound_ip_addresses: resource.field(self._.blocks, 'possible_outbound_ip_addresses'),
      public_network_access_enabled: resource.field(self._.blocks, 'public_network_access_enabled'),
      service_plan_id: resource.field(self._.blocks, 'service_plan_id'),
      site_credential: resource.field(self._.blocks, 'site_credential'),
      storage_account_access_key: resource.field(self._.blocks, 'storage_account_access_key'),
      storage_account_name: resource.field(self._.blocks, 'storage_account_name'),
      storage_key_vault_secret_id: resource.field(self._.blocks, 'storage_key_vault_secret_id'),
      storage_uses_managed_identity: resource.field(self._.blocks, 'storage_uses_managed_identity'),
      tags: resource.field(self._.blocks, 'tags'),
      virtual_network_subnet_id: resource.field(self._.blocks, 'virtual_network_subnet_id'),
      vnet_image_pull_enabled: resource.field(self._.blocks, 'vnet_image_pull_enabled'),
      webdeploy_publish_basic_authentication_enabled: resource.field(self._.blocks, 'webdeploy_publish_basic_authentication_enabled'),
    },
    linux_virtual_machine(name, block): {
      local resource = blockType.resource('azurerm_linux_virtual_machine', name),
      _: resource._(block, {
        admin_password: build.template(std.get(block, 'admin_password', null)),
        admin_username: build.template(block.admin_username),
        allow_extension_operations: build.template(std.get(block, 'allow_extension_operations', null)),
        availability_set_id: build.template(std.get(block, 'availability_set_id', null)),
        bypass_platform_safety_checks_on_user_schedule_enabled: build.template(std.get(block, 'bypass_platform_safety_checks_on_user_schedule_enabled', null)),
        capacity_reservation_group_id: build.template(std.get(block, 'capacity_reservation_group_id', null)),
        computer_name: build.template(std.get(block, 'computer_name', null)),
        custom_data: build.template(std.get(block, 'custom_data', null)),
        dedicated_host_group_id: build.template(std.get(block, 'dedicated_host_group_id', null)),
        dedicated_host_id: build.template(std.get(block, 'dedicated_host_id', null)),
        disable_password_authentication: build.template(std.get(block, 'disable_password_authentication', null)),
        disk_controller_type: build.template(std.get(block, 'disk_controller_type', null)),
        edge_zone: build.template(std.get(block, 'edge_zone', null)),
        encryption_at_host_enabled: build.template(std.get(block, 'encryption_at_host_enabled', null)),
        eviction_policy: build.template(std.get(block, 'eviction_policy', null)),
        extensions_time_budget: build.template(std.get(block, 'extensions_time_budget', null)),
        id: build.template(std.get(block, 'id', null)),
        license_type: build.template(std.get(block, 'license_type', null)),
        location: build.template(block.location),
        max_bid_price: build.template(std.get(block, 'max_bid_price', null)),
        name: build.template(block.name),
        network_interface_ids: build.template(block.network_interface_ids),
        patch_assessment_mode: build.template(std.get(block, 'patch_assessment_mode', null)),
        patch_mode: build.template(std.get(block, 'patch_mode', null)),
        platform_fault_domain: build.template(std.get(block, 'platform_fault_domain', null)),
        priority: build.template(std.get(block, 'priority', null)),
        private_ip_address: build.template(std.get(block, 'private_ip_address', null)),
        private_ip_addresses: build.template(std.get(block, 'private_ip_addresses', null)),
        provision_vm_agent: build.template(std.get(block, 'provision_vm_agent', null)),
        proximity_placement_group_id: build.template(std.get(block, 'proximity_placement_group_id', null)),
        public_ip_address: build.template(std.get(block, 'public_ip_address', null)),
        public_ip_addresses: build.template(std.get(block, 'public_ip_addresses', null)),
        reboot_setting: build.template(std.get(block, 'reboot_setting', null)),
        resource_group_name: build.template(block.resource_group_name),
        secure_boot_enabled: build.template(std.get(block, 'secure_boot_enabled', null)),
        size: build.template(block.size),
        source_image_id: build.template(std.get(block, 'source_image_id', null)),
        tags: build.template(std.get(block, 'tags', null)),
        user_data: build.template(std.get(block, 'user_data', null)),
        virtual_machine_id: build.template(std.get(block, 'virtual_machine_id', null)),
        virtual_machine_scale_set_id: build.template(std.get(block, 'virtual_machine_scale_set_id', null)),
        vm_agent_platform_updates_enabled: build.template(std.get(block, 'vm_agent_platform_updates_enabled', null)),
        vtpm_enabled: build.template(std.get(block, 'vtpm_enabled', null)),
        zone: build.template(std.get(block, 'zone', null)),
      }),
      admin_password: resource.field(self._.blocks, 'admin_password'),
      admin_username: resource.field(self._.blocks, 'admin_username'),
      allow_extension_operations: resource.field(self._.blocks, 'allow_extension_operations'),
      availability_set_id: resource.field(self._.blocks, 'availability_set_id'),
      bypass_platform_safety_checks_on_user_schedule_enabled: resource.field(self._.blocks, 'bypass_platform_safety_checks_on_user_schedule_enabled'),
      capacity_reservation_group_id: resource.field(self._.blocks, 'capacity_reservation_group_id'),
      computer_name: resource.field(self._.blocks, 'computer_name'),
      custom_data: resource.field(self._.blocks, 'custom_data'),
      dedicated_host_group_id: resource.field(self._.blocks, 'dedicated_host_group_id'),
      dedicated_host_id: resource.field(self._.blocks, 'dedicated_host_id'),
      disable_password_authentication: resource.field(self._.blocks, 'disable_password_authentication'),
      disk_controller_type: resource.field(self._.blocks, 'disk_controller_type'),
      edge_zone: resource.field(self._.blocks, 'edge_zone'),
      encryption_at_host_enabled: resource.field(self._.blocks, 'encryption_at_host_enabled'),
      eviction_policy: resource.field(self._.blocks, 'eviction_policy'),
      extensions_time_budget: resource.field(self._.blocks, 'extensions_time_budget'),
      id: resource.field(self._.blocks, 'id'),
      license_type: resource.field(self._.blocks, 'license_type'),
      location: resource.field(self._.blocks, 'location'),
      max_bid_price: resource.field(self._.blocks, 'max_bid_price'),
      name: resource.field(self._.blocks, 'name'),
      network_interface_ids: resource.field(self._.blocks, 'network_interface_ids'),
      patch_assessment_mode: resource.field(self._.blocks, 'patch_assessment_mode'),
      patch_mode: resource.field(self._.blocks, 'patch_mode'),
      platform_fault_domain: resource.field(self._.blocks, 'platform_fault_domain'),
      priority: resource.field(self._.blocks, 'priority'),
      private_ip_address: resource.field(self._.blocks, 'private_ip_address'),
      private_ip_addresses: resource.field(self._.blocks, 'private_ip_addresses'),
      provision_vm_agent: resource.field(self._.blocks, 'provision_vm_agent'),
      proximity_placement_group_id: resource.field(self._.blocks, 'proximity_placement_group_id'),
      public_ip_address: resource.field(self._.blocks, 'public_ip_address'),
      public_ip_addresses: resource.field(self._.blocks, 'public_ip_addresses'),
      reboot_setting: resource.field(self._.blocks, 'reboot_setting'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      secure_boot_enabled: resource.field(self._.blocks, 'secure_boot_enabled'),
      size: resource.field(self._.blocks, 'size'),
      source_image_id: resource.field(self._.blocks, 'source_image_id'),
      tags: resource.field(self._.blocks, 'tags'),
      user_data: resource.field(self._.blocks, 'user_data'),
      virtual_machine_id: resource.field(self._.blocks, 'virtual_machine_id'),
      virtual_machine_scale_set_id: resource.field(self._.blocks, 'virtual_machine_scale_set_id'),
      vm_agent_platform_updates_enabled: resource.field(self._.blocks, 'vm_agent_platform_updates_enabled'),
      vtpm_enabled: resource.field(self._.blocks, 'vtpm_enabled'),
      zone: resource.field(self._.blocks, 'zone'),
    },
    linux_virtual_machine_scale_set(name, block): {
      local resource = blockType.resource('azurerm_linux_virtual_machine_scale_set', name),
      _: resource._(block, {
        admin_password: build.template(std.get(block, 'admin_password', null)),
        admin_username: build.template(block.admin_username),
        capacity_reservation_group_id: build.template(std.get(block, 'capacity_reservation_group_id', null)),
        computer_name_prefix: build.template(std.get(block, 'computer_name_prefix', null)),
        custom_data: build.template(std.get(block, 'custom_data', null)),
        disable_password_authentication: build.template(std.get(block, 'disable_password_authentication', null)),
        do_not_run_extensions_on_overprovisioned_machines: build.template(std.get(block, 'do_not_run_extensions_on_overprovisioned_machines', null)),
        edge_zone: build.template(std.get(block, 'edge_zone', null)),
        encryption_at_host_enabled: build.template(std.get(block, 'encryption_at_host_enabled', null)),
        eviction_policy: build.template(std.get(block, 'eviction_policy', null)),
        extension_operations_enabled: build.template(std.get(block, 'extension_operations_enabled', null)),
        extensions_time_budget: build.template(std.get(block, 'extensions_time_budget', null)),
        health_probe_id: build.template(std.get(block, 'health_probe_id', null)),
        host_group_id: build.template(std.get(block, 'host_group_id', null)),
        id: build.template(std.get(block, 'id', null)),
        instances: build.template(std.get(block, 'instances', null)),
        location: build.template(block.location),
        max_bid_price: build.template(std.get(block, 'max_bid_price', null)),
        name: build.template(block.name),
        overprovision: build.template(std.get(block, 'overprovision', null)),
        platform_fault_domain_count: build.template(std.get(block, 'platform_fault_domain_count', null)),
        priority: build.template(std.get(block, 'priority', null)),
        provision_vm_agent: build.template(std.get(block, 'provision_vm_agent', null)),
        proximity_placement_group_id: build.template(std.get(block, 'proximity_placement_group_id', null)),
        resource_group_name: build.template(block.resource_group_name),
        secure_boot_enabled: build.template(std.get(block, 'secure_boot_enabled', null)),
        single_placement_group: build.template(std.get(block, 'single_placement_group', null)),
        sku: build.template(block.sku),
        source_image_id: build.template(std.get(block, 'source_image_id', null)),
        tags: build.template(std.get(block, 'tags', null)),
        unique_id: build.template(std.get(block, 'unique_id', null)),
        upgrade_mode: build.template(std.get(block, 'upgrade_mode', null)),
        user_data: build.template(std.get(block, 'user_data', null)),
        vtpm_enabled: build.template(std.get(block, 'vtpm_enabled', null)),
        zone_balance: build.template(std.get(block, 'zone_balance', null)),
        zones: build.template(std.get(block, 'zones', null)),
      }),
      admin_password: resource.field(self._.blocks, 'admin_password'),
      admin_username: resource.field(self._.blocks, 'admin_username'),
      capacity_reservation_group_id: resource.field(self._.blocks, 'capacity_reservation_group_id'),
      computer_name_prefix: resource.field(self._.blocks, 'computer_name_prefix'),
      custom_data: resource.field(self._.blocks, 'custom_data'),
      disable_password_authentication: resource.field(self._.blocks, 'disable_password_authentication'),
      do_not_run_extensions_on_overprovisioned_machines: resource.field(self._.blocks, 'do_not_run_extensions_on_overprovisioned_machines'),
      edge_zone: resource.field(self._.blocks, 'edge_zone'),
      encryption_at_host_enabled: resource.field(self._.blocks, 'encryption_at_host_enabled'),
      eviction_policy: resource.field(self._.blocks, 'eviction_policy'),
      extension_operations_enabled: resource.field(self._.blocks, 'extension_operations_enabled'),
      extensions_time_budget: resource.field(self._.blocks, 'extensions_time_budget'),
      health_probe_id: resource.field(self._.blocks, 'health_probe_id'),
      host_group_id: resource.field(self._.blocks, 'host_group_id'),
      id: resource.field(self._.blocks, 'id'),
      instances: resource.field(self._.blocks, 'instances'),
      location: resource.field(self._.blocks, 'location'),
      max_bid_price: resource.field(self._.blocks, 'max_bid_price'),
      name: resource.field(self._.blocks, 'name'),
      overprovision: resource.field(self._.blocks, 'overprovision'),
      platform_fault_domain_count: resource.field(self._.blocks, 'platform_fault_domain_count'),
      priority: resource.field(self._.blocks, 'priority'),
      provision_vm_agent: resource.field(self._.blocks, 'provision_vm_agent'),
      proximity_placement_group_id: resource.field(self._.blocks, 'proximity_placement_group_id'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      secure_boot_enabled: resource.field(self._.blocks, 'secure_boot_enabled'),
      single_placement_group: resource.field(self._.blocks, 'single_placement_group'),
      sku: resource.field(self._.blocks, 'sku'),
      source_image_id: resource.field(self._.blocks, 'source_image_id'),
      tags: resource.field(self._.blocks, 'tags'),
      unique_id: resource.field(self._.blocks, 'unique_id'),
      upgrade_mode: resource.field(self._.blocks, 'upgrade_mode'),
      user_data: resource.field(self._.blocks, 'user_data'),
      vtpm_enabled: resource.field(self._.blocks, 'vtpm_enabled'),
      zone_balance: resource.field(self._.blocks, 'zone_balance'),
      zones: resource.field(self._.blocks, 'zones'),
    },
    linux_web_app(name, block): {
      local resource = blockType.resource('azurerm_linux_web_app', name),
      _: resource._(block, {
        app_settings: build.template(std.get(block, 'app_settings', null)),
        client_affinity_enabled: build.template(std.get(block, 'client_affinity_enabled', null)),
        client_certificate_enabled: build.template(std.get(block, 'client_certificate_enabled', null)),
        client_certificate_exclusion_paths: build.template(std.get(block, 'client_certificate_exclusion_paths', null)),
        client_certificate_mode: build.template(std.get(block, 'client_certificate_mode', null)),
        custom_domain_verification_id: build.template(std.get(block, 'custom_domain_verification_id', null)),
        default_hostname: build.template(std.get(block, 'default_hostname', null)),
        enabled: build.template(std.get(block, 'enabled', null)),
        ftp_publish_basic_authentication_enabled: build.template(std.get(block, 'ftp_publish_basic_authentication_enabled', null)),
        hosting_environment_id: build.template(std.get(block, 'hosting_environment_id', null)),
        https_only: build.template(std.get(block, 'https_only', null)),
        id: build.template(std.get(block, 'id', null)),
        key_vault_reference_identity_id: build.template(std.get(block, 'key_vault_reference_identity_id', null)),
        kind: build.template(std.get(block, 'kind', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        outbound_ip_address_list: build.template(std.get(block, 'outbound_ip_address_list', null)),
        outbound_ip_addresses: build.template(std.get(block, 'outbound_ip_addresses', null)),
        possible_outbound_ip_address_list: build.template(std.get(block, 'possible_outbound_ip_address_list', null)),
        possible_outbound_ip_addresses: build.template(std.get(block, 'possible_outbound_ip_addresses', null)),
        public_network_access_enabled: build.template(std.get(block, 'public_network_access_enabled', null)),
        resource_group_name: build.template(block.resource_group_name),
        service_plan_id: build.template(block.service_plan_id),
        site_credential: build.template(std.get(block, 'site_credential', null)),
        tags: build.template(std.get(block, 'tags', null)),
        virtual_network_subnet_id: build.template(std.get(block, 'virtual_network_subnet_id', null)),
        webdeploy_publish_basic_authentication_enabled: build.template(std.get(block, 'webdeploy_publish_basic_authentication_enabled', null)),
        zip_deploy_file: build.template(std.get(block, 'zip_deploy_file', null)),
      }),
      app_settings: resource.field(self._.blocks, 'app_settings'),
      client_affinity_enabled: resource.field(self._.blocks, 'client_affinity_enabled'),
      client_certificate_enabled: resource.field(self._.blocks, 'client_certificate_enabled'),
      client_certificate_exclusion_paths: resource.field(self._.blocks, 'client_certificate_exclusion_paths'),
      client_certificate_mode: resource.field(self._.blocks, 'client_certificate_mode'),
      custom_domain_verification_id: resource.field(self._.blocks, 'custom_domain_verification_id'),
      default_hostname: resource.field(self._.blocks, 'default_hostname'),
      enabled: resource.field(self._.blocks, 'enabled'),
      ftp_publish_basic_authentication_enabled: resource.field(self._.blocks, 'ftp_publish_basic_authentication_enabled'),
      hosting_environment_id: resource.field(self._.blocks, 'hosting_environment_id'),
      https_only: resource.field(self._.blocks, 'https_only'),
      id: resource.field(self._.blocks, 'id'),
      key_vault_reference_identity_id: resource.field(self._.blocks, 'key_vault_reference_identity_id'),
      kind: resource.field(self._.blocks, 'kind'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      outbound_ip_address_list: resource.field(self._.blocks, 'outbound_ip_address_list'),
      outbound_ip_addresses: resource.field(self._.blocks, 'outbound_ip_addresses'),
      possible_outbound_ip_address_list: resource.field(self._.blocks, 'possible_outbound_ip_address_list'),
      possible_outbound_ip_addresses: resource.field(self._.blocks, 'possible_outbound_ip_addresses'),
      public_network_access_enabled: resource.field(self._.blocks, 'public_network_access_enabled'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      service_plan_id: resource.field(self._.blocks, 'service_plan_id'),
      site_credential: resource.field(self._.blocks, 'site_credential'),
      tags: resource.field(self._.blocks, 'tags'),
      virtual_network_subnet_id: resource.field(self._.blocks, 'virtual_network_subnet_id'),
      webdeploy_publish_basic_authentication_enabled: resource.field(self._.blocks, 'webdeploy_publish_basic_authentication_enabled'),
      zip_deploy_file: resource.field(self._.blocks, 'zip_deploy_file'),
    },
    linux_web_app_slot(name, block): {
      local resource = blockType.resource('azurerm_linux_web_app_slot', name),
      _: resource._(block, {
        app_metadata: build.template(std.get(block, 'app_metadata', null)),
        app_service_id: build.template(block.app_service_id),
        app_settings: build.template(std.get(block, 'app_settings', null)),
        client_affinity_enabled: build.template(std.get(block, 'client_affinity_enabled', null)),
        client_certificate_enabled: build.template(std.get(block, 'client_certificate_enabled', null)),
        client_certificate_exclusion_paths: build.template(std.get(block, 'client_certificate_exclusion_paths', null)),
        client_certificate_mode: build.template(std.get(block, 'client_certificate_mode', null)),
        custom_domain_verification_id: build.template(std.get(block, 'custom_domain_verification_id', null)),
        default_hostname: build.template(std.get(block, 'default_hostname', null)),
        enabled: build.template(std.get(block, 'enabled', null)),
        ftp_publish_basic_authentication_enabled: build.template(std.get(block, 'ftp_publish_basic_authentication_enabled', null)),
        hosting_environment_id: build.template(std.get(block, 'hosting_environment_id', null)),
        https_only: build.template(std.get(block, 'https_only', null)),
        id: build.template(std.get(block, 'id', null)),
        key_vault_reference_identity_id: build.template(std.get(block, 'key_vault_reference_identity_id', null)),
        kind: build.template(std.get(block, 'kind', null)),
        name: build.template(block.name),
        outbound_ip_address_list: build.template(std.get(block, 'outbound_ip_address_list', null)),
        outbound_ip_addresses: build.template(std.get(block, 'outbound_ip_addresses', null)),
        possible_outbound_ip_address_list: build.template(std.get(block, 'possible_outbound_ip_address_list', null)),
        possible_outbound_ip_addresses: build.template(std.get(block, 'possible_outbound_ip_addresses', null)),
        public_network_access_enabled: build.template(std.get(block, 'public_network_access_enabled', null)),
        service_plan_id: build.template(std.get(block, 'service_plan_id', null)),
        site_credential: build.template(std.get(block, 'site_credential', null)),
        tags: build.template(std.get(block, 'tags', null)),
        virtual_network_subnet_id: build.template(std.get(block, 'virtual_network_subnet_id', null)),
        webdeploy_publish_basic_authentication_enabled: build.template(std.get(block, 'webdeploy_publish_basic_authentication_enabled', null)),
        zip_deploy_file: build.template(std.get(block, 'zip_deploy_file', null)),
      }),
      app_metadata: resource.field(self._.blocks, 'app_metadata'),
      app_service_id: resource.field(self._.blocks, 'app_service_id'),
      app_settings: resource.field(self._.blocks, 'app_settings'),
      client_affinity_enabled: resource.field(self._.blocks, 'client_affinity_enabled'),
      client_certificate_enabled: resource.field(self._.blocks, 'client_certificate_enabled'),
      client_certificate_exclusion_paths: resource.field(self._.blocks, 'client_certificate_exclusion_paths'),
      client_certificate_mode: resource.field(self._.blocks, 'client_certificate_mode'),
      custom_domain_verification_id: resource.field(self._.blocks, 'custom_domain_verification_id'),
      default_hostname: resource.field(self._.blocks, 'default_hostname'),
      enabled: resource.field(self._.blocks, 'enabled'),
      ftp_publish_basic_authentication_enabled: resource.field(self._.blocks, 'ftp_publish_basic_authentication_enabled'),
      hosting_environment_id: resource.field(self._.blocks, 'hosting_environment_id'),
      https_only: resource.field(self._.blocks, 'https_only'),
      id: resource.field(self._.blocks, 'id'),
      key_vault_reference_identity_id: resource.field(self._.blocks, 'key_vault_reference_identity_id'),
      kind: resource.field(self._.blocks, 'kind'),
      name: resource.field(self._.blocks, 'name'),
      outbound_ip_address_list: resource.field(self._.blocks, 'outbound_ip_address_list'),
      outbound_ip_addresses: resource.field(self._.blocks, 'outbound_ip_addresses'),
      possible_outbound_ip_address_list: resource.field(self._.blocks, 'possible_outbound_ip_address_list'),
      possible_outbound_ip_addresses: resource.field(self._.blocks, 'possible_outbound_ip_addresses'),
      public_network_access_enabled: resource.field(self._.blocks, 'public_network_access_enabled'),
      service_plan_id: resource.field(self._.blocks, 'service_plan_id'),
      site_credential: resource.field(self._.blocks, 'site_credential'),
      tags: resource.field(self._.blocks, 'tags'),
      virtual_network_subnet_id: resource.field(self._.blocks, 'virtual_network_subnet_id'),
      webdeploy_publish_basic_authentication_enabled: resource.field(self._.blocks, 'webdeploy_publish_basic_authentication_enabled'),
      zip_deploy_file: resource.field(self._.blocks, 'zip_deploy_file'),
    },
    load_test(name, block): {
      local resource = blockType.resource('azurerm_load_test', name),
      _: resource._(block, {
        data_plane_uri: build.template(std.get(block, 'data_plane_uri', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      data_plane_uri: resource.field(self._.blocks, 'data_plane_uri'),
      description: resource.field(self._.blocks, 'description'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    local_network_gateway(name, block): {
      local resource = blockType.resource('azurerm_local_network_gateway', name),
      _: resource._(block, {
        address_space: build.template(std.get(block, 'address_space', null)),
        gateway_address: build.template(std.get(block, 'gateway_address', null)),
        gateway_fqdn: build.template(std.get(block, 'gateway_fqdn', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      address_space: resource.field(self._.blocks, 'address_space'),
      gateway_address: resource.field(self._.blocks, 'gateway_address'),
      gateway_fqdn: resource.field(self._.blocks, 'gateway_fqdn'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    log_analytics_cluster(name, block): {
      local resource = blockType.resource('azurerm_log_analytics_cluster', name),
      _: resource._(block, {
        cluster_id: build.template(std.get(block, 'cluster_id', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        size_gb: build.template(std.get(block, 'size_gb', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      cluster_id: resource.field(self._.blocks, 'cluster_id'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      size_gb: resource.field(self._.blocks, 'size_gb'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    log_analytics_cluster_customer_managed_key(name, block): {
      local resource = blockType.resource('azurerm_log_analytics_cluster_customer_managed_key', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        key_vault_key_id: build.template(block.key_vault_key_id),
        log_analytics_cluster_id: build.template(block.log_analytics_cluster_id),
      }),
      id: resource.field(self._.blocks, 'id'),
      key_vault_key_id: resource.field(self._.blocks, 'key_vault_key_id'),
      log_analytics_cluster_id: resource.field(self._.blocks, 'log_analytics_cluster_id'),
    },
    log_analytics_data_export_rule(name, block): {
      local resource = blockType.resource('azurerm_log_analytics_data_export_rule', name),
      _: resource._(block, {
        destination_resource_id: build.template(block.destination_resource_id),
        enabled: build.template(std.get(block, 'enabled', null)),
        export_rule_id: build.template(std.get(block, 'export_rule_id', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        table_names: build.template(block.table_names),
        workspace_resource_id: build.template(block.workspace_resource_id),
      }),
      destination_resource_id: resource.field(self._.blocks, 'destination_resource_id'),
      enabled: resource.field(self._.blocks, 'enabled'),
      export_rule_id: resource.field(self._.blocks, 'export_rule_id'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      table_names: resource.field(self._.blocks, 'table_names'),
      workspace_resource_id: resource.field(self._.blocks, 'workspace_resource_id'),
    },
    log_analytics_datasource_windows_event(name, block): {
      local resource = blockType.resource('azurerm_log_analytics_datasource_windows_event', name),
      _: resource._(block, {
        event_log_name: build.template(block.event_log_name),
        event_types: build.template(block.event_types),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        workspace_name: build.template(block.workspace_name),
      }),
      event_log_name: resource.field(self._.blocks, 'event_log_name'),
      event_types: resource.field(self._.blocks, 'event_types'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      workspace_name: resource.field(self._.blocks, 'workspace_name'),
    },
    log_analytics_datasource_windows_performance_counter(name, block): {
      local resource = blockType.resource('azurerm_log_analytics_datasource_windows_performance_counter', name),
      _: resource._(block, {
        counter_name: build.template(block.counter_name),
        id: build.template(std.get(block, 'id', null)),
        instance_name: build.template(block.instance_name),
        interval_seconds: build.template(block.interval_seconds),
        name: build.template(block.name),
        object_name: build.template(block.object_name),
        resource_group_name: build.template(block.resource_group_name),
        workspace_name: build.template(block.workspace_name),
      }),
      counter_name: resource.field(self._.blocks, 'counter_name'),
      id: resource.field(self._.blocks, 'id'),
      instance_name: resource.field(self._.blocks, 'instance_name'),
      interval_seconds: resource.field(self._.blocks, 'interval_seconds'),
      name: resource.field(self._.blocks, 'name'),
      object_name: resource.field(self._.blocks, 'object_name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      workspace_name: resource.field(self._.blocks, 'workspace_name'),
    },
    log_analytics_linked_service(name, block): {
      local resource = blockType.resource('azurerm_log_analytics_linked_service', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        read_access_id: build.template(std.get(block, 'read_access_id', null)),
        resource_group_name: build.template(block.resource_group_name),
        workspace_id: build.template(block.workspace_id),
        write_access_id: build.template(std.get(block, 'write_access_id', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      read_access_id: resource.field(self._.blocks, 'read_access_id'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      workspace_id: resource.field(self._.blocks, 'workspace_id'),
      write_access_id: resource.field(self._.blocks, 'write_access_id'),
    },
    log_analytics_linked_storage_account(name, block): {
      local resource = blockType.resource('azurerm_log_analytics_linked_storage_account', name),
      _: resource._(block, {
        data_source_type: build.template(block.data_source_type),
        id: build.template(std.get(block, 'id', null)),
        resource_group_name: build.template(block.resource_group_name),
        storage_account_ids: build.template(block.storage_account_ids),
        workspace_resource_id: build.template(block.workspace_resource_id),
      }),
      data_source_type: resource.field(self._.blocks, 'data_source_type'),
      id: resource.field(self._.blocks, 'id'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      storage_account_ids: resource.field(self._.blocks, 'storage_account_ids'),
      workspace_resource_id: resource.field(self._.blocks, 'workspace_resource_id'),
    },
    log_analytics_query_pack(name, block): {
      local resource = blockType.resource('azurerm_log_analytics_query_pack', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    log_analytics_query_pack_query(name, block): {
      local resource = blockType.resource('azurerm_log_analytics_query_pack_query', name),
      _: resource._(block, {
        additional_settings_json: build.template(std.get(block, 'additional_settings_json', null)),
        body: build.template(block.body),
        categories: build.template(std.get(block, 'categories', null)),
        description: build.template(std.get(block, 'description', null)),
        display_name: build.template(block.display_name),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        query_pack_id: build.template(block.query_pack_id),
        resource_types: build.template(std.get(block, 'resource_types', null)),
        solutions: build.template(std.get(block, 'solutions', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      additional_settings_json: resource.field(self._.blocks, 'additional_settings_json'),
      body: resource.field(self._.blocks, 'body'),
      categories: resource.field(self._.blocks, 'categories'),
      description: resource.field(self._.blocks, 'description'),
      display_name: resource.field(self._.blocks, 'display_name'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      query_pack_id: resource.field(self._.blocks, 'query_pack_id'),
      resource_types: resource.field(self._.blocks, 'resource_types'),
      solutions: resource.field(self._.blocks, 'solutions'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    log_analytics_saved_search(name, block): {
      local resource = blockType.resource('azurerm_log_analytics_saved_search', name),
      _: resource._(block, {
        category: build.template(block.category),
        display_name: build.template(block.display_name),
        function_alias: build.template(std.get(block, 'function_alias', null)),
        function_parameters: build.template(std.get(block, 'function_parameters', null)),
        id: build.template(std.get(block, 'id', null)),
        log_analytics_workspace_id: build.template(block.log_analytics_workspace_id),
        name: build.template(block.name),
        query: build.template(block.query),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      category: resource.field(self._.blocks, 'category'),
      display_name: resource.field(self._.blocks, 'display_name'),
      function_alias: resource.field(self._.blocks, 'function_alias'),
      function_parameters: resource.field(self._.blocks, 'function_parameters'),
      id: resource.field(self._.blocks, 'id'),
      log_analytics_workspace_id: resource.field(self._.blocks, 'log_analytics_workspace_id'),
      name: resource.field(self._.blocks, 'name'),
      query: resource.field(self._.blocks, 'query'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    log_analytics_solution(name, block): {
      local resource = blockType.resource('azurerm_log_analytics_solution', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        resource_group_name: build.template(block.resource_group_name),
        solution_name: build.template(block.solution_name),
        tags: build.template(std.get(block, 'tags', null)),
        workspace_name: build.template(block.workspace_name),
        workspace_resource_id: build.template(block.workspace_resource_id),
      }),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      solution_name: resource.field(self._.blocks, 'solution_name'),
      tags: resource.field(self._.blocks, 'tags'),
      workspace_name: resource.field(self._.blocks, 'workspace_name'),
      workspace_resource_id: resource.field(self._.blocks, 'workspace_resource_id'),
    },
    log_analytics_storage_insights(name, block): {
      local resource = blockType.resource('azurerm_log_analytics_storage_insights', name),
      _: resource._(block, {
        blob_container_names: build.template(std.get(block, 'blob_container_names', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        storage_account_id: build.template(block.storage_account_id),
        storage_account_key: build.template(block.storage_account_key),
        table_names: build.template(std.get(block, 'table_names', null)),
        workspace_id: build.template(block.workspace_id),
      }),
      blob_container_names: resource.field(self._.blocks, 'blob_container_names'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      storage_account_id: resource.field(self._.blocks, 'storage_account_id'),
      storage_account_key: resource.field(self._.blocks, 'storage_account_key'),
      table_names: resource.field(self._.blocks, 'table_names'),
      workspace_id: resource.field(self._.blocks, 'workspace_id'),
    },
    log_analytics_workspace(name, block): {
      local resource = blockType.resource('azurerm_log_analytics_workspace', name),
      _: resource._(block, {
        allow_resource_only_permissions: build.template(std.get(block, 'allow_resource_only_permissions', null)),
        cmk_for_query_forced: build.template(std.get(block, 'cmk_for_query_forced', null)),
        daily_quota_gb: build.template(std.get(block, 'daily_quota_gb', null)),
        data_collection_rule_id: build.template(std.get(block, 'data_collection_rule_id', null)),
        id: build.template(std.get(block, 'id', null)),
        immediate_data_purge_on_30_days_enabled: build.template(std.get(block, 'immediate_data_purge_on_30_days_enabled', null)),
        internet_ingestion_enabled: build.template(std.get(block, 'internet_ingestion_enabled', null)),
        internet_query_enabled: build.template(std.get(block, 'internet_query_enabled', null)),
        local_authentication_disabled: build.template(std.get(block, 'local_authentication_disabled', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        primary_shared_key: build.template(std.get(block, 'primary_shared_key', null)),
        reservation_capacity_in_gb_per_day: build.template(std.get(block, 'reservation_capacity_in_gb_per_day', null)),
        resource_group_name: build.template(block.resource_group_name),
        retention_in_days: build.template(std.get(block, 'retention_in_days', null)),
        secondary_shared_key: build.template(std.get(block, 'secondary_shared_key', null)),
        sku: build.template(std.get(block, 'sku', null)),
        tags: build.template(std.get(block, 'tags', null)),
        workspace_id: build.template(std.get(block, 'workspace_id', null)),
      }),
      allow_resource_only_permissions: resource.field(self._.blocks, 'allow_resource_only_permissions'),
      cmk_for_query_forced: resource.field(self._.blocks, 'cmk_for_query_forced'),
      daily_quota_gb: resource.field(self._.blocks, 'daily_quota_gb'),
      data_collection_rule_id: resource.field(self._.blocks, 'data_collection_rule_id'),
      id: resource.field(self._.blocks, 'id'),
      immediate_data_purge_on_30_days_enabled: resource.field(self._.blocks, 'immediate_data_purge_on_30_days_enabled'),
      internet_ingestion_enabled: resource.field(self._.blocks, 'internet_ingestion_enabled'),
      internet_query_enabled: resource.field(self._.blocks, 'internet_query_enabled'),
      local_authentication_disabled: resource.field(self._.blocks, 'local_authentication_disabled'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      primary_shared_key: resource.field(self._.blocks, 'primary_shared_key'),
      reservation_capacity_in_gb_per_day: resource.field(self._.blocks, 'reservation_capacity_in_gb_per_day'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      retention_in_days: resource.field(self._.blocks, 'retention_in_days'),
      secondary_shared_key: resource.field(self._.blocks, 'secondary_shared_key'),
      sku: resource.field(self._.blocks, 'sku'),
      tags: resource.field(self._.blocks, 'tags'),
      workspace_id: resource.field(self._.blocks, 'workspace_id'),
    },
    log_analytics_workspace_table(name, block): {
      local resource = blockType.resource('azurerm_log_analytics_workspace_table', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        plan: build.template(std.get(block, 'plan', null)),
        retention_in_days: build.template(std.get(block, 'retention_in_days', null)),
        total_retention_in_days: build.template(std.get(block, 'total_retention_in_days', null)),
        workspace_id: build.template(block.workspace_id),
      }),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      plan: resource.field(self._.blocks, 'plan'),
      retention_in_days: resource.field(self._.blocks, 'retention_in_days'),
      total_retention_in_days: resource.field(self._.blocks, 'total_retention_in_days'),
      workspace_id: resource.field(self._.blocks, 'workspace_id'),
    },
    logic_app_action_custom(name, block): {
      local resource = blockType.resource('azurerm_logic_app_action_custom', name),
      _: resource._(block, {
        body: build.template(block.body),
        id: build.template(std.get(block, 'id', null)),
        logic_app_id: build.template(block.logic_app_id),
        name: build.template(block.name),
      }),
      body: resource.field(self._.blocks, 'body'),
      id: resource.field(self._.blocks, 'id'),
      logic_app_id: resource.field(self._.blocks, 'logic_app_id'),
      name: resource.field(self._.blocks, 'name'),
    },
    logic_app_action_http(name, block): {
      local resource = blockType.resource('azurerm_logic_app_action_http', name),
      _: resource._(block, {
        body: build.template(std.get(block, 'body', null)),
        headers: build.template(std.get(block, 'headers', null)),
        id: build.template(std.get(block, 'id', null)),
        logic_app_id: build.template(block.logic_app_id),
        method: build.template(block.method),
        name: build.template(block.name),
        queries: build.template(std.get(block, 'queries', null)),
        uri: build.template(block.uri),
      }),
      body: resource.field(self._.blocks, 'body'),
      headers: resource.field(self._.blocks, 'headers'),
      id: resource.field(self._.blocks, 'id'),
      logic_app_id: resource.field(self._.blocks, 'logic_app_id'),
      method: resource.field(self._.blocks, 'method'),
      name: resource.field(self._.blocks, 'name'),
      queries: resource.field(self._.blocks, 'queries'),
      uri: resource.field(self._.blocks, 'uri'),
    },
    logic_app_integration_account(name, block): {
      local resource = blockType.resource('azurerm_logic_app_integration_account', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        integration_service_environment_id: build.template(std.get(block, 'integration_service_environment_id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        sku_name: build.template(block.sku_name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      integration_service_environment_id: resource.field(self._.blocks, 'integration_service_environment_id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      sku_name: resource.field(self._.blocks, 'sku_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    logic_app_integration_account_agreement(name, block): {
      local resource = blockType.resource('azurerm_logic_app_integration_account_agreement', name),
      _: resource._(block, {
        agreement_type: build.template(block.agreement_type),
        content: build.template(block.content),
        guest_partner_name: build.template(block.guest_partner_name),
        host_partner_name: build.template(block.host_partner_name),
        id: build.template(std.get(block, 'id', null)),
        integration_account_name: build.template(block.integration_account_name),
        metadata: build.template(std.get(block, 'metadata', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
      }),
      agreement_type: resource.field(self._.blocks, 'agreement_type'),
      content: resource.field(self._.blocks, 'content'),
      guest_partner_name: resource.field(self._.blocks, 'guest_partner_name'),
      host_partner_name: resource.field(self._.blocks, 'host_partner_name'),
      id: resource.field(self._.blocks, 'id'),
      integration_account_name: resource.field(self._.blocks, 'integration_account_name'),
      metadata: resource.field(self._.blocks, 'metadata'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
    },
    logic_app_integration_account_assembly(name, block): {
      local resource = blockType.resource('azurerm_logic_app_integration_account_assembly', name),
      _: resource._(block, {
        assembly_name: build.template(block.assembly_name),
        assembly_version: build.template(std.get(block, 'assembly_version', null)),
        content: build.template(std.get(block, 'content', null)),
        content_link_uri: build.template(std.get(block, 'content_link_uri', null)),
        id: build.template(std.get(block, 'id', null)),
        integration_account_name: build.template(block.integration_account_name),
        metadata: build.template(std.get(block, 'metadata', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
      }),
      assembly_name: resource.field(self._.blocks, 'assembly_name'),
      assembly_version: resource.field(self._.blocks, 'assembly_version'),
      content: resource.field(self._.blocks, 'content'),
      content_link_uri: resource.field(self._.blocks, 'content_link_uri'),
      id: resource.field(self._.blocks, 'id'),
      integration_account_name: resource.field(self._.blocks, 'integration_account_name'),
      metadata: resource.field(self._.blocks, 'metadata'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
    },
    logic_app_integration_account_batch_configuration(name, block): {
      local resource = blockType.resource('azurerm_logic_app_integration_account_batch_configuration', name),
      _: resource._(block, {
        batch_group_name: build.template(block.batch_group_name),
        id: build.template(std.get(block, 'id', null)),
        integration_account_name: build.template(block.integration_account_name),
        metadata: build.template(std.get(block, 'metadata', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
      }),
      batch_group_name: resource.field(self._.blocks, 'batch_group_name'),
      id: resource.field(self._.blocks, 'id'),
      integration_account_name: resource.field(self._.blocks, 'integration_account_name'),
      metadata: resource.field(self._.blocks, 'metadata'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
    },
    logic_app_integration_account_certificate(name, block): {
      local resource = blockType.resource('azurerm_logic_app_integration_account_certificate', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        integration_account_name: build.template(block.integration_account_name),
        metadata: build.template(std.get(block, 'metadata', null)),
        name: build.template(block.name),
        public_certificate: build.template(std.get(block, 'public_certificate', null)),
        resource_group_name: build.template(block.resource_group_name),
      }),
      id: resource.field(self._.blocks, 'id'),
      integration_account_name: resource.field(self._.blocks, 'integration_account_name'),
      metadata: resource.field(self._.blocks, 'metadata'),
      name: resource.field(self._.blocks, 'name'),
      public_certificate: resource.field(self._.blocks, 'public_certificate'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
    },
    logic_app_integration_account_map(name, block): {
      local resource = blockType.resource('azurerm_logic_app_integration_account_map', name),
      _: resource._(block, {
        content: build.template(block.content),
        id: build.template(std.get(block, 'id', null)),
        integration_account_name: build.template(block.integration_account_name),
        map_type: build.template(block.map_type),
        metadata: build.template(std.get(block, 'metadata', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
      }),
      content: resource.field(self._.blocks, 'content'),
      id: resource.field(self._.blocks, 'id'),
      integration_account_name: resource.field(self._.blocks, 'integration_account_name'),
      map_type: resource.field(self._.blocks, 'map_type'),
      metadata: resource.field(self._.blocks, 'metadata'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
    },
    logic_app_integration_account_partner(name, block): {
      local resource = blockType.resource('azurerm_logic_app_integration_account_partner', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        integration_account_name: build.template(block.integration_account_name),
        metadata: build.template(std.get(block, 'metadata', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
      }),
      id: resource.field(self._.blocks, 'id'),
      integration_account_name: resource.field(self._.blocks, 'integration_account_name'),
      metadata: resource.field(self._.blocks, 'metadata'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
    },
    logic_app_integration_account_schema(name, block): {
      local resource = blockType.resource('azurerm_logic_app_integration_account_schema', name),
      _: resource._(block, {
        content: build.template(block.content),
        file_name: build.template(std.get(block, 'file_name', null)),
        id: build.template(std.get(block, 'id', null)),
        integration_account_name: build.template(block.integration_account_name),
        metadata: build.template(std.get(block, 'metadata', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
      }),
      content: resource.field(self._.blocks, 'content'),
      file_name: resource.field(self._.blocks, 'file_name'),
      id: resource.field(self._.blocks, 'id'),
      integration_account_name: resource.field(self._.blocks, 'integration_account_name'),
      metadata: resource.field(self._.blocks, 'metadata'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
    },
    logic_app_integration_account_session(name, block): {
      local resource = blockType.resource('azurerm_logic_app_integration_account_session', name),
      _: resource._(block, {
        content: build.template(block.content),
        id: build.template(std.get(block, 'id', null)),
        integration_account_name: build.template(block.integration_account_name),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
      }),
      content: resource.field(self._.blocks, 'content'),
      id: resource.field(self._.blocks, 'id'),
      integration_account_name: resource.field(self._.blocks, 'integration_account_name'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
    },
    logic_app_standard(name, block): {
      local resource = blockType.resource('azurerm_logic_app_standard', name),
      _: resource._(block, {
        app_service_plan_id: build.template(block.app_service_plan_id),
        app_settings: build.template(std.get(block, 'app_settings', null)),
        bundle_version: build.template(std.get(block, 'bundle_version', null)),
        client_affinity_enabled: build.template(std.get(block, 'client_affinity_enabled', null)),
        client_certificate_mode: build.template(std.get(block, 'client_certificate_mode', null)),
        custom_domain_verification_id: build.template(std.get(block, 'custom_domain_verification_id', null)),
        default_hostname: build.template(std.get(block, 'default_hostname', null)),
        enabled: build.template(std.get(block, 'enabled', null)),
        ftp_publish_basic_authentication_enabled: build.template(std.get(block, 'ftp_publish_basic_authentication_enabled', null)),
        https_only: build.template(std.get(block, 'https_only', null)),
        id: build.template(std.get(block, 'id', null)),
        kind: build.template(std.get(block, 'kind', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        outbound_ip_addresses: build.template(std.get(block, 'outbound_ip_addresses', null)),
        possible_outbound_ip_addresses: build.template(std.get(block, 'possible_outbound_ip_addresses', null)),
        public_network_access: build.template(std.get(block, 'public_network_access', null)),
        resource_group_name: build.template(block.resource_group_name),
        scm_publish_basic_authentication_enabled: build.template(std.get(block, 'scm_publish_basic_authentication_enabled', null)),
        site_credential: build.template(std.get(block, 'site_credential', null)),
        storage_account_access_key: build.template(block.storage_account_access_key),
        storage_account_name: build.template(block.storage_account_name),
        storage_account_share_name: build.template(std.get(block, 'storage_account_share_name', null)),
        tags: build.template(std.get(block, 'tags', null)),
        use_extension_bundle: build.template(std.get(block, 'use_extension_bundle', null)),
        version: build.template(std.get(block, 'version', null)),
        virtual_network_subnet_id: build.template(std.get(block, 'virtual_network_subnet_id', null)),
        vnet_content_share_enabled: build.template(std.get(block, 'vnet_content_share_enabled', null)),
      }),
      app_service_plan_id: resource.field(self._.blocks, 'app_service_plan_id'),
      app_settings: resource.field(self._.blocks, 'app_settings'),
      bundle_version: resource.field(self._.blocks, 'bundle_version'),
      client_affinity_enabled: resource.field(self._.blocks, 'client_affinity_enabled'),
      client_certificate_mode: resource.field(self._.blocks, 'client_certificate_mode'),
      custom_domain_verification_id: resource.field(self._.blocks, 'custom_domain_verification_id'),
      default_hostname: resource.field(self._.blocks, 'default_hostname'),
      enabled: resource.field(self._.blocks, 'enabled'),
      ftp_publish_basic_authentication_enabled: resource.field(self._.blocks, 'ftp_publish_basic_authentication_enabled'),
      https_only: resource.field(self._.blocks, 'https_only'),
      id: resource.field(self._.blocks, 'id'),
      kind: resource.field(self._.blocks, 'kind'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      outbound_ip_addresses: resource.field(self._.blocks, 'outbound_ip_addresses'),
      possible_outbound_ip_addresses: resource.field(self._.blocks, 'possible_outbound_ip_addresses'),
      public_network_access: resource.field(self._.blocks, 'public_network_access'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      scm_publish_basic_authentication_enabled: resource.field(self._.blocks, 'scm_publish_basic_authentication_enabled'),
      site_credential: resource.field(self._.blocks, 'site_credential'),
      storage_account_access_key: resource.field(self._.blocks, 'storage_account_access_key'),
      storage_account_name: resource.field(self._.blocks, 'storage_account_name'),
      storage_account_share_name: resource.field(self._.blocks, 'storage_account_share_name'),
      tags: resource.field(self._.blocks, 'tags'),
      use_extension_bundle: resource.field(self._.blocks, 'use_extension_bundle'),
      version: resource.field(self._.blocks, 'version'),
      virtual_network_subnet_id: resource.field(self._.blocks, 'virtual_network_subnet_id'),
      vnet_content_share_enabled: resource.field(self._.blocks, 'vnet_content_share_enabled'),
    },
    logic_app_trigger_custom(name, block): {
      local resource = blockType.resource('azurerm_logic_app_trigger_custom', name),
      _: resource._(block, {
        body: build.template(block.body),
        callback_url: build.template(std.get(block, 'callback_url', null)),
        id: build.template(std.get(block, 'id', null)),
        logic_app_id: build.template(block.logic_app_id),
        name: build.template(block.name),
      }),
      body: resource.field(self._.blocks, 'body'),
      callback_url: resource.field(self._.blocks, 'callback_url'),
      id: resource.field(self._.blocks, 'id'),
      logic_app_id: resource.field(self._.blocks, 'logic_app_id'),
      name: resource.field(self._.blocks, 'name'),
    },
    logic_app_trigger_http_request(name, block): {
      local resource = blockType.resource('azurerm_logic_app_trigger_http_request', name),
      _: resource._(block, {
        callback_url: build.template(std.get(block, 'callback_url', null)),
        id: build.template(std.get(block, 'id', null)),
        logic_app_id: build.template(block.logic_app_id),
        method: build.template(std.get(block, 'method', null)),
        name: build.template(block.name),
        relative_path: build.template(std.get(block, 'relative_path', null)),
        schema: build.template(block.schema),
      }),
      callback_url: resource.field(self._.blocks, 'callback_url'),
      id: resource.field(self._.blocks, 'id'),
      logic_app_id: resource.field(self._.blocks, 'logic_app_id'),
      method: resource.field(self._.blocks, 'method'),
      name: resource.field(self._.blocks, 'name'),
      relative_path: resource.field(self._.blocks, 'relative_path'),
      schema: resource.field(self._.blocks, 'schema'),
    },
    logic_app_trigger_recurrence(name, block): {
      local resource = blockType.resource('azurerm_logic_app_trigger_recurrence', name),
      _: resource._(block, {
        frequency: build.template(block.frequency),
        id: build.template(std.get(block, 'id', null)),
        interval: build.template(block.interval),
        logic_app_id: build.template(block.logic_app_id),
        name: build.template(block.name),
        start_time: build.template(std.get(block, 'start_time', null)),
        time_zone: build.template(std.get(block, 'time_zone', null)),
      }),
      frequency: resource.field(self._.blocks, 'frequency'),
      id: resource.field(self._.blocks, 'id'),
      interval: resource.field(self._.blocks, 'interval'),
      logic_app_id: resource.field(self._.blocks, 'logic_app_id'),
      name: resource.field(self._.blocks, 'name'),
      start_time: resource.field(self._.blocks, 'start_time'),
      time_zone: resource.field(self._.blocks, 'time_zone'),
    },
    logic_app_workflow(name, block): {
      local resource = blockType.resource('azurerm_logic_app_workflow', name),
      _: resource._(block, {
        access_endpoint: build.template(std.get(block, 'access_endpoint', null)),
        connector_endpoint_ip_addresses: build.template(std.get(block, 'connector_endpoint_ip_addresses', null)),
        connector_outbound_ip_addresses: build.template(std.get(block, 'connector_outbound_ip_addresses', null)),
        enabled: build.template(std.get(block, 'enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        integration_service_environment_id: build.template(std.get(block, 'integration_service_environment_id', null)),
        location: build.template(block.location),
        logic_app_integration_account_id: build.template(std.get(block, 'logic_app_integration_account_id', null)),
        name: build.template(block.name),
        parameters: build.template(std.get(block, 'parameters', null)),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
        workflow_endpoint_ip_addresses: build.template(std.get(block, 'workflow_endpoint_ip_addresses', null)),
        workflow_outbound_ip_addresses: build.template(std.get(block, 'workflow_outbound_ip_addresses', null)),
        workflow_parameters: build.template(std.get(block, 'workflow_parameters', null)),
        workflow_schema: build.template(std.get(block, 'workflow_schema', null)),
        workflow_version: build.template(std.get(block, 'workflow_version', null)),
      }),
      access_endpoint: resource.field(self._.blocks, 'access_endpoint'),
      connector_endpoint_ip_addresses: resource.field(self._.blocks, 'connector_endpoint_ip_addresses'),
      connector_outbound_ip_addresses: resource.field(self._.blocks, 'connector_outbound_ip_addresses'),
      enabled: resource.field(self._.blocks, 'enabled'),
      id: resource.field(self._.blocks, 'id'),
      integration_service_environment_id: resource.field(self._.blocks, 'integration_service_environment_id'),
      location: resource.field(self._.blocks, 'location'),
      logic_app_integration_account_id: resource.field(self._.blocks, 'logic_app_integration_account_id'),
      name: resource.field(self._.blocks, 'name'),
      parameters: resource.field(self._.blocks, 'parameters'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
      workflow_endpoint_ip_addresses: resource.field(self._.blocks, 'workflow_endpoint_ip_addresses'),
      workflow_outbound_ip_addresses: resource.field(self._.blocks, 'workflow_outbound_ip_addresses'),
      workflow_parameters: resource.field(self._.blocks, 'workflow_parameters'),
      workflow_schema: resource.field(self._.blocks, 'workflow_schema'),
      workflow_version: resource.field(self._.blocks, 'workflow_version'),
    },
    machine_learning_compute_cluster(name, block): {
      local resource = blockType.resource('azurerm_machine_learning_compute_cluster', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        local_auth_enabled: build.template(std.get(block, 'local_auth_enabled', null)),
        location: build.template(block.location),
        machine_learning_workspace_id: build.template(block.machine_learning_workspace_id),
        name: build.template(block.name),
        node_public_ip_enabled: build.template(std.get(block, 'node_public_ip_enabled', null)),
        ssh_public_access_enabled: build.template(std.get(block, 'ssh_public_access_enabled', null)),
        subnet_resource_id: build.template(std.get(block, 'subnet_resource_id', null)),
        tags: build.template(std.get(block, 'tags', null)),
        vm_priority: build.template(block.vm_priority),
        vm_size: build.template(block.vm_size),
      }),
      description: resource.field(self._.blocks, 'description'),
      id: resource.field(self._.blocks, 'id'),
      local_auth_enabled: resource.field(self._.blocks, 'local_auth_enabled'),
      location: resource.field(self._.blocks, 'location'),
      machine_learning_workspace_id: resource.field(self._.blocks, 'machine_learning_workspace_id'),
      name: resource.field(self._.blocks, 'name'),
      node_public_ip_enabled: resource.field(self._.blocks, 'node_public_ip_enabled'),
      ssh_public_access_enabled: resource.field(self._.blocks, 'ssh_public_access_enabled'),
      subnet_resource_id: resource.field(self._.blocks, 'subnet_resource_id'),
      tags: resource.field(self._.blocks, 'tags'),
      vm_priority: resource.field(self._.blocks, 'vm_priority'),
      vm_size: resource.field(self._.blocks, 'vm_size'),
    },
    machine_learning_compute_instance(name, block): {
      local resource = blockType.resource('azurerm_machine_learning_compute_instance', name),
      _: resource._(block, {
        authorization_type: build.template(std.get(block, 'authorization_type', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        local_auth_enabled: build.template(std.get(block, 'local_auth_enabled', null)),
        machine_learning_workspace_id: build.template(block.machine_learning_workspace_id),
        name: build.template(block.name),
        node_public_ip_enabled: build.template(std.get(block, 'node_public_ip_enabled', null)),
        subnet_resource_id: build.template(std.get(block, 'subnet_resource_id', null)),
        tags: build.template(std.get(block, 'tags', null)),
        virtual_machine_size: build.template(block.virtual_machine_size),
      }),
      authorization_type: resource.field(self._.blocks, 'authorization_type'),
      description: resource.field(self._.blocks, 'description'),
      id: resource.field(self._.blocks, 'id'),
      local_auth_enabled: resource.field(self._.blocks, 'local_auth_enabled'),
      machine_learning_workspace_id: resource.field(self._.blocks, 'machine_learning_workspace_id'),
      name: resource.field(self._.blocks, 'name'),
      node_public_ip_enabled: resource.field(self._.blocks, 'node_public_ip_enabled'),
      subnet_resource_id: resource.field(self._.blocks, 'subnet_resource_id'),
      tags: resource.field(self._.blocks, 'tags'),
      virtual_machine_size: resource.field(self._.blocks, 'virtual_machine_size'),
    },
    machine_learning_datastore_blobstorage(name, block): {
      local resource = blockType.resource('azurerm_machine_learning_datastore_blobstorage', name),
      _: resource._(block, {
        account_key: build.template(std.get(block, 'account_key', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        is_default: build.template(std.get(block, 'is_default', null)),
        name: build.template(block.name),
        service_data_auth_identity: build.template(std.get(block, 'service_data_auth_identity', null)),
        shared_access_signature: build.template(std.get(block, 'shared_access_signature', null)),
        storage_container_id: build.template(block.storage_container_id),
        tags: build.template(std.get(block, 'tags', null)),
        workspace_id: build.template(block.workspace_id),
      }),
      account_key: resource.field(self._.blocks, 'account_key'),
      description: resource.field(self._.blocks, 'description'),
      id: resource.field(self._.blocks, 'id'),
      is_default: resource.field(self._.blocks, 'is_default'),
      name: resource.field(self._.blocks, 'name'),
      service_data_auth_identity: resource.field(self._.blocks, 'service_data_auth_identity'),
      shared_access_signature: resource.field(self._.blocks, 'shared_access_signature'),
      storage_container_id: resource.field(self._.blocks, 'storage_container_id'),
      tags: resource.field(self._.blocks, 'tags'),
      workspace_id: resource.field(self._.blocks, 'workspace_id'),
    },
    machine_learning_datastore_datalake_gen2(name, block): {
      local resource = blockType.resource('azurerm_machine_learning_datastore_datalake_gen2', name),
      _: resource._(block, {
        authority_url: build.template(std.get(block, 'authority_url', null)),
        client_id: build.template(std.get(block, 'client_id', null)),
        client_secret: build.template(std.get(block, 'client_secret', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        is_default: build.template(std.get(block, 'is_default', null)),
        name: build.template(block.name),
        service_data_identity: build.template(std.get(block, 'service_data_identity', null)),
        storage_container_id: build.template(block.storage_container_id),
        tags: build.template(std.get(block, 'tags', null)),
        tenant_id: build.template(std.get(block, 'tenant_id', null)),
        workspace_id: build.template(block.workspace_id),
      }),
      authority_url: resource.field(self._.blocks, 'authority_url'),
      client_id: resource.field(self._.blocks, 'client_id'),
      client_secret: resource.field(self._.blocks, 'client_secret'),
      description: resource.field(self._.blocks, 'description'),
      id: resource.field(self._.blocks, 'id'),
      is_default: resource.field(self._.blocks, 'is_default'),
      name: resource.field(self._.blocks, 'name'),
      service_data_identity: resource.field(self._.blocks, 'service_data_identity'),
      storage_container_id: resource.field(self._.blocks, 'storage_container_id'),
      tags: resource.field(self._.blocks, 'tags'),
      tenant_id: resource.field(self._.blocks, 'tenant_id'),
      workspace_id: resource.field(self._.blocks, 'workspace_id'),
    },
    machine_learning_datastore_fileshare(name, block): {
      local resource = blockType.resource('azurerm_machine_learning_datastore_fileshare', name),
      _: resource._(block, {
        account_key: build.template(std.get(block, 'account_key', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        is_default: build.template(std.get(block, 'is_default', null)),
        name: build.template(block.name),
        service_data_identity: build.template(std.get(block, 'service_data_identity', null)),
        shared_access_signature: build.template(std.get(block, 'shared_access_signature', null)),
        storage_fileshare_id: build.template(block.storage_fileshare_id),
        tags: build.template(std.get(block, 'tags', null)),
        workspace_id: build.template(block.workspace_id),
      }),
      account_key: resource.field(self._.blocks, 'account_key'),
      description: resource.field(self._.blocks, 'description'),
      id: resource.field(self._.blocks, 'id'),
      is_default: resource.field(self._.blocks, 'is_default'),
      name: resource.field(self._.blocks, 'name'),
      service_data_identity: resource.field(self._.blocks, 'service_data_identity'),
      shared_access_signature: resource.field(self._.blocks, 'shared_access_signature'),
      storage_fileshare_id: resource.field(self._.blocks, 'storage_fileshare_id'),
      tags: resource.field(self._.blocks, 'tags'),
      workspace_id: resource.field(self._.blocks, 'workspace_id'),
    },
    machine_learning_inference_cluster(name, block): {
      local resource = blockType.resource('azurerm_machine_learning_inference_cluster', name),
      _: resource._(block, {
        cluster_purpose: build.template(std.get(block, 'cluster_purpose', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        kubernetes_cluster_id: build.template(block.kubernetes_cluster_id),
        location: build.template(block.location),
        machine_learning_workspace_id: build.template(block.machine_learning_workspace_id),
        name: build.template(block.name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      cluster_purpose: resource.field(self._.blocks, 'cluster_purpose'),
      description: resource.field(self._.blocks, 'description'),
      id: resource.field(self._.blocks, 'id'),
      kubernetes_cluster_id: resource.field(self._.blocks, 'kubernetes_cluster_id'),
      location: resource.field(self._.blocks, 'location'),
      machine_learning_workspace_id: resource.field(self._.blocks, 'machine_learning_workspace_id'),
      name: resource.field(self._.blocks, 'name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    machine_learning_synapse_spark(name, block): {
      local resource = blockType.resource('azurerm_machine_learning_synapse_spark', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        local_auth_enabled: build.template(std.get(block, 'local_auth_enabled', null)),
        location: build.template(block.location),
        machine_learning_workspace_id: build.template(block.machine_learning_workspace_id),
        name: build.template(block.name),
        synapse_spark_pool_id: build.template(block.synapse_spark_pool_id),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      description: resource.field(self._.blocks, 'description'),
      id: resource.field(self._.blocks, 'id'),
      local_auth_enabled: resource.field(self._.blocks, 'local_auth_enabled'),
      location: resource.field(self._.blocks, 'location'),
      machine_learning_workspace_id: resource.field(self._.blocks, 'machine_learning_workspace_id'),
      name: resource.field(self._.blocks, 'name'),
      synapse_spark_pool_id: resource.field(self._.blocks, 'synapse_spark_pool_id'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    machine_learning_workspace(name, block): {
      local resource = blockType.resource('azurerm_machine_learning_workspace', name),
      _: resource._(block, {
        application_insights_id: build.template(block.application_insights_id),
        container_registry_id: build.template(std.get(block, 'container_registry_id', null)),
        description: build.template(std.get(block, 'description', null)),
        discovery_url: build.template(std.get(block, 'discovery_url', null)),
        friendly_name: build.template(std.get(block, 'friendly_name', null)),
        high_business_impact: build.template(std.get(block, 'high_business_impact', null)),
        id: build.template(std.get(block, 'id', null)),
        image_build_compute_name: build.template(std.get(block, 'image_build_compute_name', null)),
        key_vault_id: build.template(block.key_vault_id),
        kind: build.template(std.get(block, 'kind', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        primary_user_assigned_identity: build.template(std.get(block, 'primary_user_assigned_identity', null)),
        public_network_access_enabled: build.template(std.get(block, 'public_network_access_enabled', null)),
        resource_group_name: build.template(block.resource_group_name),
        sku_name: build.template(std.get(block, 'sku_name', null)),
        storage_account_id: build.template(block.storage_account_id),
        tags: build.template(std.get(block, 'tags', null)),
        v1_legacy_mode_enabled: build.template(std.get(block, 'v1_legacy_mode_enabled', null)),
        workspace_id: build.template(std.get(block, 'workspace_id', null)),
      }),
      application_insights_id: resource.field(self._.blocks, 'application_insights_id'),
      container_registry_id: resource.field(self._.blocks, 'container_registry_id'),
      description: resource.field(self._.blocks, 'description'),
      discovery_url: resource.field(self._.blocks, 'discovery_url'),
      friendly_name: resource.field(self._.blocks, 'friendly_name'),
      high_business_impact: resource.field(self._.blocks, 'high_business_impact'),
      id: resource.field(self._.blocks, 'id'),
      image_build_compute_name: resource.field(self._.blocks, 'image_build_compute_name'),
      key_vault_id: resource.field(self._.blocks, 'key_vault_id'),
      kind: resource.field(self._.blocks, 'kind'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      primary_user_assigned_identity: resource.field(self._.blocks, 'primary_user_assigned_identity'),
      public_network_access_enabled: resource.field(self._.blocks, 'public_network_access_enabled'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      sku_name: resource.field(self._.blocks, 'sku_name'),
      storage_account_id: resource.field(self._.blocks, 'storage_account_id'),
      tags: resource.field(self._.blocks, 'tags'),
      v1_legacy_mode_enabled: resource.field(self._.blocks, 'v1_legacy_mode_enabled'),
      workspace_id: resource.field(self._.blocks, 'workspace_id'),
    },
    machine_learning_workspace_network_outbound_rule_fqdn(name, block): {
      local resource = blockType.resource('azurerm_machine_learning_workspace_network_outbound_rule_fqdn', name),
      _: resource._(block, {
        destination_fqdn: build.template(block.destination_fqdn),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        workspace_id: build.template(block.workspace_id),
      }),
      destination_fqdn: resource.field(self._.blocks, 'destination_fqdn'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      workspace_id: resource.field(self._.blocks, 'workspace_id'),
    },
    machine_learning_workspace_network_outbound_rule_private_endpoint(name, block): {
      local resource = blockType.resource('azurerm_machine_learning_workspace_network_outbound_rule_private_endpoint', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        service_resource_id: build.template(block.service_resource_id),
        spark_enabled: build.template(std.get(block, 'spark_enabled', null)),
        sub_resource_target: build.template(block.sub_resource_target),
        workspace_id: build.template(block.workspace_id),
      }),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      service_resource_id: resource.field(self._.blocks, 'service_resource_id'),
      spark_enabled: resource.field(self._.blocks, 'spark_enabled'),
      sub_resource_target: resource.field(self._.blocks, 'sub_resource_target'),
      workspace_id: resource.field(self._.blocks, 'workspace_id'),
    },
    machine_learning_workspace_network_outbound_rule_service_tag(name, block): {
      local resource = blockType.resource('azurerm_machine_learning_workspace_network_outbound_rule_service_tag', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        port_ranges: build.template(block.port_ranges),
        protocol: build.template(block.protocol),
        service_tag: build.template(block.service_tag),
        workspace_id: build.template(block.workspace_id),
      }),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      port_ranges: resource.field(self._.blocks, 'port_ranges'),
      protocol: resource.field(self._.blocks, 'protocol'),
      service_tag: resource.field(self._.blocks, 'service_tag'),
      workspace_id: resource.field(self._.blocks, 'workspace_id'),
    },
    maintenance_assignment_dedicated_host(name, block): {
      local resource = blockType.resource('azurerm_maintenance_assignment_dedicated_host', name),
      _: resource._(block, {
        dedicated_host_id: build.template(block.dedicated_host_id),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        maintenance_configuration_id: build.template(block.maintenance_configuration_id),
      }),
      dedicated_host_id: resource.field(self._.blocks, 'dedicated_host_id'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      maintenance_configuration_id: resource.field(self._.blocks, 'maintenance_configuration_id'),
    },
    maintenance_assignment_dynamic_scope(name, block): {
      local resource = blockType.resource('azurerm_maintenance_assignment_dynamic_scope', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        maintenance_configuration_id: build.template(block.maintenance_configuration_id),
        name: build.template(block.name),
      }),
      id: resource.field(self._.blocks, 'id'),
      maintenance_configuration_id: resource.field(self._.blocks, 'maintenance_configuration_id'),
      name: resource.field(self._.blocks, 'name'),
    },
    maintenance_assignment_virtual_machine(name, block): {
      local resource = blockType.resource('azurerm_maintenance_assignment_virtual_machine', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        maintenance_configuration_id: build.template(block.maintenance_configuration_id),
        virtual_machine_id: build.template(block.virtual_machine_id),
      }),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      maintenance_configuration_id: resource.field(self._.blocks, 'maintenance_configuration_id'),
      virtual_machine_id: resource.field(self._.blocks, 'virtual_machine_id'),
    },
    maintenance_assignment_virtual_machine_scale_set(name, block): {
      local resource = blockType.resource('azurerm_maintenance_assignment_virtual_machine_scale_set', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        maintenance_configuration_id: build.template(block.maintenance_configuration_id),
        virtual_machine_scale_set_id: build.template(block.virtual_machine_scale_set_id),
      }),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      maintenance_configuration_id: resource.field(self._.blocks, 'maintenance_configuration_id'),
      virtual_machine_scale_set_id: resource.field(self._.blocks, 'virtual_machine_scale_set_id'),
    },
    maintenance_configuration(name, block): {
      local resource = blockType.resource('azurerm_maintenance_configuration', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        in_guest_user_patch_mode: build.template(std.get(block, 'in_guest_user_patch_mode', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        properties: build.template(std.get(block, 'properties', null)),
        resource_group_name: build.template(block.resource_group_name),
        scope: build.template(block.scope),
        tags: build.template(std.get(block, 'tags', null)),
        visibility: build.template(std.get(block, 'visibility', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      in_guest_user_patch_mode: resource.field(self._.blocks, 'in_guest_user_patch_mode'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      properties: resource.field(self._.blocks, 'properties'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      scope: resource.field(self._.blocks, 'scope'),
      tags: resource.field(self._.blocks, 'tags'),
      visibility: resource.field(self._.blocks, 'visibility'),
    },
    managed_application(name, block): {
      local resource = blockType.resource('azurerm_managed_application', name),
      _: resource._(block, {
        application_definition_id: build.template(std.get(block, 'application_definition_id', null)),
        id: build.template(std.get(block, 'id', null)),
        kind: build.template(block.kind),
        location: build.template(block.location),
        managed_resource_group_name: build.template(block.managed_resource_group_name),
        name: build.template(block.name),
        outputs: build.template(std.get(block, 'outputs', null)),
        parameter_values: build.template(std.get(block, 'parameter_values', null)),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      application_definition_id: resource.field(self._.blocks, 'application_definition_id'),
      id: resource.field(self._.blocks, 'id'),
      kind: resource.field(self._.blocks, 'kind'),
      location: resource.field(self._.blocks, 'location'),
      managed_resource_group_name: resource.field(self._.blocks, 'managed_resource_group_name'),
      name: resource.field(self._.blocks, 'name'),
      outputs: resource.field(self._.blocks, 'outputs'),
      parameter_values: resource.field(self._.blocks, 'parameter_values'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    managed_application_definition(name, block): {
      local resource = blockType.resource('azurerm_managed_application_definition', name),
      _: resource._(block, {
        create_ui_definition: build.template(std.get(block, 'create_ui_definition', null)),
        description: build.template(std.get(block, 'description', null)),
        display_name: build.template(block.display_name),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        lock_level: build.template(block.lock_level),
        main_template: build.template(std.get(block, 'main_template', null)),
        name: build.template(block.name),
        package_enabled: build.template(std.get(block, 'package_enabled', null)),
        package_file_uri: build.template(std.get(block, 'package_file_uri', null)),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      create_ui_definition: resource.field(self._.blocks, 'create_ui_definition'),
      description: resource.field(self._.blocks, 'description'),
      display_name: resource.field(self._.blocks, 'display_name'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      lock_level: resource.field(self._.blocks, 'lock_level'),
      main_template: resource.field(self._.blocks, 'main_template'),
      name: resource.field(self._.blocks, 'name'),
      package_enabled: resource.field(self._.blocks, 'package_enabled'),
      package_file_uri: resource.field(self._.blocks, 'package_file_uri'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    managed_disk(name, block): {
      local resource = blockType.resource('azurerm_managed_disk', name),
      _: resource._(block, {
        create_option: build.template(block.create_option),
        disk_access_id: build.template(std.get(block, 'disk_access_id', null)),
        disk_encryption_set_id: build.template(std.get(block, 'disk_encryption_set_id', null)),
        disk_iops_read_only: build.template(std.get(block, 'disk_iops_read_only', null)),
        disk_iops_read_write: build.template(std.get(block, 'disk_iops_read_write', null)),
        disk_mbps_read_only: build.template(std.get(block, 'disk_mbps_read_only', null)),
        disk_mbps_read_write: build.template(std.get(block, 'disk_mbps_read_write', null)),
        disk_size_gb: build.template(std.get(block, 'disk_size_gb', null)),
        edge_zone: build.template(std.get(block, 'edge_zone', null)),
        gallery_image_reference_id: build.template(std.get(block, 'gallery_image_reference_id', null)),
        hyper_v_generation: build.template(std.get(block, 'hyper_v_generation', null)),
        id: build.template(std.get(block, 'id', null)),
        image_reference_id: build.template(std.get(block, 'image_reference_id', null)),
        location: build.template(block.location),
        logical_sector_size: build.template(std.get(block, 'logical_sector_size', null)),
        max_shares: build.template(std.get(block, 'max_shares', null)),
        name: build.template(block.name),
        network_access_policy: build.template(std.get(block, 'network_access_policy', null)),
        on_demand_bursting_enabled: build.template(std.get(block, 'on_demand_bursting_enabled', null)),
        optimized_frequent_attach_enabled: build.template(std.get(block, 'optimized_frequent_attach_enabled', null)),
        os_type: build.template(std.get(block, 'os_type', null)),
        performance_plus_enabled: build.template(std.get(block, 'performance_plus_enabled', null)),
        public_network_access_enabled: build.template(std.get(block, 'public_network_access_enabled', null)),
        resource_group_name: build.template(block.resource_group_name),
        secure_vm_disk_encryption_set_id: build.template(std.get(block, 'secure_vm_disk_encryption_set_id', null)),
        security_type: build.template(std.get(block, 'security_type', null)),
        source_resource_id: build.template(std.get(block, 'source_resource_id', null)),
        source_uri: build.template(std.get(block, 'source_uri', null)),
        storage_account_id: build.template(std.get(block, 'storage_account_id', null)),
        storage_account_type: build.template(block.storage_account_type),
        tags: build.template(std.get(block, 'tags', null)),
        tier: build.template(std.get(block, 'tier', null)),
        trusted_launch_enabled: build.template(std.get(block, 'trusted_launch_enabled', null)),
        upload_size_bytes: build.template(std.get(block, 'upload_size_bytes', null)),
        zone: build.template(std.get(block, 'zone', null)),
      }),
      create_option: resource.field(self._.blocks, 'create_option'),
      disk_access_id: resource.field(self._.blocks, 'disk_access_id'),
      disk_encryption_set_id: resource.field(self._.blocks, 'disk_encryption_set_id'),
      disk_iops_read_only: resource.field(self._.blocks, 'disk_iops_read_only'),
      disk_iops_read_write: resource.field(self._.blocks, 'disk_iops_read_write'),
      disk_mbps_read_only: resource.field(self._.blocks, 'disk_mbps_read_only'),
      disk_mbps_read_write: resource.field(self._.blocks, 'disk_mbps_read_write'),
      disk_size_gb: resource.field(self._.blocks, 'disk_size_gb'),
      edge_zone: resource.field(self._.blocks, 'edge_zone'),
      gallery_image_reference_id: resource.field(self._.blocks, 'gallery_image_reference_id'),
      hyper_v_generation: resource.field(self._.blocks, 'hyper_v_generation'),
      id: resource.field(self._.blocks, 'id'),
      image_reference_id: resource.field(self._.blocks, 'image_reference_id'),
      location: resource.field(self._.blocks, 'location'),
      logical_sector_size: resource.field(self._.blocks, 'logical_sector_size'),
      max_shares: resource.field(self._.blocks, 'max_shares'),
      name: resource.field(self._.blocks, 'name'),
      network_access_policy: resource.field(self._.blocks, 'network_access_policy'),
      on_demand_bursting_enabled: resource.field(self._.blocks, 'on_demand_bursting_enabled'),
      optimized_frequent_attach_enabled: resource.field(self._.blocks, 'optimized_frequent_attach_enabled'),
      os_type: resource.field(self._.blocks, 'os_type'),
      performance_plus_enabled: resource.field(self._.blocks, 'performance_plus_enabled'),
      public_network_access_enabled: resource.field(self._.blocks, 'public_network_access_enabled'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      secure_vm_disk_encryption_set_id: resource.field(self._.blocks, 'secure_vm_disk_encryption_set_id'),
      security_type: resource.field(self._.blocks, 'security_type'),
      source_resource_id: resource.field(self._.blocks, 'source_resource_id'),
      source_uri: resource.field(self._.blocks, 'source_uri'),
      storage_account_id: resource.field(self._.blocks, 'storage_account_id'),
      storage_account_type: resource.field(self._.blocks, 'storage_account_type'),
      tags: resource.field(self._.blocks, 'tags'),
      tier: resource.field(self._.blocks, 'tier'),
      trusted_launch_enabled: resource.field(self._.blocks, 'trusted_launch_enabled'),
      upload_size_bytes: resource.field(self._.blocks, 'upload_size_bytes'),
      zone: resource.field(self._.blocks, 'zone'),
    },
    managed_disk_sas_token(name, block): {
      local resource = blockType.resource('azurerm_managed_disk_sas_token', name),
      _: resource._(block, {
        access_level: build.template(block.access_level),
        duration_in_seconds: build.template(block.duration_in_seconds),
        id: build.template(std.get(block, 'id', null)),
        managed_disk_id: build.template(block.managed_disk_id),
        sas_url: build.template(std.get(block, 'sas_url', null)),
      }),
      access_level: resource.field(self._.blocks, 'access_level'),
      duration_in_seconds: resource.field(self._.blocks, 'duration_in_seconds'),
      id: resource.field(self._.blocks, 'id'),
      managed_disk_id: resource.field(self._.blocks, 'managed_disk_id'),
      sas_url: resource.field(self._.blocks, 'sas_url'),
    },
    managed_lustre_file_system(name, block): {
      local resource = blockType.resource('azurerm_managed_lustre_file_system', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        mgs_address: build.template(std.get(block, 'mgs_address', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        sku_name: build.template(block.sku_name),
        storage_capacity_in_tb: build.template(block.storage_capacity_in_tb),
        subnet_id: build.template(block.subnet_id),
        tags: build.template(std.get(block, 'tags', null)),
        zones: build.template(block.zones),
      }),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      mgs_address: resource.field(self._.blocks, 'mgs_address'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      sku_name: resource.field(self._.blocks, 'sku_name'),
      storage_capacity_in_tb: resource.field(self._.blocks, 'storage_capacity_in_tb'),
      subnet_id: resource.field(self._.blocks, 'subnet_id'),
      tags: resource.field(self._.blocks, 'tags'),
      zones: resource.field(self._.blocks, 'zones'),
    },
    management_group(name, block): {
      local resource = blockType.resource('azurerm_management_group', name),
      _: resource._(block, {
        display_name: build.template(std.get(block, 'display_name', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        parent_management_group_id: build.template(std.get(block, 'parent_management_group_id', null)),
        subscription_ids: build.template(std.get(block, 'subscription_ids', null)),
        tenant_scoped_id: build.template(std.get(block, 'tenant_scoped_id', null)),
      }),
      display_name: resource.field(self._.blocks, 'display_name'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      parent_management_group_id: resource.field(self._.blocks, 'parent_management_group_id'),
      subscription_ids: resource.field(self._.blocks, 'subscription_ids'),
      tenant_scoped_id: resource.field(self._.blocks, 'tenant_scoped_id'),
    },
    management_group_policy_assignment(name, block): {
      local resource = blockType.resource('azurerm_management_group_policy_assignment', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        display_name: build.template(std.get(block, 'display_name', null)),
        enforce: build.template(std.get(block, 'enforce', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        management_group_id: build.template(block.management_group_id),
        metadata: build.template(std.get(block, 'metadata', null)),
        name: build.template(block.name),
        not_scopes: build.template(std.get(block, 'not_scopes', null)),
        parameters: build.template(std.get(block, 'parameters', null)),
        policy_definition_id: build.template(block.policy_definition_id),
      }),
      description: resource.field(self._.blocks, 'description'),
      display_name: resource.field(self._.blocks, 'display_name'),
      enforce: resource.field(self._.blocks, 'enforce'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      management_group_id: resource.field(self._.blocks, 'management_group_id'),
      metadata: resource.field(self._.blocks, 'metadata'),
      name: resource.field(self._.blocks, 'name'),
      not_scopes: resource.field(self._.blocks, 'not_scopes'),
      parameters: resource.field(self._.blocks, 'parameters'),
      policy_definition_id: resource.field(self._.blocks, 'policy_definition_id'),
    },
    management_group_policy_exemption(name, block): {
      local resource = blockType.resource('azurerm_management_group_policy_exemption', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        display_name: build.template(std.get(block, 'display_name', null)),
        exemption_category: build.template(block.exemption_category),
        expires_on: build.template(std.get(block, 'expires_on', null)),
        id: build.template(std.get(block, 'id', null)),
        management_group_id: build.template(block.management_group_id),
        metadata: build.template(std.get(block, 'metadata', null)),
        name: build.template(block.name),
        policy_assignment_id: build.template(block.policy_assignment_id),
        policy_definition_reference_ids: build.template(std.get(block, 'policy_definition_reference_ids', null)),
      }),
      description: resource.field(self._.blocks, 'description'),
      display_name: resource.field(self._.blocks, 'display_name'),
      exemption_category: resource.field(self._.blocks, 'exemption_category'),
      expires_on: resource.field(self._.blocks, 'expires_on'),
      id: resource.field(self._.blocks, 'id'),
      management_group_id: resource.field(self._.blocks, 'management_group_id'),
      metadata: resource.field(self._.blocks, 'metadata'),
      name: resource.field(self._.blocks, 'name'),
      policy_assignment_id: resource.field(self._.blocks, 'policy_assignment_id'),
      policy_definition_reference_ids: resource.field(self._.blocks, 'policy_definition_reference_ids'),
    },
    management_group_policy_remediation(name, block): {
      local resource = blockType.resource('azurerm_management_group_policy_remediation', name),
      _: resource._(block, {
        failure_percentage: build.template(std.get(block, 'failure_percentage', null)),
        id: build.template(std.get(block, 'id', null)),
        location_filters: build.template(std.get(block, 'location_filters', null)),
        management_group_id: build.template(block.management_group_id),
        name: build.template(block.name),
        parallel_deployments: build.template(std.get(block, 'parallel_deployments', null)),
        policy_assignment_id: build.template(block.policy_assignment_id),
        policy_definition_reference_id: build.template(std.get(block, 'policy_definition_reference_id', null)),
        resource_count: build.template(std.get(block, 'resource_count', null)),
      }),
      failure_percentage: resource.field(self._.blocks, 'failure_percentage'),
      id: resource.field(self._.blocks, 'id'),
      location_filters: resource.field(self._.blocks, 'location_filters'),
      management_group_id: resource.field(self._.blocks, 'management_group_id'),
      name: resource.field(self._.blocks, 'name'),
      parallel_deployments: resource.field(self._.blocks, 'parallel_deployments'),
      policy_assignment_id: resource.field(self._.blocks, 'policy_assignment_id'),
      policy_definition_reference_id: resource.field(self._.blocks, 'policy_definition_reference_id'),
      resource_count: resource.field(self._.blocks, 'resource_count'),
    },
    management_group_subscription_association(name, block): {
      local resource = blockType.resource('azurerm_management_group_subscription_association', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        management_group_id: build.template(block.management_group_id),
        subscription_id: build.template(block.subscription_id),
      }),
      id: resource.field(self._.blocks, 'id'),
      management_group_id: resource.field(self._.blocks, 'management_group_id'),
      subscription_id: resource.field(self._.blocks, 'subscription_id'),
    },
    management_group_template_deployment(name, block): {
      local resource = blockType.resource('azurerm_management_group_template_deployment', name),
      _: resource._(block, {
        debug_level: build.template(std.get(block, 'debug_level', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        management_group_id: build.template(block.management_group_id),
        name: build.template(block.name),
        output_content: build.template(std.get(block, 'output_content', null)),
        parameters_content: build.template(std.get(block, 'parameters_content', null)),
        tags: build.template(std.get(block, 'tags', null)),
        template_content: build.template(std.get(block, 'template_content', null)),
        template_spec_version_id: build.template(std.get(block, 'template_spec_version_id', null)),
      }),
      debug_level: resource.field(self._.blocks, 'debug_level'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      management_group_id: resource.field(self._.blocks, 'management_group_id'),
      name: resource.field(self._.blocks, 'name'),
      output_content: resource.field(self._.blocks, 'output_content'),
      parameters_content: resource.field(self._.blocks, 'parameters_content'),
      tags: resource.field(self._.blocks, 'tags'),
      template_content: resource.field(self._.blocks, 'template_content'),
      template_spec_version_id: resource.field(self._.blocks, 'template_spec_version_id'),
    },
    management_lock(name, block): {
      local resource = blockType.resource('azurerm_management_lock', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        lock_level: build.template(block.lock_level),
        name: build.template(block.name),
        notes: build.template(std.get(block, 'notes', null)),
        scope: build.template(block.scope),
      }),
      id: resource.field(self._.blocks, 'id'),
      lock_level: resource.field(self._.blocks, 'lock_level'),
      name: resource.field(self._.blocks, 'name'),
      notes: resource.field(self._.blocks, 'notes'),
      scope: resource.field(self._.blocks, 'scope'),
    },
    maps_account(name, block): {
      local resource = blockType.resource('azurerm_maps_account', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        local_authentication_enabled: build.template(std.get(block, 'local_authentication_enabled', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        primary_access_key: build.template(std.get(block, 'primary_access_key', null)),
        resource_group_name: build.template(block.resource_group_name),
        secondary_access_key: build.template(std.get(block, 'secondary_access_key', null)),
        sku_name: build.template(block.sku_name),
        tags: build.template(std.get(block, 'tags', null)),
        x_ms_client_id: build.template(std.get(block, 'x_ms_client_id', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      local_authentication_enabled: resource.field(self._.blocks, 'local_authentication_enabled'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      primary_access_key: resource.field(self._.blocks, 'primary_access_key'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      secondary_access_key: resource.field(self._.blocks, 'secondary_access_key'),
      sku_name: resource.field(self._.blocks, 'sku_name'),
      tags: resource.field(self._.blocks, 'tags'),
      x_ms_client_id: resource.field(self._.blocks, 'x_ms_client_id'),
    },
    maps_creator(name, block): {
      local resource = blockType.resource('azurerm_maps_creator', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        maps_account_id: build.template(block.maps_account_id),
        name: build.template(block.name),
        storage_units: build.template(block.storage_units),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      maps_account_id: resource.field(self._.blocks, 'maps_account_id'),
      name: resource.field(self._.blocks, 'name'),
      storage_units: resource.field(self._.blocks, 'storage_units'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    marketplace_agreement(name, block): {
      local resource = blockType.resource('azurerm_marketplace_agreement', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        license_text_link: build.template(std.get(block, 'license_text_link', null)),
        offer: build.template(block.offer),
        plan: build.template(block.plan),
        privacy_policy_link: build.template(std.get(block, 'privacy_policy_link', null)),
        publisher: build.template(block.publisher),
      }),
      id: resource.field(self._.blocks, 'id'),
      license_text_link: resource.field(self._.blocks, 'license_text_link'),
      offer: resource.field(self._.blocks, 'offer'),
      plan: resource.field(self._.blocks, 'plan'),
      privacy_policy_link: resource.field(self._.blocks, 'privacy_policy_link'),
      publisher: resource.field(self._.blocks, 'publisher'),
    },
    marketplace_role_assignment(name, block): {
      local resource = blockType.resource('azurerm_marketplace_role_assignment', name),
      _: resource._(block, {
        condition: build.template(std.get(block, 'condition', null)),
        condition_version: build.template(std.get(block, 'condition_version', null)),
        delegated_managed_identity_resource_id: build.template(std.get(block, 'delegated_managed_identity_resource_id', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        principal_id: build.template(block.principal_id),
        principal_type: build.template(std.get(block, 'principal_type', null)),
        role_definition_id: build.template(std.get(block, 'role_definition_id', null)),
        role_definition_name: build.template(std.get(block, 'role_definition_name', null)),
        skip_service_principal_aad_check: build.template(std.get(block, 'skip_service_principal_aad_check', null)),
      }),
      condition: resource.field(self._.blocks, 'condition'),
      condition_version: resource.field(self._.blocks, 'condition_version'),
      delegated_managed_identity_resource_id: resource.field(self._.blocks, 'delegated_managed_identity_resource_id'),
      description: resource.field(self._.blocks, 'description'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      principal_id: resource.field(self._.blocks, 'principal_id'),
      principal_type: resource.field(self._.blocks, 'principal_type'),
      role_definition_id: resource.field(self._.blocks, 'role_definition_id'),
      role_definition_name: resource.field(self._.blocks, 'role_definition_name'),
      skip_service_principal_aad_check: resource.field(self._.blocks, 'skip_service_principal_aad_check'),
    },
    mobile_network(name, block): {
      local resource = blockType.resource('azurerm_mobile_network', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        mobile_country_code: build.template(block.mobile_country_code),
        mobile_network_code: build.template(block.mobile_network_code),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        service_key: build.template(std.get(block, 'service_key', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      mobile_country_code: resource.field(self._.blocks, 'mobile_country_code'),
      mobile_network_code: resource.field(self._.blocks, 'mobile_network_code'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      service_key: resource.field(self._.blocks, 'service_key'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    mobile_network_attached_data_network(name, block): {
      local resource = blockType.resource('azurerm_mobile_network_attached_data_network', name),
      _: resource._(block, {
        dns_addresses: build.template(block.dns_addresses),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        mobile_network_data_network_name: build.template(block.mobile_network_data_network_name),
        mobile_network_packet_core_data_plane_id: build.template(block.mobile_network_packet_core_data_plane_id),
        tags: build.template(std.get(block, 'tags', null)),
        user_equipment_address_pool_prefixes: build.template(std.get(block, 'user_equipment_address_pool_prefixes', null)),
        user_equipment_static_address_pool_prefixes: build.template(std.get(block, 'user_equipment_static_address_pool_prefixes', null)),
        user_plane_access_ipv4_address: build.template(std.get(block, 'user_plane_access_ipv4_address', null)),
        user_plane_access_ipv4_gateway: build.template(std.get(block, 'user_plane_access_ipv4_gateway', null)),
        user_plane_access_ipv4_subnet: build.template(std.get(block, 'user_plane_access_ipv4_subnet', null)),
        user_plane_access_name: build.template(std.get(block, 'user_plane_access_name', null)),
      }),
      dns_addresses: resource.field(self._.blocks, 'dns_addresses'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      mobile_network_data_network_name: resource.field(self._.blocks, 'mobile_network_data_network_name'),
      mobile_network_packet_core_data_plane_id: resource.field(self._.blocks, 'mobile_network_packet_core_data_plane_id'),
      tags: resource.field(self._.blocks, 'tags'),
      user_equipment_address_pool_prefixes: resource.field(self._.blocks, 'user_equipment_address_pool_prefixes'),
      user_equipment_static_address_pool_prefixes: resource.field(self._.blocks, 'user_equipment_static_address_pool_prefixes'),
      user_plane_access_ipv4_address: resource.field(self._.blocks, 'user_plane_access_ipv4_address'),
      user_plane_access_ipv4_gateway: resource.field(self._.blocks, 'user_plane_access_ipv4_gateway'),
      user_plane_access_ipv4_subnet: resource.field(self._.blocks, 'user_plane_access_ipv4_subnet'),
      user_plane_access_name: resource.field(self._.blocks, 'user_plane_access_name'),
    },
    mobile_network_data_network(name, block): {
      local resource = blockType.resource('azurerm_mobile_network_data_network', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        mobile_network_id: build.template(block.mobile_network_id),
        name: build.template(block.name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      description: resource.field(self._.blocks, 'description'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      mobile_network_id: resource.field(self._.blocks, 'mobile_network_id'),
      name: resource.field(self._.blocks, 'name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    mobile_network_packet_core_control_plane(name, block): {
      local resource = blockType.resource('azurerm_mobile_network_packet_core_control_plane', name),
      _: resource._(block, {
        control_plane_access_ipv4_address: build.template(std.get(block, 'control_plane_access_ipv4_address', null)),
        control_plane_access_ipv4_gateway: build.template(std.get(block, 'control_plane_access_ipv4_gateway', null)),
        control_plane_access_ipv4_subnet: build.template(std.get(block, 'control_plane_access_ipv4_subnet', null)),
        control_plane_access_name: build.template(std.get(block, 'control_plane_access_name', null)),
        core_network_technology: build.template(std.get(block, 'core_network_technology', null)),
        id: build.template(std.get(block, 'id', null)),
        interoperability_settings_json: build.template(std.get(block, 'interoperability_settings_json', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        site_ids: build.template(block.site_ids),
        sku: build.template(block.sku),
        software_version: build.template(std.get(block, 'software_version', null)),
        tags: build.template(std.get(block, 'tags', null)),
        user_equipment_mtu_in_bytes: build.template(std.get(block, 'user_equipment_mtu_in_bytes', null)),
      }),
      control_plane_access_ipv4_address: resource.field(self._.blocks, 'control_plane_access_ipv4_address'),
      control_plane_access_ipv4_gateway: resource.field(self._.blocks, 'control_plane_access_ipv4_gateway'),
      control_plane_access_ipv4_subnet: resource.field(self._.blocks, 'control_plane_access_ipv4_subnet'),
      control_plane_access_name: resource.field(self._.blocks, 'control_plane_access_name'),
      core_network_technology: resource.field(self._.blocks, 'core_network_technology'),
      id: resource.field(self._.blocks, 'id'),
      interoperability_settings_json: resource.field(self._.blocks, 'interoperability_settings_json'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      site_ids: resource.field(self._.blocks, 'site_ids'),
      sku: resource.field(self._.blocks, 'sku'),
      software_version: resource.field(self._.blocks, 'software_version'),
      tags: resource.field(self._.blocks, 'tags'),
      user_equipment_mtu_in_bytes: resource.field(self._.blocks, 'user_equipment_mtu_in_bytes'),
    },
    mobile_network_packet_core_data_plane(name, block): {
      local resource = blockType.resource('azurerm_mobile_network_packet_core_data_plane', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        mobile_network_packet_core_control_plane_id: build.template(block.mobile_network_packet_core_control_plane_id),
        name: build.template(block.name),
        tags: build.template(std.get(block, 'tags', null)),
        user_plane_access_ipv4_address: build.template(std.get(block, 'user_plane_access_ipv4_address', null)),
        user_plane_access_ipv4_gateway: build.template(std.get(block, 'user_plane_access_ipv4_gateway', null)),
        user_plane_access_ipv4_subnet: build.template(std.get(block, 'user_plane_access_ipv4_subnet', null)),
        user_plane_access_name: build.template(std.get(block, 'user_plane_access_name', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      mobile_network_packet_core_control_plane_id: resource.field(self._.blocks, 'mobile_network_packet_core_control_plane_id'),
      name: resource.field(self._.blocks, 'name'),
      tags: resource.field(self._.blocks, 'tags'),
      user_plane_access_ipv4_address: resource.field(self._.blocks, 'user_plane_access_ipv4_address'),
      user_plane_access_ipv4_gateway: resource.field(self._.blocks, 'user_plane_access_ipv4_gateway'),
      user_plane_access_ipv4_subnet: resource.field(self._.blocks, 'user_plane_access_ipv4_subnet'),
      user_plane_access_name: resource.field(self._.blocks, 'user_plane_access_name'),
    },
    mobile_network_service(name, block): {
      local resource = blockType.resource('azurerm_mobile_network_service', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        mobile_network_id: build.template(block.mobile_network_id),
        name: build.template(block.name),
        service_precedence: build.template(block.service_precedence),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      mobile_network_id: resource.field(self._.blocks, 'mobile_network_id'),
      name: resource.field(self._.blocks, 'name'),
      service_precedence: resource.field(self._.blocks, 'service_precedence'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    mobile_network_sim(name, block): {
      local resource = blockType.resource('azurerm_mobile_network_sim', name),
      _: resource._(block, {
        authentication_key: build.template(block.authentication_key),
        device_type: build.template(std.get(block, 'device_type', null)),
        id: build.template(std.get(block, 'id', null)),
        integrated_circuit_card_identifier: build.template(block.integrated_circuit_card_identifier),
        international_mobile_subscriber_identity: build.template(block.international_mobile_subscriber_identity),
        mobile_network_sim_group_id: build.template(block.mobile_network_sim_group_id),
        name: build.template(block.name),
        operator_key_code: build.template(block.operator_key_code),
        sim_policy_id: build.template(std.get(block, 'sim_policy_id', null)),
        sim_state: build.template(std.get(block, 'sim_state', null)),
        vendor_key_fingerprint: build.template(std.get(block, 'vendor_key_fingerprint', null)),
        vendor_name: build.template(std.get(block, 'vendor_name', null)),
      }),
      authentication_key: resource.field(self._.blocks, 'authentication_key'),
      device_type: resource.field(self._.blocks, 'device_type'),
      id: resource.field(self._.blocks, 'id'),
      integrated_circuit_card_identifier: resource.field(self._.blocks, 'integrated_circuit_card_identifier'),
      international_mobile_subscriber_identity: resource.field(self._.blocks, 'international_mobile_subscriber_identity'),
      mobile_network_sim_group_id: resource.field(self._.blocks, 'mobile_network_sim_group_id'),
      name: resource.field(self._.blocks, 'name'),
      operator_key_code: resource.field(self._.blocks, 'operator_key_code'),
      sim_policy_id: resource.field(self._.blocks, 'sim_policy_id'),
      sim_state: resource.field(self._.blocks, 'sim_state'),
      vendor_key_fingerprint: resource.field(self._.blocks, 'vendor_key_fingerprint'),
      vendor_name: resource.field(self._.blocks, 'vendor_name'),
    },
    mobile_network_sim_group(name, block): {
      local resource = blockType.resource('azurerm_mobile_network_sim_group', name),
      _: resource._(block, {
        encryption_key_url: build.template(std.get(block, 'encryption_key_url', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        mobile_network_id: build.template(block.mobile_network_id),
        name: build.template(block.name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      encryption_key_url: resource.field(self._.blocks, 'encryption_key_url'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      mobile_network_id: resource.field(self._.blocks, 'mobile_network_id'),
      name: resource.field(self._.blocks, 'name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    mobile_network_sim_policy(name, block): {
      local resource = blockType.resource('azurerm_mobile_network_sim_policy', name),
      _: resource._(block, {
        default_slice_id: build.template(block.default_slice_id),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        mobile_network_id: build.template(block.mobile_network_id),
        name: build.template(block.name),
        rat_frequency_selection_priority_index: build.template(std.get(block, 'rat_frequency_selection_priority_index', null)),
        registration_timer_in_seconds: build.template(std.get(block, 'registration_timer_in_seconds', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      default_slice_id: resource.field(self._.blocks, 'default_slice_id'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      mobile_network_id: resource.field(self._.blocks, 'mobile_network_id'),
      name: resource.field(self._.blocks, 'name'),
      rat_frequency_selection_priority_index: resource.field(self._.blocks, 'rat_frequency_selection_priority_index'),
      registration_timer_in_seconds: resource.field(self._.blocks, 'registration_timer_in_seconds'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    mobile_network_site(name, block): {
      local resource = blockType.resource('azurerm_mobile_network_site', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        mobile_network_id: build.template(block.mobile_network_id),
        name: build.template(block.name),
        network_function_ids: build.template(std.get(block, 'network_function_ids', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      mobile_network_id: resource.field(self._.blocks, 'mobile_network_id'),
      name: resource.field(self._.blocks, 'name'),
      network_function_ids: resource.field(self._.blocks, 'network_function_ids'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    mobile_network_slice(name, block): {
      local resource = blockType.resource('azurerm_mobile_network_slice', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        mobile_network_id: build.template(block.mobile_network_id),
        name: build.template(block.name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      description: resource.field(self._.blocks, 'description'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      mobile_network_id: resource.field(self._.blocks, 'mobile_network_id'),
      name: resource.field(self._.blocks, 'name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    mongo_cluster(name, block): {
      local resource = blockType.resource('azurerm_mongo_cluster', name),
      _: resource._(block, {
        administrator_password: build.template(std.get(block, 'administrator_password', null)),
        administrator_username: build.template(std.get(block, 'administrator_username', null)),
        compute_tier: build.template(std.get(block, 'compute_tier', null)),
        connection_strings: build.template(std.get(block, 'connection_strings', null)),
        create_mode: build.template(std.get(block, 'create_mode', null)),
        high_availability_mode: build.template(std.get(block, 'high_availability_mode', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        preview_features: build.template(std.get(block, 'preview_features', null)),
        public_network_access: build.template(std.get(block, 'public_network_access', null)),
        resource_group_name: build.template(block.resource_group_name),
        shard_count: build.template(std.get(block, 'shard_count', null)),
        source_location: build.template(std.get(block, 'source_location', null)),
        source_server_id: build.template(std.get(block, 'source_server_id', null)),
        storage_size_in_gb: build.template(std.get(block, 'storage_size_in_gb', null)),
        tags: build.template(std.get(block, 'tags', null)),
        version: build.template(std.get(block, 'version', null)),
      }),
      administrator_password: resource.field(self._.blocks, 'administrator_password'),
      administrator_username: resource.field(self._.blocks, 'administrator_username'),
      compute_tier: resource.field(self._.blocks, 'compute_tier'),
      connection_strings: resource.field(self._.blocks, 'connection_strings'),
      create_mode: resource.field(self._.blocks, 'create_mode'),
      high_availability_mode: resource.field(self._.blocks, 'high_availability_mode'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      preview_features: resource.field(self._.blocks, 'preview_features'),
      public_network_access: resource.field(self._.blocks, 'public_network_access'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      shard_count: resource.field(self._.blocks, 'shard_count'),
      source_location: resource.field(self._.blocks, 'source_location'),
      source_server_id: resource.field(self._.blocks, 'source_server_id'),
      storage_size_in_gb: resource.field(self._.blocks, 'storage_size_in_gb'),
      tags: resource.field(self._.blocks, 'tags'),
      version: resource.field(self._.blocks, 'version'),
    },
    monitor_aad_diagnostic_setting(name, block): {
      local resource = blockType.resource('azurerm_monitor_aad_diagnostic_setting', name),
      _: resource._(block, {
        eventhub_authorization_rule_id: build.template(std.get(block, 'eventhub_authorization_rule_id', null)),
        eventhub_name: build.template(std.get(block, 'eventhub_name', null)),
        id: build.template(std.get(block, 'id', null)),
        log_analytics_workspace_id: build.template(std.get(block, 'log_analytics_workspace_id', null)),
        name: build.template(block.name),
        storage_account_id: build.template(std.get(block, 'storage_account_id', null)),
      }),
      eventhub_authorization_rule_id: resource.field(self._.blocks, 'eventhub_authorization_rule_id'),
      eventhub_name: resource.field(self._.blocks, 'eventhub_name'),
      id: resource.field(self._.blocks, 'id'),
      log_analytics_workspace_id: resource.field(self._.blocks, 'log_analytics_workspace_id'),
      name: resource.field(self._.blocks, 'name'),
      storage_account_id: resource.field(self._.blocks, 'storage_account_id'),
    },
    monitor_action_group(name, block): {
      local resource = blockType.resource('azurerm_monitor_action_group', name),
      _: resource._(block, {
        enabled: build.template(std.get(block, 'enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        short_name: build.template(block.short_name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      enabled: resource.field(self._.blocks, 'enabled'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      short_name: resource.field(self._.blocks, 'short_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    monitor_activity_log_alert(name, block): {
      local resource = blockType.resource('azurerm_monitor_activity_log_alert', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        enabled: build.template(std.get(block, 'enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        scopes: build.template(block.scopes),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      description: resource.field(self._.blocks, 'description'),
      enabled: resource.field(self._.blocks, 'enabled'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      scopes: resource.field(self._.blocks, 'scopes'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    monitor_alert_processing_rule_action_group(name, block): {
      local resource = blockType.resource('azurerm_monitor_alert_processing_rule_action_group', name),
      _: resource._(block, {
        add_action_group_ids: build.template(block.add_action_group_ids),
        description: build.template(std.get(block, 'description', null)),
        enabled: build.template(std.get(block, 'enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        scopes: build.template(block.scopes),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      add_action_group_ids: resource.field(self._.blocks, 'add_action_group_ids'),
      description: resource.field(self._.blocks, 'description'),
      enabled: resource.field(self._.blocks, 'enabled'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      scopes: resource.field(self._.blocks, 'scopes'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    monitor_alert_processing_rule_suppression(name, block): {
      local resource = blockType.resource('azurerm_monitor_alert_processing_rule_suppression', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        enabled: build.template(std.get(block, 'enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        scopes: build.template(block.scopes),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      description: resource.field(self._.blocks, 'description'),
      enabled: resource.field(self._.blocks, 'enabled'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      scopes: resource.field(self._.blocks, 'scopes'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    monitor_alert_prometheus_rule_group(name, block): {
      local resource = blockType.resource('azurerm_monitor_alert_prometheus_rule_group', name),
      _: resource._(block, {
        cluster_name: build.template(std.get(block, 'cluster_name', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        interval: build.template(std.get(block, 'interval', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        rule_group_enabled: build.template(std.get(block, 'rule_group_enabled', null)),
        scopes: build.template(block.scopes),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      cluster_name: resource.field(self._.blocks, 'cluster_name'),
      description: resource.field(self._.blocks, 'description'),
      id: resource.field(self._.blocks, 'id'),
      interval: resource.field(self._.blocks, 'interval'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      rule_group_enabled: resource.field(self._.blocks, 'rule_group_enabled'),
      scopes: resource.field(self._.blocks, 'scopes'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    monitor_autoscale_setting(name, block): {
      local resource = blockType.resource('azurerm_monitor_autoscale_setting', name),
      _: resource._(block, {
        enabled: build.template(std.get(block, 'enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
        target_resource_id: build.template(block.target_resource_id),
      }),
      enabled: resource.field(self._.blocks, 'enabled'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
      target_resource_id: resource.field(self._.blocks, 'target_resource_id'),
    },
    monitor_data_collection_endpoint(name, block): {
      local resource = blockType.resource('azurerm_monitor_data_collection_endpoint', name),
      _: resource._(block, {
        configuration_access_endpoint: build.template(std.get(block, 'configuration_access_endpoint', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        immutable_id: build.template(std.get(block, 'immutable_id', null)),
        kind: build.template(std.get(block, 'kind', null)),
        location: build.template(block.location),
        logs_ingestion_endpoint: build.template(std.get(block, 'logs_ingestion_endpoint', null)),
        name: build.template(block.name),
        public_network_access_enabled: build.template(std.get(block, 'public_network_access_enabled', null)),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      configuration_access_endpoint: resource.field(self._.blocks, 'configuration_access_endpoint'),
      description: resource.field(self._.blocks, 'description'),
      id: resource.field(self._.blocks, 'id'),
      immutable_id: resource.field(self._.blocks, 'immutable_id'),
      kind: resource.field(self._.blocks, 'kind'),
      location: resource.field(self._.blocks, 'location'),
      logs_ingestion_endpoint: resource.field(self._.blocks, 'logs_ingestion_endpoint'),
      name: resource.field(self._.blocks, 'name'),
      public_network_access_enabled: resource.field(self._.blocks, 'public_network_access_enabled'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    monitor_data_collection_rule(name, block): {
      local resource = blockType.resource('azurerm_monitor_data_collection_rule', name),
      _: resource._(block, {
        data_collection_endpoint_id: build.template(std.get(block, 'data_collection_endpoint_id', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        immutable_id: build.template(std.get(block, 'immutable_id', null)),
        kind: build.template(std.get(block, 'kind', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      data_collection_endpoint_id: resource.field(self._.blocks, 'data_collection_endpoint_id'),
      description: resource.field(self._.blocks, 'description'),
      id: resource.field(self._.blocks, 'id'),
      immutable_id: resource.field(self._.blocks, 'immutable_id'),
      kind: resource.field(self._.blocks, 'kind'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    monitor_data_collection_rule_association(name, block): {
      local resource = blockType.resource('azurerm_monitor_data_collection_rule_association', name),
      _: resource._(block, {
        data_collection_endpoint_id: build.template(std.get(block, 'data_collection_endpoint_id', null)),
        data_collection_rule_id: build.template(std.get(block, 'data_collection_rule_id', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        target_resource_id: build.template(block.target_resource_id),
      }),
      data_collection_endpoint_id: resource.field(self._.blocks, 'data_collection_endpoint_id'),
      data_collection_rule_id: resource.field(self._.blocks, 'data_collection_rule_id'),
      description: resource.field(self._.blocks, 'description'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      target_resource_id: resource.field(self._.blocks, 'target_resource_id'),
    },
    monitor_diagnostic_setting(name, block): {
      local resource = blockType.resource('azurerm_monitor_diagnostic_setting', name),
      _: resource._(block, {
        eventhub_authorization_rule_id: build.template(std.get(block, 'eventhub_authorization_rule_id', null)),
        eventhub_name: build.template(std.get(block, 'eventhub_name', null)),
        id: build.template(std.get(block, 'id', null)),
        log_analytics_destination_type: build.template(std.get(block, 'log_analytics_destination_type', null)),
        log_analytics_workspace_id: build.template(std.get(block, 'log_analytics_workspace_id', null)),
        name: build.template(block.name),
        partner_solution_id: build.template(std.get(block, 'partner_solution_id', null)),
        storage_account_id: build.template(std.get(block, 'storage_account_id', null)),
        target_resource_id: build.template(block.target_resource_id),
      }),
      eventhub_authorization_rule_id: resource.field(self._.blocks, 'eventhub_authorization_rule_id'),
      eventhub_name: resource.field(self._.blocks, 'eventhub_name'),
      id: resource.field(self._.blocks, 'id'),
      log_analytics_destination_type: resource.field(self._.blocks, 'log_analytics_destination_type'),
      log_analytics_workspace_id: resource.field(self._.blocks, 'log_analytics_workspace_id'),
      name: resource.field(self._.blocks, 'name'),
      partner_solution_id: resource.field(self._.blocks, 'partner_solution_id'),
      storage_account_id: resource.field(self._.blocks, 'storage_account_id'),
      target_resource_id: resource.field(self._.blocks, 'target_resource_id'),
    },
    monitor_metric_alert(name, block): {
      local resource = blockType.resource('azurerm_monitor_metric_alert', name),
      _: resource._(block, {
        auto_mitigate: build.template(std.get(block, 'auto_mitigate', null)),
        description: build.template(std.get(block, 'description', null)),
        enabled: build.template(std.get(block, 'enabled', null)),
        frequency: build.template(std.get(block, 'frequency', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        scopes: build.template(block.scopes),
        severity: build.template(std.get(block, 'severity', null)),
        tags: build.template(std.get(block, 'tags', null)),
        target_resource_location: build.template(std.get(block, 'target_resource_location', null)),
        target_resource_type: build.template(std.get(block, 'target_resource_type', null)),
        window_size: build.template(std.get(block, 'window_size', null)),
      }),
      auto_mitigate: resource.field(self._.blocks, 'auto_mitigate'),
      description: resource.field(self._.blocks, 'description'),
      enabled: resource.field(self._.blocks, 'enabled'),
      frequency: resource.field(self._.blocks, 'frequency'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      scopes: resource.field(self._.blocks, 'scopes'),
      severity: resource.field(self._.blocks, 'severity'),
      tags: resource.field(self._.blocks, 'tags'),
      target_resource_location: resource.field(self._.blocks, 'target_resource_location'),
      target_resource_type: resource.field(self._.blocks, 'target_resource_type'),
      window_size: resource.field(self._.blocks, 'window_size'),
    },
    monitor_private_link_scope(name, block): {
      local resource = blockType.resource('azurerm_monitor_private_link_scope', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        ingestion_access_mode: build.template(std.get(block, 'ingestion_access_mode', null)),
        name: build.template(block.name),
        query_access_mode: build.template(std.get(block, 'query_access_mode', null)),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      ingestion_access_mode: resource.field(self._.blocks, 'ingestion_access_mode'),
      name: resource.field(self._.blocks, 'name'),
      query_access_mode: resource.field(self._.blocks, 'query_access_mode'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    monitor_private_link_scoped_service(name, block): {
      local resource = blockType.resource('azurerm_monitor_private_link_scoped_service', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        linked_resource_id: build.template(block.linked_resource_id),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        scope_name: build.template(block.scope_name),
      }),
      id: resource.field(self._.blocks, 'id'),
      linked_resource_id: resource.field(self._.blocks, 'linked_resource_id'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      scope_name: resource.field(self._.blocks, 'scope_name'),
    },
    monitor_scheduled_query_rules_alert(name, block): {
      local resource = blockType.resource('azurerm_monitor_scheduled_query_rules_alert', name),
      _: resource._(block, {
        authorized_resource_ids: build.template(std.get(block, 'authorized_resource_ids', null)),
        auto_mitigation_enabled: build.template(std.get(block, 'auto_mitigation_enabled', null)),
        data_source_id: build.template(block.data_source_id),
        description: build.template(std.get(block, 'description', null)),
        enabled: build.template(std.get(block, 'enabled', null)),
        frequency: build.template(block.frequency),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        query: build.template(block.query),
        query_type: build.template(std.get(block, 'query_type', null)),
        resource_group_name: build.template(block.resource_group_name),
        severity: build.template(std.get(block, 'severity', null)),
        tags: build.template(std.get(block, 'tags', null)),
        throttling: build.template(std.get(block, 'throttling', null)),
        time_window: build.template(block.time_window),
      }),
      authorized_resource_ids: resource.field(self._.blocks, 'authorized_resource_ids'),
      auto_mitigation_enabled: resource.field(self._.blocks, 'auto_mitigation_enabled'),
      data_source_id: resource.field(self._.blocks, 'data_source_id'),
      description: resource.field(self._.blocks, 'description'),
      enabled: resource.field(self._.blocks, 'enabled'),
      frequency: resource.field(self._.blocks, 'frequency'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      query: resource.field(self._.blocks, 'query'),
      query_type: resource.field(self._.blocks, 'query_type'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      severity: resource.field(self._.blocks, 'severity'),
      tags: resource.field(self._.blocks, 'tags'),
      throttling: resource.field(self._.blocks, 'throttling'),
      time_window: resource.field(self._.blocks, 'time_window'),
    },
    monitor_scheduled_query_rules_alert_v2(name, block): {
      local resource = blockType.resource('azurerm_monitor_scheduled_query_rules_alert_v2', name),
      _: resource._(block, {
        auto_mitigation_enabled: build.template(std.get(block, 'auto_mitigation_enabled', null)),
        created_with_api_version: build.template(std.get(block, 'created_with_api_version', null)),
        description: build.template(std.get(block, 'description', null)),
        display_name: build.template(std.get(block, 'display_name', null)),
        enabled: build.template(std.get(block, 'enabled', null)),
        evaluation_frequency: build.template(block.evaluation_frequency),
        id: build.template(std.get(block, 'id', null)),
        is_a_legacy_log_analytics_rule: build.template(std.get(block, 'is_a_legacy_log_analytics_rule', null)),
        is_workspace_alerts_storage_configured: build.template(std.get(block, 'is_workspace_alerts_storage_configured', null)),
        location: build.template(block.location),
        mute_actions_after_alert_duration: build.template(std.get(block, 'mute_actions_after_alert_duration', null)),
        name: build.template(block.name),
        query_time_range_override: build.template(std.get(block, 'query_time_range_override', null)),
        resource_group_name: build.template(block.resource_group_name),
        scopes: build.template(block.scopes),
        severity: build.template(block.severity),
        skip_query_validation: build.template(std.get(block, 'skip_query_validation', null)),
        tags: build.template(std.get(block, 'tags', null)),
        target_resource_types: build.template(std.get(block, 'target_resource_types', null)),
        window_duration: build.template(block.window_duration),
        workspace_alerts_storage_enabled: build.template(std.get(block, 'workspace_alerts_storage_enabled', null)),
      }),
      auto_mitigation_enabled: resource.field(self._.blocks, 'auto_mitigation_enabled'),
      created_with_api_version: resource.field(self._.blocks, 'created_with_api_version'),
      description: resource.field(self._.blocks, 'description'),
      display_name: resource.field(self._.blocks, 'display_name'),
      enabled: resource.field(self._.blocks, 'enabled'),
      evaluation_frequency: resource.field(self._.blocks, 'evaluation_frequency'),
      id: resource.field(self._.blocks, 'id'),
      is_a_legacy_log_analytics_rule: resource.field(self._.blocks, 'is_a_legacy_log_analytics_rule'),
      is_workspace_alerts_storage_configured: resource.field(self._.blocks, 'is_workspace_alerts_storage_configured'),
      location: resource.field(self._.blocks, 'location'),
      mute_actions_after_alert_duration: resource.field(self._.blocks, 'mute_actions_after_alert_duration'),
      name: resource.field(self._.blocks, 'name'),
      query_time_range_override: resource.field(self._.blocks, 'query_time_range_override'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      scopes: resource.field(self._.blocks, 'scopes'),
      severity: resource.field(self._.blocks, 'severity'),
      skip_query_validation: resource.field(self._.blocks, 'skip_query_validation'),
      tags: resource.field(self._.blocks, 'tags'),
      target_resource_types: resource.field(self._.blocks, 'target_resource_types'),
      window_duration: resource.field(self._.blocks, 'window_duration'),
      workspace_alerts_storage_enabled: resource.field(self._.blocks, 'workspace_alerts_storage_enabled'),
    },
    monitor_scheduled_query_rules_log(name, block): {
      local resource = blockType.resource('azurerm_monitor_scheduled_query_rules_log', name),
      _: resource._(block, {
        authorized_resource_ids: build.template(std.get(block, 'authorized_resource_ids', null)),
        data_source_id: build.template(block.data_source_id),
        description: build.template(std.get(block, 'description', null)),
        enabled: build.template(std.get(block, 'enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      authorized_resource_ids: resource.field(self._.blocks, 'authorized_resource_ids'),
      data_source_id: resource.field(self._.blocks, 'data_source_id'),
      description: resource.field(self._.blocks, 'description'),
      enabled: resource.field(self._.blocks, 'enabled'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    monitor_smart_detector_alert_rule(name, block): {
      local resource = blockType.resource('azurerm_monitor_smart_detector_alert_rule', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        detector_type: build.template(block.detector_type),
        enabled: build.template(std.get(block, 'enabled', null)),
        frequency: build.template(block.frequency),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        scope_resource_ids: build.template(block.scope_resource_ids),
        severity: build.template(block.severity),
        tags: build.template(std.get(block, 'tags', null)),
        throttling_duration: build.template(std.get(block, 'throttling_duration', null)),
      }),
      description: resource.field(self._.blocks, 'description'),
      detector_type: resource.field(self._.blocks, 'detector_type'),
      enabled: resource.field(self._.blocks, 'enabled'),
      frequency: resource.field(self._.blocks, 'frequency'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      scope_resource_ids: resource.field(self._.blocks, 'scope_resource_ids'),
      severity: resource.field(self._.blocks, 'severity'),
      tags: resource.field(self._.blocks, 'tags'),
      throttling_duration: resource.field(self._.blocks, 'throttling_duration'),
    },
    monitor_workspace(name, block): {
      local resource = blockType.resource('azurerm_monitor_workspace', name),
      _: resource._(block, {
        default_data_collection_endpoint_id: build.template(std.get(block, 'default_data_collection_endpoint_id', null)),
        default_data_collection_rule_id: build.template(std.get(block, 'default_data_collection_rule_id', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        public_network_access_enabled: build.template(std.get(block, 'public_network_access_enabled', null)),
        query_endpoint: build.template(std.get(block, 'query_endpoint', null)),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      default_data_collection_endpoint_id: resource.field(self._.blocks, 'default_data_collection_endpoint_id'),
      default_data_collection_rule_id: resource.field(self._.blocks, 'default_data_collection_rule_id'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      public_network_access_enabled: resource.field(self._.blocks, 'public_network_access_enabled'),
      query_endpoint: resource.field(self._.blocks, 'query_endpoint'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    mssql_database(name, block): {
      local resource = blockType.resource('azurerm_mssql_database', name),
      _: resource._(block, {
        auto_pause_delay_in_minutes: build.template(std.get(block, 'auto_pause_delay_in_minutes', null)),
        collation: build.template(std.get(block, 'collation', null)),
        create_mode: build.template(std.get(block, 'create_mode', null)),
        creation_source_database_id: build.template(std.get(block, 'creation_source_database_id', null)),
        elastic_pool_id: build.template(std.get(block, 'elastic_pool_id', null)),
        enclave_type: build.template(std.get(block, 'enclave_type', null)),
        geo_backup_enabled: build.template(std.get(block, 'geo_backup_enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        ledger_enabled: build.template(std.get(block, 'ledger_enabled', null)),
        license_type: build.template(std.get(block, 'license_type', null)),
        maintenance_configuration_name: build.template(std.get(block, 'maintenance_configuration_name', null)),
        max_size_gb: build.template(std.get(block, 'max_size_gb', null)),
        min_capacity: build.template(std.get(block, 'min_capacity', null)),
        name: build.template(block.name),
        read_replica_count: build.template(std.get(block, 'read_replica_count', null)),
        read_scale: build.template(std.get(block, 'read_scale', null)),
        recover_database_id: build.template(std.get(block, 'recover_database_id', null)),
        recovery_point_id: build.template(std.get(block, 'recovery_point_id', null)),
        restore_dropped_database_id: build.template(std.get(block, 'restore_dropped_database_id', null)),
        restore_long_term_retention_backup_id: build.template(std.get(block, 'restore_long_term_retention_backup_id', null)),
        restore_point_in_time: build.template(std.get(block, 'restore_point_in_time', null)),
        sample_name: build.template(std.get(block, 'sample_name', null)),
        secondary_type: build.template(std.get(block, 'secondary_type', null)),
        server_id: build.template(block.server_id),
        sku_name: build.template(std.get(block, 'sku_name', null)),
        storage_account_type: build.template(std.get(block, 'storage_account_type', null)),
        tags: build.template(std.get(block, 'tags', null)),
        transparent_data_encryption_enabled: build.template(std.get(block, 'transparent_data_encryption_enabled', null)),
        transparent_data_encryption_key_automatic_rotation_enabled: build.template(std.get(block, 'transparent_data_encryption_key_automatic_rotation_enabled', null)),
        transparent_data_encryption_key_vault_key_id: build.template(std.get(block, 'transparent_data_encryption_key_vault_key_id', null)),
        zone_redundant: build.template(std.get(block, 'zone_redundant', null)),
      }),
      auto_pause_delay_in_minutes: resource.field(self._.blocks, 'auto_pause_delay_in_minutes'),
      collation: resource.field(self._.blocks, 'collation'),
      create_mode: resource.field(self._.blocks, 'create_mode'),
      creation_source_database_id: resource.field(self._.blocks, 'creation_source_database_id'),
      elastic_pool_id: resource.field(self._.blocks, 'elastic_pool_id'),
      enclave_type: resource.field(self._.blocks, 'enclave_type'),
      geo_backup_enabled: resource.field(self._.blocks, 'geo_backup_enabled'),
      id: resource.field(self._.blocks, 'id'),
      ledger_enabled: resource.field(self._.blocks, 'ledger_enabled'),
      license_type: resource.field(self._.blocks, 'license_type'),
      maintenance_configuration_name: resource.field(self._.blocks, 'maintenance_configuration_name'),
      max_size_gb: resource.field(self._.blocks, 'max_size_gb'),
      min_capacity: resource.field(self._.blocks, 'min_capacity'),
      name: resource.field(self._.blocks, 'name'),
      read_replica_count: resource.field(self._.blocks, 'read_replica_count'),
      read_scale: resource.field(self._.blocks, 'read_scale'),
      recover_database_id: resource.field(self._.blocks, 'recover_database_id'),
      recovery_point_id: resource.field(self._.blocks, 'recovery_point_id'),
      restore_dropped_database_id: resource.field(self._.blocks, 'restore_dropped_database_id'),
      restore_long_term_retention_backup_id: resource.field(self._.blocks, 'restore_long_term_retention_backup_id'),
      restore_point_in_time: resource.field(self._.blocks, 'restore_point_in_time'),
      sample_name: resource.field(self._.blocks, 'sample_name'),
      secondary_type: resource.field(self._.blocks, 'secondary_type'),
      server_id: resource.field(self._.blocks, 'server_id'),
      sku_name: resource.field(self._.blocks, 'sku_name'),
      storage_account_type: resource.field(self._.blocks, 'storage_account_type'),
      tags: resource.field(self._.blocks, 'tags'),
      transparent_data_encryption_enabled: resource.field(self._.blocks, 'transparent_data_encryption_enabled'),
      transparent_data_encryption_key_automatic_rotation_enabled: resource.field(self._.blocks, 'transparent_data_encryption_key_automatic_rotation_enabled'),
      transparent_data_encryption_key_vault_key_id: resource.field(self._.blocks, 'transparent_data_encryption_key_vault_key_id'),
      zone_redundant: resource.field(self._.blocks, 'zone_redundant'),
    },
    mssql_database_extended_auditing_policy(name, block): {
      local resource = blockType.resource('azurerm_mssql_database_extended_auditing_policy', name),
      _: resource._(block, {
        database_id: build.template(block.database_id),
        enabled: build.template(std.get(block, 'enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        log_monitoring_enabled: build.template(std.get(block, 'log_monitoring_enabled', null)),
        retention_in_days: build.template(std.get(block, 'retention_in_days', null)),
        storage_account_access_key: build.template(std.get(block, 'storage_account_access_key', null)),
        storage_account_access_key_is_secondary: build.template(std.get(block, 'storage_account_access_key_is_secondary', null)),
        storage_endpoint: build.template(std.get(block, 'storage_endpoint', null)),
      }),
      database_id: resource.field(self._.blocks, 'database_id'),
      enabled: resource.field(self._.blocks, 'enabled'),
      id: resource.field(self._.blocks, 'id'),
      log_monitoring_enabled: resource.field(self._.blocks, 'log_monitoring_enabled'),
      retention_in_days: resource.field(self._.blocks, 'retention_in_days'),
      storage_account_access_key: resource.field(self._.blocks, 'storage_account_access_key'),
      storage_account_access_key_is_secondary: resource.field(self._.blocks, 'storage_account_access_key_is_secondary'),
      storage_endpoint: resource.field(self._.blocks, 'storage_endpoint'),
    },
    mssql_database_vulnerability_assessment_rule_baseline(name, block): {
      local resource = blockType.resource('azurerm_mssql_database_vulnerability_assessment_rule_baseline', name),
      _: resource._(block, {
        baseline_name: build.template(std.get(block, 'baseline_name', null)),
        database_name: build.template(block.database_name),
        id: build.template(std.get(block, 'id', null)),
        rule_id: build.template(block.rule_id),
        server_vulnerability_assessment_id: build.template(block.server_vulnerability_assessment_id),
      }),
      baseline_name: resource.field(self._.blocks, 'baseline_name'),
      database_name: resource.field(self._.blocks, 'database_name'),
      id: resource.field(self._.blocks, 'id'),
      rule_id: resource.field(self._.blocks, 'rule_id'),
      server_vulnerability_assessment_id: resource.field(self._.blocks, 'server_vulnerability_assessment_id'),
    },
    mssql_elasticpool(name, block): {
      local resource = blockType.resource('azurerm_mssql_elasticpool', name),
      _: resource._(block, {
        enclave_type: build.template(std.get(block, 'enclave_type', null)),
        id: build.template(std.get(block, 'id', null)),
        license_type: build.template(std.get(block, 'license_type', null)),
        location: build.template(block.location),
        maintenance_configuration_name: build.template(std.get(block, 'maintenance_configuration_name', null)),
        max_size_bytes: build.template(std.get(block, 'max_size_bytes', null)),
        max_size_gb: build.template(std.get(block, 'max_size_gb', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        server_name: build.template(block.server_name),
        tags: build.template(std.get(block, 'tags', null)),
        zone_redundant: build.template(std.get(block, 'zone_redundant', null)),
      }),
      enclave_type: resource.field(self._.blocks, 'enclave_type'),
      id: resource.field(self._.blocks, 'id'),
      license_type: resource.field(self._.blocks, 'license_type'),
      location: resource.field(self._.blocks, 'location'),
      maintenance_configuration_name: resource.field(self._.blocks, 'maintenance_configuration_name'),
      max_size_bytes: resource.field(self._.blocks, 'max_size_bytes'),
      max_size_gb: resource.field(self._.blocks, 'max_size_gb'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      server_name: resource.field(self._.blocks, 'server_name'),
      tags: resource.field(self._.blocks, 'tags'),
      zone_redundant: resource.field(self._.blocks, 'zone_redundant'),
    },
    mssql_failover_group(name, block): {
      local resource = blockType.resource('azurerm_mssql_failover_group', name),
      _: resource._(block, {
        databases: build.template(std.get(block, 'databases', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        readonly_endpoint_failover_policy_enabled: build.template(std.get(block, 'readonly_endpoint_failover_policy_enabled', null)),
        server_id: build.template(block.server_id),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      databases: resource.field(self._.blocks, 'databases'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      readonly_endpoint_failover_policy_enabled: resource.field(self._.blocks, 'readonly_endpoint_failover_policy_enabled'),
      server_id: resource.field(self._.blocks, 'server_id'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    mssql_firewall_rule(name, block): {
      local resource = blockType.resource('azurerm_mssql_firewall_rule', name),
      _: resource._(block, {
        end_ip_address: build.template(block.end_ip_address),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        server_id: build.template(block.server_id),
        start_ip_address: build.template(block.start_ip_address),
      }),
      end_ip_address: resource.field(self._.blocks, 'end_ip_address'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      server_id: resource.field(self._.blocks, 'server_id'),
      start_ip_address: resource.field(self._.blocks, 'start_ip_address'),
    },
    mssql_job(name, block): {
      local resource = blockType.resource('azurerm_mssql_job', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        job_agent_id: build.template(block.job_agent_id),
        name: build.template(block.name),
      }),
      description: resource.field(self._.blocks, 'description'),
      id: resource.field(self._.blocks, 'id'),
      job_agent_id: resource.field(self._.blocks, 'job_agent_id'),
      name: resource.field(self._.blocks, 'name'),
    },
    mssql_job_agent(name, block): {
      local resource = blockType.resource('azurerm_mssql_job_agent', name),
      _: resource._(block, {
        database_id: build.template(block.database_id),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      database_id: resource.field(self._.blocks, 'database_id'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    mssql_job_credential(name, block): {
      local resource = blockType.resource('azurerm_mssql_job_credential', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        job_agent_id: build.template(block.job_agent_id),
        name: build.template(block.name),
        password: build.template(std.get(block, 'password', null)),
        password_wo: build.template(std.get(block, 'password_wo', null)),
        password_wo_version: build.template(std.get(block, 'password_wo_version', null)),
        username: build.template(block.username),
      }),
      id: resource.field(self._.blocks, 'id'),
      job_agent_id: resource.field(self._.blocks, 'job_agent_id'),
      name: resource.field(self._.blocks, 'name'),
      password: resource.field(self._.blocks, 'password'),
      password_wo: resource.field(self._.blocks, 'password_wo'),
      password_wo_version: resource.field(self._.blocks, 'password_wo_version'),
      username: resource.field(self._.blocks, 'username'),
    },
    mssql_job_schedule(name, block): {
      local resource = blockType.resource('azurerm_mssql_job_schedule', name),
      _: resource._(block, {
        enabled: build.template(std.get(block, 'enabled', null)),
        end_time: build.template(std.get(block, 'end_time', null)),
        id: build.template(std.get(block, 'id', null)),
        interval: build.template(std.get(block, 'interval', null)),
        job_id: build.template(block.job_id),
        start_time: build.template(std.get(block, 'start_time', null)),
        type: build.template(block.type),
      }),
      enabled: resource.field(self._.blocks, 'enabled'),
      end_time: resource.field(self._.blocks, 'end_time'),
      id: resource.field(self._.blocks, 'id'),
      interval: resource.field(self._.blocks, 'interval'),
      job_id: resource.field(self._.blocks, 'job_id'),
      start_time: resource.field(self._.blocks, 'start_time'),
      type: resource.field(self._.blocks, 'type'),
    },
    mssql_job_step(name, block): {
      local resource = blockType.resource('azurerm_mssql_job_step', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        initial_retry_interval_seconds: build.template(std.get(block, 'initial_retry_interval_seconds', null)),
        job_credential_id: build.template(block.job_credential_id),
        job_id: build.template(block.job_id),
        job_step_index: build.template(block.job_step_index),
        job_target_group_id: build.template(block.job_target_group_id),
        maximum_retry_interval_seconds: build.template(std.get(block, 'maximum_retry_interval_seconds', null)),
        name: build.template(block.name),
        retry_attempts: build.template(std.get(block, 'retry_attempts', null)),
        retry_interval_backoff_multiplier: build.template(std.get(block, 'retry_interval_backoff_multiplier', null)),
        sql_script: build.template(block.sql_script),
        timeout_seconds: build.template(std.get(block, 'timeout_seconds', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      initial_retry_interval_seconds: resource.field(self._.blocks, 'initial_retry_interval_seconds'),
      job_credential_id: resource.field(self._.blocks, 'job_credential_id'),
      job_id: resource.field(self._.blocks, 'job_id'),
      job_step_index: resource.field(self._.blocks, 'job_step_index'),
      job_target_group_id: resource.field(self._.blocks, 'job_target_group_id'),
      maximum_retry_interval_seconds: resource.field(self._.blocks, 'maximum_retry_interval_seconds'),
      name: resource.field(self._.blocks, 'name'),
      retry_attempts: resource.field(self._.blocks, 'retry_attempts'),
      retry_interval_backoff_multiplier: resource.field(self._.blocks, 'retry_interval_backoff_multiplier'),
      sql_script: resource.field(self._.blocks, 'sql_script'),
      timeout_seconds: resource.field(self._.blocks, 'timeout_seconds'),
    },
    mssql_job_target_group(name, block): {
      local resource = blockType.resource('azurerm_mssql_job_target_group', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        job_agent_id: build.template(block.job_agent_id),
        name: build.template(block.name),
      }),
      id: resource.field(self._.blocks, 'id'),
      job_agent_id: resource.field(self._.blocks, 'job_agent_id'),
      name: resource.field(self._.blocks, 'name'),
    },
    mssql_managed_database(name, block): {
      local resource = blockType.resource('azurerm_mssql_managed_database', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        managed_instance_id: build.template(block.managed_instance_id),
        name: build.template(block.name),
        short_term_retention_days: build.template(std.get(block, 'short_term_retention_days', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      managed_instance_id: resource.field(self._.blocks, 'managed_instance_id'),
      name: resource.field(self._.blocks, 'name'),
      short_term_retention_days: resource.field(self._.blocks, 'short_term_retention_days'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    mssql_managed_instance(name, block): {
      local resource = blockType.resource('azurerm_mssql_managed_instance', name),
      _: resource._(block, {
        administrator_login: build.template(std.get(block, 'administrator_login', null)),
        administrator_login_password: build.template(std.get(block, 'administrator_login_password', null)),
        collation: build.template(std.get(block, 'collation', null)),
        database_format: build.template(std.get(block, 'database_format', null)),
        dns_zone: build.template(std.get(block, 'dns_zone', null)),
        dns_zone_partner_id: build.template(std.get(block, 'dns_zone_partner_id', null)),
        fqdn: build.template(std.get(block, 'fqdn', null)),
        hybrid_secondary_usage: build.template(std.get(block, 'hybrid_secondary_usage', null)),
        id: build.template(std.get(block, 'id', null)),
        license_type: build.template(block.license_type),
        location: build.template(block.location),
        maintenance_configuration_name: build.template(std.get(block, 'maintenance_configuration_name', null)),
        minimum_tls_version: build.template(std.get(block, 'minimum_tls_version', null)),
        name: build.template(block.name),
        proxy_override: build.template(std.get(block, 'proxy_override', null)),
        public_data_endpoint_enabled: build.template(std.get(block, 'public_data_endpoint_enabled', null)),
        resource_group_name: build.template(block.resource_group_name),
        service_principal_type: build.template(std.get(block, 'service_principal_type', null)),
        sku_name: build.template(block.sku_name),
        storage_account_type: build.template(std.get(block, 'storage_account_type', null)),
        storage_size_in_gb: build.template(block.storage_size_in_gb),
        subnet_id: build.template(block.subnet_id),
        tags: build.template(std.get(block, 'tags', null)),
        timezone_id: build.template(std.get(block, 'timezone_id', null)),
        vcores: build.template(block.vcores),
        zone_redundant_enabled: build.template(std.get(block, 'zone_redundant_enabled', null)),
      }),
      administrator_login: resource.field(self._.blocks, 'administrator_login'),
      administrator_login_password: resource.field(self._.blocks, 'administrator_login_password'),
      collation: resource.field(self._.blocks, 'collation'),
      database_format: resource.field(self._.blocks, 'database_format'),
      dns_zone: resource.field(self._.blocks, 'dns_zone'),
      dns_zone_partner_id: resource.field(self._.blocks, 'dns_zone_partner_id'),
      fqdn: resource.field(self._.blocks, 'fqdn'),
      hybrid_secondary_usage: resource.field(self._.blocks, 'hybrid_secondary_usage'),
      id: resource.field(self._.blocks, 'id'),
      license_type: resource.field(self._.blocks, 'license_type'),
      location: resource.field(self._.blocks, 'location'),
      maintenance_configuration_name: resource.field(self._.blocks, 'maintenance_configuration_name'),
      minimum_tls_version: resource.field(self._.blocks, 'minimum_tls_version'),
      name: resource.field(self._.blocks, 'name'),
      proxy_override: resource.field(self._.blocks, 'proxy_override'),
      public_data_endpoint_enabled: resource.field(self._.blocks, 'public_data_endpoint_enabled'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      service_principal_type: resource.field(self._.blocks, 'service_principal_type'),
      sku_name: resource.field(self._.blocks, 'sku_name'),
      storage_account_type: resource.field(self._.blocks, 'storage_account_type'),
      storage_size_in_gb: resource.field(self._.blocks, 'storage_size_in_gb'),
      subnet_id: resource.field(self._.blocks, 'subnet_id'),
      tags: resource.field(self._.blocks, 'tags'),
      timezone_id: resource.field(self._.blocks, 'timezone_id'),
      vcores: resource.field(self._.blocks, 'vcores'),
      zone_redundant_enabled: resource.field(self._.blocks, 'zone_redundant_enabled'),
    },
    mssql_managed_instance_active_directory_administrator(name, block): {
      local resource = blockType.resource('azurerm_mssql_managed_instance_active_directory_administrator', name),
      _: resource._(block, {
        azuread_authentication_only: build.template(std.get(block, 'azuread_authentication_only', null)),
        id: build.template(std.get(block, 'id', null)),
        login_username: build.template(block.login_username),
        managed_instance_id: build.template(block.managed_instance_id),
        object_id: build.template(block.object_id),
        tenant_id: build.template(block.tenant_id),
      }),
      azuread_authentication_only: resource.field(self._.blocks, 'azuread_authentication_only'),
      id: resource.field(self._.blocks, 'id'),
      login_username: resource.field(self._.blocks, 'login_username'),
      managed_instance_id: resource.field(self._.blocks, 'managed_instance_id'),
      object_id: resource.field(self._.blocks, 'object_id'),
      tenant_id: resource.field(self._.blocks, 'tenant_id'),
    },
    mssql_managed_instance_failover_group(name, block): {
      local resource = blockType.resource('azurerm_mssql_managed_instance_failover_group', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        managed_instance_id: build.template(block.managed_instance_id),
        name: build.template(block.name),
        partner_managed_instance_id: build.template(block.partner_managed_instance_id),
        partner_region: build.template(std.get(block, 'partner_region', null)),
        readonly_endpoint_failover_policy_enabled: build.template(std.get(block, 'readonly_endpoint_failover_policy_enabled', null)),
        role: build.template(std.get(block, 'role', null)),
        secondary_type: build.template(std.get(block, 'secondary_type', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      managed_instance_id: resource.field(self._.blocks, 'managed_instance_id'),
      name: resource.field(self._.blocks, 'name'),
      partner_managed_instance_id: resource.field(self._.blocks, 'partner_managed_instance_id'),
      partner_region: resource.field(self._.blocks, 'partner_region'),
      readonly_endpoint_failover_policy_enabled: resource.field(self._.blocks, 'readonly_endpoint_failover_policy_enabled'),
      role: resource.field(self._.blocks, 'role'),
      secondary_type: resource.field(self._.blocks, 'secondary_type'),
    },
    mssql_managed_instance_security_alert_policy(name, block): {
      local resource = blockType.resource('azurerm_mssql_managed_instance_security_alert_policy', name),
      _: resource._(block, {
        disabled_alerts: build.template(std.get(block, 'disabled_alerts', null)),
        email_account_admins_enabled: build.template(std.get(block, 'email_account_admins_enabled', null)),
        email_addresses: build.template(std.get(block, 'email_addresses', null)),
        enabled: build.template(std.get(block, 'enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        managed_instance_name: build.template(block.managed_instance_name),
        resource_group_name: build.template(block.resource_group_name),
        retention_days: build.template(std.get(block, 'retention_days', null)),
        storage_account_access_key: build.template(std.get(block, 'storage_account_access_key', null)),
        storage_endpoint: build.template(std.get(block, 'storage_endpoint', null)),
      }),
      disabled_alerts: resource.field(self._.blocks, 'disabled_alerts'),
      email_account_admins_enabled: resource.field(self._.blocks, 'email_account_admins_enabled'),
      email_addresses: resource.field(self._.blocks, 'email_addresses'),
      enabled: resource.field(self._.blocks, 'enabled'),
      id: resource.field(self._.blocks, 'id'),
      managed_instance_name: resource.field(self._.blocks, 'managed_instance_name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      retention_days: resource.field(self._.blocks, 'retention_days'),
      storage_account_access_key: resource.field(self._.blocks, 'storage_account_access_key'),
      storage_endpoint: resource.field(self._.blocks, 'storage_endpoint'),
    },
    mssql_managed_instance_transparent_data_encryption(name, block): {
      local resource = blockType.resource('azurerm_mssql_managed_instance_transparent_data_encryption', name),
      _: resource._(block, {
        auto_rotation_enabled: build.template(std.get(block, 'auto_rotation_enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        key_vault_key_id: build.template(std.get(block, 'key_vault_key_id', null)),
        managed_hsm_key_id: build.template(std.get(block, 'managed_hsm_key_id', null)),
        managed_instance_id: build.template(block.managed_instance_id),
      }),
      auto_rotation_enabled: resource.field(self._.blocks, 'auto_rotation_enabled'),
      id: resource.field(self._.blocks, 'id'),
      key_vault_key_id: resource.field(self._.blocks, 'key_vault_key_id'),
      managed_hsm_key_id: resource.field(self._.blocks, 'managed_hsm_key_id'),
      managed_instance_id: resource.field(self._.blocks, 'managed_instance_id'),
    },
    mssql_managed_instance_vulnerability_assessment(name, block): {
      local resource = blockType.resource('azurerm_mssql_managed_instance_vulnerability_assessment', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        managed_instance_id: build.template(block.managed_instance_id),
        storage_account_access_key: build.template(std.get(block, 'storage_account_access_key', null)),
        storage_container_path: build.template(block.storage_container_path),
        storage_container_sas_key: build.template(std.get(block, 'storage_container_sas_key', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      managed_instance_id: resource.field(self._.blocks, 'managed_instance_id'),
      storage_account_access_key: resource.field(self._.blocks, 'storage_account_access_key'),
      storage_container_path: resource.field(self._.blocks, 'storage_container_path'),
      storage_container_sas_key: resource.field(self._.blocks, 'storage_container_sas_key'),
    },
    mssql_outbound_firewall_rule(name, block): {
      local resource = blockType.resource('azurerm_mssql_outbound_firewall_rule', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        server_id: build.template(block.server_id),
      }),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      server_id: resource.field(self._.blocks, 'server_id'),
    },
    mssql_server(name, block): {
      local resource = blockType.resource('azurerm_mssql_server', name),
      _: resource._(block, {
        administrator_login: build.template(std.get(block, 'administrator_login', null)),
        administrator_login_password: build.template(std.get(block, 'administrator_login_password', null)),
        administrator_login_password_wo: build.template(std.get(block, 'administrator_login_password_wo', null)),
        administrator_login_password_wo_version: build.template(std.get(block, 'administrator_login_password_wo_version', null)),
        connection_policy: build.template(std.get(block, 'connection_policy', null)),
        fully_qualified_domain_name: build.template(std.get(block, 'fully_qualified_domain_name', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        minimum_tls_version: build.template(std.get(block, 'minimum_tls_version', null)),
        name: build.template(block.name),
        outbound_network_restriction_enabled: build.template(std.get(block, 'outbound_network_restriction_enabled', null)),
        primary_user_assigned_identity_id: build.template(std.get(block, 'primary_user_assigned_identity_id', null)),
        public_network_access_enabled: build.template(std.get(block, 'public_network_access_enabled', null)),
        resource_group_name: build.template(block.resource_group_name),
        restorable_dropped_database_ids: build.template(std.get(block, 'restorable_dropped_database_ids', null)),
        tags: build.template(std.get(block, 'tags', null)),
        transparent_data_encryption_key_vault_key_id: build.template(std.get(block, 'transparent_data_encryption_key_vault_key_id', null)),
        version: build.template(block.version),
      }),
      administrator_login: resource.field(self._.blocks, 'administrator_login'),
      administrator_login_password: resource.field(self._.blocks, 'administrator_login_password'),
      administrator_login_password_wo: resource.field(self._.blocks, 'administrator_login_password_wo'),
      administrator_login_password_wo_version: resource.field(self._.blocks, 'administrator_login_password_wo_version'),
      connection_policy: resource.field(self._.blocks, 'connection_policy'),
      fully_qualified_domain_name: resource.field(self._.blocks, 'fully_qualified_domain_name'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      minimum_tls_version: resource.field(self._.blocks, 'minimum_tls_version'),
      name: resource.field(self._.blocks, 'name'),
      outbound_network_restriction_enabled: resource.field(self._.blocks, 'outbound_network_restriction_enabled'),
      primary_user_assigned_identity_id: resource.field(self._.blocks, 'primary_user_assigned_identity_id'),
      public_network_access_enabled: resource.field(self._.blocks, 'public_network_access_enabled'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      restorable_dropped_database_ids: resource.field(self._.blocks, 'restorable_dropped_database_ids'),
      tags: resource.field(self._.blocks, 'tags'),
      transparent_data_encryption_key_vault_key_id: resource.field(self._.blocks, 'transparent_data_encryption_key_vault_key_id'),
      version: resource.field(self._.blocks, 'version'),
    },
    mssql_server_dns_alias(name, block): {
      local resource = blockType.resource('azurerm_mssql_server_dns_alias', name),
      _: resource._(block, {
        dns_record: build.template(std.get(block, 'dns_record', null)),
        id: build.template(std.get(block, 'id', null)),
        mssql_server_id: build.template(block.mssql_server_id),
        name: build.template(block.name),
      }),
      dns_record: resource.field(self._.blocks, 'dns_record'),
      id: resource.field(self._.blocks, 'id'),
      mssql_server_id: resource.field(self._.blocks, 'mssql_server_id'),
      name: resource.field(self._.blocks, 'name'),
    },
    mssql_server_extended_auditing_policy(name, block): {
      local resource = blockType.resource('azurerm_mssql_server_extended_auditing_policy', name),
      _: resource._(block, {
        audit_actions_and_groups: build.template(std.get(block, 'audit_actions_and_groups', null)),
        enabled: build.template(std.get(block, 'enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        log_monitoring_enabled: build.template(std.get(block, 'log_monitoring_enabled', null)),
        predicate_expression: build.template(std.get(block, 'predicate_expression', null)),
        retention_in_days: build.template(std.get(block, 'retention_in_days', null)),
        server_id: build.template(block.server_id),
        storage_account_access_key: build.template(std.get(block, 'storage_account_access_key', null)),
        storage_account_access_key_is_secondary: build.template(std.get(block, 'storage_account_access_key_is_secondary', null)),
        storage_account_subscription_id: build.template(std.get(block, 'storage_account_subscription_id', null)),
        storage_endpoint: build.template(std.get(block, 'storage_endpoint', null)),
      }),
      audit_actions_and_groups: resource.field(self._.blocks, 'audit_actions_and_groups'),
      enabled: resource.field(self._.blocks, 'enabled'),
      id: resource.field(self._.blocks, 'id'),
      log_monitoring_enabled: resource.field(self._.blocks, 'log_monitoring_enabled'),
      predicate_expression: resource.field(self._.blocks, 'predicate_expression'),
      retention_in_days: resource.field(self._.blocks, 'retention_in_days'),
      server_id: resource.field(self._.blocks, 'server_id'),
      storage_account_access_key: resource.field(self._.blocks, 'storage_account_access_key'),
      storage_account_access_key_is_secondary: resource.field(self._.blocks, 'storage_account_access_key_is_secondary'),
      storage_account_subscription_id: resource.field(self._.blocks, 'storage_account_subscription_id'),
      storage_endpoint: resource.field(self._.blocks, 'storage_endpoint'),
    },
    mssql_server_microsoft_support_auditing_policy(name, block): {
      local resource = blockType.resource('azurerm_mssql_server_microsoft_support_auditing_policy', name),
      _: resource._(block, {
        blob_storage_endpoint: build.template(std.get(block, 'blob_storage_endpoint', null)),
        enabled: build.template(std.get(block, 'enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        log_monitoring_enabled: build.template(std.get(block, 'log_monitoring_enabled', null)),
        server_id: build.template(block.server_id),
        storage_account_access_key: build.template(std.get(block, 'storage_account_access_key', null)),
        storage_account_subscription_id: build.template(std.get(block, 'storage_account_subscription_id', null)),
      }),
      blob_storage_endpoint: resource.field(self._.blocks, 'blob_storage_endpoint'),
      enabled: resource.field(self._.blocks, 'enabled'),
      id: resource.field(self._.blocks, 'id'),
      log_monitoring_enabled: resource.field(self._.blocks, 'log_monitoring_enabled'),
      server_id: resource.field(self._.blocks, 'server_id'),
      storage_account_access_key: resource.field(self._.blocks, 'storage_account_access_key'),
      storage_account_subscription_id: resource.field(self._.blocks, 'storage_account_subscription_id'),
    },
    mssql_server_security_alert_policy(name, block): {
      local resource = blockType.resource('azurerm_mssql_server_security_alert_policy', name),
      _: resource._(block, {
        disabled_alerts: build.template(std.get(block, 'disabled_alerts', null)),
        email_account_admins: build.template(std.get(block, 'email_account_admins', null)),
        email_addresses: build.template(std.get(block, 'email_addresses', null)),
        id: build.template(std.get(block, 'id', null)),
        resource_group_name: build.template(block.resource_group_name),
        retention_days: build.template(std.get(block, 'retention_days', null)),
        server_name: build.template(block.server_name),
        state: build.template(block.state),
        storage_account_access_key: build.template(std.get(block, 'storage_account_access_key', null)),
        storage_endpoint: build.template(std.get(block, 'storage_endpoint', null)),
      }),
      disabled_alerts: resource.field(self._.blocks, 'disabled_alerts'),
      email_account_admins: resource.field(self._.blocks, 'email_account_admins'),
      email_addresses: resource.field(self._.blocks, 'email_addresses'),
      id: resource.field(self._.blocks, 'id'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      retention_days: resource.field(self._.blocks, 'retention_days'),
      server_name: resource.field(self._.blocks, 'server_name'),
      state: resource.field(self._.blocks, 'state'),
      storage_account_access_key: resource.field(self._.blocks, 'storage_account_access_key'),
      storage_endpoint: resource.field(self._.blocks, 'storage_endpoint'),
    },
    mssql_server_transparent_data_encryption(name, block): {
      local resource = blockType.resource('azurerm_mssql_server_transparent_data_encryption', name),
      _: resource._(block, {
        auto_rotation_enabled: build.template(std.get(block, 'auto_rotation_enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        key_vault_key_id: build.template(std.get(block, 'key_vault_key_id', null)),
        managed_hsm_key_id: build.template(std.get(block, 'managed_hsm_key_id', null)),
        server_id: build.template(block.server_id),
      }),
      auto_rotation_enabled: resource.field(self._.blocks, 'auto_rotation_enabled'),
      id: resource.field(self._.blocks, 'id'),
      key_vault_key_id: resource.field(self._.blocks, 'key_vault_key_id'),
      managed_hsm_key_id: resource.field(self._.blocks, 'managed_hsm_key_id'),
      server_id: resource.field(self._.blocks, 'server_id'),
    },
    mssql_server_vulnerability_assessment(name, block): {
      local resource = blockType.resource('azurerm_mssql_server_vulnerability_assessment', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        server_security_alert_policy_id: build.template(block.server_security_alert_policy_id),
        storage_account_access_key: build.template(std.get(block, 'storage_account_access_key', null)),
        storage_container_path: build.template(block.storage_container_path),
        storage_container_sas_key: build.template(std.get(block, 'storage_container_sas_key', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      server_security_alert_policy_id: resource.field(self._.blocks, 'server_security_alert_policy_id'),
      storage_account_access_key: resource.field(self._.blocks, 'storage_account_access_key'),
      storage_container_path: resource.field(self._.blocks, 'storage_container_path'),
      storage_container_sas_key: resource.field(self._.blocks, 'storage_container_sas_key'),
    },
    mssql_virtual_machine(name, block): {
      local resource = blockType.resource('azurerm_mssql_virtual_machine', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        r_services_enabled: build.template(std.get(block, 'r_services_enabled', null)),
        sql_connectivity_port: build.template(std.get(block, 'sql_connectivity_port', null)),
        sql_connectivity_type: build.template(std.get(block, 'sql_connectivity_type', null)),
        sql_connectivity_update_password: build.template(std.get(block, 'sql_connectivity_update_password', null)),
        sql_connectivity_update_username: build.template(std.get(block, 'sql_connectivity_update_username', null)),
        sql_license_type: build.template(std.get(block, 'sql_license_type', null)),
        sql_virtual_machine_group_id: build.template(std.get(block, 'sql_virtual_machine_group_id', null)),
        tags: build.template(std.get(block, 'tags', null)),
        virtual_machine_id: build.template(block.virtual_machine_id),
      }),
      id: resource.field(self._.blocks, 'id'),
      r_services_enabled: resource.field(self._.blocks, 'r_services_enabled'),
      sql_connectivity_port: resource.field(self._.blocks, 'sql_connectivity_port'),
      sql_connectivity_type: resource.field(self._.blocks, 'sql_connectivity_type'),
      sql_connectivity_update_password: resource.field(self._.blocks, 'sql_connectivity_update_password'),
      sql_connectivity_update_username: resource.field(self._.blocks, 'sql_connectivity_update_username'),
      sql_license_type: resource.field(self._.blocks, 'sql_license_type'),
      sql_virtual_machine_group_id: resource.field(self._.blocks, 'sql_virtual_machine_group_id'),
      tags: resource.field(self._.blocks, 'tags'),
      virtual_machine_id: resource.field(self._.blocks, 'virtual_machine_id'),
    },
    mssql_virtual_machine_availability_group_listener(name, block): {
      local resource = blockType.resource('azurerm_mssql_virtual_machine_availability_group_listener', name),
      _: resource._(block, {
        availability_group_name: build.template(std.get(block, 'availability_group_name', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        port: build.template(std.get(block, 'port', null)),
        sql_virtual_machine_group_id: build.template(block.sql_virtual_machine_group_id),
      }),
      availability_group_name: resource.field(self._.blocks, 'availability_group_name'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      port: resource.field(self._.blocks, 'port'),
      sql_virtual_machine_group_id: resource.field(self._.blocks, 'sql_virtual_machine_group_id'),
    },
    mssql_virtual_machine_group(name, block): {
      local resource = blockType.resource('azurerm_mssql_virtual_machine_group', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        sql_image_offer: build.template(block.sql_image_offer),
        sql_image_sku: build.template(block.sql_image_sku),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      sql_image_offer: resource.field(self._.blocks, 'sql_image_offer'),
      sql_image_sku: resource.field(self._.blocks, 'sql_image_sku'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    mssql_virtual_network_rule(name, block): {
      local resource = blockType.resource('azurerm_mssql_virtual_network_rule', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        ignore_missing_vnet_service_endpoint: build.template(std.get(block, 'ignore_missing_vnet_service_endpoint', null)),
        name: build.template(block.name),
        server_id: build.template(block.server_id),
        subnet_id: build.template(block.subnet_id),
      }),
      id: resource.field(self._.blocks, 'id'),
      ignore_missing_vnet_service_endpoint: resource.field(self._.blocks, 'ignore_missing_vnet_service_endpoint'),
      name: resource.field(self._.blocks, 'name'),
      server_id: resource.field(self._.blocks, 'server_id'),
      subnet_id: resource.field(self._.blocks, 'subnet_id'),
    },
    mysql_flexible_database(name, block): {
      local resource = blockType.resource('azurerm_mysql_flexible_database', name),
      _: resource._(block, {
        charset: build.template(block.charset),
        collation: build.template(block.collation),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        server_name: build.template(block.server_name),
      }),
      charset: resource.field(self._.blocks, 'charset'),
      collation: resource.field(self._.blocks, 'collation'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      server_name: resource.field(self._.blocks, 'server_name'),
    },
    mysql_flexible_server(name, block): {
      local resource = blockType.resource('azurerm_mysql_flexible_server', name),
      _: resource._(block, {
        administrator_login: build.template(std.get(block, 'administrator_login', null)),
        administrator_password: build.template(std.get(block, 'administrator_password', null)),
        administrator_password_wo: build.template(std.get(block, 'administrator_password_wo', null)),
        administrator_password_wo_version: build.template(std.get(block, 'administrator_password_wo_version', null)),
        backup_retention_days: build.template(std.get(block, 'backup_retention_days', null)),
        create_mode: build.template(std.get(block, 'create_mode', null)),
        delegated_subnet_id: build.template(std.get(block, 'delegated_subnet_id', null)),
        fqdn: build.template(std.get(block, 'fqdn', null)),
        geo_redundant_backup_enabled: build.template(std.get(block, 'geo_redundant_backup_enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        point_in_time_restore_time_in_utc: build.template(std.get(block, 'point_in_time_restore_time_in_utc', null)),
        private_dns_zone_id: build.template(std.get(block, 'private_dns_zone_id', null)),
        public_network_access_enabled: build.template(std.get(block, 'public_network_access_enabled', null)),
        replica_capacity: build.template(std.get(block, 'replica_capacity', null)),
        replication_role: build.template(std.get(block, 'replication_role', null)),
        resource_group_name: build.template(block.resource_group_name),
        sku_name: build.template(std.get(block, 'sku_name', null)),
        source_server_id: build.template(std.get(block, 'source_server_id', null)),
        tags: build.template(std.get(block, 'tags', null)),
        version: build.template(std.get(block, 'version', null)),
        zone: build.template(std.get(block, 'zone', null)),
      }),
      administrator_login: resource.field(self._.blocks, 'administrator_login'),
      administrator_password: resource.field(self._.blocks, 'administrator_password'),
      administrator_password_wo: resource.field(self._.blocks, 'administrator_password_wo'),
      administrator_password_wo_version: resource.field(self._.blocks, 'administrator_password_wo_version'),
      backup_retention_days: resource.field(self._.blocks, 'backup_retention_days'),
      create_mode: resource.field(self._.blocks, 'create_mode'),
      delegated_subnet_id: resource.field(self._.blocks, 'delegated_subnet_id'),
      fqdn: resource.field(self._.blocks, 'fqdn'),
      geo_redundant_backup_enabled: resource.field(self._.blocks, 'geo_redundant_backup_enabled'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      point_in_time_restore_time_in_utc: resource.field(self._.blocks, 'point_in_time_restore_time_in_utc'),
      private_dns_zone_id: resource.field(self._.blocks, 'private_dns_zone_id'),
      public_network_access_enabled: resource.field(self._.blocks, 'public_network_access_enabled'),
      replica_capacity: resource.field(self._.blocks, 'replica_capacity'),
      replication_role: resource.field(self._.blocks, 'replication_role'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      sku_name: resource.field(self._.blocks, 'sku_name'),
      source_server_id: resource.field(self._.blocks, 'source_server_id'),
      tags: resource.field(self._.blocks, 'tags'),
      version: resource.field(self._.blocks, 'version'),
      zone: resource.field(self._.blocks, 'zone'),
    },
    mysql_flexible_server_active_directory_administrator(name, block): {
      local resource = blockType.resource('azurerm_mysql_flexible_server_active_directory_administrator', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        identity_id: build.template(block.identity_id),
        login: build.template(block.login),
        object_id: build.template(block.object_id),
        server_id: build.template(block.server_id),
        tenant_id: build.template(block.tenant_id),
      }),
      id: resource.field(self._.blocks, 'id'),
      identity_id: resource.field(self._.blocks, 'identity_id'),
      login: resource.field(self._.blocks, 'login'),
      object_id: resource.field(self._.blocks, 'object_id'),
      server_id: resource.field(self._.blocks, 'server_id'),
      tenant_id: resource.field(self._.blocks, 'tenant_id'),
    },
    mysql_flexible_server_configuration(name, block): {
      local resource = blockType.resource('azurerm_mysql_flexible_server_configuration', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        server_name: build.template(block.server_name),
        value: build.template(block.value),
      }),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      server_name: resource.field(self._.blocks, 'server_name'),
      value: resource.field(self._.blocks, 'value'),
    },
    mysql_flexible_server_firewall_rule(name, block): {
      local resource = blockType.resource('azurerm_mysql_flexible_server_firewall_rule', name),
      _: resource._(block, {
        end_ip_address: build.template(block.end_ip_address),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        server_name: build.template(block.server_name),
        start_ip_address: build.template(block.start_ip_address),
      }),
      end_ip_address: resource.field(self._.blocks, 'end_ip_address'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      server_name: resource.field(self._.blocks, 'server_name'),
      start_ip_address: resource.field(self._.blocks, 'start_ip_address'),
    },
    nat_gateway(name, block): {
      local resource = blockType.resource('azurerm_nat_gateway', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        idle_timeout_in_minutes: build.template(std.get(block, 'idle_timeout_in_minutes', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        resource_guid: build.template(std.get(block, 'resource_guid', null)),
        sku_name: build.template(std.get(block, 'sku_name', null)),
        tags: build.template(std.get(block, 'tags', null)),
        zones: build.template(std.get(block, 'zones', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      idle_timeout_in_minutes: resource.field(self._.blocks, 'idle_timeout_in_minutes'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      resource_guid: resource.field(self._.blocks, 'resource_guid'),
      sku_name: resource.field(self._.blocks, 'sku_name'),
      tags: resource.field(self._.blocks, 'tags'),
      zones: resource.field(self._.blocks, 'zones'),
    },
    nat_gateway_public_ip_association(name, block): {
      local resource = blockType.resource('azurerm_nat_gateway_public_ip_association', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        nat_gateway_id: build.template(block.nat_gateway_id),
        public_ip_address_id: build.template(block.public_ip_address_id),
      }),
      id: resource.field(self._.blocks, 'id'),
      nat_gateway_id: resource.field(self._.blocks, 'nat_gateway_id'),
      public_ip_address_id: resource.field(self._.blocks, 'public_ip_address_id'),
    },
    nat_gateway_public_ip_prefix_association(name, block): {
      local resource = blockType.resource('azurerm_nat_gateway_public_ip_prefix_association', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        nat_gateway_id: build.template(block.nat_gateway_id),
        public_ip_prefix_id: build.template(block.public_ip_prefix_id),
      }),
      id: resource.field(self._.blocks, 'id'),
      nat_gateway_id: resource.field(self._.blocks, 'nat_gateway_id'),
      public_ip_prefix_id: resource.field(self._.blocks, 'public_ip_prefix_id'),
    },
    netapp_account(name, block): {
      local resource = blockType.resource('azurerm_netapp_account', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    netapp_account_encryption(name, block): {
      local resource = blockType.resource('azurerm_netapp_account_encryption', name),
      _: resource._(block, {
        encryption_key: build.template(block.encryption_key),
        id: build.template(std.get(block, 'id', null)),
        netapp_account_id: build.template(block.netapp_account_id),
        system_assigned_identity_principal_id: build.template(std.get(block, 'system_assigned_identity_principal_id', null)),
        user_assigned_identity_id: build.template(std.get(block, 'user_assigned_identity_id', null)),
      }),
      encryption_key: resource.field(self._.blocks, 'encryption_key'),
      id: resource.field(self._.blocks, 'id'),
      netapp_account_id: resource.field(self._.blocks, 'netapp_account_id'),
      system_assigned_identity_principal_id: resource.field(self._.blocks, 'system_assigned_identity_principal_id'),
      user_assigned_identity_id: resource.field(self._.blocks, 'user_assigned_identity_id'),
    },
    netapp_backup_policy(name, block): {
      local resource = blockType.resource('azurerm_netapp_backup_policy', name),
      _: resource._(block, {
        account_name: build.template(block.account_name),
        daily_backups_to_keep: build.template(std.get(block, 'daily_backups_to_keep', null)),
        enabled: build.template(std.get(block, 'enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        monthly_backups_to_keep: build.template(std.get(block, 'monthly_backups_to_keep', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
        weekly_backups_to_keep: build.template(std.get(block, 'weekly_backups_to_keep', null)),
      }),
      account_name: resource.field(self._.blocks, 'account_name'),
      daily_backups_to_keep: resource.field(self._.blocks, 'daily_backups_to_keep'),
      enabled: resource.field(self._.blocks, 'enabled'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      monthly_backups_to_keep: resource.field(self._.blocks, 'monthly_backups_to_keep'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
      weekly_backups_to_keep: resource.field(self._.blocks, 'weekly_backups_to_keep'),
    },
    netapp_backup_vault(name, block): {
      local resource = blockType.resource('azurerm_netapp_backup_vault', name),
      _: resource._(block, {
        account_name: build.template(block.account_name),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      account_name: resource.field(self._.blocks, 'account_name'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    netapp_pool(name, block): {
      local resource = blockType.resource('azurerm_netapp_pool', name),
      _: resource._(block, {
        account_name: build.template(block.account_name),
        encryption_type: build.template(std.get(block, 'encryption_type', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        qos_type: build.template(std.get(block, 'qos_type', null)),
        resource_group_name: build.template(block.resource_group_name),
        service_level: build.template(block.service_level),
        size_in_tb: build.template(block.size_in_tb),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      account_name: resource.field(self._.blocks, 'account_name'),
      encryption_type: resource.field(self._.blocks, 'encryption_type'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      qos_type: resource.field(self._.blocks, 'qos_type'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      service_level: resource.field(self._.blocks, 'service_level'),
      size_in_tb: resource.field(self._.blocks, 'size_in_tb'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    netapp_snapshot(name, block): {
      local resource = blockType.resource('azurerm_netapp_snapshot', name),
      _: resource._(block, {
        account_name: build.template(block.account_name),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        pool_name: build.template(block.pool_name),
        resource_group_name: build.template(block.resource_group_name),
        volume_name: build.template(block.volume_name),
      }),
      account_name: resource.field(self._.blocks, 'account_name'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      pool_name: resource.field(self._.blocks, 'pool_name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      volume_name: resource.field(self._.blocks, 'volume_name'),
    },
    netapp_snapshot_policy(name, block): {
      local resource = blockType.resource('azurerm_netapp_snapshot_policy', name),
      _: resource._(block, {
        account_name: build.template(block.account_name),
        enabled: build.template(block.enabled),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      account_name: resource.field(self._.blocks, 'account_name'),
      enabled: resource.field(self._.blocks, 'enabled'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    netapp_volume(name, block): {
      local resource = blockType.resource('azurerm_netapp_volume', name),
      _: resource._(block, {
        account_name: build.template(block.account_name),
        azure_vmware_data_store_enabled: build.template(std.get(block, 'azure_vmware_data_store_enabled', null)),
        create_from_snapshot_resource_id: build.template(std.get(block, 'create_from_snapshot_resource_id', null)),
        encryption_key_source: build.template(std.get(block, 'encryption_key_source', null)),
        id: build.template(std.get(block, 'id', null)),
        kerberos_enabled: build.template(std.get(block, 'kerberos_enabled', null)),
        key_vault_private_endpoint_id: build.template(std.get(block, 'key_vault_private_endpoint_id', null)),
        location: build.template(block.location),
        mount_ip_addresses: build.template(std.get(block, 'mount_ip_addresses', null)),
        name: build.template(block.name),
        network_features: build.template(std.get(block, 'network_features', null)),
        pool_name: build.template(block.pool_name),
        protocols: build.template(std.get(block, 'protocols', null)),
        resource_group_name: build.template(block.resource_group_name),
        security_style: build.template(std.get(block, 'security_style', null)),
        service_level: build.template(block.service_level),
        smb3_protocol_encryption_enabled: build.template(std.get(block, 'smb3_protocol_encryption_enabled', null)),
        smb_access_based_enumeration_enabled: build.template(std.get(block, 'smb_access_based_enumeration_enabled', null)),
        smb_continuous_availability_enabled: build.template(std.get(block, 'smb_continuous_availability_enabled', null)),
        smb_non_browsable_enabled: build.template(std.get(block, 'smb_non_browsable_enabled', null)),
        snapshot_directory_visible: build.template(std.get(block, 'snapshot_directory_visible', null)),
        storage_quota_in_gb: build.template(block.storage_quota_in_gb),
        subnet_id: build.template(block.subnet_id),
        tags: build.template(std.get(block, 'tags', null)),
        throughput_in_mibps: build.template(std.get(block, 'throughput_in_mibps', null)),
        volume_path: build.template(block.volume_path),
        zone: build.template(std.get(block, 'zone', null)),
      }),
      account_name: resource.field(self._.blocks, 'account_name'),
      azure_vmware_data_store_enabled: resource.field(self._.blocks, 'azure_vmware_data_store_enabled'),
      create_from_snapshot_resource_id: resource.field(self._.blocks, 'create_from_snapshot_resource_id'),
      encryption_key_source: resource.field(self._.blocks, 'encryption_key_source'),
      id: resource.field(self._.blocks, 'id'),
      kerberos_enabled: resource.field(self._.blocks, 'kerberos_enabled'),
      key_vault_private_endpoint_id: resource.field(self._.blocks, 'key_vault_private_endpoint_id'),
      location: resource.field(self._.blocks, 'location'),
      mount_ip_addresses: resource.field(self._.blocks, 'mount_ip_addresses'),
      name: resource.field(self._.blocks, 'name'),
      network_features: resource.field(self._.blocks, 'network_features'),
      pool_name: resource.field(self._.blocks, 'pool_name'),
      protocols: resource.field(self._.blocks, 'protocols'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      security_style: resource.field(self._.blocks, 'security_style'),
      service_level: resource.field(self._.blocks, 'service_level'),
      smb3_protocol_encryption_enabled: resource.field(self._.blocks, 'smb3_protocol_encryption_enabled'),
      smb_access_based_enumeration_enabled: resource.field(self._.blocks, 'smb_access_based_enumeration_enabled'),
      smb_continuous_availability_enabled: resource.field(self._.blocks, 'smb_continuous_availability_enabled'),
      smb_non_browsable_enabled: resource.field(self._.blocks, 'smb_non_browsable_enabled'),
      snapshot_directory_visible: resource.field(self._.blocks, 'snapshot_directory_visible'),
      storage_quota_in_gb: resource.field(self._.blocks, 'storage_quota_in_gb'),
      subnet_id: resource.field(self._.blocks, 'subnet_id'),
      tags: resource.field(self._.blocks, 'tags'),
      throughput_in_mibps: resource.field(self._.blocks, 'throughput_in_mibps'),
      volume_path: resource.field(self._.blocks, 'volume_path'),
      zone: resource.field(self._.blocks, 'zone'),
    },
    netapp_volume_group_oracle(name, block): {
      local resource = blockType.resource('azurerm_netapp_volume_group_oracle', name),
      _: resource._(block, {
        account_name: build.template(block.account_name),
        application_identifier: build.template(block.application_identifier),
        group_description: build.template(block.group_description),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
      }),
      account_name: resource.field(self._.blocks, 'account_name'),
      application_identifier: resource.field(self._.blocks, 'application_identifier'),
      group_description: resource.field(self._.blocks, 'group_description'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
    },
    netapp_volume_group_sap_hana(name, block): {
      local resource = blockType.resource('azurerm_netapp_volume_group_sap_hana', name),
      _: resource._(block, {
        account_name: build.template(block.account_name),
        application_identifier: build.template(block.application_identifier),
        group_description: build.template(block.group_description),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
      }),
      account_name: resource.field(self._.blocks, 'account_name'),
      application_identifier: resource.field(self._.blocks, 'application_identifier'),
      group_description: resource.field(self._.blocks, 'group_description'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
    },
    netapp_volume_quota_rule(name, block): {
      local resource = blockType.resource('azurerm_netapp_volume_quota_rule', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        quota_size_in_kib: build.template(block.quota_size_in_kib),
        quota_target: build.template(std.get(block, 'quota_target', null)),
        quota_type: build.template(block.quota_type),
        volume_id: build.template(block.volume_id),
      }),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      quota_size_in_kib: resource.field(self._.blocks, 'quota_size_in_kib'),
      quota_target: resource.field(self._.blocks, 'quota_target'),
      quota_type: resource.field(self._.blocks, 'quota_type'),
      volume_id: resource.field(self._.blocks, 'volume_id'),
    },
    network_connection_monitor(name, block): {
      local resource = blockType.resource('azurerm_network_connection_monitor', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        network_watcher_id: build.template(block.network_watcher_id),
        notes: build.template(std.get(block, 'notes', null)),
        output_workspace_resource_ids: build.template(std.get(block, 'output_workspace_resource_ids', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      network_watcher_id: resource.field(self._.blocks, 'network_watcher_id'),
      notes: resource.field(self._.blocks, 'notes'),
      output_workspace_resource_ids: resource.field(self._.blocks, 'output_workspace_resource_ids'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    network_ddos_protection_plan(name, block): {
      local resource = blockType.resource('azurerm_network_ddos_protection_plan', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
        virtual_network_ids: build.template(std.get(block, 'virtual_network_ids', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
      virtual_network_ids: resource.field(self._.blocks, 'virtual_network_ids'),
    },
    network_function_azure_traffic_collector(name, block): {
      local resource = blockType.resource('azurerm_network_function_azure_traffic_collector', name),
      _: resource._(block, {
        collector_policy_ids: build.template(std.get(block, 'collector_policy_ids', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
        virtual_hub_id: build.template(std.get(block, 'virtual_hub_id', null)),
      }),
      collector_policy_ids: resource.field(self._.blocks, 'collector_policy_ids'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
      virtual_hub_id: resource.field(self._.blocks, 'virtual_hub_id'),
    },
    network_function_collector_policy(name, block): {
      local resource = blockType.resource('azurerm_network_function_collector_policy', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        tags: build.template(std.get(block, 'tags', null)),
        traffic_collector_id: build.template(block.traffic_collector_id),
      }),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      tags: resource.field(self._.blocks, 'tags'),
      traffic_collector_id: resource.field(self._.blocks, 'traffic_collector_id'),
    },
    network_interface(name, block): {
      local resource = blockType.resource('azurerm_network_interface', name),
      _: resource._(block, {
        accelerated_networking_enabled: build.template(std.get(block, 'accelerated_networking_enabled', null)),
        applied_dns_servers: build.template(std.get(block, 'applied_dns_servers', null)),
        auxiliary_mode: build.template(std.get(block, 'auxiliary_mode', null)),
        auxiliary_sku: build.template(std.get(block, 'auxiliary_sku', null)),
        dns_servers: build.template(std.get(block, 'dns_servers', null)),
        edge_zone: build.template(std.get(block, 'edge_zone', null)),
        id: build.template(std.get(block, 'id', null)),
        internal_dns_name_label: build.template(std.get(block, 'internal_dns_name_label', null)),
        internal_domain_name_suffix: build.template(std.get(block, 'internal_domain_name_suffix', null)),
        ip_forwarding_enabled: build.template(std.get(block, 'ip_forwarding_enabled', null)),
        location: build.template(block.location),
        mac_address: build.template(std.get(block, 'mac_address', null)),
        name: build.template(block.name),
        private_ip_address: build.template(std.get(block, 'private_ip_address', null)),
        private_ip_addresses: build.template(std.get(block, 'private_ip_addresses', null)),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
        virtual_machine_id: build.template(std.get(block, 'virtual_machine_id', null)),
      }),
      accelerated_networking_enabled: resource.field(self._.blocks, 'accelerated_networking_enabled'),
      applied_dns_servers: resource.field(self._.blocks, 'applied_dns_servers'),
      auxiliary_mode: resource.field(self._.blocks, 'auxiliary_mode'),
      auxiliary_sku: resource.field(self._.blocks, 'auxiliary_sku'),
      dns_servers: resource.field(self._.blocks, 'dns_servers'),
      edge_zone: resource.field(self._.blocks, 'edge_zone'),
      id: resource.field(self._.blocks, 'id'),
      internal_dns_name_label: resource.field(self._.blocks, 'internal_dns_name_label'),
      internal_domain_name_suffix: resource.field(self._.blocks, 'internal_domain_name_suffix'),
      ip_forwarding_enabled: resource.field(self._.blocks, 'ip_forwarding_enabled'),
      location: resource.field(self._.blocks, 'location'),
      mac_address: resource.field(self._.blocks, 'mac_address'),
      name: resource.field(self._.blocks, 'name'),
      private_ip_address: resource.field(self._.blocks, 'private_ip_address'),
      private_ip_addresses: resource.field(self._.blocks, 'private_ip_addresses'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
      virtual_machine_id: resource.field(self._.blocks, 'virtual_machine_id'),
    },
    network_interface_application_gateway_backend_address_pool_association(name, block): {
      local resource = blockType.resource('azurerm_network_interface_application_gateway_backend_address_pool_association', name),
      _: resource._(block, {
        backend_address_pool_id: build.template(block.backend_address_pool_id),
        id: build.template(std.get(block, 'id', null)),
        ip_configuration_name: build.template(block.ip_configuration_name),
        network_interface_id: build.template(block.network_interface_id),
      }),
      backend_address_pool_id: resource.field(self._.blocks, 'backend_address_pool_id'),
      id: resource.field(self._.blocks, 'id'),
      ip_configuration_name: resource.field(self._.blocks, 'ip_configuration_name'),
      network_interface_id: resource.field(self._.blocks, 'network_interface_id'),
    },
    network_interface_application_security_group_association(name, block): {
      local resource = blockType.resource('azurerm_network_interface_application_security_group_association', name),
      _: resource._(block, {
        application_security_group_id: build.template(block.application_security_group_id),
        id: build.template(std.get(block, 'id', null)),
        network_interface_id: build.template(block.network_interface_id),
      }),
      application_security_group_id: resource.field(self._.blocks, 'application_security_group_id'),
      id: resource.field(self._.blocks, 'id'),
      network_interface_id: resource.field(self._.blocks, 'network_interface_id'),
    },
    network_interface_backend_address_pool_association(name, block): {
      local resource = blockType.resource('azurerm_network_interface_backend_address_pool_association', name),
      _: resource._(block, {
        backend_address_pool_id: build.template(block.backend_address_pool_id),
        id: build.template(std.get(block, 'id', null)),
        ip_configuration_name: build.template(block.ip_configuration_name),
        network_interface_id: build.template(block.network_interface_id),
      }),
      backend_address_pool_id: resource.field(self._.blocks, 'backend_address_pool_id'),
      id: resource.field(self._.blocks, 'id'),
      ip_configuration_name: resource.field(self._.blocks, 'ip_configuration_name'),
      network_interface_id: resource.field(self._.blocks, 'network_interface_id'),
    },
    network_interface_nat_rule_association(name, block): {
      local resource = blockType.resource('azurerm_network_interface_nat_rule_association', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        ip_configuration_name: build.template(block.ip_configuration_name),
        nat_rule_id: build.template(block.nat_rule_id),
        network_interface_id: build.template(block.network_interface_id),
      }),
      id: resource.field(self._.blocks, 'id'),
      ip_configuration_name: resource.field(self._.blocks, 'ip_configuration_name'),
      nat_rule_id: resource.field(self._.blocks, 'nat_rule_id'),
      network_interface_id: resource.field(self._.blocks, 'network_interface_id'),
    },
    network_interface_security_group_association(name, block): {
      local resource = blockType.resource('azurerm_network_interface_security_group_association', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        network_interface_id: build.template(block.network_interface_id),
        network_security_group_id: build.template(block.network_security_group_id),
      }),
      id: resource.field(self._.blocks, 'id'),
      network_interface_id: resource.field(self._.blocks, 'network_interface_id'),
      network_security_group_id: resource.field(self._.blocks, 'network_security_group_id'),
    },
    network_manager(name, block): {
      local resource = blockType.resource('azurerm_network_manager', name),
      _: resource._(block, {
        cross_tenant_scopes: build.template(std.get(block, 'cross_tenant_scopes', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        scope_accesses: build.template(block.scope_accesses),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      cross_tenant_scopes: resource.field(self._.blocks, 'cross_tenant_scopes'),
      description: resource.field(self._.blocks, 'description'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      scope_accesses: resource.field(self._.blocks, 'scope_accesses'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    network_manager_admin_rule(name, block): {
      local resource = blockType.resource('azurerm_network_manager_admin_rule', name),
      _: resource._(block, {
        action: build.template(block.action),
        admin_rule_collection_id: build.template(block.admin_rule_collection_id),
        description: build.template(std.get(block, 'description', null)),
        destination_port_ranges: build.template(std.get(block, 'destination_port_ranges', null)),
        direction: build.template(block.direction),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        priority: build.template(block.priority),
        protocol: build.template(block.protocol),
        source_port_ranges: build.template(std.get(block, 'source_port_ranges', null)),
      }),
      action: resource.field(self._.blocks, 'action'),
      admin_rule_collection_id: resource.field(self._.blocks, 'admin_rule_collection_id'),
      description: resource.field(self._.blocks, 'description'),
      destination_port_ranges: resource.field(self._.blocks, 'destination_port_ranges'),
      direction: resource.field(self._.blocks, 'direction'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      priority: resource.field(self._.blocks, 'priority'),
      protocol: resource.field(self._.blocks, 'protocol'),
      source_port_ranges: resource.field(self._.blocks, 'source_port_ranges'),
    },
    network_manager_admin_rule_collection(name, block): {
      local resource = blockType.resource('azurerm_network_manager_admin_rule_collection', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        network_group_ids: build.template(block.network_group_ids),
        security_admin_configuration_id: build.template(block.security_admin_configuration_id),
      }),
      description: resource.field(self._.blocks, 'description'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      network_group_ids: resource.field(self._.blocks, 'network_group_ids'),
      security_admin_configuration_id: resource.field(self._.blocks, 'security_admin_configuration_id'),
    },
    network_manager_connectivity_configuration(name, block): {
      local resource = blockType.resource('azurerm_network_manager_connectivity_configuration', name),
      _: resource._(block, {
        connectivity_topology: build.template(block.connectivity_topology),
        delete_existing_peering_enabled: build.template(std.get(block, 'delete_existing_peering_enabled', null)),
        description: build.template(std.get(block, 'description', null)),
        global_mesh_enabled: build.template(std.get(block, 'global_mesh_enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        network_manager_id: build.template(block.network_manager_id),
      }),
      connectivity_topology: resource.field(self._.blocks, 'connectivity_topology'),
      delete_existing_peering_enabled: resource.field(self._.blocks, 'delete_existing_peering_enabled'),
      description: resource.field(self._.blocks, 'description'),
      global_mesh_enabled: resource.field(self._.blocks, 'global_mesh_enabled'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      network_manager_id: resource.field(self._.blocks, 'network_manager_id'),
    },
    network_manager_deployment(name, block): {
      local resource = blockType.resource('azurerm_network_manager_deployment', name),
      _: resource._(block, {
        configuration_ids: build.template(block.configuration_ids),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        network_manager_id: build.template(block.network_manager_id),
        scope_access: build.template(block.scope_access),
        triggers: build.template(std.get(block, 'triggers', null)),
      }),
      configuration_ids: resource.field(self._.blocks, 'configuration_ids'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      network_manager_id: resource.field(self._.blocks, 'network_manager_id'),
      scope_access: resource.field(self._.blocks, 'scope_access'),
      triggers: resource.field(self._.blocks, 'triggers'),
    },
    network_manager_ipam_pool(name, block): {
      local resource = blockType.resource('azurerm_network_manager_ipam_pool', name),
      _: resource._(block, {
        address_prefixes: build.template(block.address_prefixes),
        description: build.template(std.get(block, 'description', null)),
        display_name: build.template(block.display_name),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        network_manager_id: build.template(block.network_manager_id),
        parent_pool_name: build.template(std.get(block, 'parent_pool_name', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      address_prefixes: resource.field(self._.blocks, 'address_prefixes'),
      description: resource.field(self._.blocks, 'description'),
      display_name: resource.field(self._.blocks, 'display_name'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      network_manager_id: resource.field(self._.blocks, 'network_manager_id'),
      parent_pool_name: resource.field(self._.blocks, 'parent_pool_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    network_manager_management_group_connection(name, block): {
      local resource = blockType.resource('azurerm_network_manager_management_group_connection', name),
      _: resource._(block, {
        connection_state: build.template(std.get(block, 'connection_state', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        management_group_id: build.template(block.management_group_id),
        name: build.template(block.name),
        network_manager_id: build.template(block.network_manager_id),
      }),
      connection_state: resource.field(self._.blocks, 'connection_state'),
      description: resource.field(self._.blocks, 'description'),
      id: resource.field(self._.blocks, 'id'),
      management_group_id: resource.field(self._.blocks, 'management_group_id'),
      name: resource.field(self._.blocks, 'name'),
      network_manager_id: resource.field(self._.blocks, 'network_manager_id'),
    },
    network_manager_network_group(name, block): {
      local resource = blockType.resource('azurerm_network_manager_network_group', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        network_manager_id: build.template(block.network_manager_id),
      }),
      description: resource.field(self._.blocks, 'description'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      network_manager_id: resource.field(self._.blocks, 'network_manager_id'),
    },
    network_manager_scope_connection(name, block): {
      local resource = blockType.resource('azurerm_network_manager_scope_connection', name),
      _: resource._(block, {
        connection_state: build.template(std.get(block, 'connection_state', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        network_manager_id: build.template(block.network_manager_id),
        target_scope_id: build.template(block.target_scope_id),
        tenant_id: build.template(block.tenant_id),
      }),
      connection_state: resource.field(self._.blocks, 'connection_state'),
      description: resource.field(self._.blocks, 'description'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      network_manager_id: resource.field(self._.blocks, 'network_manager_id'),
      target_scope_id: resource.field(self._.blocks, 'target_scope_id'),
      tenant_id: resource.field(self._.blocks, 'tenant_id'),
    },
    network_manager_security_admin_configuration(name, block): {
      local resource = blockType.resource('azurerm_network_manager_security_admin_configuration', name),
      _: resource._(block, {
        apply_on_network_intent_policy_based_services: build.template(std.get(block, 'apply_on_network_intent_policy_based_services', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        network_manager_id: build.template(block.network_manager_id),
      }),
      apply_on_network_intent_policy_based_services: resource.field(self._.blocks, 'apply_on_network_intent_policy_based_services'),
      description: resource.field(self._.blocks, 'description'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      network_manager_id: resource.field(self._.blocks, 'network_manager_id'),
    },
    network_manager_static_member(name, block): {
      local resource = blockType.resource('azurerm_network_manager_static_member', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        network_group_id: build.template(block.network_group_id),
        region: build.template(std.get(block, 'region', null)),
        target_virtual_network_id: build.template(block.target_virtual_network_id),
      }),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      network_group_id: resource.field(self._.blocks, 'network_group_id'),
      region: resource.field(self._.blocks, 'region'),
      target_virtual_network_id: resource.field(self._.blocks, 'target_virtual_network_id'),
    },
    network_manager_subscription_connection(name, block): {
      local resource = blockType.resource('azurerm_network_manager_subscription_connection', name),
      _: resource._(block, {
        connection_state: build.template(std.get(block, 'connection_state', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        network_manager_id: build.template(block.network_manager_id),
        subscription_id: build.template(block.subscription_id),
      }),
      connection_state: resource.field(self._.blocks, 'connection_state'),
      description: resource.field(self._.blocks, 'description'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      network_manager_id: resource.field(self._.blocks, 'network_manager_id'),
      subscription_id: resource.field(self._.blocks, 'subscription_id'),
    },
    network_manager_verifier_workspace(name, block): {
      local resource = blockType.resource('azurerm_network_manager_verifier_workspace', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        network_manager_id: build.template(block.network_manager_id),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      description: resource.field(self._.blocks, 'description'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      network_manager_id: resource.field(self._.blocks, 'network_manager_id'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    network_packet_capture(name, block): {
      local resource = blockType.resource('azurerm_network_packet_capture', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        maximum_bytes_per_packet: build.template(std.get(block, 'maximum_bytes_per_packet', null)),
        maximum_bytes_per_session: build.template(std.get(block, 'maximum_bytes_per_session', null)),
        maximum_capture_duration: build.template(std.get(block, 'maximum_capture_duration', null)),
        name: build.template(block.name),
        network_watcher_name: build.template(block.network_watcher_name),
        resource_group_name: build.template(block.resource_group_name),
        target_resource_id: build.template(block.target_resource_id),
      }),
      id: resource.field(self._.blocks, 'id'),
      maximum_bytes_per_packet: resource.field(self._.blocks, 'maximum_bytes_per_packet'),
      maximum_bytes_per_session: resource.field(self._.blocks, 'maximum_bytes_per_session'),
      maximum_capture_duration: resource.field(self._.blocks, 'maximum_capture_duration'),
      name: resource.field(self._.blocks, 'name'),
      network_watcher_name: resource.field(self._.blocks, 'network_watcher_name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      target_resource_id: resource.field(self._.blocks, 'target_resource_id'),
    },
    network_profile(name, block): {
      local resource = blockType.resource('azurerm_network_profile', name),
      _: resource._(block, {
        container_network_interface_ids: build.template(std.get(block, 'container_network_interface_ids', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      container_network_interface_ids: resource.field(self._.blocks, 'container_network_interface_ids'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    network_security_group(name, block): {
      local resource = blockType.resource('azurerm_network_security_group', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        security_rule: build.template(std.get(block, 'security_rule', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      security_rule: resource.field(self._.blocks, 'security_rule'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    network_security_rule(name, block): {
      local resource = blockType.resource('azurerm_network_security_rule', name),
      _: resource._(block, {
        access: build.template(block.access),
        description: build.template(std.get(block, 'description', null)),
        destination_address_prefix: build.template(std.get(block, 'destination_address_prefix', null)),
        destination_address_prefixes: build.template(std.get(block, 'destination_address_prefixes', null)),
        destination_application_security_group_ids: build.template(std.get(block, 'destination_application_security_group_ids', null)),
        destination_port_range: build.template(std.get(block, 'destination_port_range', null)),
        destination_port_ranges: build.template(std.get(block, 'destination_port_ranges', null)),
        direction: build.template(block.direction),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        network_security_group_name: build.template(block.network_security_group_name),
        priority: build.template(block.priority),
        protocol: build.template(block.protocol),
        resource_group_name: build.template(block.resource_group_name),
        source_address_prefix: build.template(std.get(block, 'source_address_prefix', null)),
        source_address_prefixes: build.template(std.get(block, 'source_address_prefixes', null)),
        source_application_security_group_ids: build.template(std.get(block, 'source_application_security_group_ids', null)),
        source_port_range: build.template(std.get(block, 'source_port_range', null)),
        source_port_ranges: build.template(std.get(block, 'source_port_ranges', null)),
      }),
      access: resource.field(self._.blocks, 'access'),
      description: resource.field(self._.blocks, 'description'),
      destination_address_prefix: resource.field(self._.blocks, 'destination_address_prefix'),
      destination_address_prefixes: resource.field(self._.blocks, 'destination_address_prefixes'),
      destination_application_security_group_ids: resource.field(self._.blocks, 'destination_application_security_group_ids'),
      destination_port_range: resource.field(self._.blocks, 'destination_port_range'),
      destination_port_ranges: resource.field(self._.blocks, 'destination_port_ranges'),
      direction: resource.field(self._.blocks, 'direction'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      network_security_group_name: resource.field(self._.blocks, 'network_security_group_name'),
      priority: resource.field(self._.blocks, 'priority'),
      protocol: resource.field(self._.blocks, 'protocol'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      source_address_prefix: resource.field(self._.blocks, 'source_address_prefix'),
      source_address_prefixes: resource.field(self._.blocks, 'source_address_prefixes'),
      source_application_security_group_ids: resource.field(self._.blocks, 'source_application_security_group_ids'),
      source_port_range: resource.field(self._.blocks, 'source_port_range'),
      source_port_ranges: resource.field(self._.blocks, 'source_port_ranges'),
    },
    network_watcher(name, block): {
      local resource = blockType.resource('azurerm_network_watcher', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    network_watcher_flow_log(name, block): {
      local resource = blockType.resource('azurerm_network_watcher_flow_log', name),
      _: resource._(block, {
        enabled: build.template(block.enabled),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        network_security_group_id: build.template(std.get(block, 'network_security_group_id', null)),
        network_watcher_name: build.template(block.network_watcher_name),
        resource_group_name: build.template(block.resource_group_name),
        storage_account_id: build.template(block.storage_account_id),
        tags: build.template(std.get(block, 'tags', null)),
        target_resource_id: build.template(std.get(block, 'target_resource_id', null)),
        version: build.template(std.get(block, 'version', null)),
      }),
      enabled: resource.field(self._.blocks, 'enabled'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      network_security_group_id: resource.field(self._.blocks, 'network_security_group_id'),
      network_watcher_name: resource.field(self._.blocks, 'network_watcher_name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      storage_account_id: resource.field(self._.blocks, 'storage_account_id'),
      tags: resource.field(self._.blocks, 'tags'),
      target_resource_id: resource.field(self._.blocks, 'target_resource_id'),
      version: resource.field(self._.blocks, 'version'),
    },
    new_relic_monitor(name, block): {
      local resource = blockType.resource('azurerm_new_relic_monitor', name),
      _: resource._(block, {
        account_creation_source: build.template(std.get(block, 'account_creation_source', null)),
        account_id: build.template(std.get(block, 'account_id', null)),
        id: build.template(std.get(block, 'id', null)),
        ingestion_key: build.template(std.get(block, 'ingestion_key', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        org_creation_source: build.template(std.get(block, 'org_creation_source', null)),
        organization_id: build.template(std.get(block, 'organization_id', null)),
        resource_group_name: build.template(block.resource_group_name),
        user_id: build.template(std.get(block, 'user_id', null)),
      }),
      account_creation_source: resource.field(self._.blocks, 'account_creation_source'),
      account_id: resource.field(self._.blocks, 'account_id'),
      id: resource.field(self._.blocks, 'id'),
      ingestion_key: resource.field(self._.blocks, 'ingestion_key'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      org_creation_source: resource.field(self._.blocks, 'org_creation_source'),
      organization_id: resource.field(self._.blocks, 'organization_id'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      user_id: resource.field(self._.blocks, 'user_id'),
    },
    new_relic_tag_rule(name, block): {
      local resource = blockType.resource('azurerm_new_relic_tag_rule', name),
      _: resource._(block, {
        activity_log_enabled: build.template(std.get(block, 'activity_log_enabled', null)),
        azure_active_directory_log_enabled: build.template(std.get(block, 'azure_active_directory_log_enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        metric_enabled: build.template(std.get(block, 'metric_enabled', null)),
        monitor_id: build.template(block.monitor_id),
        subscription_log_enabled: build.template(std.get(block, 'subscription_log_enabled', null)),
      }),
      activity_log_enabled: resource.field(self._.blocks, 'activity_log_enabled'),
      azure_active_directory_log_enabled: resource.field(self._.blocks, 'azure_active_directory_log_enabled'),
      id: resource.field(self._.blocks, 'id'),
      metric_enabled: resource.field(self._.blocks, 'metric_enabled'),
      monitor_id: resource.field(self._.blocks, 'monitor_id'),
      subscription_log_enabled: resource.field(self._.blocks, 'subscription_log_enabled'),
    },
    nginx_certificate(name, block): {
      local resource = blockType.resource('azurerm_nginx_certificate', name),
      _: resource._(block, {
        certificate_virtual_path: build.template(block.certificate_virtual_path),
        id: build.template(std.get(block, 'id', null)),
        key_vault_secret_id: build.template(block.key_vault_secret_id),
        key_virtual_path: build.template(block.key_virtual_path),
        name: build.template(block.name),
        nginx_deployment_id: build.template(block.nginx_deployment_id),
      }),
      certificate_virtual_path: resource.field(self._.blocks, 'certificate_virtual_path'),
      id: resource.field(self._.blocks, 'id'),
      key_vault_secret_id: resource.field(self._.blocks, 'key_vault_secret_id'),
      key_virtual_path: resource.field(self._.blocks, 'key_virtual_path'),
      name: resource.field(self._.blocks, 'name'),
      nginx_deployment_id: resource.field(self._.blocks, 'nginx_deployment_id'),
    },
    nginx_configuration(name, block): {
      local resource = blockType.resource('azurerm_nginx_configuration', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        nginx_deployment_id: build.template(block.nginx_deployment_id),
        package_data: build.template(std.get(block, 'package_data', null)),
        root_file: build.template(block.root_file),
      }),
      id: resource.field(self._.blocks, 'id'),
      nginx_deployment_id: resource.field(self._.blocks, 'nginx_deployment_id'),
      package_data: resource.field(self._.blocks, 'package_data'),
      root_file: resource.field(self._.blocks, 'root_file'),
    },
    nginx_deployment(name, block): {
      local resource = blockType.resource('azurerm_nginx_deployment', name),
      _: resource._(block, {
        automatic_upgrade_channel: build.template(std.get(block, 'automatic_upgrade_channel', null)),
        capacity: build.template(std.get(block, 'capacity', null)),
        dataplane_api_endpoint: build.template(std.get(block, 'dataplane_api_endpoint', null)),
        diagnose_support_enabled: build.template(std.get(block, 'diagnose_support_enabled', null)),
        email: build.template(std.get(block, 'email', null)),
        id: build.template(std.get(block, 'id', null)),
        ip_address: build.template(std.get(block, 'ip_address', null)),
        location: build.template(block.location),
        managed_resource_group: build.template(std.get(block, 'managed_resource_group', null)),
        name: build.template(block.name),
        nginx_version: build.template(std.get(block, 'nginx_version', null)),
        resource_group_name: build.template(block.resource_group_name),
        sku: build.template(block.sku),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      automatic_upgrade_channel: resource.field(self._.blocks, 'automatic_upgrade_channel'),
      capacity: resource.field(self._.blocks, 'capacity'),
      dataplane_api_endpoint: resource.field(self._.blocks, 'dataplane_api_endpoint'),
      diagnose_support_enabled: resource.field(self._.blocks, 'diagnose_support_enabled'),
      email: resource.field(self._.blocks, 'email'),
      id: resource.field(self._.blocks, 'id'),
      ip_address: resource.field(self._.blocks, 'ip_address'),
      location: resource.field(self._.blocks, 'location'),
      managed_resource_group: resource.field(self._.blocks, 'managed_resource_group'),
      name: resource.field(self._.blocks, 'name'),
      nginx_version: resource.field(self._.blocks, 'nginx_version'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      sku: resource.field(self._.blocks, 'sku'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    notification_hub(name, block): {
      local resource = blockType.resource('azurerm_notification_hub', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        namespace_name: build.template(block.namespace_name),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      namespace_name: resource.field(self._.blocks, 'namespace_name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    notification_hub_authorization_rule(name, block): {
      local resource = blockType.resource('azurerm_notification_hub_authorization_rule', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        listen: build.template(std.get(block, 'listen', null)),
        manage: build.template(std.get(block, 'manage', null)),
        name: build.template(block.name),
        namespace_name: build.template(block.namespace_name),
        notification_hub_name: build.template(block.notification_hub_name),
        primary_access_key: build.template(std.get(block, 'primary_access_key', null)),
        primary_connection_string: build.template(std.get(block, 'primary_connection_string', null)),
        resource_group_name: build.template(block.resource_group_name),
        secondary_access_key: build.template(std.get(block, 'secondary_access_key', null)),
        secondary_connection_string: build.template(std.get(block, 'secondary_connection_string', null)),
        send: build.template(std.get(block, 'send', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      listen: resource.field(self._.blocks, 'listen'),
      manage: resource.field(self._.blocks, 'manage'),
      name: resource.field(self._.blocks, 'name'),
      namespace_name: resource.field(self._.blocks, 'namespace_name'),
      notification_hub_name: resource.field(self._.blocks, 'notification_hub_name'),
      primary_access_key: resource.field(self._.blocks, 'primary_access_key'),
      primary_connection_string: resource.field(self._.blocks, 'primary_connection_string'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      secondary_access_key: resource.field(self._.blocks, 'secondary_access_key'),
      secondary_connection_string: resource.field(self._.blocks, 'secondary_connection_string'),
      send: resource.field(self._.blocks, 'send'),
    },
    notification_hub_namespace(name, block): {
      local resource = blockType.resource('azurerm_notification_hub_namespace', name),
      _: resource._(block, {
        enabled: build.template(std.get(block, 'enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        namespace_type: build.template(block.namespace_type),
        resource_group_name: build.template(block.resource_group_name),
        servicebus_endpoint: build.template(std.get(block, 'servicebus_endpoint', null)),
        sku_name: build.template(block.sku_name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      enabled: resource.field(self._.blocks, 'enabled'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      namespace_type: resource.field(self._.blocks, 'namespace_type'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      servicebus_endpoint: resource.field(self._.blocks, 'servicebus_endpoint'),
      sku_name: resource.field(self._.blocks, 'sku_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    oracle_autonomous_database(name, block): {
      local resource = blockType.resource('azurerm_oracle_autonomous_database', name),
      _: resource._(block, {
        admin_password: build.template(block.admin_password),
        auto_scaling_enabled: build.template(block.auto_scaling_enabled),
        auto_scaling_for_storage_enabled: build.template(block.auto_scaling_for_storage_enabled),
        backup_retention_period_in_days: build.template(block.backup_retention_period_in_days),
        character_set: build.template(block.character_set),
        compute_count: build.template(block.compute_count),
        compute_model: build.template(block.compute_model),
        customer_contacts: build.template(std.get(block, 'customer_contacts', null)),
        data_storage_size_in_tbs: build.template(block.data_storage_size_in_tbs),
        db_version: build.template(block.db_version),
        db_workload: build.template(block.db_workload),
        display_name: build.template(block.display_name),
        id: build.template(std.get(block, 'id', null)),
        license_model: build.template(block.license_model),
        location: build.template(block.location),
        mtls_connection_required: build.template(block.mtls_connection_required),
        name: build.template(block.name),
        national_character_set: build.template(block.national_character_set),
        resource_group_name: build.template(block.resource_group_name),
        subnet_id: build.template(block.subnet_id),
        tags: build.template(std.get(block, 'tags', null)),
        virtual_network_id: build.template(block.virtual_network_id),
      }),
      admin_password: resource.field(self._.blocks, 'admin_password'),
      auto_scaling_enabled: resource.field(self._.blocks, 'auto_scaling_enabled'),
      auto_scaling_for_storage_enabled: resource.field(self._.blocks, 'auto_scaling_for_storage_enabled'),
      backup_retention_period_in_days: resource.field(self._.blocks, 'backup_retention_period_in_days'),
      character_set: resource.field(self._.blocks, 'character_set'),
      compute_count: resource.field(self._.blocks, 'compute_count'),
      compute_model: resource.field(self._.blocks, 'compute_model'),
      customer_contacts: resource.field(self._.blocks, 'customer_contacts'),
      data_storage_size_in_tbs: resource.field(self._.blocks, 'data_storage_size_in_tbs'),
      db_version: resource.field(self._.blocks, 'db_version'),
      db_workload: resource.field(self._.blocks, 'db_workload'),
      display_name: resource.field(self._.blocks, 'display_name'),
      id: resource.field(self._.blocks, 'id'),
      license_model: resource.field(self._.blocks, 'license_model'),
      location: resource.field(self._.blocks, 'location'),
      mtls_connection_required: resource.field(self._.blocks, 'mtls_connection_required'),
      name: resource.field(self._.blocks, 'name'),
      national_character_set: resource.field(self._.blocks, 'national_character_set'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      subnet_id: resource.field(self._.blocks, 'subnet_id'),
      tags: resource.field(self._.blocks, 'tags'),
      virtual_network_id: resource.field(self._.blocks, 'virtual_network_id'),
    },
    oracle_cloud_vm_cluster(name, block): {
      local resource = blockType.resource('azurerm_oracle_cloud_vm_cluster', name),
      _: resource._(block, {
        backup_subnet_cidr: build.template(std.get(block, 'backup_subnet_cidr', null)),
        cloud_exadata_infrastructure_id: build.template(block.cloud_exadata_infrastructure_id),
        cluster_name: build.template(std.get(block, 'cluster_name', null)),
        cpu_core_count: build.template(block.cpu_core_count),
        data_storage_percentage: build.template(std.get(block, 'data_storage_percentage', null)),
        data_storage_size_in_tbs: build.template(std.get(block, 'data_storage_size_in_tbs', null)),
        db_node_storage_size_in_gbs: build.template(std.get(block, 'db_node_storage_size_in_gbs', null)),
        db_servers: build.template(block.db_servers),
        display_name: build.template(block.display_name),
        domain: build.template(std.get(block, 'domain', null)),
        gi_version: build.template(block.gi_version),
        hostname: build.template(block.hostname),
        hostname_actual: build.template(std.get(block, 'hostname_actual', null)),
        id: build.template(std.get(block, 'id', null)),
        license_model: build.template(block.license_model),
        local_backup_enabled: build.template(std.get(block, 'local_backup_enabled', null)),
        location: build.template(block.location),
        memory_size_in_gbs: build.template(std.get(block, 'memory_size_in_gbs', null)),
        name: build.template(block.name),
        ocid: build.template(std.get(block, 'ocid', null)),
        resource_group_name: build.template(block.resource_group_name),
        scan_listener_port_tcp: build.template(std.get(block, 'scan_listener_port_tcp', null)),
        scan_listener_port_tcp_ssl: build.template(std.get(block, 'scan_listener_port_tcp_ssl', null)),
        sparse_diskgroup_enabled: build.template(std.get(block, 'sparse_diskgroup_enabled', null)),
        ssh_public_keys: build.template(block.ssh_public_keys),
        subnet_id: build.template(block.subnet_id),
        tags: build.template(std.get(block, 'tags', null)),
        time_zone: build.template(std.get(block, 'time_zone', null)),
        virtual_network_id: build.template(block.virtual_network_id),
        zone_id: build.template(std.get(block, 'zone_id', null)),
      }),
      backup_subnet_cidr: resource.field(self._.blocks, 'backup_subnet_cidr'),
      cloud_exadata_infrastructure_id: resource.field(self._.blocks, 'cloud_exadata_infrastructure_id'),
      cluster_name: resource.field(self._.blocks, 'cluster_name'),
      cpu_core_count: resource.field(self._.blocks, 'cpu_core_count'),
      data_storage_percentage: resource.field(self._.blocks, 'data_storage_percentage'),
      data_storage_size_in_tbs: resource.field(self._.blocks, 'data_storage_size_in_tbs'),
      db_node_storage_size_in_gbs: resource.field(self._.blocks, 'db_node_storage_size_in_gbs'),
      db_servers: resource.field(self._.blocks, 'db_servers'),
      display_name: resource.field(self._.blocks, 'display_name'),
      domain: resource.field(self._.blocks, 'domain'),
      gi_version: resource.field(self._.blocks, 'gi_version'),
      hostname: resource.field(self._.blocks, 'hostname'),
      hostname_actual: resource.field(self._.blocks, 'hostname_actual'),
      id: resource.field(self._.blocks, 'id'),
      license_model: resource.field(self._.blocks, 'license_model'),
      local_backup_enabled: resource.field(self._.blocks, 'local_backup_enabled'),
      location: resource.field(self._.blocks, 'location'),
      memory_size_in_gbs: resource.field(self._.blocks, 'memory_size_in_gbs'),
      name: resource.field(self._.blocks, 'name'),
      ocid: resource.field(self._.blocks, 'ocid'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      scan_listener_port_tcp: resource.field(self._.blocks, 'scan_listener_port_tcp'),
      scan_listener_port_tcp_ssl: resource.field(self._.blocks, 'scan_listener_port_tcp_ssl'),
      sparse_diskgroup_enabled: resource.field(self._.blocks, 'sparse_diskgroup_enabled'),
      ssh_public_keys: resource.field(self._.blocks, 'ssh_public_keys'),
      subnet_id: resource.field(self._.blocks, 'subnet_id'),
      tags: resource.field(self._.blocks, 'tags'),
      time_zone: resource.field(self._.blocks, 'time_zone'),
      virtual_network_id: resource.field(self._.blocks, 'virtual_network_id'),
      zone_id: resource.field(self._.blocks, 'zone_id'),
    },
    oracle_exadata_infrastructure(name, block): {
      local resource = blockType.resource('azurerm_oracle_exadata_infrastructure', name),
      _: resource._(block, {
        compute_count: build.template(block.compute_count),
        customer_contacts: build.template(std.get(block, 'customer_contacts', null)),
        display_name: build.template(block.display_name),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        shape: build.template(block.shape),
        storage_count: build.template(block.storage_count),
        tags: build.template(std.get(block, 'tags', null)),
        zones: build.template(block.zones),
      }),
      compute_count: resource.field(self._.blocks, 'compute_count'),
      customer_contacts: resource.field(self._.blocks, 'customer_contacts'),
      display_name: resource.field(self._.blocks, 'display_name'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      shape: resource.field(self._.blocks, 'shape'),
      storage_count: resource.field(self._.blocks, 'storage_count'),
      tags: resource.field(self._.blocks, 'tags'),
      zones: resource.field(self._.blocks, 'zones'),
    },
    orbital_contact(name, block): {
      local resource = blockType.resource('azurerm_orbital_contact', name),
      _: resource._(block, {
        contact_profile_id: build.template(block.contact_profile_id),
        ground_station_name: build.template(block.ground_station_name),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        reservation_end_time: build.template(block.reservation_end_time),
        reservation_start_time: build.template(block.reservation_start_time),
        spacecraft_id: build.template(block.spacecraft_id),
      }),
      contact_profile_id: resource.field(self._.blocks, 'contact_profile_id'),
      ground_station_name: resource.field(self._.blocks, 'ground_station_name'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      reservation_end_time: resource.field(self._.blocks, 'reservation_end_time'),
      reservation_start_time: resource.field(self._.blocks, 'reservation_start_time'),
      spacecraft_id: resource.field(self._.blocks, 'spacecraft_id'),
    },
    orbital_contact_profile(name, block): {
      local resource = blockType.resource('azurerm_orbital_contact_profile', name),
      _: resource._(block, {
        auto_tracking: build.template(block.auto_tracking),
        event_hub_uri: build.template(std.get(block, 'event_hub_uri', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        minimum_elevation_degrees: build.template(std.get(block, 'minimum_elevation_degrees', null)),
        minimum_variable_contact_duration: build.template(block.minimum_variable_contact_duration),
        name: build.template(block.name),
        network_configuration_subnet_id: build.template(block.network_configuration_subnet_id),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      auto_tracking: resource.field(self._.blocks, 'auto_tracking'),
      event_hub_uri: resource.field(self._.blocks, 'event_hub_uri'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      minimum_elevation_degrees: resource.field(self._.blocks, 'minimum_elevation_degrees'),
      minimum_variable_contact_duration: resource.field(self._.blocks, 'minimum_variable_contact_duration'),
      name: resource.field(self._.blocks, 'name'),
      network_configuration_subnet_id: resource.field(self._.blocks, 'network_configuration_subnet_id'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    orbital_spacecraft(name, block): {
      local resource = blockType.resource('azurerm_orbital_spacecraft', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        norad_id: build.template(block.norad_id),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
        title_line: build.template(block.title_line),
        two_line_elements: build.template(block.two_line_elements),
      }),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      norad_id: resource.field(self._.blocks, 'norad_id'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
      title_line: resource.field(self._.blocks, 'title_line'),
      two_line_elements: resource.field(self._.blocks, 'two_line_elements'),
    },
    orchestrated_virtual_machine_scale_set(name, block): {
      local resource = blockType.resource('azurerm_orchestrated_virtual_machine_scale_set', name),
      _: resource._(block, {
        capacity_reservation_group_id: build.template(std.get(block, 'capacity_reservation_group_id', null)),
        encryption_at_host_enabled: build.template(std.get(block, 'encryption_at_host_enabled', null)),
        eviction_policy: build.template(std.get(block, 'eviction_policy', null)),
        extension_operations_enabled: build.template(std.get(block, 'extension_operations_enabled', null)),
        extensions_time_budget: build.template(std.get(block, 'extensions_time_budget', null)),
        id: build.template(std.get(block, 'id', null)),
        instances: build.template(std.get(block, 'instances', null)),
        license_type: build.template(std.get(block, 'license_type', null)),
        location: build.template(block.location),
        max_bid_price: build.template(std.get(block, 'max_bid_price', null)),
        name: build.template(block.name),
        platform_fault_domain_count: build.template(block.platform_fault_domain_count),
        priority: build.template(std.get(block, 'priority', null)),
        proximity_placement_group_id: build.template(std.get(block, 'proximity_placement_group_id', null)),
        resource_group_name: build.template(block.resource_group_name),
        single_placement_group: build.template(std.get(block, 'single_placement_group', null)),
        sku_name: build.template(std.get(block, 'sku_name', null)),
        source_image_id: build.template(std.get(block, 'source_image_id', null)),
        tags: build.template(std.get(block, 'tags', null)),
        unique_id: build.template(std.get(block, 'unique_id', null)),
        user_data_base64: build.template(std.get(block, 'user_data_base64', null)),
        zone_balance: build.template(std.get(block, 'zone_balance', null)),
        zones: build.template(std.get(block, 'zones', null)),
      }),
      capacity_reservation_group_id: resource.field(self._.blocks, 'capacity_reservation_group_id'),
      encryption_at_host_enabled: resource.field(self._.blocks, 'encryption_at_host_enabled'),
      eviction_policy: resource.field(self._.blocks, 'eviction_policy'),
      extension_operations_enabled: resource.field(self._.blocks, 'extension_operations_enabled'),
      extensions_time_budget: resource.field(self._.blocks, 'extensions_time_budget'),
      id: resource.field(self._.blocks, 'id'),
      instances: resource.field(self._.blocks, 'instances'),
      license_type: resource.field(self._.blocks, 'license_type'),
      location: resource.field(self._.blocks, 'location'),
      max_bid_price: resource.field(self._.blocks, 'max_bid_price'),
      name: resource.field(self._.blocks, 'name'),
      platform_fault_domain_count: resource.field(self._.blocks, 'platform_fault_domain_count'),
      priority: resource.field(self._.blocks, 'priority'),
      proximity_placement_group_id: resource.field(self._.blocks, 'proximity_placement_group_id'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      single_placement_group: resource.field(self._.blocks, 'single_placement_group'),
      sku_name: resource.field(self._.blocks, 'sku_name'),
      source_image_id: resource.field(self._.blocks, 'source_image_id'),
      tags: resource.field(self._.blocks, 'tags'),
      unique_id: resource.field(self._.blocks, 'unique_id'),
      user_data_base64: resource.field(self._.blocks, 'user_data_base64'),
      zone_balance: resource.field(self._.blocks, 'zone_balance'),
      zones: resource.field(self._.blocks, 'zones'),
    },
    palo_alto_local_rulestack(name, block): {
      local resource = blockType.resource('azurerm_palo_alto_local_rulestack', name),
      _: resource._(block, {
        anti_spyware_profile: build.template(std.get(block, 'anti_spyware_profile', null)),
        anti_virus_profile: build.template(std.get(block, 'anti_virus_profile', null)),
        description: build.template(std.get(block, 'description', null)),
        dns_subscription: build.template(std.get(block, 'dns_subscription', null)),
        file_blocking_profile: build.template(std.get(block, 'file_blocking_profile', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        url_filtering_profile: build.template(std.get(block, 'url_filtering_profile', null)),
        vulnerability_profile: build.template(std.get(block, 'vulnerability_profile', null)),
      }),
      anti_spyware_profile: resource.field(self._.blocks, 'anti_spyware_profile'),
      anti_virus_profile: resource.field(self._.blocks, 'anti_virus_profile'),
      description: resource.field(self._.blocks, 'description'),
      dns_subscription: resource.field(self._.blocks, 'dns_subscription'),
      file_blocking_profile: resource.field(self._.blocks, 'file_blocking_profile'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      url_filtering_profile: resource.field(self._.blocks, 'url_filtering_profile'),
      vulnerability_profile: resource.field(self._.blocks, 'vulnerability_profile'),
    },
    palo_alto_local_rulestack_certificate(name, block): {
      local resource = blockType.resource('azurerm_palo_alto_local_rulestack_certificate', name),
      _: resource._(block, {
        audit_comment: build.template(std.get(block, 'audit_comment', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        key_vault_certificate_id: build.template(std.get(block, 'key_vault_certificate_id', null)),
        name: build.template(block.name),
        rulestack_id: build.template(block.rulestack_id),
        self_signed: build.template(std.get(block, 'self_signed', null)),
      }),
      audit_comment: resource.field(self._.blocks, 'audit_comment'),
      description: resource.field(self._.blocks, 'description'),
      id: resource.field(self._.blocks, 'id'),
      key_vault_certificate_id: resource.field(self._.blocks, 'key_vault_certificate_id'),
      name: resource.field(self._.blocks, 'name'),
      rulestack_id: resource.field(self._.blocks, 'rulestack_id'),
      self_signed: resource.field(self._.blocks, 'self_signed'),
    },
    palo_alto_local_rulestack_fqdn_list(name, block): {
      local resource = blockType.resource('azurerm_palo_alto_local_rulestack_fqdn_list', name),
      _: resource._(block, {
        audit_comment: build.template(std.get(block, 'audit_comment', null)),
        description: build.template(std.get(block, 'description', null)),
        fully_qualified_domain_names: build.template(block.fully_qualified_domain_names),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        rulestack_id: build.template(block.rulestack_id),
      }),
      audit_comment: resource.field(self._.blocks, 'audit_comment'),
      description: resource.field(self._.blocks, 'description'),
      fully_qualified_domain_names: resource.field(self._.blocks, 'fully_qualified_domain_names'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      rulestack_id: resource.field(self._.blocks, 'rulestack_id'),
    },
    palo_alto_local_rulestack_outbound_trust_certificate_association(name, block): {
      local resource = blockType.resource('azurerm_palo_alto_local_rulestack_outbound_trust_certificate_association', name),
      _: resource._(block, {
        certificate_id: build.template(block.certificate_id),
        id: build.template(std.get(block, 'id', null)),
      }),
      certificate_id: resource.field(self._.blocks, 'certificate_id'),
      id: resource.field(self._.blocks, 'id'),
    },
    palo_alto_local_rulestack_outbound_untrust_certificate_association(name, block): {
      local resource = blockType.resource('azurerm_palo_alto_local_rulestack_outbound_untrust_certificate_association', name),
      _: resource._(block, {
        certificate_id: build.template(block.certificate_id),
        id: build.template(std.get(block, 'id', null)),
      }),
      certificate_id: resource.field(self._.blocks, 'certificate_id'),
      id: resource.field(self._.blocks, 'id'),
    },
    palo_alto_local_rulestack_prefix_list(name, block): {
      local resource = blockType.resource('azurerm_palo_alto_local_rulestack_prefix_list', name),
      _: resource._(block, {
        audit_comment: build.template(std.get(block, 'audit_comment', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        prefix_list: build.template(block.prefix_list),
        rulestack_id: build.template(block.rulestack_id),
      }),
      audit_comment: resource.field(self._.blocks, 'audit_comment'),
      description: resource.field(self._.blocks, 'description'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      prefix_list: resource.field(self._.blocks, 'prefix_list'),
      rulestack_id: resource.field(self._.blocks, 'rulestack_id'),
    },
    palo_alto_local_rulestack_rule(name, block): {
      local resource = blockType.resource('azurerm_palo_alto_local_rulestack_rule', name),
      _: resource._(block, {
        action: build.template(block.action),
        applications: build.template(block.applications),
        audit_comment: build.template(std.get(block, 'audit_comment', null)),
        decryption_rule_type: build.template(std.get(block, 'decryption_rule_type', null)),
        description: build.template(std.get(block, 'description', null)),
        enabled: build.template(std.get(block, 'enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        inspection_certificate_id: build.template(std.get(block, 'inspection_certificate_id', null)),
        logging_enabled: build.template(std.get(block, 'logging_enabled', null)),
        name: build.template(block.name),
        negate_destination: build.template(std.get(block, 'negate_destination', null)),
        negate_source: build.template(std.get(block, 'negate_source', null)),
        priority: build.template(block.priority),
        protocol: build.template(std.get(block, 'protocol', null)),
        protocol_ports: build.template(std.get(block, 'protocol_ports', null)),
        rulestack_id: build.template(block.rulestack_id),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      action: resource.field(self._.blocks, 'action'),
      applications: resource.field(self._.blocks, 'applications'),
      audit_comment: resource.field(self._.blocks, 'audit_comment'),
      decryption_rule_type: resource.field(self._.blocks, 'decryption_rule_type'),
      description: resource.field(self._.blocks, 'description'),
      enabled: resource.field(self._.blocks, 'enabled'),
      id: resource.field(self._.blocks, 'id'),
      inspection_certificate_id: resource.field(self._.blocks, 'inspection_certificate_id'),
      logging_enabled: resource.field(self._.blocks, 'logging_enabled'),
      name: resource.field(self._.blocks, 'name'),
      negate_destination: resource.field(self._.blocks, 'negate_destination'),
      negate_source: resource.field(self._.blocks, 'negate_source'),
      priority: resource.field(self._.blocks, 'priority'),
      protocol: resource.field(self._.blocks, 'protocol'),
      protocol_ports: resource.field(self._.blocks, 'protocol_ports'),
      rulestack_id: resource.field(self._.blocks, 'rulestack_id'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    palo_alto_next_generation_firewall_virtual_hub_local_rulestack(name, block): {
      local resource = blockType.resource('azurerm_palo_alto_next_generation_firewall_virtual_hub_local_rulestack', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        marketplace_offer_id: build.template(std.get(block, 'marketplace_offer_id', null)),
        name: build.template(block.name),
        plan_id: build.template(std.get(block, 'plan_id', null)),
        resource_group_name: build.template(block.resource_group_name),
        rulestack_id: build.template(block.rulestack_id),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      marketplace_offer_id: resource.field(self._.blocks, 'marketplace_offer_id'),
      name: resource.field(self._.blocks, 'name'),
      plan_id: resource.field(self._.blocks, 'plan_id'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      rulestack_id: resource.field(self._.blocks, 'rulestack_id'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    palo_alto_next_generation_firewall_virtual_hub_panorama(name, block): {
      local resource = blockType.resource('azurerm_palo_alto_next_generation_firewall_virtual_hub_panorama', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        marketplace_offer_id: build.template(std.get(block, 'marketplace_offer_id', null)),
        name: build.template(block.name),
        panorama: build.template(std.get(block, 'panorama', null)),
        panorama_base64_config: build.template(block.panorama_base64_config),
        plan_id: build.template(std.get(block, 'plan_id', null)),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      marketplace_offer_id: resource.field(self._.blocks, 'marketplace_offer_id'),
      name: resource.field(self._.blocks, 'name'),
      panorama: resource.field(self._.blocks, 'panorama'),
      panorama_base64_config: resource.field(self._.blocks, 'panorama_base64_config'),
      plan_id: resource.field(self._.blocks, 'plan_id'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    palo_alto_next_generation_firewall_virtual_network_local_rulestack(name, block): {
      local resource = blockType.resource('azurerm_palo_alto_next_generation_firewall_virtual_network_local_rulestack', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        marketplace_offer_id: build.template(std.get(block, 'marketplace_offer_id', null)),
        name: build.template(block.name),
        plan_id: build.template(std.get(block, 'plan_id', null)),
        resource_group_name: build.template(block.resource_group_name),
        rulestack_id: build.template(block.rulestack_id),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      marketplace_offer_id: resource.field(self._.blocks, 'marketplace_offer_id'),
      name: resource.field(self._.blocks, 'name'),
      plan_id: resource.field(self._.blocks, 'plan_id'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      rulestack_id: resource.field(self._.blocks, 'rulestack_id'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    palo_alto_next_generation_firewall_virtual_network_panorama(name, block): {
      local resource = blockType.resource('azurerm_palo_alto_next_generation_firewall_virtual_network_panorama', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        marketplace_offer_id: build.template(std.get(block, 'marketplace_offer_id', null)),
        name: build.template(block.name),
        panorama: build.template(std.get(block, 'panorama', null)),
        panorama_base64_config: build.template(block.panorama_base64_config),
        plan_id: build.template(std.get(block, 'plan_id', null)),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      marketplace_offer_id: resource.field(self._.blocks, 'marketplace_offer_id'),
      name: resource.field(self._.blocks, 'name'),
      panorama: resource.field(self._.blocks, 'panorama'),
      panorama_base64_config: resource.field(self._.blocks, 'panorama_base64_config'),
      plan_id: resource.field(self._.blocks, 'plan_id'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    palo_alto_virtual_network_appliance(name, block): {
      local resource = blockType.resource('azurerm_palo_alto_virtual_network_appliance', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        virtual_hub_id: build.template(block.virtual_hub_id),
      }),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      virtual_hub_id: resource.field(self._.blocks, 'virtual_hub_id'),
    },
    pim_active_role_assignment(name, block): {
      local resource = blockType.resource('azurerm_pim_active_role_assignment', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        justification: build.template(std.get(block, 'justification', null)),
        principal_id: build.template(block.principal_id),
        principal_type: build.template(std.get(block, 'principal_type', null)),
        role_definition_id: build.template(block.role_definition_id),
        scope: build.template(block.scope),
      }),
      id: resource.field(self._.blocks, 'id'),
      justification: resource.field(self._.blocks, 'justification'),
      principal_id: resource.field(self._.blocks, 'principal_id'),
      principal_type: resource.field(self._.blocks, 'principal_type'),
      role_definition_id: resource.field(self._.blocks, 'role_definition_id'),
      scope: resource.field(self._.blocks, 'scope'),
    },
    pim_eligible_role_assignment(name, block): {
      local resource = blockType.resource('azurerm_pim_eligible_role_assignment', name),
      _: resource._(block, {
        condition: build.template(std.get(block, 'condition', null)),
        condition_version: build.template(std.get(block, 'condition_version', null)),
        id: build.template(std.get(block, 'id', null)),
        justification: build.template(std.get(block, 'justification', null)),
        principal_id: build.template(block.principal_id),
        principal_type: build.template(std.get(block, 'principal_type', null)),
        role_definition_id: build.template(block.role_definition_id),
        scope: build.template(block.scope),
      }),
      condition: resource.field(self._.blocks, 'condition'),
      condition_version: resource.field(self._.blocks, 'condition_version'),
      id: resource.field(self._.blocks, 'id'),
      justification: resource.field(self._.blocks, 'justification'),
      principal_id: resource.field(self._.blocks, 'principal_id'),
      principal_type: resource.field(self._.blocks, 'principal_type'),
      role_definition_id: resource.field(self._.blocks, 'role_definition_id'),
      scope: resource.field(self._.blocks, 'scope'),
    },
    point_to_site_vpn_gateway(name, block): {
      local resource = blockType.resource('azurerm_point_to_site_vpn_gateway', name),
      _: resource._(block, {
        dns_servers: build.template(std.get(block, 'dns_servers', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        routing_preference_internet_enabled: build.template(std.get(block, 'routing_preference_internet_enabled', null)),
        scale_unit: build.template(block.scale_unit),
        tags: build.template(std.get(block, 'tags', null)),
        virtual_hub_id: build.template(block.virtual_hub_id),
        vpn_server_configuration_id: build.template(block.vpn_server_configuration_id),
      }),
      dns_servers: resource.field(self._.blocks, 'dns_servers'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      routing_preference_internet_enabled: resource.field(self._.blocks, 'routing_preference_internet_enabled'),
      scale_unit: resource.field(self._.blocks, 'scale_unit'),
      tags: resource.field(self._.blocks, 'tags'),
      virtual_hub_id: resource.field(self._.blocks, 'virtual_hub_id'),
      vpn_server_configuration_id: resource.field(self._.blocks, 'vpn_server_configuration_id'),
    },
    policy_definition(name, block): {
      local resource = blockType.resource('azurerm_policy_definition', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        display_name: build.template(block.display_name),
        id: build.template(std.get(block, 'id', null)),
        management_group_id: build.template(std.get(block, 'management_group_id', null)),
        metadata: build.template(std.get(block, 'metadata', null)),
        mode: build.template(block.mode),
        name: build.template(block.name),
        parameters: build.template(std.get(block, 'parameters', null)),
        policy_rule: build.template(std.get(block, 'policy_rule', null)),
        policy_type: build.template(block.policy_type),
        role_definition_ids: build.template(std.get(block, 'role_definition_ids', null)),
      }),
      description: resource.field(self._.blocks, 'description'),
      display_name: resource.field(self._.blocks, 'display_name'),
      id: resource.field(self._.blocks, 'id'),
      management_group_id: resource.field(self._.blocks, 'management_group_id'),
      metadata: resource.field(self._.blocks, 'metadata'),
      mode: resource.field(self._.blocks, 'mode'),
      name: resource.field(self._.blocks, 'name'),
      parameters: resource.field(self._.blocks, 'parameters'),
      policy_rule: resource.field(self._.blocks, 'policy_rule'),
      policy_type: resource.field(self._.blocks, 'policy_type'),
      role_definition_ids: resource.field(self._.blocks, 'role_definition_ids'),
    },
    policy_set_definition(name, block): {
      local resource = blockType.resource('azurerm_policy_set_definition', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        display_name: build.template(block.display_name),
        id: build.template(std.get(block, 'id', null)),
        management_group_id: build.template(std.get(block, 'management_group_id', null)),
        metadata: build.template(std.get(block, 'metadata', null)),
        name: build.template(block.name),
        parameters: build.template(std.get(block, 'parameters', null)),
        policy_type: build.template(block.policy_type),
      }),
      description: resource.field(self._.blocks, 'description'),
      display_name: resource.field(self._.blocks, 'display_name'),
      id: resource.field(self._.blocks, 'id'),
      management_group_id: resource.field(self._.blocks, 'management_group_id'),
      metadata: resource.field(self._.blocks, 'metadata'),
      name: resource.field(self._.blocks, 'name'),
      parameters: resource.field(self._.blocks, 'parameters'),
      policy_type: resource.field(self._.blocks, 'policy_type'),
    },
    policy_virtual_machine_configuration_assignment(name, block): {
      local resource = blockType.resource('azurerm_policy_virtual_machine_configuration_assignment', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        virtual_machine_id: build.template(block.virtual_machine_id),
      }),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      virtual_machine_id: resource.field(self._.blocks, 'virtual_machine_id'),
    },
    portal_dashboard(name, block): {
      local resource = blockType.resource('azurerm_portal_dashboard', name),
      _: resource._(block, {
        dashboard_properties: build.template(block.dashboard_properties),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      dashboard_properties: resource.field(self._.blocks, 'dashboard_properties'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    portal_tenant_configuration(name, block): {
      local resource = blockType.resource('azurerm_portal_tenant_configuration', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        private_markdown_storage_enforced: build.template(block.private_markdown_storage_enforced),
      }),
      id: resource.field(self._.blocks, 'id'),
      private_markdown_storage_enforced: resource.field(self._.blocks, 'private_markdown_storage_enforced'),
    },
    postgresql_active_directory_administrator(name, block): {
      local resource = blockType.resource('azurerm_postgresql_active_directory_administrator', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        login: build.template(block.login),
        object_id: build.template(block.object_id),
        resource_group_name: build.template(block.resource_group_name),
        server_name: build.template(block.server_name),
        tenant_id: build.template(block.tenant_id),
      }),
      id: resource.field(self._.blocks, 'id'),
      login: resource.field(self._.blocks, 'login'),
      object_id: resource.field(self._.blocks, 'object_id'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      server_name: resource.field(self._.blocks, 'server_name'),
      tenant_id: resource.field(self._.blocks, 'tenant_id'),
    },
    postgresql_configuration(name, block): {
      local resource = blockType.resource('azurerm_postgresql_configuration', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        server_name: build.template(block.server_name),
        value: build.template(block.value),
      }),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      server_name: resource.field(self._.blocks, 'server_name'),
      value: resource.field(self._.blocks, 'value'),
    },
    postgresql_database(name, block): {
      local resource = blockType.resource('azurerm_postgresql_database', name),
      _: resource._(block, {
        charset: build.template(block.charset),
        collation: build.template(block.collation),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        server_name: build.template(block.server_name),
      }),
      charset: resource.field(self._.blocks, 'charset'),
      collation: resource.field(self._.blocks, 'collation'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      server_name: resource.field(self._.blocks, 'server_name'),
    },
    postgresql_firewall_rule(name, block): {
      local resource = blockType.resource('azurerm_postgresql_firewall_rule', name),
      _: resource._(block, {
        end_ip_address: build.template(block.end_ip_address),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        server_name: build.template(block.server_name),
        start_ip_address: build.template(block.start_ip_address),
      }),
      end_ip_address: resource.field(self._.blocks, 'end_ip_address'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      server_name: resource.field(self._.blocks, 'server_name'),
      start_ip_address: resource.field(self._.blocks, 'start_ip_address'),
    },
    postgresql_flexible_server(name, block): {
      local resource = blockType.resource('azurerm_postgresql_flexible_server', name),
      _: resource._(block, {
        administrator_login: build.template(std.get(block, 'administrator_login', null)),
        administrator_password: build.template(std.get(block, 'administrator_password', null)),
        administrator_password_wo: build.template(std.get(block, 'administrator_password_wo', null)),
        administrator_password_wo_version: build.template(std.get(block, 'administrator_password_wo_version', null)),
        auto_grow_enabled: build.template(std.get(block, 'auto_grow_enabled', null)),
        backup_retention_days: build.template(std.get(block, 'backup_retention_days', null)),
        create_mode: build.template(std.get(block, 'create_mode', null)),
        delegated_subnet_id: build.template(std.get(block, 'delegated_subnet_id', null)),
        fqdn: build.template(std.get(block, 'fqdn', null)),
        geo_redundant_backup_enabled: build.template(std.get(block, 'geo_redundant_backup_enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        point_in_time_restore_time_in_utc: build.template(std.get(block, 'point_in_time_restore_time_in_utc', null)),
        private_dns_zone_id: build.template(std.get(block, 'private_dns_zone_id', null)),
        public_network_access_enabled: build.template(std.get(block, 'public_network_access_enabled', null)),
        replication_role: build.template(std.get(block, 'replication_role', null)),
        resource_group_name: build.template(block.resource_group_name),
        sku_name: build.template(std.get(block, 'sku_name', null)),
        source_server_id: build.template(std.get(block, 'source_server_id', null)),
        storage_mb: build.template(std.get(block, 'storage_mb', null)),
        storage_tier: build.template(std.get(block, 'storage_tier', null)),
        tags: build.template(std.get(block, 'tags', null)),
        version: build.template(std.get(block, 'version', null)),
        zone: build.template(std.get(block, 'zone', null)),
      }),
      administrator_login: resource.field(self._.blocks, 'administrator_login'),
      administrator_password: resource.field(self._.blocks, 'administrator_password'),
      administrator_password_wo: resource.field(self._.blocks, 'administrator_password_wo'),
      administrator_password_wo_version: resource.field(self._.blocks, 'administrator_password_wo_version'),
      auto_grow_enabled: resource.field(self._.blocks, 'auto_grow_enabled'),
      backup_retention_days: resource.field(self._.blocks, 'backup_retention_days'),
      create_mode: resource.field(self._.blocks, 'create_mode'),
      delegated_subnet_id: resource.field(self._.blocks, 'delegated_subnet_id'),
      fqdn: resource.field(self._.blocks, 'fqdn'),
      geo_redundant_backup_enabled: resource.field(self._.blocks, 'geo_redundant_backup_enabled'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      point_in_time_restore_time_in_utc: resource.field(self._.blocks, 'point_in_time_restore_time_in_utc'),
      private_dns_zone_id: resource.field(self._.blocks, 'private_dns_zone_id'),
      public_network_access_enabled: resource.field(self._.blocks, 'public_network_access_enabled'),
      replication_role: resource.field(self._.blocks, 'replication_role'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      sku_name: resource.field(self._.blocks, 'sku_name'),
      source_server_id: resource.field(self._.blocks, 'source_server_id'),
      storage_mb: resource.field(self._.blocks, 'storage_mb'),
      storage_tier: resource.field(self._.blocks, 'storage_tier'),
      tags: resource.field(self._.blocks, 'tags'),
      version: resource.field(self._.blocks, 'version'),
      zone: resource.field(self._.blocks, 'zone'),
    },
    postgresql_flexible_server_active_directory_administrator(name, block): {
      local resource = blockType.resource('azurerm_postgresql_flexible_server_active_directory_administrator', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        object_id: build.template(block.object_id),
        principal_name: build.template(block.principal_name),
        principal_type: build.template(block.principal_type),
        resource_group_name: build.template(block.resource_group_name),
        server_name: build.template(block.server_name),
        tenant_id: build.template(block.tenant_id),
      }),
      id: resource.field(self._.blocks, 'id'),
      object_id: resource.field(self._.blocks, 'object_id'),
      principal_name: resource.field(self._.blocks, 'principal_name'),
      principal_type: resource.field(self._.blocks, 'principal_type'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      server_name: resource.field(self._.blocks, 'server_name'),
      tenant_id: resource.field(self._.blocks, 'tenant_id'),
    },
    postgresql_flexible_server_configuration(name, block): {
      local resource = blockType.resource('azurerm_postgresql_flexible_server_configuration', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        server_id: build.template(block.server_id),
        value: build.template(block.value),
      }),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      server_id: resource.field(self._.blocks, 'server_id'),
      value: resource.field(self._.blocks, 'value'),
    },
    postgresql_flexible_server_database(name, block): {
      local resource = blockType.resource('azurerm_postgresql_flexible_server_database', name),
      _: resource._(block, {
        charset: build.template(std.get(block, 'charset', null)),
        collation: build.template(std.get(block, 'collation', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        server_id: build.template(block.server_id),
      }),
      charset: resource.field(self._.blocks, 'charset'),
      collation: resource.field(self._.blocks, 'collation'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      server_id: resource.field(self._.blocks, 'server_id'),
    },
    postgresql_flexible_server_firewall_rule(name, block): {
      local resource = blockType.resource('azurerm_postgresql_flexible_server_firewall_rule', name),
      _: resource._(block, {
        end_ip_address: build.template(block.end_ip_address),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        server_id: build.template(block.server_id),
        start_ip_address: build.template(block.start_ip_address),
      }),
      end_ip_address: resource.field(self._.blocks, 'end_ip_address'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      server_id: resource.field(self._.blocks, 'server_id'),
      start_ip_address: resource.field(self._.blocks, 'start_ip_address'),
    },
    postgresql_flexible_server_virtual_endpoint(name, block): {
      local resource = blockType.resource('azurerm_postgresql_flexible_server_virtual_endpoint', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        replica_server_id: build.template(block.replica_server_id),
        source_server_id: build.template(block.source_server_id),
        type: build.template(block.type),
      }),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      replica_server_id: resource.field(self._.blocks, 'replica_server_id'),
      source_server_id: resource.field(self._.blocks, 'source_server_id'),
      type: resource.field(self._.blocks, 'type'),
    },
    postgresql_server(name, block): {
      local resource = blockType.resource('azurerm_postgresql_server', name),
      _: resource._(block, {
        administrator_login: build.template(std.get(block, 'administrator_login', null)),
        administrator_login_password: build.template(std.get(block, 'administrator_login_password', null)),
        administrator_login_password_wo: build.template(std.get(block, 'administrator_login_password_wo', null)),
        administrator_login_password_wo_version: build.template(std.get(block, 'administrator_login_password_wo_version', null)),
        auto_grow_enabled: build.template(std.get(block, 'auto_grow_enabled', null)),
        backup_retention_days: build.template(std.get(block, 'backup_retention_days', null)),
        create_mode: build.template(std.get(block, 'create_mode', null)),
        creation_source_server_id: build.template(std.get(block, 'creation_source_server_id', null)),
        fqdn: build.template(std.get(block, 'fqdn', null)),
        geo_redundant_backup_enabled: build.template(std.get(block, 'geo_redundant_backup_enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        infrastructure_encryption_enabled: build.template(std.get(block, 'infrastructure_encryption_enabled', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        public_network_access_enabled: build.template(std.get(block, 'public_network_access_enabled', null)),
        resource_group_name: build.template(block.resource_group_name),
        restore_point_in_time: build.template(std.get(block, 'restore_point_in_time', null)),
        sku_name: build.template(block.sku_name),
        ssl_enforcement_enabled: build.template(block.ssl_enforcement_enabled),
        ssl_minimal_tls_version_enforced: build.template(std.get(block, 'ssl_minimal_tls_version_enforced', null)),
        storage_mb: build.template(std.get(block, 'storage_mb', null)),
        tags: build.template(std.get(block, 'tags', null)),
        version: build.template(block.version),
      }),
      administrator_login: resource.field(self._.blocks, 'administrator_login'),
      administrator_login_password: resource.field(self._.blocks, 'administrator_login_password'),
      administrator_login_password_wo: resource.field(self._.blocks, 'administrator_login_password_wo'),
      administrator_login_password_wo_version: resource.field(self._.blocks, 'administrator_login_password_wo_version'),
      auto_grow_enabled: resource.field(self._.blocks, 'auto_grow_enabled'),
      backup_retention_days: resource.field(self._.blocks, 'backup_retention_days'),
      create_mode: resource.field(self._.blocks, 'create_mode'),
      creation_source_server_id: resource.field(self._.blocks, 'creation_source_server_id'),
      fqdn: resource.field(self._.blocks, 'fqdn'),
      geo_redundant_backup_enabled: resource.field(self._.blocks, 'geo_redundant_backup_enabled'),
      id: resource.field(self._.blocks, 'id'),
      infrastructure_encryption_enabled: resource.field(self._.blocks, 'infrastructure_encryption_enabled'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      public_network_access_enabled: resource.field(self._.blocks, 'public_network_access_enabled'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      restore_point_in_time: resource.field(self._.blocks, 'restore_point_in_time'),
      sku_name: resource.field(self._.blocks, 'sku_name'),
      ssl_enforcement_enabled: resource.field(self._.blocks, 'ssl_enforcement_enabled'),
      ssl_minimal_tls_version_enforced: resource.field(self._.blocks, 'ssl_minimal_tls_version_enforced'),
      storage_mb: resource.field(self._.blocks, 'storage_mb'),
      tags: resource.field(self._.blocks, 'tags'),
      version: resource.field(self._.blocks, 'version'),
    },
    postgresql_server_key(name, block): {
      local resource = blockType.resource('azurerm_postgresql_server_key', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        key_vault_key_id: build.template(block.key_vault_key_id),
        server_id: build.template(block.server_id),
      }),
      id: resource.field(self._.blocks, 'id'),
      key_vault_key_id: resource.field(self._.blocks, 'key_vault_key_id'),
      server_id: resource.field(self._.blocks, 'server_id'),
    },
    postgresql_virtual_network_rule(name, block): {
      local resource = blockType.resource('azurerm_postgresql_virtual_network_rule', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        ignore_missing_vnet_service_endpoint: build.template(std.get(block, 'ignore_missing_vnet_service_endpoint', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        server_name: build.template(block.server_name),
        subnet_id: build.template(block.subnet_id),
      }),
      id: resource.field(self._.blocks, 'id'),
      ignore_missing_vnet_service_endpoint: resource.field(self._.blocks, 'ignore_missing_vnet_service_endpoint'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      server_name: resource.field(self._.blocks, 'server_name'),
      subnet_id: resource.field(self._.blocks, 'subnet_id'),
    },
    powerbi_embedded(name, block): {
      local resource = blockType.resource('azurerm_powerbi_embedded', name),
      _: resource._(block, {
        administrators: build.template(block.administrators),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        mode: build.template(std.get(block, 'mode', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        sku_name: build.template(block.sku_name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      administrators: resource.field(self._.blocks, 'administrators'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      mode: resource.field(self._.blocks, 'mode'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      sku_name: resource.field(self._.blocks, 'sku_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    private_dns_a_record(name, block): {
      local resource = blockType.resource('azurerm_private_dns_a_record', name),
      _: resource._(block, {
        fqdn: build.template(std.get(block, 'fqdn', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        records: build.template(block.records),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
        ttl: build.template(block.ttl),
        zone_name: build.template(block.zone_name),
      }),
      fqdn: resource.field(self._.blocks, 'fqdn'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      records: resource.field(self._.blocks, 'records'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
      ttl: resource.field(self._.blocks, 'ttl'),
      zone_name: resource.field(self._.blocks, 'zone_name'),
    },
    private_dns_aaaa_record(name, block): {
      local resource = blockType.resource('azurerm_private_dns_aaaa_record', name),
      _: resource._(block, {
        fqdn: build.template(std.get(block, 'fqdn', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        records: build.template(block.records),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
        ttl: build.template(block.ttl),
        zone_name: build.template(block.zone_name),
      }),
      fqdn: resource.field(self._.blocks, 'fqdn'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      records: resource.field(self._.blocks, 'records'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
      ttl: resource.field(self._.blocks, 'ttl'),
      zone_name: resource.field(self._.blocks, 'zone_name'),
    },
    private_dns_cname_record(name, block): {
      local resource = blockType.resource('azurerm_private_dns_cname_record', name),
      _: resource._(block, {
        fqdn: build.template(std.get(block, 'fqdn', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        record: build.template(block.record),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
        ttl: build.template(block.ttl),
        zone_name: build.template(block.zone_name),
      }),
      fqdn: resource.field(self._.blocks, 'fqdn'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      record: resource.field(self._.blocks, 'record'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
      ttl: resource.field(self._.blocks, 'ttl'),
      zone_name: resource.field(self._.blocks, 'zone_name'),
    },
    private_dns_mx_record(name, block): {
      local resource = blockType.resource('azurerm_private_dns_mx_record', name),
      _: resource._(block, {
        fqdn: build.template(std.get(block, 'fqdn', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
        ttl: build.template(block.ttl),
        zone_name: build.template(block.zone_name),
      }),
      fqdn: resource.field(self._.blocks, 'fqdn'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
      ttl: resource.field(self._.blocks, 'ttl'),
      zone_name: resource.field(self._.blocks, 'zone_name'),
    },
    private_dns_ptr_record(name, block): {
      local resource = blockType.resource('azurerm_private_dns_ptr_record', name),
      _: resource._(block, {
        fqdn: build.template(std.get(block, 'fqdn', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        records: build.template(block.records),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
        ttl: build.template(block.ttl),
        zone_name: build.template(block.zone_name),
      }),
      fqdn: resource.field(self._.blocks, 'fqdn'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      records: resource.field(self._.blocks, 'records'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
      ttl: resource.field(self._.blocks, 'ttl'),
      zone_name: resource.field(self._.blocks, 'zone_name'),
    },
    private_dns_resolver(name, block): {
      local resource = blockType.resource('azurerm_private_dns_resolver', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
        virtual_network_id: build.template(block.virtual_network_id),
      }),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
      virtual_network_id: resource.field(self._.blocks, 'virtual_network_id'),
    },
    private_dns_resolver_dns_forwarding_ruleset(name, block): {
      local resource = blockType.resource('azurerm_private_dns_resolver_dns_forwarding_ruleset', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        private_dns_resolver_outbound_endpoint_ids: build.template(block.private_dns_resolver_outbound_endpoint_ids),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      private_dns_resolver_outbound_endpoint_ids: resource.field(self._.blocks, 'private_dns_resolver_outbound_endpoint_ids'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    private_dns_resolver_forwarding_rule(name, block): {
      local resource = blockType.resource('azurerm_private_dns_resolver_forwarding_rule', name),
      _: resource._(block, {
        dns_forwarding_ruleset_id: build.template(block.dns_forwarding_ruleset_id),
        domain_name: build.template(block.domain_name),
        enabled: build.template(std.get(block, 'enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        metadata: build.template(std.get(block, 'metadata', null)),
        name: build.template(block.name),
      }),
      dns_forwarding_ruleset_id: resource.field(self._.blocks, 'dns_forwarding_ruleset_id'),
      domain_name: resource.field(self._.blocks, 'domain_name'),
      enabled: resource.field(self._.blocks, 'enabled'),
      id: resource.field(self._.blocks, 'id'),
      metadata: resource.field(self._.blocks, 'metadata'),
      name: resource.field(self._.blocks, 'name'),
    },
    private_dns_resolver_inbound_endpoint(name, block): {
      local resource = blockType.resource('azurerm_private_dns_resolver_inbound_endpoint', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        private_dns_resolver_id: build.template(block.private_dns_resolver_id),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      private_dns_resolver_id: resource.field(self._.blocks, 'private_dns_resolver_id'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    private_dns_resolver_outbound_endpoint(name, block): {
      local resource = blockType.resource('azurerm_private_dns_resolver_outbound_endpoint', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        private_dns_resolver_id: build.template(block.private_dns_resolver_id),
        subnet_id: build.template(block.subnet_id),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      private_dns_resolver_id: resource.field(self._.blocks, 'private_dns_resolver_id'),
      subnet_id: resource.field(self._.blocks, 'subnet_id'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    private_dns_resolver_virtual_network_link(name, block): {
      local resource = blockType.resource('azurerm_private_dns_resolver_virtual_network_link', name),
      _: resource._(block, {
        dns_forwarding_ruleset_id: build.template(block.dns_forwarding_ruleset_id),
        id: build.template(std.get(block, 'id', null)),
        metadata: build.template(std.get(block, 'metadata', null)),
        name: build.template(block.name),
        virtual_network_id: build.template(block.virtual_network_id),
      }),
      dns_forwarding_ruleset_id: resource.field(self._.blocks, 'dns_forwarding_ruleset_id'),
      id: resource.field(self._.blocks, 'id'),
      metadata: resource.field(self._.blocks, 'metadata'),
      name: resource.field(self._.blocks, 'name'),
      virtual_network_id: resource.field(self._.blocks, 'virtual_network_id'),
    },
    private_dns_srv_record(name, block): {
      local resource = blockType.resource('azurerm_private_dns_srv_record', name),
      _: resource._(block, {
        fqdn: build.template(std.get(block, 'fqdn', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
        ttl: build.template(block.ttl),
        zone_name: build.template(block.zone_name),
      }),
      fqdn: resource.field(self._.blocks, 'fqdn'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
      ttl: resource.field(self._.blocks, 'ttl'),
      zone_name: resource.field(self._.blocks, 'zone_name'),
    },
    private_dns_txt_record(name, block): {
      local resource = blockType.resource('azurerm_private_dns_txt_record', name),
      _: resource._(block, {
        fqdn: build.template(std.get(block, 'fqdn', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
        ttl: build.template(block.ttl),
        zone_name: build.template(block.zone_name),
      }),
      fqdn: resource.field(self._.blocks, 'fqdn'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
      ttl: resource.field(self._.blocks, 'ttl'),
      zone_name: resource.field(self._.blocks, 'zone_name'),
    },
    private_dns_zone(name, block): {
      local resource = blockType.resource('azurerm_private_dns_zone', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        max_number_of_record_sets: build.template(std.get(block, 'max_number_of_record_sets', null)),
        max_number_of_virtual_network_links: build.template(std.get(block, 'max_number_of_virtual_network_links', null)),
        max_number_of_virtual_network_links_with_registration: build.template(std.get(block, 'max_number_of_virtual_network_links_with_registration', null)),
        name: build.template(block.name),
        number_of_record_sets: build.template(std.get(block, 'number_of_record_sets', null)),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      max_number_of_record_sets: resource.field(self._.blocks, 'max_number_of_record_sets'),
      max_number_of_virtual_network_links: resource.field(self._.blocks, 'max_number_of_virtual_network_links'),
      max_number_of_virtual_network_links_with_registration: resource.field(self._.blocks, 'max_number_of_virtual_network_links_with_registration'),
      name: resource.field(self._.blocks, 'name'),
      number_of_record_sets: resource.field(self._.blocks, 'number_of_record_sets'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    private_dns_zone_virtual_network_link(name, block): {
      local resource = blockType.resource('azurerm_private_dns_zone_virtual_network_link', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        private_dns_zone_name: build.template(block.private_dns_zone_name),
        registration_enabled: build.template(std.get(block, 'registration_enabled', null)),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
        virtual_network_id: build.template(block.virtual_network_id),
      }),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      private_dns_zone_name: resource.field(self._.blocks, 'private_dns_zone_name'),
      registration_enabled: resource.field(self._.blocks, 'registration_enabled'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
      virtual_network_id: resource.field(self._.blocks, 'virtual_network_id'),
    },
    private_endpoint(name, block): {
      local resource = blockType.resource('azurerm_private_endpoint', name),
      _: resource._(block, {
        custom_dns_configs: build.template(std.get(block, 'custom_dns_configs', null)),
        custom_network_interface_name: build.template(std.get(block, 'custom_network_interface_name', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        network_interface: build.template(std.get(block, 'network_interface', null)),
        private_dns_zone_configs: build.template(std.get(block, 'private_dns_zone_configs', null)),
        resource_group_name: build.template(block.resource_group_name),
        subnet_id: build.template(block.subnet_id),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      custom_dns_configs: resource.field(self._.blocks, 'custom_dns_configs'),
      custom_network_interface_name: resource.field(self._.blocks, 'custom_network_interface_name'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      network_interface: resource.field(self._.blocks, 'network_interface'),
      private_dns_zone_configs: resource.field(self._.blocks, 'private_dns_zone_configs'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      subnet_id: resource.field(self._.blocks, 'subnet_id'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    private_endpoint_application_security_group_association(name, block): {
      local resource = blockType.resource('azurerm_private_endpoint_application_security_group_association', name),
      _: resource._(block, {
        application_security_group_id: build.template(block.application_security_group_id),
        id: build.template(std.get(block, 'id', null)),
        private_endpoint_id: build.template(block.private_endpoint_id),
      }),
      application_security_group_id: resource.field(self._.blocks, 'application_security_group_id'),
      id: resource.field(self._.blocks, 'id'),
      private_endpoint_id: resource.field(self._.blocks, 'private_endpoint_id'),
    },
    private_link_service(name, block): {
      local resource = blockType.resource('azurerm_private_link_service', name),
      _: resource._(block, {
        alias: build.template(std.get(block, 'alias', null)),
        auto_approval_subscription_ids: build.template(std.get(block, 'auto_approval_subscription_ids', null)),
        enable_proxy_protocol: build.template(std.get(block, 'enable_proxy_protocol', null)),
        fqdns: build.template(std.get(block, 'fqdns', null)),
        id: build.template(std.get(block, 'id', null)),
        load_balancer_frontend_ip_configuration_ids: build.template(block.load_balancer_frontend_ip_configuration_ids),
        location: build.template(block.location),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
        visibility_subscription_ids: build.template(std.get(block, 'visibility_subscription_ids', null)),
      }),
      alias: resource.field(self._.blocks, 'alias'),
      auto_approval_subscription_ids: resource.field(self._.blocks, 'auto_approval_subscription_ids'),
      enable_proxy_protocol: resource.field(self._.blocks, 'enable_proxy_protocol'),
      fqdns: resource.field(self._.blocks, 'fqdns'),
      id: resource.field(self._.blocks, 'id'),
      load_balancer_frontend_ip_configuration_ids: resource.field(self._.blocks, 'load_balancer_frontend_ip_configuration_ids'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
      visibility_subscription_ids: resource.field(self._.blocks, 'visibility_subscription_ids'),
    },
    proximity_placement_group(name, block): {
      local resource = blockType.resource('azurerm_proximity_placement_group', name),
      _: resource._(block, {
        allowed_vm_sizes: build.template(std.get(block, 'allowed_vm_sizes', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
        zone: build.template(std.get(block, 'zone', null)),
      }),
      allowed_vm_sizes: resource.field(self._.blocks, 'allowed_vm_sizes'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
      zone: resource.field(self._.blocks, 'zone'),
    },
    public_ip(name, block): {
      local resource = blockType.resource('azurerm_public_ip', name),
      _: resource._(block, {
        allocation_method: build.template(block.allocation_method),
        ddos_protection_mode: build.template(std.get(block, 'ddos_protection_mode', null)),
        ddos_protection_plan_id: build.template(std.get(block, 'ddos_protection_plan_id', null)),
        domain_name_label: build.template(std.get(block, 'domain_name_label', null)),
        domain_name_label_scope: build.template(std.get(block, 'domain_name_label_scope', null)),
        edge_zone: build.template(std.get(block, 'edge_zone', null)),
        fqdn: build.template(std.get(block, 'fqdn', null)),
        id: build.template(std.get(block, 'id', null)),
        idle_timeout_in_minutes: build.template(std.get(block, 'idle_timeout_in_minutes', null)),
        ip_address: build.template(std.get(block, 'ip_address', null)),
        ip_tags: build.template(std.get(block, 'ip_tags', null)),
        ip_version: build.template(std.get(block, 'ip_version', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        public_ip_prefix_id: build.template(std.get(block, 'public_ip_prefix_id', null)),
        resource_group_name: build.template(block.resource_group_name),
        reverse_fqdn: build.template(std.get(block, 'reverse_fqdn', null)),
        sku: build.template(std.get(block, 'sku', null)),
        sku_tier: build.template(std.get(block, 'sku_tier', null)),
        tags: build.template(std.get(block, 'tags', null)),
        zones: build.template(std.get(block, 'zones', null)),
      }),
      allocation_method: resource.field(self._.blocks, 'allocation_method'),
      ddos_protection_mode: resource.field(self._.blocks, 'ddos_protection_mode'),
      ddos_protection_plan_id: resource.field(self._.blocks, 'ddos_protection_plan_id'),
      domain_name_label: resource.field(self._.blocks, 'domain_name_label'),
      domain_name_label_scope: resource.field(self._.blocks, 'domain_name_label_scope'),
      edge_zone: resource.field(self._.blocks, 'edge_zone'),
      fqdn: resource.field(self._.blocks, 'fqdn'),
      id: resource.field(self._.blocks, 'id'),
      idle_timeout_in_minutes: resource.field(self._.blocks, 'idle_timeout_in_minutes'),
      ip_address: resource.field(self._.blocks, 'ip_address'),
      ip_tags: resource.field(self._.blocks, 'ip_tags'),
      ip_version: resource.field(self._.blocks, 'ip_version'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      public_ip_prefix_id: resource.field(self._.blocks, 'public_ip_prefix_id'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      reverse_fqdn: resource.field(self._.blocks, 'reverse_fqdn'),
      sku: resource.field(self._.blocks, 'sku'),
      sku_tier: resource.field(self._.blocks, 'sku_tier'),
      tags: resource.field(self._.blocks, 'tags'),
      zones: resource.field(self._.blocks, 'zones'),
    },
    public_ip_prefix(name, block): {
      local resource = blockType.resource('azurerm_public_ip_prefix', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        ip_prefix: build.template(std.get(block, 'ip_prefix', null)),
        ip_version: build.template(std.get(block, 'ip_version', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        prefix_length: build.template(std.get(block, 'prefix_length', null)),
        resource_group_name: build.template(block.resource_group_name),
        sku: build.template(std.get(block, 'sku', null)),
        sku_tier: build.template(std.get(block, 'sku_tier', null)),
        tags: build.template(std.get(block, 'tags', null)),
        zones: build.template(std.get(block, 'zones', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      ip_prefix: resource.field(self._.blocks, 'ip_prefix'),
      ip_version: resource.field(self._.blocks, 'ip_version'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      prefix_length: resource.field(self._.blocks, 'prefix_length'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      sku: resource.field(self._.blocks, 'sku'),
      sku_tier: resource.field(self._.blocks, 'sku_tier'),
      tags: resource.field(self._.blocks, 'tags'),
      zones: resource.field(self._.blocks, 'zones'),
    },
    purview_account(name, block): {
      local resource = blockType.resource('azurerm_purview_account', name),
      _: resource._(block, {
        atlas_kafka_endpoint_primary_connection_string: build.template(std.get(block, 'atlas_kafka_endpoint_primary_connection_string', null)),
        atlas_kafka_endpoint_secondary_connection_string: build.template(std.get(block, 'atlas_kafka_endpoint_secondary_connection_string', null)),
        catalog_endpoint: build.template(std.get(block, 'catalog_endpoint', null)),
        guardian_endpoint: build.template(std.get(block, 'guardian_endpoint', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        managed_resource_group_name: build.template(std.get(block, 'managed_resource_group_name', null)),
        managed_resources: build.template(std.get(block, 'managed_resources', null)),
        name: build.template(block.name),
        public_network_enabled: build.template(std.get(block, 'public_network_enabled', null)),
        resource_group_name: build.template(block.resource_group_name),
        scan_endpoint: build.template(std.get(block, 'scan_endpoint', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      atlas_kafka_endpoint_primary_connection_string: resource.field(self._.blocks, 'atlas_kafka_endpoint_primary_connection_string'),
      atlas_kafka_endpoint_secondary_connection_string: resource.field(self._.blocks, 'atlas_kafka_endpoint_secondary_connection_string'),
      catalog_endpoint: resource.field(self._.blocks, 'catalog_endpoint'),
      guardian_endpoint: resource.field(self._.blocks, 'guardian_endpoint'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      managed_resource_group_name: resource.field(self._.blocks, 'managed_resource_group_name'),
      managed_resources: resource.field(self._.blocks, 'managed_resources'),
      name: resource.field(self._.blocks, 'name'),
      public_network_enabled: resource.field(self._.blocks, 'public_network_enabled'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      scan_endpoint: resource.field(self._.blocks, 'scan_endpoint'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    recovery_services_vault(name, block): {
      local resource = blockType.resource('azurerm_recovery_services_vault', name),
      _: resource._(block, {
        classic_vmware_replication_enabled: build.template(std.get(block, 'classic_vmware_replication_enabled', null)),
        cross_region_restore_enabled: build.template(std.get(block, 'cross_region_restore_enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        immutability: build.template(std.get(block, 'immutability', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        public_network_access_enabled: build.template(std.get(block, 'public_network_access_enabled', null)),
        resource_group_name: build.template(block.resource_group_name),
        sku: build.template(block.sku),
        soft_delete_enabled: build.template(std.get(block, 'soft_delete_enabled', null)),
        storage_mode_type: build.template(std.get(block, 'storage_mode_type', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      classic_vmware_replication_enabled: resource.field(self._.blocks, 'classic_vmware_replication_enabled'),
      cross_region_restore_enabled: resource.field(self._.blocks, 'cross_region_restore_enabled'),
      id: resource.field(self._.blocks, 'id'),
      immutability: resource.field(self._.blocks, 'immutability'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      public_network_access_enabled: resource.field(self._.blocks, 'public_network_access_enabled'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      sku: resource.field(self._.blocks, 'sku'),
      soft_delete_enabled: resource.field(self._.blocks, 'soft_delete_enabled'),
      storage_mode_type: resource.field(self._.blocks, 'storage_mode_type'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    recovery_services_vault_resource_guard_association(name, block): {
      local resource = blockType.resource('azurerm_recovery_services_vault_resource_guard_association', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        resource_guard_id: build.template(block.resource_guard_id),
        vault_id: build.template(block.vault_id),
      }),
      id: resource.field(self._.blocks, 'id'),
      resource_guard_id: resource.field(self._.blocks, 'resource_guard_id'),
      vault_id: resource.field(self._.blocks, 'vault_id'),
    },
    redhat_openshift_cluster(name, block): {
      local resource = blockType.resource('azurerm_redhat_openshift_cluster', name),
      _: resource._(block, {
        console_url: build.template(std.get(block, 'console_url', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      console_url: resource.field(self._.blocks, 'console_url'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    redis_cache(name, block): {
      local resource = blockType.resource('azurerm_redis_cache', name),
      _: resource._(block, {
        access_keys_authentication_enabled: build.template(std.get(block, 'access_keys_authentication_enabled', null)),
        capacity: build.template(block.capacity),
        family: build.template(block.family),
        hostname: build.template(std.get(block, 'hostname', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        minimum_tls_version: build.template(std.get(block, 'minimum_tls_version', null)),
        name: build.template(block.name),
        non_ssl_port_enabled: build.template(std.get(block, 'non_ssl_port_enabled', null)),
        port: build.template(std.get(block, 'port', null)),
        primary_access_key: build.template(std.get(block, 'primary_access_key', null)),
        primary_connection_string: build.template(std.get(block, 'primary_connection_string', null)),
        private_static_ip_address: build.template(std.get(block, 'private_static_ip_address', null)),
        public_network_access_enabled: build.template(std.get(block, 'public_network_access_enabled', null)),
        redis_version: build.template(std.get(block, 'redis_version', null)),
        replicas_per_master: build.template(std.get(block, 'replicas_per_master', null)),
        replicas_per_primary: build.template(std.get(block, 'replicas_per_primary', null)),
        resource_group_name: build.template(block.resource_group_name),
        secondary_access_key: build.template(std.get(block, 'secondary_access_key', null)),
        secondary_connection_string: build.template(std.get(block, 'secondary_connection_string', null)),
        shard_count: build.template(std.get(block, 'shard_count', null)),
        sku_name: build.template(block.sku_name),
        ssl_port: build.template(std.get(block, 'ssl_port', null)),
        subnet_id: build.template(std.get(block, 'subnet_id', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tenant_settings: build.template(std.get(block, 'tenant_settings', null)),
        zones: build.template(std.get(block, 'zones', null)),
      }),
      access_keys_authentication_enabled: resource.field(self._.blocks, 'access_keys_authentication_enabled'),
      capacity: resource.field(self._.blocks, 'capacity'),
      family: resource.field(self._.blocks, 'family'),
      hostname: resource.field(self._.blocks, 'hostname'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      minimum_tls_version: resource.field(self._.blocks, 'minimum_tls_version'),
      name: resource.field(self._.blocks, 'name'),
      non_ssl_port_enabled: resource.field(self._.blocks, 'non_ssl_port_enabled'),
      port: resource.field(self._.blocks, 'port'),
      primary_access_key: resource.field(self._.blocks, 'primary_access_key'),
      primary_connection_string: resource.field(self._.blocks, 'primary_connection_string'),
      private_static_ip_address: resource.field(self._.blocks, 'private_static_ip_address'),
      public_network_access_enabled: resource.field(self._.blocks, 'public_network_access_enabled'),
      redis_version: resource.field(self._.blocks, 'redis_version'),
      replicas_per_master: resource.field(self._.blocks, 'replicas_per_master'),
      replicas_per_primary: resource.field(self._.blocks, 'replicas_per_primary'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      secondary_access_key: resource.field(self._.blocks, 'secondary_access_key'),
      secondary_connection_string: resource.field(self._.blocks, 'secondary_connection_string'),
      shard_count: resource.field(self._.blocks, 'shard_count'),
      sku_name: resource.field(self._.blocks, 'sku_name'),
      ssl_port: resource.field(self._.blocks, 'ssl_port'),
      subnet_id: resource.field(self._.blocks, 'subnet_id'),
      tags: resource.field(self._.blocks, 'tags'),
      tenant_settings: resource.field(self._.blocks, 'tenant_settings'),
      zones: resource.field(self._.blocks, 'zones'),
    },
    redis_cache_access_policy(name, block): {
      local resource = blockType.resource('azurerm_redis_cache_access_policy', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        permissions: build.template(block.permissions),
        redis_cache_id: build.template(block.redis_cache_id),
      }),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      permissions: resource.field(self._.blocks, 'permissions'),
      redis_cache_id: resource.field(self._.blocks, 'redis_cache_id'),
    },
    redis_cache_access_policy_assignment(name, block): {
      local resource = blockType.resource('azurerm_redis_cache_access_policy_assignment', name),
      _: resource._(block, {
        access_policy_name: build.template(block.access_policy_name),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        object_id: build.template(block.object_id),
        object_id_alias: build.template(block.object_id_alias),
        redis_cache_id: build.template(block.redis_cache_id),
      }),
      access_policy_name: resource.field(self._.blocks, 'access_policy_name'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      object_id: resource.field(self._.blocks, 'object_id'),
      object_id_alias: resource.field(self._.blocks, 'object_id_alias'),
      redis_cache_id: resource.field(self._.blocks, 'redis_cache_id'),
    },
    redis_enterprise_cluster(name, block): {
      local resource = blockType.resource('azurerm_redis_enterprise_cluster', name),
      _: resource._(block, {
        hostname: build.template(std.get(block, 'hostname', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        minimum_tls_version: build.template(std.get(block, 'minimum_tls_version', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        sku_name: build.template(block.sku_name),
        tags: build.template(std.get(block, 'tags', null)),
        zones: build.template(std.get(block, 'zones', null)),
      }),
      hostname: resource.field(self._.blocks, 'hostname'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      minimum_tls_version: resource.field(self._.blocks, 'minimum_tls_version'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      sku_name: resource.field(self._.blocks, 'sku_name'),
      tags: resource.field(self._.blocks, 'tags'),
      zones: resource.field(self._.blocks, 'zones'),
    },
    redis_enterprise_database(name, block): {
      local resource = blockType.resource('azurerm_redis_enterprise_database', name),
      _: resource._(block, {
        client_protocol: build.template(std.get(block, 'client_protocol', null)),
        cluster_id: build.template(block.cluster_id),
        clustering_policy: build.template(std.get(block, 'clustering_policy', null)),
        eviction_policy: build.template(std.get(block, 'eviction_policy', null)),
        id: build.template(std.get(block, 'id', null)),
        linked_database_group_nickname: build.template(std.get(block, 'linked_database_group_nickname', null)),
        linked_database_id: build.template(std.get(block, 'linked_database_id', null)),
        name: build.template(std.get(block, 'name', null)),
        port: build.template(std.get(block, 'port', null)),
        primary_access_key: build.template(std.get(block, 'primary_access_key', null)),
        secondary_access_key: build.template(std.get(block, 'secondary_access_key', null)),
      }),
      client_protocol: resource.field(self._.blocks, 'client_protocol'),
      cluster_id: resource.field(self._.blocks, 'cluster_id'),
      clustering_policy: resource.field(self._.blocks, 'clustering_policy'),
      eviction_policy: resource.field(self._.blocks, 'eviction_policy'),
      id: resource.field(self._.blocks, 'id'),
      linked_database_group_nickname: resource.field(self._.blocks, 'linked_database_group_nickname'),
      linked_database_id: resource.field(self._.blocks, 'linked_database_id'),
      name: resource.field(self._.blocks, 'name'),
      port: resource.field(self._.blocks, 'port'),
      primary_access_key: resource.field(self._.blocks, 'primary_access_key'),
      secondary_access_key: resource.field(self._.blocks, 'secondary_access_key'),
    },
    redis_firewall_rule(name, block): {
      local resource = blockType.resource('azurerm_redis_firewall_rule', name),
      _: resource._(block, {
        end_ip: build.template(block.end_ip),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        redis_cache_name: build.template(block.redis_cache_name),
        resource_group_name: build.template(block.resource_group_name),
        start_ip: build.template(block.start_ip),
      }),
      end_ip: resource.field(self._.blocks, 'end_ip'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      redis_cache_name: resource.field(self._.blocks, 'redis_cache_name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      start_ip: resource.field(self._.blocks, 'start_ip'),
    },
    redis_linked_server(name, block): {
      local resource = blockType.resource('azurerm_redis_linked_server', name),
      _: resource._(block, {
        geo_replicated_primary_host_name: build.template(std.get(block, 'geo_replicated_primary_host_name', null)),
        id: build.template(std.get(block, 'id', null)),
        linked_redis_cache_id: build.template(block.linked_redis_cache_id),
        linked_redis_cache_location: build.template(block.linked_redis_cache_location),
        name: build.template(std.get(block, 'name', null)),
        resource_group_name: build.template(block.resource_group_name),
        server_role: build.template(block.server_role),
        target_redis_cache_name: build.template(block.target_redis_cache_name),
      }),
      geo_replicated_primary_host_name: resource.field(self._.blocks, 'geo_replicated_primary_host_name'),
      id: resource.field(self._.blocks, 'id'),
      linked_redis_cache_id: resource.field(self._.blocks, 'linked_redis_cache_id'),
      linked_redis_cache_location: resource.field(self._.blocks, 'linked_redis_cache_location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      server_role: resource.field(self._.blocks, 'server_role'),
      target_redis_cache_name: resource.field(self._.blocks, 'target_redis_cache_name'),
    },
    relay_hybrid_connection(name, block): {
      local resource = blockType.resource('azurerm_relay_hybrid_connection', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        relay_namespace_name: build.template(block.relay_namespace_name),
        requires_client_authorization: build.template(std.get(block, 'requires_client_authorization', null)),
        resource_group_name: build.template(block.resource_group_name),
        user_metadata: build.template(std.get(block, 'user_metadata', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      relay_namespace_name: resource.field(self._.blocks, 'relay_namespace_name'),
      requires_client_authorization: resource.field(self._.blocks, 'requires_client_authorization'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      user_metadata: resource.field(self._.blocks, 'user_metadata'),
    },
    relay_hybrid_connection_authorization_rule(name, block): {
      local resource = blockType.resource('azurerm_relay_hybrid_connection_authorization_rule', name),
      _: resource._(block, {
        hybrid_connection_name: build.template(block.hybrid_connection_name),
        id: build.template(std.get(block, 'id', null)),
        listen: build.template(std.get(block, 'listen', null)),
        manage: build.template(std.get(block, 'manage', null)),
        name: build.template(block.name),
        namespace_name: build.template(block.namespace_name),
        primary_connection_string: build.template(std.get(block, 'primary_connection_string', null)),
        primary_key: build.template(std.get(block, 'primary_key', null)),
        resource_group_name: build.template(block.resource_group_name),
        secondary_connection_string: build.template(std.get(block, 'secondary_connection_string', null)),
        secondary_key: build.template(std.get(block, 'secondary_key', null)),
        send: build.template(std.get(block, 'send', null)),
      }),
      hybrid_connection_name: resource.field(self._.blocks, 'hybrid_connection_name'),
      id: resource.field(self._.blocks, 'id'),
      listen: resource.field(self._.blocks, 'listen'),
      manage: resource.field(self._.blocks, 'manage'),
      name: resource.field(self._.blocks, 'name'),
      namespace_name: resource.field(self._.blocks, 'namespace_name'),
      primary_connection_string: resource.field(self._.blocks, 'primary_connection_string'),
      primary_key: resource.field(self._.blocks, 'primary_key'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      secondary_connection_string: resource.field(self._.blocks, 'secondary_connection_string'),
      secondary_key: resource.field(self._.blocks, 'secondary_key'),
      send: resource.field(self._.blocks, 'send'),
    },
    relay_namespace(name, block): {
      local resource = blockType.resource('azurerm_relay_namespace', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        metric_id: build.template(std.get(block, 'metric_id', null)),
        name: build.template(block.name),
        primary_connection_string: build.template(std.get(block, 'primary_connection_string', null)),
        primary_key: build.template(std.get(block, 'primary_key', null)),
        resource_group_name: build.template(block.resource_group_name),
        secondary_connection_string: build.template(std.get(block, 'secondary_connection_string', null)),
        secondary_key: build.template(std.get(block, 'secondary_key', null)),
        sku_name: build.template(block.sku_name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      metric_id: resource.field(self._.blocks, 'metric_id'),
      name: resource.field(self._.blocks, 'name'),
      primary_connection_string: resource.field(self._.blocks, 'primary_connection_string'),
      primary_key: resource.field(self._.blocks, 'primary_key'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      secondary_connection_string: resource.field(self._.blocks, 'secondary_connection_string'),
      secondary_key: resource.field(self._.blocks, 'secondary_key'),
      sku_name: resource.field(self._.blocks, 'sku_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    relay_namespace_authorization_rule(name, block): {
      local resource = blockType.resource('azurerm_relay_namespace_authorization_rule', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        listen: build.template(std.get(block, 'listen', null)),
        manage: build.template(std.get(block, 'manage', null)),
        name: build.template(block.name),
        namespace_name: build.template(block.namespace_name),
        primary_connection_string: build.template(std.get(block, 'primary_connection_string', null)),
        primary_key: build.template(std.get(block, 'primary_key', null)),
        resource_group_name: build.template(block.resource_group_name),
        secondary_connection_string: build.template(std.get(block, 'secondary_connection_string', null)),
        secondary_key: build.template(std.get(block, 'secondary_key', null)),
        send: build.template(std.get(block, 'send', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      listen: resource.field(self._.blocks, 'listen'),
      manage: resource.field(self._.blocks, 'manage'),
      name: resource.field(self._.blocks, 'name'),
      namespace_name: resource.field(self._.blocks, 'namespace_name'),
      primary_connection_string: resource.field(self._.blocks, 'primary_connection_string'),
      primary_key: resource.field(self._.blocks, 'primary_key'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      secondary_connection_string: resource.field(self._.blocks, 'secondary_connection_string'),
      secondary_key: resource.field(self._.blocks, 'secondary_key'),
      send: resource.field(self._.blocks, 'send'),
    },
    resource_deployment_script_azure_cli(name, block): {
      local resource = blockType.resource('azurerm_resource_deployment_script_azure_cli', name),
      _: resource._(block, {
        cleanup_preference: build.template(std.get(block, 'cleanup_preference', null)),
        command_line: build.template(std.get(block, 'command_line', null)),
        force_update_tag: build.template(std.get(block, 'force_update_tag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        outputs: build.template(std.get(block, 'outputs', null)),
        primary_script_uri: build.template(std.get(block, 'primary_script_uri', null)),
        resource_group_name: build.template(block.resource_group_name),
        retention_interval: build.template(block.retention_interval),
        script_content: build.template(std.get(block, 'script_content', null)),
        supporting_script_uris: build.template(std.get(block, 'supporting_script_uris', null)),
        tags: build.template(std.get(block, 'tags', null)),
        timeout: build.template(std.get(block, 'timeout', null)),
        version: build.template(block.version),
      }),
      cleanup_preference: resource.field(self._.blocks, 'cleanup_preference'),
      command_line: resource.field(self._.blocks, 'command_line'),
      force_update_tag: resource.field(self._.blocks, 'force_update_tag'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      outputs: resource.field(self._.blocks, 'outputs'),
      primary_script_uri: resource.field(self._.blocks, 'primary_script_uri'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      retention_interval: resource.field(self._.blocks, 'retention_interval'),
      script_content: resource.field(self._.blocks, 'script_content'),
      supporting_script_uris: resource.field(self._.blocks, 'supporting_script_uris'),
      tags: resource.field(self._.blocks, 'tags'),
      timeout: resource.field(self._.blocks, 'timeout'),
      version: resource.field(self._.blocks, 'version'),
    },
    resource_deployment_script_azure_power_shell(name, block): {
      local resource = blockType.resource('azurerm_resource_deployment_script_azure_power_shell', name),
      _: resource._(block, {
        cleanup_preference: build.template(std.get(block, 'cleanup_preference', null)),
        command_line: build.template(std.get(block, 'command_line', null)),
        force_update_tag: build.template(std.get(block, 'force_update_tag', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        outputs: build.template(std.get(block, 'outputs', null)),
        primary_script_uri: build.template(std.get(block, 'primary_script_uri', null)),
        resource_group_name: build.template(block.resource_group_name),
        retention_interval: build.template(block.retention_interval),
        script_content: build.template(std.get(block, 'script_content', null)),
        supporting_script_uris: build.template(std.get(block, 'supporting_script_uris', null)),
        tags: build.template(std.get(block, 'tags', null)),
        timeout: build.template(std.get(block, 'timeout', null)),
        version: build.template(block.version),
      }),
      cleanup_preference: resource.field(self._.blocks, 'cleanup_preference'),
      command_line: resource.field(self._.blocks, 'command_line'),
      force_update_tag: resource.field(self._.blocks, 'force_update_tag'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      outputs: resource.field(self._.blocks, 'outputs'),
      primary_script_uri: resource.field(self._.blocks, 'primary_script_uri'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      retention_interval: resource.field(self._.blocks, 'retention_interval'),
      script_content: resource.field(self._.blocks, 'script_content'),
      supporting_script_uris: resource.field(self._.blocks, 'supporting_script_uris'),
      tags: resource.field(self._.blocks, 'tags'),
      timeout: resource.field(self._.blocks, 'timeout'),
      version: resource.field(self._.blocks, 'version'),
    },
    resource_group(name, block): {
      local resource = blockType.resource('azurerm_resource_group', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        managed_by: build.template(std.get(block, 'managed_by', null)),
        name: build.template(block.name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      managed_by: resource.field(self._.blocks, 'managed_by'),
      name: resource.field(self._.blocks, 'name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    resource_group_cost_management_export(name, block): {
      local resource = blockType.resource('azurerm_resource_group_cost_management_export', name),
      _: resource._(block, {
        active: build.template(std.get(block, 'active', null)),
        file_format: build.template(std.get(block, 'file_format', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        recurrence_period_end_date: build.template(block.recurrence_period_end_date),
        recurrence_period_start_date: build.template(block.recurrence_period_start_date),
        recurrence_type: build.template(block.recurrence_type),
        resource_group_id: build.template(block.resource_group_id),
      }),
      active: resource.field(self._.blocks, 'active'),
      file_format: resource.field(self._.blocks, 'file_format'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      recurrence_period_end_date: resource.field(self._.blocks, 'recurrence_period_end_date'),
      recurrence_period_start_date: resource.field(self._.blocks, 'recurrence_period_start_date'),
      recurrence_type: resource.field(self._.blocks, 'recurrence_type'),
      resource_group_id: resource.field(self._.blocks, 'resource_group_id'),
    },
    resource_group_cost_management_view(name, block): {
      local resource = blockType.resource('azurerm_resource_group_cost_management_view', name),
      _: resource._(block, {
        accumulated: build.template(block.accumulated),
        chart_type: build.template(block.chart_type),
        display_name: build.template(block.display_name),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        report_type: build.template(block.report_type),
        resource_group_id: build.template(block.resource_group_id),
        timeframe: build.template(block.timeframe),
      }),
      accumulated: resource.field(self._.blocks, 'accumulated'),
      chart_type: resource.field(self._.blocks, 'chart_type'),
      display_name: resource.field(self._.blocks, 'display_name'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      report_type: resource.field(self._.blocks, 'report_type'),
      resource_group_id: resource.field(self._.blocks, 'resource_group_id'),
      timeframe: resource.field(self._.blocks, 'timeframe'),
    },
    resource_group_policy_assignment(name, block): {
      local resource = blockType.resource('azurerm_resource_group_policy_assignment', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        display_name: build.template(std.get(block, 'display_name', null)),
        enforce: build.template(std.get(block, 'enforce', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        metadata: build.template(std.get(block, 'metadata', null)),
        name: build.template(block.name),
        not_scopes: build.template(std.get(block, 'not_scopes', null)),
        parameters: build.template(std.get(block, 'parameters', null)),
        policy_definition_id: build.template(block.policy_definition_id),
        resource_group_id: build.template(block.resource_group_id),
      }),
      description: resource.field(self._.blocks, 'description'),
      display_name: resource.field(self._.blocks, 'display_name'),
      enforce: resource.field(self._.blocks, 'enforce'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      metadata: resource.field(self._.blocks, 'metadata'),
      name: resource.field(self._.blocks, 'name'),
      not_scopes: resource.field(self._.blocks, 'not_scopes'),
      parameters: resource.field(self._.blocks, 'parameters'),
      policy_definition_id: resource.field(self._.blocks, 'policy_definition_id'),
      resource_group_id: resource.field(self._.blocks, 'resource_group_id'),
    },
    resource_group_policy_exemption(name, block): {
      local resource = blockType.resource('azurerm_resource_group_policy_exemption', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        display_name: build.template(std.get(block, 'display_name', null)),
        exemption_category: build.template(block.exemption_category),
        expires_on: build.template(std.get(block, 'expires_on', null)),
        id: build.template(std.get(block, 'id', null)),
        metadata: build.template(std.get(block, 'metadata', null)),
        name: build.template(block.name),
        policy_assignment_id: build.template(block.policy_assignment_id),
        policy_definition_reference_ids: build.template(std.get(block, 'policy_definition_reference_ids', null)),
        resource_group_id: build.template(block.resource_group_id),
      }),
      description: resource.field(self._.blocks, 'description'),
      display_name: resource.field(self._.blocks, 'display_name'),
      exemption_category: resource.field(self._.blocks, 'exemption_category'),
      expires_on: resource.field(self._.blocks, 'expires_on'),
      id: resource.field(self._.blocks, 'id'),
      metadata: resource.field(self._.blocks, 'metadata'),
      name: resource.field(self._.blocks, 'name'),
      policy_assignment_id: resource.field(self._.blocks, 'policy_assignment_id'),
      policy_definition_reference_ids: resource.field(self._.blocks, 'policy_definition_reference_ids'),
      resource_group_id: resource.field(self._.blocks, 'resource_group_id'),
    },
    resource_group_policy_remediation(name, block): {
      local resource = blockType.resource('azurerm_resource_group_policy_remediation', name),
      _: resource._(block, {
        failure_percentage: build.template(std.get(block, 'failure_percentage', null)),
        id: build.template(std.get(block, 'id', null)),
        location_filters: build.template(std.get(block, 'location_filters', null)),
        name: build.template(block.name),
        parallel_deployments: build.template(std.get(block, 'parallel_deployments', null)),
        policy_assignment_id: build.template(block.policy_assignment_id),
        policy_definition_reference_id: build.template(std.get(block, 'policy_definition_reference_id', null)),
        resource_count: build.template(std.get(block, 'resource_count', null)),
        resource_discovery_mode: build.template(std.get(block, 'resource_discovery_mode', null)),
        resource_group_id: build.template(block.resource_group_id),
      }),
      failure_percentage: resource.field(self._.blocks, 'failure_percentage'),
      id: resource.field(self._.blocks, 'id'),
      location_filters: resource.field(self._.blocks, 'location_filters'),
      name: resource.field(self._.blocks, 'name'),
      parallel_deployments: resource.field(self._.blocks, 'parallel_deployments'),
      policy_assignment_id: resource.field(self._.blocks, 'policy_assignment_id'),
      policy_definition_reference_id: resource.field(self._.blocks, 'policy_definition_reference_id'),
      resource_count: resource.field(self._.blocks, 'resource_count'),
      resource_discovery_mode: resource.field(self._.blocks, 'resource_discovery_mode'),
      resource_group_id: resource.field(self._.blocks, 'resource_group_id'),
    },
    resource_group_template_deployment(name, block): {
      local resource = blockType.resource('azurerm_resource_group_template_deployment', name),
      _: resource._(block, {
        debug_level: build.template(std.get(block, 'debug_level', null)),
        deployment_mode: build.template(block.deployment_mode),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        output_content: build.template(std.get(block, 'output_content', null)),
        parameters_content: build.template(std.get(block, 'parameters_content', null)),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
        template_content: build.template(std.get(block, 'template_content', null)),
        template_spec_version_id: build.template(std.get(block, 'template_spec_version_id', null)),
      }),
      debug_level: resource.field(self._.blocks, 'debug_level'),
      deployment_mode: resource.field(self._.blocks, 'deployment_mode'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      output_content: resource.field(self._.blocks, 'output_content'),
      parameters_content: resource.field(self._.blocks, 'parameters_content'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
      template_content: resource.field(self._.blocks, 'template_content'),
      template_spec_version_id: resource.field(self._.blocks, 'template_spec_version_id'),
    },
    resource_management_private_link(name, block): {
      local resource = blockType.resource('azurerm_resource_management_private_link', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
      }),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
    },
    resource_management_private_link_association(name, block): {
      local resource = blockType.resource('azurerm_resource_management_private_link_association', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        management_group_id: build.template(block.management_group_id),
        name: build.template(std.get(block, 'name', null)),
        public_network_access_enabled: build.template(block.public_network_access_enabled),
        resource_management_private_link_id: build.template(block.resource_management_private_link_id),
        tenant_id: build.template(std.get(block, 'tenant_id', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      management_group_id: resource.field(self._.blocks, 'management_group_id'),
      name: resource.field(self._.blocks, 'name'),
      public_network_access_enabled: resource.field(self._.blocks, 'public_network_access_enabled'),
      resource_management_private_link_id: resource.field(self._.blocks, 'resource_management_private_link_id'),
      tenant_id: resource.field(self._.blocks, 'tenant_id'),
    },
    resource_policy_assignment(name, block): {
      local resource = blockType.resource('azurerm_resource_policy_assignment', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        display_name: build.template(std.get(block, 'display_name', null)),
        enforce: build.template(std.get(block, 'enforce', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        metadata: build.template(std.get(block, 'metadata', null)),
        name: build.template(block.name),
        not_scopes: build.template(std.get(block, 'not_scopes', null)),
        parameters: build.template(std.get(block, 'parameters', null)),
        policy_definition_id: build.template(block.policy_definition_id),
        resource_id: build.template(block.resource_id),
      }),
      description: resource.field(self._.blocks, 'description'),
      display_name: resource.field(self._.blocks, 'display_name'),
      enforce: resource.field(self._.blocks, 'enforce'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      metadata: resource.field(self._.blocks, 'metadata'),
      name: resource.field(self._.blocks, 'name'),
      not_scopes: resource.field(self._.blocks, 'not_scopes'),
      parameters: resource.field(self._.blocks, 'parameters'),
      policy_definition_id: resource.field(self._.blocks, 'policy_definition_id'),
      resource_id: resource.field(self._.blocks, 'resource_id'),
    },
    resource_policy_exemption(name, block): {
      local resource = blockType.resource('azurerm_resource_policy_exemption', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        display_name: build.template(std.get(block, 'display_name', null)),
        exemption_category: build.template(block.exemption_category),
        expires_on: build.template(std.get(block, 'expires_on', null)),
        id: build.template(std.get(block, 'id', null)),
        metadata: build.template(std.get(block, 'metadata', null)),
        name: build.template(block.name),
        policy_assignment_id: build.template(block.policy_assignment_id),
        policy_definition_reference_ids: build.template(std.get(block, 'policy_definition_reference_ids', null)),
        resource_id: build.template(block.resource_id),
      }),
      description: resource.field(self._.blocks, 'description'),
      display_name: resource.field(self._.blocks, 'display_name'),
      exemption_category: resource.field(self._.blocks, 'exemption_category'),
      expires_on: resource.field(self._.blocks, 'expires_on'),
      id: resource.field(self._.blocks, 'id'),
      metadata: resource.field(self._.blocks, 'metadata'),
      name: resource.field(self._.blocks, 'name'),
      policy_assignment_id: resource.field(self._.blocks, 'policy_assignment_id'),
      policy_definition_reference_ids: resource.field(self._.blocks, 'policy_definition_reference_ids'),
      resource_id: resource.field(self._.blocks, 'resource_id'),
    },
    resource_policy_remediation(name, block): {
      local resource = blockType.resource('azurerm_resource_policy_remediation', name),
      _: resource._(block, {
        failure_percentage: build.template(std.get(block, 'failure_percentage', null)),
        id: build.template(std.get(block, 'id', null)),
        location_filters: build.template(std.get(block, 'location_filters', null)),
        name: build.template(block.name),
        parallel_deployments: build.template(std.get(block, 'parallel_deployments', null)),
        policy_assignment_id: build.template(block.policy_assignment_id),
        policy_definition_reference_id: build.template(std.get(block, 'policy_definition_reference_id', null)),
        resource_count: build.template(std.get(block, 'resource_count', null)),
        resource_discovery_mode: build.template(std.get(block, 'resource_discovery_mode', null)),
        resource_id: build.template(block.resource_id),
      }),
      failure_percentage: resource.field(self._.blocks, 'failure_percentage'),
      id: resource.field(self._.blocks, 'id'),
      location_filters: resource.field(self._.blocks, 'location_filters'),
      name: resource.field(self._.blocks, 'name'),
      parallel_deployments: resource.field(self._.blocks, 'parallel_deployments'),
      policy_assignment_id: resource.field(self._.blocks, 'policy_assignment_id'),
      policy_definition_reference_id: resource.field(self._.blocks, 'policy_definition_reference_id'),
      resource_count: resource.field(self._.blocks, 'resource_count'),
      resource_discovery_mode: resource.field(self._.blocks, 'resource_discovery_mode'),
      resource_id: resource.field(self._.blocks, 'resource_id'),
    },
    resource_provider_registration(name, block): {
      local resource = blockType.resource('azurerm_resource_provider_registration', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
      }),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
    },
    restore_point_collection(name, block): {
      local resource = blockType.resource('azurerm_restore_point_collection', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        source_virtual_machine_id: build.template(block.source_virtual_machine_id),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      source_virtual_machine_id: resource.field(self._.blocks, 'source_virtual_machine_id'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    role_assignment(name, block): {
      local resource = blockType.resource('azurerm_role_assignment', name),
      _: resource._(block, {
        condition: build.template(std.get(block, 'condition', null)),
        condition_version: build.template(std.get(block, 'condition_version', null)),
        delegated_managed_identity_resource_id: build.template(std.get(block, 'delegated_managed_identity_resource_id', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        principal_id: build.template(block.principal_id),
        principal_type: build.template(std.get(block, 'principal_type', null)),
        role_definition_id: build.template(std.get(block, 'role_definition_id', null)),
        role_definition_name: build.template(std.get(block, 'role_definition_name', null)),
        scope: build.template(block.scope),
        skip_service_principal_aad_check: build.template(std.get(block, 'skip_service_principal_aad_check', null)),
      }),
      condition: resource.field(self._.blocks, 'condition'),
      condition_version: resource.field(self._.blocks, 'condition_version'),
      delegated_managed_identity_resource_id: resource.field(self._.blocks, 'delegated_managed_identity_resource_id'),
      description: resource.field(self._.blocks, 'description'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      principal_id: resource.field(self._.blocks, 'principal_id'),
      principal_type: resource.field(self._.blocks, 'principal_type'),
      role_definition_id: resource.field(self._.blocks, 'role_definition_id'),
      role_definition_name: resource.field(self._.blocks, 'role_definition_name'),
      scope: resource.field(self._.blocks, 'scope'),
      skip_service_principal_aad_check: resource.field(self._.blocks, 'skip_service_principal_aad_check'),
    },
    role_definition(name, block): {
      local resource = blockType.resource('azurerm_role_definition', name),
      _: resource._(block, {
        assignable_scopes: build.template(std.get(block, 'assignable_scopes', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        role_definition_id: build.template(std.get(block, 'role_definition_id', null)),
        role_definition_resource_id: build.template(std.get(block, 'role_definition_resource_id', null)),
        scope: build.template(block.scope),
      }),
      assignable_scopes: resource.field(self._.blocks, 'assignable_scopes'),
      description: resource.field(self._.blocks, 'description'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      role_definition_id: resource.field(self._.blocks, 'role_definition_id'),
      role_definition_resource_id: resource.field(self._.blocks, 'role_definition_resource_id'),
      scope: resource.field(self._.blocks, 'scope'),
    },
    role_management_policy(name, block): {
      local resource = blockType.resource('azurerm_role_management_policy', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        role_definition_id: build.template(block.role_definition_id),
        scope: build.template(block.scope),
      }),
      description: resource.field(self._.blocks, 'description'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      role_definition_id: resource.field(self._.blocks, 'role_definition_id'),
      scope: resource.field(self._.blocks, 'scope'),
    },
    route(name, block): {
      local resource = blockType.resource('azurerm_route', name),
      _: resource._(block, {
        address_prefix: build.template(block.address_prefix),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        next_hop_in_ip_address: build.template(std.get(block, 'next_hop_in_ip_address', null)),
        next_hop_type: build.template(block.next_hop_type),
        resource_group_name: build.template(block.resource_group_name),
        route_table_name: build.template(block.route_table_name),
      }),
      address_prefix: resource.field(self._.blocks, 'address_prefix'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      next_hop_in_ip_address: resource.field(self._.blocks, 'next_hop_in_ip_address'),
      next_hop_type: resource.field(self._.blocks, 'next_hop_type'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      route_table_name: resource.field(self._.blocks, 'route_table_name'),
    },
    route_filter(name, block): {
      local resource = blockType.resource('azurerm_route_filter', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        rule: build.template(std.get(block, 'rule', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      rule: resource.field(self._.blocks, 'rule'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    route_map(name, block): {
      local resource = blockType.resource('azurerm_route_map', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        virtual_hub_id: build.template(block.virtual_hub_id),
      }),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      virtual_hub_id: resource.field(self._.blocks, 'virtual_hub_id'),
    },
    route_server(name, block): {
      local resource = blockType.resource('azurerm_route_server', name),
      _: resource._(block, {
        branch_to_branch_traffic_enabled: build.template(std.get(block, 'branch_to_branch_traffic_enabled', null)),
        hub_routing_preference: build.template(std.get(block, 'hub_routing_preference', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        public_ip_address_id: build.template(block.public_ip_address_id),
        resource_group_name: build.template(block.resource_group_name),
        routing_state: build.template(std.get(block, 'routing_state', null)),
        sku: build.template(block.sku),
        subnet_id: build.template(block.subnet_id),
        tags: build.template(std.get(block, 'tags', null)),
        virtual_router_asn: build.template(std.get(block, 'virtual_router_asn', null)),
        virtual_router_ips: build.template(std.get(block, 'virtual_router_ips', null)),
      }),
      branch_to_branch_traffic_enabled: resource.field(self._.blocks, 'branch_to_branch_traffic_enabled'),
      hub_routing_preference: resource.field(self._.blocks, 'hub_routing_preference'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      public_ip_address_id: resource.field(self._.blocks, 'public_ip_address_id'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      routing_state: resource.field(self._.blocks, 'routing_state'),
      sku: resource.field(self._.blocks, 'sku'),
      subnet_id: resource.field(self._.blocks, 'subnet_id'),
      tags: resource.field(self._.blocks, 'tags'),
      virtual_router_asn: resource.field(self._.blocks, 'virtual_router_asn'),
      virtual_router_ips: resource.field(self._.blocks, 'virtual_router_ips'),
    },
    route_server_bgp_connection(name, block): {
      local resource = blockType.resource('azurerm_route_server_bgp_connection', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        peer_asn: build.template(block.peer_asn),
        peer_ip: build.template(block.peer_ip),
        route_server_id: build.template(block.route_server_id),
      }),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      peer_asn: resource.field(self._.blocks, 'peer_asn'),
      peer_ip: resource.field(self._.blocks, 'peer_ip'),
      route_server_id: resource.field(self._.blocks, 'route_server_id'),
    },
    route_table(name, block): {
      local resource = blockType.resource('azurerm_route_table', name),
      _: resource._(block, {
        bgp_route_propagation_enabled: build.template(std.get(block, 'bgp_route_propagation_enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        route: build.template(std.get(block, 'route', null)),
        subnets: build.template(std.get(block, 'subnets', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      bgp_route_propagation_enabled: resource.field(self._.blocks, 'bgp_route_propagation_enabled'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      route: resource.field(self._.blocks, 'route'),
      subnets: resource.field(self._.blocks, 'subnets'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    search_service(name, block): {
      local resource = blockType.resource('azurerm_search_service', name),
      _: resource._(block, {
        allowed_ips: build.template(std.get(block, 'allowed_ips', null)),
        authentication_failure_mode: build.template(std.get(block, 'authentication_failure_mode', null)),
        customer_managed_key_encryption_compliance_status: build.template(std.get(block, 'customer_managed_key_encryption_compliance_status', null)),
        customer_managed_key_enforcement_enabled: build.template(std.get(block, 'customer_managed_key_enforcement_enabled', null)),
        hosting_mode: build.template(std.get(block, 'hosting_mode', null)),
        id: build.template(std.get(block, 'id', null)),
        local_authentication_enabled: build.template(std.get(block, 'local_authentication_enabled', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        network_rule_bypass_option: build.template(std.get(block, 'network_rule_bypass_option', null)),
        partition_count: build.template(std.get(block, 'partition_count', null)),
        primary_key: build.template(std.get(block, 'primary_key', null)),
        public_network_access_enabled: build.template(std.get(block, 'public_network_access_enabled', null)),
        query_keys: build.template(std.get(block, 'query_keys', null)),
        replica_count: build.template(std.get(block, 'replica_count', null)),
        resource_group_name: build.template(block.resource_group_name),
        secondary_key: build.template(std.get(block, 'secondary_key', null)),
        semantic_search_sku: build.template(std.get(block, 'semantic_search_sku', null)),
        sku: build.template(block.sku),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      allowed_ips: resource.field(self._.blocks, 'allowed_ips'),
      authentication_failure_mode: resource.field(self._.blocks, 'authentication_failure_mode'),
      customer_managed_key_encryption_compliance_status: resource.field(self._.blocks, 'customer_managed_key_encryption_compliance_status'),
      customer_managed_key_enforcement_enabled: resource.field(self._.blocks, 'customer_managed_key_enforcement_enabled'),
      hosting_mode: resource.field(self._.blocks, 'hosting_mode'),
      id: resource.field(self._.blocks, 'id'),
      local_authentication_enabled: resource.field(self._.blocks, 'local_authentication_enabled'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      network_rule_bypass_option: resource.field(self._.blocks, 'network_rule_bypass_option'),
      partition_count: resource.field(self._.blocks, 'partition_count'),
      primary_key: resource.field(self._.blocks, 'primary_key'),
      public_network_access_enabled: resource.field(self._.blocks, 'public_network_access_enabled'),
      query_keys: resource.field(self._.blocks, 'query_keys'),
      replica_count: resource.field(self._.blocks, 'replica_count'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      secondary_key: resource.field(self._.blocks, 'secondary_key'),
      semantic_search_sku: resource.field(self._.blocks, 'semantic_search_sku'),
      sku: resource.field(self._.blocks, 'sku'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    search_shared_private_link_service(name, block): {
      local resource = blockType.resource('azurerm_search_shared_private_link_service', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        request_message: build.template(std.get(block, 'request_message', null)),
        search_service_id: build.template(block.search_service_id),
        status: build.template(std.get(block, 'status', null)),
        subresource_name: build.template(block.subresource_name),
        target_resource_id: build.template(block.target_resource_id),
      }),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      request_message: resource.field(self._.blocks, 'request_message'),
      search_service_id: resource.field(self._.blocks, 'search_service_id'),
      status: resource.field(self._.blocks, 'status'),
      subresource_name: resource.field(self._.blocks, 'subresource_name'),
      target_resource_id: resource.field(self._.blocks, 'target_resource_id'),
    },
    security_center_assessment(name, block): {
      local resource = blockType.resource('azurerm_security_center_assessment', name),
      _: resource._(block, {
        additional_data: build.template(std.get(block, 'additional_data', null)),
        assessment_policy_id: build.template(block.assessment_policy_id),
        id: build.template(std.get(block, 'id', null)),
        target_resource_id: build.template(block.target_resource_id),
      }),
      additional_data: resource.field(self._.blocks, 'additional_data'),
      assessment_policy_id: resource.field(self._.blocks, 'assessment_policy_id'),
      id: resource.field(self._.blocks, 'id'),
      target_resource_id: resource.field(self._.blocks, 'target_resource_id'),
    },
    security_center_assessment_policy(name, block): {
      local resource = blockType.resource('azurerm_security_center_assessment_policy', name),
      _: resource._(block, {
        categories: build.template(std.get(block, 'categories', null)),
        description: build.template(block.description),
        display_name: build.template(block.display_name),
        id: build.template(std.get(block, 'id', null)),
        implementation_effort: build.template(std.get(block, 'implementation_effort', null)),
        name: build.template(std.get(block, 'name', null)),
        remediation_description: build.template(std.get(block, 'remediation_description', null)),
        severity: build.template(std.get(block, 'severity', null)),
        threats: build.template(std.get(block, 'threats', null)),
        user_impact: build.template(std.get(block, 'user_impact', null)),
      }),
      categories: resource.field(self._.blocks, 'categories'),
      description: resource.field(self._.blocks, 'description'),
      display_name: resource.field(self._.blocks, 'display_name'),
      id: resource.field(self._.blocks, 'id'),
      implementation_effort: resource.field(self._.blocks, 'implementation_effort'),
      name: resource.field(self._.blocks, 'name'),
      remediation_description: resource.field(self._.blocks, 'remediation_description'),
      severity: resource.field(self._.blocks, 'severity'),
      threats: resource.field(self._.blocks, 'threats'),
      user_impact: resource.field(self._.blocks, 'user_impact'),
    },
    security_center_auto_provisioning(name, block): {
      local resource = blockType.resource('azurerm_security_center_auto_provisioning', name),
      _: resource._(block, {
        auto_provision: build.template(block.auto_provision),
        id: build.template(std.get(block, 'id', null)),
      }),
      auto_provision: resource.field(self._.blocks, 'auto_provision'),
      id: resource.field(self._.blocks, 'id'),
    },
    security_center_automation(name, block): {
      local resource = blockType.resource('azurerm_security_center_automation', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        enabled: build.template(std.get(block, 'enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        scopes: build.template(block.scopes),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      description: resource.field(self._.blocks, 'description'),
      enabled: resource.field(self._.blocks, 'enabled'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      scopes: resource.field(self._.blocks, 'scopes'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    security_center_contact(name, block): {
      local resource = blockType.resource('azurerm_security_center_contact', name),
      _: resource._(block, {
        alert_notifications: build.template(block.alert_notifications),
        alerts_to_admins: build.template(block.alerts_to_admins),
        email: build.template(block.email),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        phone: build.template(std.get(block, 'phone', null)),
      }),
      alert_notifications: resource.field(self._.blocks, 'alert_notifications'),
      alerts_to_admins: resource.field(self._.blocks, 'alerts_to_admins'),
      email: resource.field(self._.blocks, 'email'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      phone: resource.field(self._.blocks, 'phone'),
    },
    security_center_server_vulnerability_assessment_virtual_machine(name, block): {
      local resource = blockType.resource('azurerm_security_center_server_vulnerability_assessment_virtual_machine', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        virtual_machine_id: build.template(block.virtual_machine_id),
      }),
      id: resource.field(self._.blocks, 'id'),
      virtual_machine_id: resource.field(self._.blocks, 'virtual_machine_id'),
    },
    security_center_server_vulnerability_assessments_setting(name, block): {
      local resource = blockType.resource('azurerm_security_center_server_vulnerability_assessments_setting', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        vulnerability_assessment_provider: build.template(block.vulnerability_assessment_provider),
      }),
      id: resource.field(self._.blocks, 'id'),
      vulnerability_assessment_provider: resource.field(self._.blocks, 'vulnerability_assessment_provider'),
    },
    security_center_setting(name, block): {
      local resource = blockType.resource('azurerm_security_center_setting', name),
      _: resource._(block, {
        enabled: build.template(block.enabled),
        id: build.template(std.get(block, 'id', null)),
        setting_name: build.template(block.setting_name),
      }),
      enabled: resource.field(self._.blocks, 'enabled'),
      id: resource.field(self._.blocks, 'id'),
      setting_name: resource.field(self._.blocks, 'setting_name'),
    },
    security_center_storage_defender(name, block): {
      local resource = blockType.resource('azurerm_security_center_storage_defender', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        malware_scanning_on_upload_cap_gb_per_month: build.template(std.get(block, 'malware_scanning_on_upload_cap_gb_per_month', null)),
        malware_scanning_on_upload_enabled: build.template(std.get(block, 'malware_scanning_on_upload_enabled', null)),
        override_subscription_settings_enabled: build.template(std.get(block, 'override_subscription_settings_enabled', null)),
        scan_results_event_grid_topic_id: build.template(std.get(block, 'scan_results_event_grid_topic_id', null)),
        sensitive_data_discovery_enabled: build.template(std.get(block, 'sensitive_data_discovery_enabled', null)),
        storage_account_id: build.template(block.storage_account_id),
      }),
      id: resource.field(self._.blocks, 'id'),
      malware_scanning_on_upload_cap_gb_per_month: resource.field(self._.blocks, 'malware_scanning_on_upload_cap_gb_per_month'),
      malware_scanning_on_upload_enabled: resource.field(self._.blocks, 'malware_scanning_on_upload_enabled'),
      override_subscription_settings_enabled: resource.field(self._.blocks, 'override_subscription_settings_enabled'),
      scan_results_event_grid_topic_id: resource.field(self._.blocks, 'scan_results_event_grid_topic_id'),
      sensitive_data_discovery_enabled: resource.field(self._.blocks, 'sensitive_data_discovery_enabled'),
      storage_account_id: resource.field(self._.blocks, 'storage_account_id'),
    },
    security_center_subscription_pricing(name, block): {
      local resource = blockType.resource('azurerm_security_center_subscription_pricing', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        resource_type: build.template(std.get(block, 'resource_type', null)),
        subplan: build.template(std.get(block, 'subplan', null)),
        tier: build.template(block.tier),
      }),
      id: resource.field(self._.blocks, 'id'),
      resource_type: resource.field(self._.blocks, 'resource_type'),
      subplan: resource.field(self._.blocks, 'subplan'),
      tier: resource.field(self._.blocks, 'tier'),
    },
    security_center_workspace(name, block): {
      local resource = blockType.resource('azurerm_security_center_workspace', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        scope: build.template(block.scope),
        workspace_id: build.template(block.workspace_id),
      }),
      id: resource.field(self._.blocks, 'id'),
      scope: resource.field(self._.blocks, 'scope'),
      workspace_id: resource.field(self._.blocks, 'workspace_id'),
    },
    sentinel_alert_rule_anomaly_built_in(name, block): {
      local resource = blockType.resource('azurerm_sentinel_alert_rule_anomaly_built_in', name),
      _: resource._(block, {
        anomaly_settings_version: build.template(std.get(block, 'anomaly_settings_version', null)),
        anomaly_version: build.template(std.get(block, 'anomaly_version', null)),
        description: build.template(std.get(block, 'description', null)),
        display_name: build.template(std.get(block, 'display_name', null)),
        enabled: build.template(block.enabled),
        frequency: build.template(std.get(block, 'frequency', null)),
        id: build.template(std.get(block, 'id', null)),
        log_analytics_workspace_id: build.template(block.log_analytics_workspace_id),
        mode: build.template(block.mode),
        multi_select_observation: build.template(std.get(block, 'multi_select_observation', null)),
        name: build.template(std.get(block, 'name', null)),
        prioritized_exclude_observation: build.template(std.get(block, 'prioritized_exclude_observation', null)),
        required_data_connector: build.template(std.get(block, 'required_data_connector', null)),
        settings_definition_id: build.template(std.get(block, 'settings_definition_id', null)),
        single_select_observation: build.template(std.get(block, 'single_select_observation', null)),
        tactics: build.template(std.get(block, 'tactics', null)),
        techniques: build.template(std.get(block, 'techniques', null)),
        threshold_observation: build.template(std.get(block, 'threshold_observation', null)),
      }),
      anomaly_settings_version: resource.field(self._.blocks, 'anomaly_settings_version'),
      anomaly_version: resource.field(self._.blocks, 'anomaly_version'),
      description: resource.field(self._.blocks, 'description'),
      display_name: resource.field(self._.blocks, 'display_name'),
      enabled: resource.field(self._.blocks, 'enabled'),
      frequency: resource.field(self._.blocks, 'frequency'),
      id: resource.field(self._.blocks, 'id'),
      log_analytics_workspace_id: resource.field(self._.blocks, 'log_analytics_workspace_id'),
      mode: resource.field(self._.blocks, 'mode'),
      multi_select_observation: resource.field(self._.blocks, 'multi_select_observation'),
      name: resource.field(self._.blocks, 'name'),
      prioritized_exclude_observation: resource.field(self._.blocks, 'prioritized_exclude_observation'),
      required_data_connector: resource.field(self._.blocks, 'required_data_connector'),
      settings_definition_id: resource.field(self._.blocks, 'settings_definition_id'),
      single_select_observation: resource.field(self._.blocks, 'single_select_observation'),
      tactics: resource.field(self._.blocks, 'tactics'),
      techniques: resource.field(self._.blocks, 'techniques'),
      threshold_observation: resource.field(self._.blocks, 'threshold_observation'),
    },
    sentinel_alert_rule_anomaly_duplicate(name, block): {
      local resource = blockType.resource('azurerm_sentinel_alert_rule_anomaly_duplicate', name),
      _: resource._(block, {
        anomaly_settings_version: build.template(std.get(block, 'anomaly_settings_version', null)),
        anomaly_version: build.template(std.get(block, 'anomaly_version', null)),
        built_in_rule_id: build.template(block.built_in_rule_id),
        description: build.template(std.get(block, 'description', null)),
        display_name: build.template(block.display_name),
        enabled: build.template(block.enabled),
        frequency: build.template(std.get(block, 'frequency', null)),
        id: build.template(std.get(block, 'id', null)),
        is_default_settings: build.template(std.get(block, 'is_default_settings', null)),
        log_analytics_workspace_id: build.template(block.log_analytics_workspace_id),
        mode: build.template(block.mode),
        name: build.template(std.get(block, 'name', null)),
        required_data_connector: build.template(std.get(block, 'required_data_connector', null)),
        settings_definition_id: build.template(std.get(block, 'settings_definition_id', null)),
        tactics: build.template(std.get(block, 'tactics', null)),
        techniques: build.template(std.get(block, 'techniques', null)),
      }),
      anomaly_settings_version: resource.field(self._.blocks, 'anomaly_settings_version'),
      anomaly_version: resource.field(self._.blocks, 'anomaly_version'),
      built_in_rule_id: resource.field(self._.blocks, 'built_in_rule_id'),
      description: resource.field(self._.blocks, 'description'),
      display_name: resource.field(self._.blocks, 'display_name'),
      enabled: resource.field(self._.blocks, 'enabled'),
      frequency: resource.field(self._.blocks, 'frequency'),
      id: resource.field(self._.blocks, 'id'),
      is_default_settings: resource.field(self._.blocks, 'is_default_settings'),
      log_analytics_workspace_id: resource.field(self._.blocks, 'log_analytics_workspace_id'),
      mode: resource.field(self._.blocks, 'mode'),
      name: resource.field(self._.blocks, 'name'),
      required_data_connector: resource.field(self._.blocks, 'required_data_connector'),
      settings_definition_id: resource.field(self._.blocks, 'settings_definition_id'),
      tactics: resource.field(self._.blocks, 'tactics'),
      techniques: resource.field(self._.blocks, 'techniques'),
    },
    sentinel_alert_rule_fusion(name, block): {
      local resource = blockType.resource('azurerm_sentinel_alert_rule_fusion', name),
      _: resource._(block, {
        alert_rule_template_guid: build.template(block.alert_rule_template_guid),
        enabled: build.template(std.get(block, 'enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        log_analytics_workspace_id: build.template(block.log_analytics_workspace_id),
        name: build.template(std.get(block, 'name', null)),
      }),
      alert_rule_template_guid: resource.field(self._.blocks, 'alert_rule_template_guid'),
      enabled: resource.field(self._.blocks, 'enabled'),
      id: resource.field(self._.blocks, 'id'),
      log_analytics_workspace_id: resource.field(self._.blocks, 'log_analytics_workspace_id'),
      name: resource.field(self._.blocks, 'name'),
    },
    sentinel_alert_rule_machine_learning_behavior_analytics(name, block): {
      local resource = blockType.resource('azurerm_sentinel_alert_rule_machine_learning_behavior_analytics', name),
      _: resource._(block, {
        alert_rule_template_guid: build.template(block.alert_rule_template_guid),
        enabled: build.template(std.get(block, 'enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        log_analytics_workspace_id: build.template(block.log_analytics_workspace_id),
        name: build.template(block.name),
      }),
      alert_rule_template_guid: resource.field(self._.blocks, 'alert_rule_template_guid'),
      enabled: resource.field(self._.blocks, 'enabled'),
      id: resource.field(self._.blocks, 'id'),
      log_analytics_workspace_id: resource.field(self._.blocks, 'log_analytics_workspace_id'),
      name: resource.field(self._.blocks, 'name'),
    },
    sentinel_alert_rule_ms_security_incident(name, block): {
      local resource = blockType.resource('azurerm_sentinel_alert_rule_ms_security_incident', name),
      _: resource._(block, {
        alert_rule_template_guid: build.template(std.get(block, 'alert_rule_template_guid', null)),
        description: build.template(std.get(block, 'description', null)),
        display_name: build.template(block.display_name),
        display_name_exclude_filter: build.template(std.get(block, 'display_name_exclude_filter', null)),
        display_name_filter: build.template(std.get(block, 'display_name_filter', null)),
        enabled: build.template(std.get(block, 'enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        log_analytics_workspace_id: build.template(block.log_analytics_workspace_id),
        name: build.template(block.name),
        product_filter: build.template(block.product_filter),
        severity_filter: build.template(block.severity_filter),
      }),
      alert_rule_template_guid: resource.field(self._.blocks, 'alert_rule_template_guid'),
      description: resource.field(self._.blocks, 'description'),
      display_name: resource.field(self._.blocks, 'display_name'),
      display_name_exclude_filter: resource.field(self._.blocks, 'display_name_exclude_filter'),
      display_name_filter: resource.field(self._.blocks, 'display_name_filter'),
      enabled: resource.field(self._.blocks, 'enabled'),
      id: resource.field(self._.blocks, 'id'),
      log_analytics_workspace_id: resource.field(self._.blocks, 'log_analytics_workspace_id'),
      name: resource.field(self._.blocks, 'name'),
      product_filter: resource.field(self._.blocks, 'product_filter'),
      severity_filter: resource.field(self._.blocks, 'severity_filter'),
    },
    sentinel_alert_rule_nrt(name, block): {
      local resource = blockType.resource('azurerm_sentinel_alert_rule_nrt', name),
      _: resource._(block, {
        alert_rule_template_guid: build.template(std.get(block, 'alert_rule_template_guid', null)),
        alert_rule_template_version: build.template(std.get(block, 'alert_rule_template_version', null)),
        custom_details: build.template(std.get(block, 'custom_details', null)),
        description: build.template(std.get(block, 'description', null)),
        display_name: build.template(block.display_name),
        enabled: build.template(std.get(block, 'enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        log_analytics_workspace_id: build.template(block.log_analytics_workspace_id),
        name: build.template(block.name),
        query: build.template(block.query),
        severity: build.template(block.severity),
        suppression_duration: build.template(std.get(block, 'suppression_duration', null)),
        suppression_enabled: build.template(std.get(block, 'suppression_enabled', null)),
        tactics: build.template(std.get(block, 'tactics', null)),
        techniques: build.template(std.get(block, 'techniques', null)),
      }),
      alert_rule_template_guid: resource.field(self._.blocks, 'alert_rule_template_guid'),
      alert_rule_template_version: resource.field(self._.blocks, 'alert_rule_template_version'),
      custom_details: resource.field(self._.blocks, 'custom_details'),
      description: resource.field(self._.blocks, 'description'),
      display_name: resource.field(self._.blocks, 'display_name'),
      enabled: resource.field(self._.blocks, 'enabled'),
      id: resource.field(self._.blocks, 'id'),
      log_analytics_workspace_id: resource.field(self._.blocks, 'log_analytics_workspace_id'),
      name: resource.field(self._.blocks, 'name'),
      query: resource.field(self._.blocks, 'query'),
      severity: resource.field(self._.blocks, 'severity'),
      suppression_duration: resource.field(self._.blocks, 'suppression_duration'),
      suppression_enabled: resource.field(self._.blocks, 'suppression_enabled'),
      tactics: resource.field(self._.blocks, 'tactics'),
      techniques: resource.field(self._.blocks, 'techniques'),
    },
    sentinel_alert_rule_scheduled(name, block): {
      local resource = blockType.resource('azurerm_sentinel_alert_rule_scheduled', name),
      _: resource._(block, {
        alert_rule_template_guid: build.template(std.get(block, 'alert_rule_template_guid', null)),
        alert_rule_template_version: build.template(std.get(block, 'alert_rule_template_version', null)),
        custom_details: build.template(std.get(block, 'custom_details', null)),
        description: build.template(std.get(block, 'description', null)),
        display_name: build.template(block.display_name),
        enabled: build.template(std.get(block, 'enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        log_analytics_workspace_id: build.template(block.log_analytics_workspace_id),
        name: build.template(block.name),
        query: build.template(block.query),
        query_frequency: build.template(std.get(block, 'query_frequency', null)),
        query_period: build.template(std.get(block, 'query_period', null)),
        severity: build.template(block.severity),
        suppression_duration: build.template(std.get(block, 'suppression_duration', null)),
        suppression_enabled: build.template(std.get(block, 'suppression_enabled', null)),
        tactics: build.template(std.get(block, 'tactics', null)),
        techniques: build.template(std.get(block, 'techniques', null)),
        trigger_operator: build.template(std.get(block, 'trigger_operator', null)),
        trigger_threshold: build.template(std.get(block, 'trigger_threshold', null)),
      }),
      alert_rule_template_guid: resource.field(self._.blocks, 'alert_rule_template_guid'),
      alert_rule_template_version: resource.field(self._.blocks, 'alert_rule_template_version'),
      custom_details: resource.field(self._.blocks, 'custom_details'),
      description: resource.field(self._.blocks, 'description'),
      display_name: resource.field(self._.blocks, 'display_name'),
      enabled: resource.field(self._.blocks, 'enabled'),
      id: resource.field(self._.blocks, 'id'),
      log_analytics_workspace_id: resource.field(self._.blocks, 'log_analytics_workspace_id'),
      name: resource.field(self._.blocks, 'name'),
      query: resource.field(self._.blocks, 'query'),
      query_frequency: resource.field(self._.blocks, 'query_frequency'),
      query_period: resource.field(self._.blocks, 'query_period'),
      severity: resource.field(self._.blocks, 'severity'),
      suppression_duration: resource.field(self._.blocks, 'suppression_duration'),
      suppression_enabled: resource.field(self._.blocks, 'suppression_enabled'),
      tactics: resource.field(self._.blocks, 'tactics'),
      techniques: resource.field(self._.blocks, 'techniques'),
      trigger_operator: resource.field(self._.blocks, 'trigger_operator'),
      trigger_threshold: resource.field(self._.blocks, 'trigger_threshold'),
    },
    sentinel_alert_rule_threat_intelligence(name, block): {
      local resource = blockType.resource('azurerm_sentinel_alert_rule_threat_intelligence', name),
      _: resource._(block, {
        alert_rule_template_guid: build.template(block.alert_rule_template_guid),
        enabled: build.template(std.get(block, 'enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        log_analytics_workspace_id: build.template(block.log_analytics_workspace_id),
        name: build.template(block.name),
      }),
      alert_rule_template_guid: resource.field(self._.blocks, 'alert_rule_template_guid'),
      enabled: resource.field(self._.blocks, 'enabled'),
      id: resource.field(self._.blocks, 'id'),
      log_analytics_workspace_id: resource.field(self._.blocks, 'log_analytics_workspace_id'),
      name: resource.field(self._.blocks, 'name'),
    },
    sentinel_automation_rule(name, block): {
      local resource = blockType.resource('azurerm_sentinel_automation_rule', name),
      _: resource._(block, {
        condition_json: build.template(std.get(block, 'condition_json', null)),
        display_name: build.template(block.display_name),
        enabled: build.template(std.get(block, 'enabled', null)),
        expiration: build.template(std.get(block, 'expiration', null)),
        id: build.template(std.get(block, 'id', null)),
        log_analytics_workspace_id: build.template(block.log_analytics_workspace_id),
        name: build.template(block.name),
        order: build.template(block.order),
        triggers_on: build.template(std.get(block, 'triggers_on', null)),
        triggers_when: build.template(std.get(block, 'triggers_when', null)),
      }),
      condition_json: resource.field(self._.blocks, 'condition_json'),
      display_name: resource.field(self._.blocks, 'display_name'),
      enabled: resource.field(self._.blocks, 'enabled'),
      expiration: resource.field(self._.blocks, 'expiration'),
      id: resource.field(self._.blocks, 'id'),
      log_analytics_workspace_id: resource.field(self._.blocks, 'log_analytics_workspace_id'),
      name: resource.field(self._.blocks, 'name'),
      order: resource.field(self._.blocks, 'order'),
      triggers_on: resource.field(self._.blocks, 'triggers_on'),
      triggers_when: resource.field(self._.blocks, 'triggers_when'),
    },
    sentinel_data_connector_aws_cloud_trail(name, block): {
      local resource = blockType.resource('azurerm_sentinel_data_connector_aws_cloud_trail', name),
      _: resource._(block, {
        aws_role_arn: build.template(block.aws_role_arn),
        id: build.template(std.get(block, 'id', null)),
        log_analytics_workspace_id: build.template(block.log_analytics_workspace_id),
        name: build.template(block.name),
      }),
      aws_role_arn: resource.field(self._.blocks, 'aws_role_arn'),
      id: resource.field(self._.blocks, 'id'),
      log_analytics_workspace_id: resource.field(self._.blocks, 'log_analytics_workspace_id'),
      name: resource.field(self._.blocks, 'name'),
    },
    sentinel_data_connector_aws_s3(name, block): {
      local resource = blockType.resource('azurerm_sentinel_data_connector_aws_s3', name),
      _: resource._(block, {
        aws_role_arn: build.template(block.aws_role_arn),
        destination_table: build.template(block.destination_table),
        id: build.template(std.get(block, 'id', null)),
        log_analytics_workspace_id: build.template(block.log_analytics_workspace_id),
        name: build.template(block.name),
        sqs_urls: build.template(block.sqs_urls),
      }),
      aws_role_arn: resource.field(self._.blocks, 'aws_role_arn'),
      destination_table: resource.field(self._.blocks, 'destination_table'),
      id: resource.field(self._.blocks, 'id'),
      log_analytics_workspace_id: resource.field(self._.blocks, 'log_analytics_workspace_id'),
      name: resource.field(self._.blocks, 'name'),
      sqs_urls: resource.field(self._.blocks, 'sqs_urls'),
    },
    sentinel_data_connector_azure_active_directory(name, block): {
      local resource = blockType.resource('azurerm_sentinel_data_connector_azure_active_directory', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        log_analytics_workspace_id: build.template(block.log_analytics_workspace_id),
        name: build.template(block.name),
        tenant_id: build.template(std.get(block, 'tenant_id', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      log_analytics_workspace_id: resource.field(self._.blocks, 'log_analytics_workspace_id'),
      name: resource.field(self._.blocks, 'name'),
      tenant_id: resource.field(self._.blocks, 'tenant_id'),
    },
    sentinel_data_connector_azure_advanced_threat_protection(name, block): {
      local resource = blockType.resource('azurerm_sentinel_data_connector_azure_advanced_threat_protection', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        log_analytics_workspace_id: build.template(block.log_analytics_workspace_id),
        name: build.template(block.name),
        tenant_id: build.template(std.get(block, 'tenant_id', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      log_analytics_workspace_id: resource.field(self._.blocks, 'log_analytics_workspace_id'),
      name: resource.field(self._.blocks, 'name'),
      tenant_id: resource.field(self._.blocks, 'tenant_id'),
    },
    sentinel_data_connector_azure_security_center(name, block): {
      local resource = blockType.resource('azurerm_sentinel_data_connector_azure_security_center', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        log_analytics_workspace_id: build.template(block.log_analytics_workspace_id),
        name: build.template(block.name),
        subscription_id: build.template(std.get(block, 'subscription_id', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      log_analytics_workspace_id: resource.field(self._.blocks, 'log_analytics_workspace_id'),
      name: resource.field(self._.blocks, 'name'),
      subscription_id: resource.field(self._.blocks, 'subscription_id'),
    },
    sentinel_data_connector_dynamics_365(name, block): {
      local resource = blockType.resource('azurerm_sentinel_data_connector_dynamics_365', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        log_analytics_workspace_id: build.template(block.log_analytics_workspace_id),
        name: build.template(block.name),
        tenant_id: build.template(std.get(block, 'tenant_id', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      log_analytics_workspace_id: resource.field(self._.blocks, 'log_analytics_workspace_id'),
      name: resource.field(self._.blocks, 'name'),
      tenant_id: resource.field(self._.blocks, 'tenant_id'),
    },
    sentinel_data_connector_iot(name, block): {
      local resource = blockType.resource('azurerm_sentinel_data_connector_iot', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        log_analytics_workspace_id: build.template(block.log_analytics_workspace_id),
        name: build.template(block.name),
        subscription_id: build.template(std.get(block, 'subscription_id', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      log_analytics_workspace_id: resource.field(self._.blocks, 'log_analytics_workspace_id'),
      name: resource.field(self._.blocks, 'name'),
      subscription_id: resource.field(self._.blocks, 'subscription_id'),
    },
    sentinel_data_connector_microsoft_cloud_app_security(name, block): {
      local resource = blockType.resource('azurerm_sentinel_data_connector_microsoft_cloud_app_security', name),
      _: resource._(block, {
        alerts_enabled: build.template(std.get(block, 'alerts_enabled', null)),
        discovery_logs_enabled: build.template(std.get(block, 'discovery_logs_enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        log_analytics_workspace_id: build.template(block.log_analytics_workspace_id),
        name: build.template(block.name),
        tenant_id: build.template(std.get(block, 'tenant_id', null)),
      }),
      alerts_enabled: resource.field(self._.blocks, 'alerts_enabled'),
      discovery_logs_enabled: resource.field(self._.blocks, 'discovery_logs_enabled'),
      id: resource.field(self._.blocks, 'id'),
      log_analytics_workspace_id: resource.field(self._.blocks, 'log_analytics_workspace_id'),
      name: resource.field(self._.blocks, 'name'),
      tenant_id: resource.field(self._.blocks, 'tenant_id'),
    },
    sentinel_data_connector_microsoft_defender_advanced_threat_protection(name, block): {
      local resource = blockType.resource('azurerm_sentinel_data_connector_microsoft_defender_advanced_threat_protection', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        log_analytics_workspace_id: build.template(block.log_analytics_workspace_id),
        name: build.template(block.name),
        tenant_id: build.template(std.get(block, 'tenant_id', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      log_analytics_workspace_id: resource.field(self._.blocks, 'log_analytics_workspace_id'),
      name: resource.field(self._.blocks, 'name'),
      tenant_id: resource.field(self._.blocks, 'tenant_id'),
    },
    sentinel_data_connector_microsoft_threat_intelligence(name, block): {
      local resource = blockType.resource('azurerm_sentinel_data_connector_microsoft_threat_intelligence', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        log_analytics_workspace_id: build.template(block.log_analytics_workspace_id),
        microsoft_emerging_threat_feed_lookback_date: build.template(block.microsoft_emerging_threat_feed_lookback_date),
        name: build.template(block.name),
        tenant_id: build.template(std.get(block, 'tenant_id', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      log_analytics_workspace_id: resource.field(self._.blocks, 'log_analytics_workspace_id'),
      microsoft_emerging_threat_feed_lookback_date: resource.field(self._.blocks, 'microsoft_emerging_threat_feed_lookback_date'),
      name: resource.field(self._.blocks, 'name'),
      tenant_id: resource.field(self._.blocks, 'tenant_id'),
    },
    sentinel_data_connector_microsoft_threat_protection(name, block): {
      local resource = blockType.resource('azurerm_sentinel_data_connector_microsoft_threat_protection', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        log_analytics_workspace_id: build.template(block.log_analytics_workspace_id),
        name: build.template(block.name),
        tenant_id: build.template(std.get(block, 'tenant_id', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      log_analytics_workspace_id: resource.field(self._.blocks, 'log_analytics_workspace_id'),
      name: resource.field(self._.blocks, 'name'),
      tenant_id: resource.field(self._.blocks, 'tenant_id'),
    },
    sentinel_data_connector_office_365(name, block): {
      local resource = blockType.resource('azurerm_sentinel_data_connector_office_365', name),
      _: resource._(block, {
        exchange_enabled: build.template(std.get(block, 'exchange_enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        log_analytics_workspace_id: build.template(block.log_analytics_workspace_id),
        name: build.template(block.name),
        sharepoint_enabled: build.template(std.get(block, 'sharepoint_enabled', null)),
        teams_enabled: build.template(std.get(block, 'teams_enabled', null)),
        tenant_id: build.template(std.get(block, 'tenant_id', null)),
      }),
      exchange_enabled: resource.field(self._.blocks, 'exchange_enabled'),
      id: resource.field(self._.blocks, 'id'),
      log_analytics_workspace_id: resource.field(self._.blocks, 'log_analytics_workspace_id'),
      name: resource.field(self._.blocks, 'name'),
      sharepoint_enabled: resource.field(self._.blocks, 'sharepoint_enabled'),
      teams_enabled: resource.field(self._.blocks, 'teams_enabled'),
      tenant_id: resource.field(self._.blocks, 'tenant_id'),
    },
    sentinel_data_connector_office_365_project(name, block): {
      local resource = blockType.resource('azurerm_sentinel_data_connector_office_365_project', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        log_analytics_workspace_id: build.template(block.log_analytics_workspace_id),
        name: build.template(block.name),
        tenant_id: build.template(std.get(block, 'tenant_id', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      log_analytics_workspace_id: resource.field(self._.blocks, 'log_analytics_workspace_id'),
      name: resource.field(self._.blocks, 'name'),
      tenant_id: resource.field(self._.blocks, 'tenant_id'),
    },
    sentinel_data_connector_office_atp(name, block): {
      local resource = blockType.resource('azurerm_sentinel_data_connector_office_atp', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        log_analytics_workspace_id: build.template(block.log_analytics_workspace_id),
        name: build.template(block.name),
        tenant_id: build.template(std.get(block, 'tenant_id', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      log_analytics_workspace_id: resource.field(self._.blocks, 'log_analytics_workspace_id'),
      name: resource.field(self._.blocks, 'name'),
      tenant_id: resource.field(self._.blocks, 'tenant_id'),
    },
    sentinel_data_connector_office_irm(name, block): {
      local resource = blockType.resource('azurerm_sentinel_data_connector_office_irm', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        log_analytics_workspace_id: build.template(block.log_analytics_workspace_id),
        name: build.template(block.name),
        tenant_id: build.template(std.get(block, 'tenant_id', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      log_analytics_workspace_id: resource.field(self._.blocks, 'log_analytics_workspace_id'),
      name: resource.field(self._.blocks, 'name'),
      tenant_id: resource.field(self._.blocks, 'tenant_id'),
    },
    sentinel_data_connector_office_power_bi(name, block): {
      local resource = blockType.resource('azurerm_sentinel_data_connector_office_power_bi', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        log_analytics_workspace_id: build.template(block.log_analytics_workspace_id),
        name: build.template(block.name),
        tenant_id: build.template(std.get(block, 'tenant_id', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      log_analytics_workspace_id: resource.field(self._.blocks, 'log_analytics_workspace_id'),
      name: resource.field(self._.blocks, 'name'),
      tenant_id: resource.field(self._.blocks, 'tenant_id'),
    },
    sentinel_data_connector_threat_intelligence(name, block): {
      local resource = blockType.resource('azurerm_sentinel_data_connector_threat_intelligence', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        log_analytics_workspace_id: build.template(block.log_analytics_workspace_id),
        lookback_date: build.template(std.get(block, 'lookback_date', null)),
        name: build.template(block.name),
        tenant_id: build.template(std.get(block, 'tenant_id', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      log_analytics_workspace_id: resource.field(self._.blocks, 'log_analytics_workspace_id'),
      lookback_date: resource.field(self._.blocks, 'lookback_date'),
      name: resource.field(self._.blocks, 'name'),
      tenant_id: resource.field(self._.blocks, 'tenant_id'),
    },
    sentinel_data_connector_threat_intelligence_taxii(name, block): {
      local resource = blockType.resource('azurerm_sentinel_data_connector_threat_intelligence_taxii', name),
      _: resource._(block, {
        api_root_url: build.template(block.api_root_url),
        collection_id: build.template(block.collection_id),
        display_name: build.template(block.display_name),
        id: build.template(std.get(block, 'id', null)),
        log_analytics_workspace_id: build.template(block.log_analytics_workspace_id),
        lookback_date: build.template(std.get(block, 'lookback_date', null)),
        name: build.template(block.name),
        password: build.template(std.get(block, 'password', null)),
        polling_frequency: build.template(std.get(block, 'polling_frequency', null)),
        tenant_id: build.template(std.get(block, 'tenant_id', null)),
        user_name: build.template(std.get(block, 'user_name', null)),
      }),
      api_root_url: resource.field(self._.blocks, 'api_root_url'),
      collection_id: resource.field(self._.blocks, 'collection_id'),
      display_name: resource.field(self._.blocks, 'display_name'),
      id: resource.field(self._.blocks, 'id'),
      log_analytics_workspace_id: resource.field(self._.blocks, 'log_analytics_workspace_id'),
      lookback_date: resource.field(self._.blocks, 'lookback_date'),
      name: resource.field(self._.blocks, 'name'),
      password: resource.field(self._.blocks, 'password'),
      polling_frequency: resource.field(self._.blocks, 'polling_frequency'),
      tenant_id: resource.field(self._.blocks, 'tenant_id'),
      user_name: resource.field(self._.blocks, 'user_name'),
    },
    sentinel_log_analytics_workspace_onboarding(name, block): {
      local resource = blockType.resource('azurerm_sentinel_log_analytics_workspace_onboarding', name),
      _: resource._(block, {
        customer_managed_key_enabled: build.template(std.get(block, 'customer_managed_key_enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        workspace_id: build.template(block.workspace_id),
      }),
      customer_managed_key_enabled: resource.field(self._.blocks, 'customer_managed_key_enabled'),
      id: resource.field(self._.blocks, 'id'),
      workspace_id: resource.field(self._.blocks, 'workspace_id'),
    },
    sentinel_metadata(name, block): {
      local resource = blockType.resource('azurerm_sentinel_metadata', name),
      _: resource._(block, {
        content_id: build.template(block.content_id),
        content_schema_version: build.template(std.get(block, 'content_schema_version', null)),
        custom_version: build.template(std.get(block, 'custom_version', null)),
        dependency: build.template(std.get(block, 'dependency', null)),
        first_publish_date: build.template(std.get(block, 'first_publish_date', null)),
        icon_id: build.template(std.get(block, 'icon_id', null)),
        id: build.template(std.get(block, 'id', null)),
        kind: build.template(block.kind),
        last_publish_date: build.template(std.get(block, 'last_publish_date', null)),
        name: build.template(block.name),
        parent_id: build.template(block.parent_id),
        preview_images: build.template(std.get(block, 'preview_images', null)),
        preview_images_dark: build.template(std.get(block, 'preview_images_dark', null)),
        providers: build.template(std.get(block, 'providers', null)),
        threat_analysis_tactics: build.template(std.get(block, 'threat_analysis_tactics', null)),
        threat_analysis_techniques: build.template(std.get(block, 'threat_analysis_techniques', null)),
        version: build.template(std.get(block, 'version', null)),
        workspace_id: build.template(block.workspace_id),
      }),
      content_id: resource.field(self._.blocks, 'content_id'),
      content_schema_version: resource.field(self._.blocks, 'content_schema_version'),
      custom_version: resource.field(self._.blocks, 'custom_version'),
      dependency: resource.field(self._.blocks, 'dependency'),
      first_publish_date: resource.field(self._.blocks, 'first_publish_date'),
      icon_id: resource.field(self._.blocks, 'icon_id'),
      id: resource.field(self._.blocks, 'id'),
      kind: resource.field(self._.blocks, 'kind'),
      last_publish_date: resource.field(self._.blocks, 'last_publish_date'),
      name: resource.field(self._.blocks, 'name'),
      parent_id: resource.field(self._.blocks, 'parent_id'),
      preview_images: resource.field(self._.blocks, 'preview_images'),
      preview_images_dark: resource.field(self._.blocks, 'preview_images_dark'),
      providers: resource.field(self._.blocks, 'providers'),
      threat_analysis_tactics: resource.field(self._.blocks, 'threat_analysis_tactics'),
      threat_analysis_techniques: resource.field(self._.blocks, 'threat_analysis_techniques'),
      version: resource.field(self._.blocks, 'version'),
      workspace_id: resource.field(self._.blocks, 'workspace_id'),
    },
    sentinel_threat_intelligence_indicator(name, block): {
      local resource = blockType.resource('azurerm_sentinel_threat_intelligence_indicator', name),
      _: resource._(block, {
        confidence: build.template(std.get(block, 'confidence', null)),
        created_by: build.template(std.get(block, 'created_by', null)),
        created_on: build.template(std.get(block, 'created_on', null)),
        defanged: build.template(std.get(block, 'defanged', null)),
        description: build.template(std.get(block, 'description', null)),
        display_name: build.template(block.display_name),
        extension: build.template(std.get(block, 'extension', null)),
        external_id: build.template(std.get(block, 'external_id', null)),
        external_last_updated_time_utc: build.template(std.get(block, 'external_last_updated_time_utc', null)),
        guid: build.template(std.get(block, 'guid', null)),
        id: build.template(std.get(block, 'id', null)),
        indicator_type: build.template(std.get(block, 'indicator_type', null)),
        language: build.template(std.get(block, 'language', null)),
        last_updated_time_utc: build.template(std.get(block, 'last_updated_time_utc', null)),
        object_marking_refs: build.template(std.get(block, 'object_marking_refs', null)),
        parsed_pattern: build.template(std.get(block, 'parsed_pattern', null)),
        pattern: build.template(block.pattern),
        pattern_type: build.template(block.pattern_type),
        pattern_version: build.template(std.get(block, 'pattern_version', null)),
        revoked: build.template(std.get(block, 'revoked', null)),
        source: build.template(block.source),
        tags: build.template(std.get(block, 'tags', null)),
        threat_types: build.template(std.get(block, 'threat_types', null)),
        validate_from_utc: build.template(block.validate_from_utc),
        validate_until_utc: build.template(std.get(block, 'validate_until_utc', null)),
        workspace_id: build.template(block.workspace_id),
      }),
      confidence: resource.field(self._.blocks, 'confidence'),
      created_by: resource.field(self._.blocks, 'created_by'),
      created_on: resource.field(self._.blocks, 'created_on'),
      defanged: resource.field(self._.blocks, 'defanged'),
      description: resource.field(self._.blocks, 'description'),
      display_name: resource.field(self._.blocks, 'display_name'),
      extension: resource.field(self._.blocks, 'extension'),
      external_id: resource.field(self._.blocks, 'external_id'),
      external_last_updated_time_utc: resource.field(self._.blocks, 'external_last_updated_time_utc'),
      guid: resource.field(self._.blocks, 'guid'),
      id: resource.field(self._.blocks, 'id'),
      indicator_type: resource.field(self._.blocks, 'indicator_type'),
      language: resource.field(self._.blocks, 'language'),
      last_updated_time_utc: resource.field(self._.blocks, 'last_updated_time_utc'),
      object_marking_refs: resource.field(self._.blocks, 'object_marking_refs'),
      parsed_pattern: resource.field(self._.blocks, 'parsed_pattern'),
      pattern: resource.field(self._.blocks, 'pattern'),
      pattern_type: resource.field(self._.blocks, 'pattern_type'),
      pattern_version: resource.field(self._.blocks, 'pattern_version'),
      revoked: resource.field(self._.blocks, 'revoked'),
      source: resource.field(self._.blocks, 'source'),
      tags: resource.field(self._.blocks, 'tags'),
      threat_types: resource.field(self._.blocks, 'threat_types'),
      validate_from_utc: resource.field(self._.blocks, 'validate_from_utc'),
      validate_until_utc: resource.field(self._.blocks, 'validate_until_utc'),
      workspace_id: resource.field(self._.blocks, 'workspace_id'),
    },
    sentinel_watchlist(name, block): {
      local resource = blockType.resource('azurerm_sentinel_watchlist', name),
      _: resource._(block, {
        default_duration: build.template(std.get(block, 'default_duration', null)),
        description: build.template(std.get(block, 'description', null)),
        display_name: build.template(block.display_name),
        id: build.template(std.get(block, 'id', null)),
        item_search_key: build.template(block.item_search_key),
        labels: build.template(std.get(block, 'labels', null)),
        log_analytics_workspace_id: build.template(block.log_analytics_workspace_id),
        name: build.template(block.name),
      }),
      default_duration: resource.field(self._.blocks, 'default_duration'),
      description: resource.field(self._.blocks, 'description'),
      display_name: resource.field(self._.blocks, 'display_name'),
      id: resource.field(self._.blocks, 'id'),
      item_search_key: resource.field(self._.blocks, 'item_search_key'),
      labels: resource.field(self._.blocks, 'labels'),
      log_analytics_workspace_id: resource.field(self._.blocks, 'log_analytics_workspace_id'),
      name: resource.field(self._.blocks, 'name'),
    },
    sentinel_watchlist_item(name, block): {
      local resource = blockType.resource('azurerm_sentinel_watchlist_item', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        properties: build.template(block.properties),
        watchlist_id: build.template(block.watchlist_id),
      }),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      properties: resource.field(self._.blocks, 'properties'),
      watchlist_id: resource.field(self._.blocks, 'watchlist_id'),
    },
    service_fabric_cluster(name, block): {
      local resource = blockType.resource('azurerm_service_fabric_cluster', name),
      _: resource._(block, {
        add_on_features: build.template(std.get(block, 'add_on_features', null)),
        cluster_code_version: build.template(std.get(block, 'cluster_code_version', null)),
        cluster_endpoint: build.template(std.get(block, 'cluster_endpoint', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        management_endpoint: build.template(block.management_endpoint),
        name: build.template(block.name),
        reliability_level: build.template(block.reliability_level),
        resource_group_name: build.template(block.resource_group_name),
        service_fabric_zonal_upgrade_mode: build.template(std.get(block, 'service_fabric_zonal_upgrade_mode', null)),
        tags: build.template(std.get(block, 'tags', null)),
        upgrade_mode: build.template(block.upgrade_mode),
        vm_image: build.template(block.vm_image),
        vmss_zonal_upgrade_mode: build.template(std.get(block, 'vmss_zonal_upgrade_mode', null)),
      }),
      add_on_features: resource.field(self._.blocks, 'add_on_features'),
      cluster_code_version: resource.field(self._.blocks, 'cluster_code_version'),
      cluster_endpoint: resource.field(self._.blocks, 'cluster_endpoint'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      management_endpoint: resource.field(self._.blocks, 'management_endpoint'),
      name: resource.field(self._.blocks, 'name'),
      reliability_level: resource.field(self._.blocks, 'reliability_level'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      service_fabric_zonal_upgrade_mode: resource.field(self._.blocks, 'service_fabric_zonal_upgrade_mode'),
      tags: resource.field(self._.blocks, 'tags'),
      upgrade_mode: resource.field(self._.blocks, 'upgrade_mode'),
      vm_image: resource.field(self._.blocks, 'vm_image'),
      vmss_zonal_upgrade_mode: resource.field(self._.blocks, 'vmss_zonal_upgrade_mode'),
    },
    service_fabric_managed_cluster(name, block): {
      local resource = blockType.resource('azurerm_service_fabric_managed_cluster', name),
      _: resource._(block, {
        backup_service_enabled: build.template(std.get(block, 'backup_service_enabled', null)),
        client_connection_port: build.template(block.client_connection_port),
        dns_name: build.template(std.get(block, 'dns_name', null)),
        dns_service_enabled: build.template(std.get(block, 'dns_service_enabled', null)),
        http_gateway_port: build.template(block.http_gateway_port),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        password: build.template(std.get(block, 'password', null)),
        resource_group_name: build.template(block.resource_group_name),
        sku: build.template(std.get(block, 'sku', null)),
        tags: build.template(std.get(block, 'tags', null)),
        upgrade_wave: build.template(std.get(block, 'upgrade_wave', null)),
        username: build.template(std.get(block, 'username', null)),
      }),
      backup_service_enabled: resource.field(self._.blocks, 'backup_service_enabled'),
      client_connection_port: resource.field(self._.blocks, 'client_connection_port'),
      dns_name: resource.field(self._.blocks, 'dns_name'),
      dns_service_enabled: resource.field(self._.blocks, 'dns_service_enabled'),
      http_gateway_port: resource.field(self._.blocks, 'http_gateway_port'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      password: resource.field(self._.blocks, 'password'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      sku: resource.field(self._.blocks, 'sku'),
      tags: resource.field(self._.blocks, 'tags'),
      upgrade_wave: resource.field(self._.blocks, 'upgrade_wave'),
      username: resource.field(self._.blocks, 'username'),
    },
    service_plan(name, block): {
      local resource = blockType.resource('azurerm_service_plan', name),
      _: resource._(block, {
        app_service_environment_id: build.template(std.get(block, 'app_service_environment_id', null)),
        id: build.template(std.get(block, 'id', null)),
        kind: build.template(std.get(block, 'kind', null)),
        location: build.template(block.location),
        maximum_elastic_worker_count: build.template(std.get(block, 'maximum_elastic_worker_count', null)),
        name: build.template(block.name),
        os_type: build.template(block.os_type),
        per_site_scaling_enabled: build.template(std.get(block, 'per_site_scaling_enabled', null)),
        premium_plan_auto_scale_enabled: build.template(std.get(block, 'premium_plan_auto_scale_enabled', null)),
        reserved: build.template(std.get(block, 'reserved', null)),
        resource_group_name: build.template(block.resource_group_name),
        sku_name: build.template(block.sku_name),
        tags: build.template(std.get(block, 'tags', null)),
        worker_count: build.template(std.get(block, 'worker_count', null)),
        zone_balancing_enabled: build.template(std.get(block, 'zone_balancing_enabled', null)),
      }),
      app_service_environment_id: resource.field(self._.blocks, 'app_service_environment_id'),
      id: resource.field(self._.blocks, 'id'),
      kind: resource.field(self._.blocks, 'kind'),
      location: resource.field(self._.blocks, 'location'),
      maximum_elastic_worker_count: resource.field(self._.blocks, 'maximum_elastic_worker_count'),
      name: resource.field(self._.blocks, 'name'),
      os_type: resource.field(self._.blocks, 'os_type'),
      per_site_scaling_enabled: resource.field(self._.blocks, 'per_site_scaling_enabled'),
      premium_plan_auto_scale_enabled: resource.field(self._.blocks, 'premium_plan_auto_scale_enabled'),
      reserved: resource.field(self._.blocks, 'reserved'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      sku_name: resource.field(self._.blocks, 'sku_name'),
      tags: resource.field(self._.blocks, 'tags'),
      worker_count: resource.field(self._.blocks, 'worker_count'),
      zone_balancing_enabled: resource.field(self._.blocks, 'zone_balancing_enabled'),
    },
    servicebus_namespace(name, block): {
      local resource = blockType.resource('azurerm_servicebus_namespace', name),
      _: resource._(block, {
        capacity: build.template(std.get(block, 'capacity', null)),
        default_primary_connection_string: build.template(std.get(block, 'default_primary_connection_string', null)),
        default_primary_key: build.template(std.get(block, 'default_primary_key', null)),
        default_secondary_connection_string: build.template(std.get(block, 'default_secondary_connection_string', null)),
        default_secondary_key: build.template(std.get(block, 'default_secondary_key', null)),
        endpoint: build.template(std.get(block, 'endpoint', null)),
        id: build.template(std.get(block, 'id', null)),
        local_auth_enabled: build.template(std.get(block, 'local_auth_enabled', null)),
        location: build.template(block.location),
        minimum_tls_version: build.template(std.get(block, 'minimum_tls_version', null)),
        name: build.template(block.name),
        premium_messaging_partitions: build.template(std.get(block, 'premium_messaging_partitions', null)),
        public_network_access_enabled: build.template(std.get(block, 'public_network_access_enabled', null)),
        resource_group_name: build.template(block.resource_group_name),
        sku: build.template(block.sku),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      capacity: resource.field(self._.blocks, 'capacity'),
      default_primary_connection_string: resource.field(self._.blocks, 'default_primary_connection_string'),
      default_primary_key: resource.field(self._.blocks, 'default_primary_key'),
      default_secondary_connection_string: resource.field(self._.blocks, 'default_secondary_connection_string'),
      default_secondary_key: resource.field(self._.blocks, 'default_secondary_key'),
      endpoint: resource.field(self._.blocks, 'endpoint'),
      id: resource.field(self._.blocks, 'id'),
      local_auth_enabled: resource.field(self._.blocks, 'local_auth_enabled'),
      location: resource.field(self._.blocks, 'location'),
      minimum_tls_version: resource.field(self._.blocks, 'minimum_tls_version'),
      name: resource.field(self._.blocks, 'name'),
      premium_messaging_partitions: resource.field(self._.blocks, 'premium_messaging_partitions'),
      public_network_access_enabled: resource.field(self._.blocks, 'public_network_access_enabled'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      sku: resource.field(self._.blocks, 'sku'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    servicebus_namespace_authorization_rule(name, block): {
      local resource = blockType.resource('azurerm_servicebus_namespace_authorization_rule', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        listen: build.template(std.get(block, 'listen', null)),
        manage: build.template(std.get(block, 'manage', null)),
        name: build.template(block.name),
        namespace_id: build.template(block.namespace_id),
        primary_connection_string: build.template(std.get(block, 'primary_connection_string', null)),
        primary_connection_string_alias: build.template(std.get(block, 'primary_connection_string_alias', null)),
        primary_key: build.template(std.get(block, 'primary_key', null)),
        secondary_connection_string: build.template(std.get(block, 'secondary_connection_string', null)),
        secondary_connection_string_alias: build.template(std.get(block, 'secondary_connection_string_alias', null)),
        secondary_key: build.template(std.get(block, 'secondary_key', null)),
        send: build.template(std.get(block, 'send', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      listen: resource.field(self._.blocks, 'listen'),
      manage: resource.field(self._.blocks, 'manage'),
      name: resource.field(self._.blocks, 'name'),
      namespace_id: resource.field(self._.blocks, 'namespace_id'),
      primary_connection_string: resource.field(self._.blocks, 'primary_connection_string'),
      primary_connection_string_alias: resource.field(self._.blocks, 'primary_connection_string_alias'),
      primary_key: resource.field(self._.blocks, 'primary_key'),
      secondary_connection_string: resource.field(self._.blocks, 'secondary_connection_string'),
      secondary_connection_string_alias: resource.field(self._.blocks, 'secondary_connection_string_alias'),
      secondary_key: resource.field(self._.blocks, 'secondary_key'),
      send: resource.field(self._.blocks, 'send'),
    },
    servicebus_namespace_disaster_recovery_config(name, block): {
      local resource = blockType.resource('azurerm_servicebus_namespace_disaster_recovery_config', name),
      _: resource._(block, {
        alias_authorization_rule_id: build.template(std.get(block, 'alias_authorization_rule_id', null)),
        default_primary_key: build.template(std.get(block, 'default_primary_key', null)),
        default_secondary_key: build.template(std.get(block, 'default_secondary_key', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        partner_namespace_id: build.template(block.partner_namespace_id),
        primary_connection_string_alias: build.template(std.get(block, 'primary_connection_string_alias', null)),
        primary_namespace_id: build.template(block.primary_namespace_id),
        secondary_connection_string_alias: build.template(std.get(block, 'secondary_connection_string_alias', null)),
      }),
      alias_authorization_rule_id: resource.field(self._.blocks, 'alias_authorization_rule_id'),
      default_primary_key: resource.field(self._.blocks, 'default_primary_key'),
      default_secondary_key: resource.field(self._.blocks, 'default_secondary_key'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      partner_namespace_id: resource.field(self._.blocks, 'partner_namespace_id'),
      primary_connection_string_alias: resource.field(self._.blocks, 'primary_connection_string_alias'),
      primary_namespace_id: resource.field(self._.blocks, 'primary_namespace_id'),
      secondary_connection_string_alias: resource.field(self._.blocks, 'secondary_connection_string_alias'),
    },
    servicebus_queue(name, block): {
      local resource = blockType.resource('azurerm_servicebus_queue', name),
      _: resource._(block, {
        auto_delete_on_idle: build.template(std.get(block, 'auto_delete_on_idle', null)),
        batched_operations_enabled: build.template(std.get(block, 'batched_operations_enabled', null)),
        dead_lettering_on_message_expiration: build.template(std.get(block, 'dead_lettering_on_message_expiration', null)),
        default_message_ttl: build.template(std.get(block, 'default_message_ttl', null)),
        duplicate_detection_history_time_window: build.template(std.get(block, 'duplicate_detection_history_time_window', null)),
        express_enabled: build.template(std.get(block, 'express_enabled', null)),
        forward_dead_lettered_messages_to: build.template(std.get(block, 'forward_dead_lettered_messages_to', null)),
        forward_to: build.template(std.get(block, 'forward_to', null)),
        id: build.template(std.get(block, 'id', null)),
        lock_duration: build.template(std.get(block, 'lock_duration', null)),
        max_delivery_count: build.template(std.get(block, 'max_delivery_count', null)),
        max_message_size_in_kilobytes: build.template(std.get(block, 'max_message_size_in_kilobytes', null)),
        max_size_in_megabytes: build.template(std.get(block, 'max_size_in_megabytes', null)),
        name: build.template(block.name),
        namespace_id: build.template(block.namespace_id),
        partitioning_enabled: build.template(std.get(block, 'partitioning_enabled', null)),
        requires_duplicate_detection: build.template(std.get(block, 'requires_duplicate_detection', null)),
        requires_session: build.template(std.get(block, 'requires_session', null)),
        status: build.template(std.get(block, 'status', null)),
      }),
      auto_delete_on_idle: resource.field(self._.blocks, 'auto_delete_on_idle'),
      batched_operations_enabled: resource.field(self._.blocks, 'batched_operations_enabled'),
      dead_lettering_on_message_expiration: resource.field(self._.blocks, 'dead_lettering_on_message_expiration'),
      default_message_ttl: resource.field(self._.blocks, 'default_message_ttl'),
      duplicate_detection_history_time_window: resource.field(self._.blocks, 'duplicate_detection_history_time_window'),
      express_enabled: resource.field(self._.blocks, 'express_enabled'),
      forward_dead_lettered_messages_to: resource.field(self._.blocks, 'forward_dead_lettered_messages_to'),
      forward_to: resource.field(self._.blocks, 'forward_to'),
      id: resource.field(self._.blocks, 'id'),
      lock_duration: resource.field(self._.blocks, 'lock_duration'),
      max_delivery_count: resource.field(self._.blocks, 'max_delivery_count'),
      max_message_size_in_kilobytes: resource.field(self._.blocks, 'max_message_size_in_kilobytes'),
      max_size_in_megabytes: resource.field(self._.blocks, 'max_size_in_megabytes'),
      name: resource.field(self._.blocks, 'name'),
      namespace_id: resource.field(self._.blocks, 'namespace_id'),
      partitioning_enabled: resource.field(self._.blocks, 'partitioning_enabled'),
      requires_duplicate_detection: resource.field(self._.blocks, 'requires_duplicate_detection'),
      requires_session: resource.field(self._.blocks, 'requires_session'),
      status: resource.field(self._.blocks, 'status'),
    },
    servicebus_queue_authorization_rule(name, block): {
      local resource = blockType.resource('azurerm_servicebus_queue_authorization_rule', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        listen: build.template(std.get(block, 'listen', null)),
        manage: build.template(std.get(block, 'manage', null)),
        name: build.template(block.name),
        primary_connection_string: build.template(std.get(block, 'primary_connection_string', null)),
        primary_connection_string_alias: build.template(std.get(block, 'primary_connection_string_alias', null)),
        primary_key: build.template(std.get(block, 'primary_key', null)),
        queue_id: build.template(block.queue_id),
        secondary_connection_string: build.template(std.get(block, 'secondary_connection_string', null)),
        secondary_connection_string_alias: build.template(std.get(block, 'secondary_connection_string_alias', null)),
        secondary_key: build.template(std.get(block, 'secondary_key', null)),
        send: build.template(std.get(block, 'send', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      listen: resource.field(self._.blocks, 'listen'),
      manage: resource.field(self._.blocks, 'manage'),
      name: resource.field(self._.blocks, 'name'),
      primary_connection_string: resource.field(self._.blocks, 'primary_connection_string'),
      primary_connection_string_alias: resource.field(self._.blocks, 'primary_connection_string_alias'),
      primary_key: resource.field(self._.blocks, 'primary_key'),
      queue_id: resource.field(self._.blocks, 'queue_id'),
      secondary_connection_string: resource.field(self._.blocks, 'secondary_connection_string'),
      secondary_connection_string_alias: resource.field(self._.blocks, 'secondary_connection_string_alias'),
      secondary_key: resource.field(self._.blocks, 'secondary_key'),
      send: resource.field(self._.blocks, 'send'),
    },
    servicebus_subscription(name, block): {
      local resource = blockType.resource('azurerm_servicebus_subscription', name),
      _: resource._(block, {
        auto_delete_on_idle: build.template(std.get(block, 'auto_delete_on_idle', null)),
        batched_operations_enabled: build.template(std.get(block, 'batched_operations_enabled', null)),
        client_scoped_subscription_enabled: build.template(std.get(block, 'client_scoped_subscription_enabled', null)),
        dead_lettering_on_filter_evaluation_error: build.template(std.get(block, 'dead_lettering_on_filter_evaluation_error', null)),
        dead_lettering_on_message_expiration: build.template(std.get(block, 'dead_lettering_on_message_expiration', null)),
        default_message_ttl: build.template(std.get(block, 'default_message_ttl', null)),
        forward_dead_lettered_messages_to: build.template(std.get(block, 'forward_dead_lettered_messages_to', null)),
        forward_to: build.template(std.get(block, 'forward_to', null)),
        id: build.template(std.get(block, 'id', null)),
        lock_duration: build.template(std.get(block, 'lock_duration', null)),
        max_delivery_count: build.template(block.max_delivery_count),
        name: build.template(block.name),
        requires_session: build.template(std.get(block, 'requires_session', null)),
        status: build.template(std.get(block, 'status', null)),
        topic_id: build.template(block.topic_id),
      }),
      auto_delete_on_idle: resource.field(self._.blocks, 'auto_delete_on_idle'),
      batched_operations_enabled: resource.field(self._.blocks, 'batched_operations_enabled'),
      client_scoped_subscription_enabled: resource.field(self._.blocks, 'client_scoped_subscription_enabled'),
      dead_lettering_on_filter_evaluation_error: resource.field(self._.blocks, 'dead_lettering_on_filter_evaluation_error'),
      dead_lettering_on_message_expiration: resource.field(self._.blocks, 'dead_lettering_on_message_expiration'),
      default_message_ttl: resource.field(self._.blocks, 'default_message_ttl'),
      forward_dead_lettered_messages_to: resource.field(self._.blocks, 'forward_dead_lettered_messages_to'),
      forward_to: resource.field(self._.blocks, 'forward_to'),
      id: resource.field(self._.blocks, 'id'),
      lock_duration: resource.field(self._.blocks, 'lock_duration'),
      max_delivery_count: resource.field(self._.blocks, 'max_delivery_count'),
      name: resource.field(self._.blocks, 'name'),
      requires_session: resource.field(self._.blocks, 'requires_session'),
      status: resource.field(self._.blocks, 'status'),
      topic_id: resource.field(self._.blocks, 'topic_id'),
    },
    servicebus_subscription_rule(name, block): {
      local resource = blockType.resource('azurerm_servicebus_subscription_rule', name),
      _: resource._(block, {
        action: build.template(std.get(block, 'action', null)),
        filter_type: build.template(block.filter_type),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        sql_filter: build.template(std.get(block, 'sql_filter', null)),
        sql_filter_compatibility_level: build.template(std.get(block, 'sql_filter_compatibility_level', null)),
        subscription_id: build.template(block.subscription_id),
      }),
      action: resource.field(self._.blocks, 'action'),
      filter_type: resource.field(self._.blocks, 'filter_type'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      sql_filter: resource.field(self._.blocks, 'sql_filter'),
      sql_filter_compatibility_level: resource.field(self._.blocks, 'sql_filter_compatibility_level'),
      subscription_id: resource.field(self._.blocks, 'subscription_id'),
    },
    servicebus_topic(name, block): {
      local resource = blockType.resource('azurerm_servicebus_topic', name),
      _: resource._(block, {
        auto_delete_on_idle: build.template(std.get(block, 'auto_delete_on_idle', null)),
        batched_operations_enabled: build.template(std.get(block, 'batched_operations_enabled', null)),
        default_message_ttl: build.template(std.get(block, 'default_message_ttl', null)),
        duplicate_detection_history_time_window: build.template(std.get(block, 'duplicate_detection_history_time_window', null)),
        express_enabled: build.template(std.get(block, 'express_enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        max_message_size_in_kilobytes: build.template(std.get(block, 'max_message_size_in_kilobytes', null)),
        max_size_in_megabytes: build.template(std.get(block, 'max_size_in_megabytes', null)),
        name: build.template(block.name),
        namespace_id: build.template(block.namespace_id),
        partitioning_enabled: build.template(std.get(block, 'partitioning_enabled', null)),
        requires_duplicate_detection: build.template(std.get(block, 'requires_duplicate_detection', null)),
        status: build.template(std.get(block, 'status', null)),
        support_ordering: build.template(std.get(block, 'support_ordering', null)),
      }),
      auto_delete_on_idle: resource.field(self._.blocks, 'auto_delete_on_idle'),
      batched_operations_enabled: resource.field(self._.blocks, 'batched_operations_enabled'),
      default_message_ttl: resource.field(self._.blocks, 'default_message_ttl'),
      duplicate_detection_history_time_window: resource.field(self._.blocks, 'duplicate_detection_history_time_window'),
      express_enabled: resource.field(self._.blocks, 'express_enabled'),
      id: resource.field(self._.blocks, 'id'),
      max_message_size_in_kilobytes: resource.field(self._.blocks, 'max_message_size_in_kilobytes'),
      max_size_in_megabytes: resource.field(self._.blocks, 'max_size_in_megabytes'),
      name: resource.field(self._.blocks, 'name'),
      namespace_id: resource.field(self._.blocks, 'namespace_id'),
      partitioning_enabled: resource.field(self._.blocks, 'partitioning_enabled'),
      requires_duplicate_detection: resource.field(self._.blocks, 'requires_duplicate_detection'),
      status: resource.field(self._.blocks, 'status'),
      support_ordering: resource.field(self._.blocks, 'support_ordering'),
    },
    servicebus_topic_authorization_rule(name, block): {
      local resource = blockType.resource('azurerm_servicebus_topic_authorization_rule', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        listen: build.template(std.get(block, 'listen', null)),
        manage: build.template(std.get(block, 'manage', null)),
        name: build.template(block.name),
        primary_connection_string: build.template(std.get(block, 'primary_connection_string', null)),
        primary_connection_string_alias: build.template(std.get(block, 'primary_connection_string_alias', null)),
        primary_key: build.template(std.get(block, 'primary_key', null)),
        secondary_connection_string: build.template(std.get(block, 'secondary_connection_string', null)),
        secondary_connection_string_alias: build.template(std.get(block, 'secondary_connection_string_alias', null)),
        secondary_key: build.template(std.get(block, 'secondary_key', null)),
        send: build.template(std.get(block, 'send', null)),
        topic_id: build.template(block.topic_id),
      }),
      id: resource.field(self._.blocks, 'id'),
      listen: resource.field(self._.blocks, 'listen'),
      manage: resource.field(self._.blocks, 'manage'),
      name: resource.field(self._.blocks, 'name'),
      primary_connection_string: resource.field(self._.blocks, 'primary_connection_string'),
      primary_connection_string_alias: resource.field(self._.blocks, 'primary_connection_string_alias'),
      primary_key: resource.field(self._.blocks, 'primary_key'),
      secondary_connection_string: resource.field(self._.blocks, 'secondary_connection_string'),
      secondary_connection_string_alias: resource.field(self._.blocks, 'secondary_connection_string_alias'),
      secondary_key: resource.field(self._.blocks, 'secondary_key'),
      send: resource.field(self._.blocks, 'send'),
      topic_id: resource.field(self._.blocks, 'topic_id'),
    },
    shared_image(name, block): {
      local resource = blockType.resource('azurerm_shared_image', name),
      _: resource._(block, {
        accelerated_network_support_enabled: build.template(std.get(block, 'accelerated_network_support_enabled', null)),
        architecture: build.template(std.get(block, 'architecture', null)),
        confidential_vm_enabled: build.template(std.get(block, 'confidential_vm_enabled', null)),
        confidential_vm_supported: build.template(std.get(block, 'confidential_vm_supported', null)),
        description: build.template(std.get(block, 'description', null)),
        disk_controller_type_nvme_enabled: build.template(std.get(block, 'disk_controller_type_nvme_enabled', null)),
        disk_types_not_allowed: build.template(std.get(block, 'disk_types_not_allowed', null)),
        end_of_life_date: build.template(std.get(block, 'end_of_life_date', null)),
        eula: build.template(std.get(block, 'eula', null)),
        gallery_name: build.template(block.gallery_name),
        hibernation_enabled: build.template(std.get(block, 'hibernation_enabled', null)),
        hyper_v_generation: build.template(std.get(block, 'hyper_v_generation', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        max_recommended_memory_in_gb: build.template(std.get(block, 'max_recommended_memory_in_gb', null)),
        max_recommended_vcpu_count: build.template(std.get(block, 'max_recommended_vcpu_count', null)),
        min_recommended_memory_in_gb: build.template(std.get(block, 'min_recommended_memory_in_gb', null)),
        min_recommended_vcpu_count: build.template(std.get(block, 'min_recommended_vcpu_count', null)),
        name: build.template(block.name),
        os_type: build.template(block.os_type),
        privacy_statement_uri: build.template(std.get(block, 'privacy_statement_uri', null)),
        release_note_uri: build.template(std.get(block, 'release_note_uri', null)),
        resource_group_name: build.template(block.resource_group_name),
        specialized: build.template(std.get(block, 'specialized', null)),
        tags: build.template(std.get(block, 'tags', null)),
        trusted_launch_enabled: build.template(std.get(block, 'trusted_launch_enabled', null)),
        trusted_launch_supported: build.template(std.get(block, 'trusted_launch_supported', null)),
      }),
      accelerated_network_support_enabled: resource.field(self._.blocks, 'accelerated_network_support_enabled'),
      architecture: resource.field(self._.blocks, 'architecture'),
      confidential_vm_enabled: resource.field(self._.blocks, 'confidential_vm_enabled'),
      confidential_vm_supported: resource.field(self._.blocks, 'confidential_vm_supported'),
      description: resource.field(self._.blocks, 'description'),
      disk_controller_type_nvme_enabled: resource.field(self._.blocks, 'disk_controller_type_nvme_enabled'),
      disk_types_not_allowed: resource.field(self._.blocks, 'disk_types_not_allowed'),
      end_of_life_date: resource.field(self._.blocks, 'end_of_life_date'),
      eula: resource.field(self._.blocks, 'eula'),
      gallery_name: resource.field(self._.blocks, 'gallery_name'),
      hibernation_enabled: resource.field(self._.blocks, 'hibernation_enabled'),
      hyper_v_generation: resource.field(self._.blocks, 'hyper_v_generation'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      max_recommended_memory_in_gb: resource.field(self._.blocks, 'max_recommended_memory_in_gb'),
      max_recommended_vcpu_count: resource.field(self._.blocks, 'max_recommended_vcpu_count'),
      min_recommended_memory_in_gb: resource.field(self._.blocks, 'min_recommended_memory_in_gb'),
      min_recommended_vcpu_count: resource.field(self._.blocks, 'min_recommended_vcpu_count'),
      name: resource.field(self._.blocks, 'name'),
      os_type: resource.field(self._.blocks, 'os_type'),
      privacy_statement_uri: resource.field(self._.blocks, 'privacy_statement_uri'),
      release_note_uri: resource.field(self._.blocks, 'release_note_uri'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      specialized: resource.field(self._.blocks, 'specialized'),
      tags: resource.field(self._.blocks, 'tags'),
      trusted_launch_enabled: resource.field(self._.blocks, 'trusted_launch_enabled'),
      trusted_launch_supported: resource.field(self._.blocks, 'trusted_launch_supported'),
    },
    shared_image_gallery(name, block): {
      local resource = blockType.resource('azurerm_shared_image_gallery', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
        unique_name: build.template(std.get(block, 'unique_name', null)),
      }),
      description: resource.field(self._.blocks, 'description'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
      unique_name: resource.field(self._.blocks, 'unique_name'),
    },
    shared_image_version(name, block): {
      local resource = blockType.resource('azurerm_shared_image_version', name),
      _: resource._(block, {
        blob_uri: build.template(std.get(block, 'blob_uri', null)),
        deletion_of_replicated_locations_enabled: build.template(std.get(block, 'deletion_of_replicated_locations_enabled', null)),
        end_of_life_date: build.template(std.get(block, 'end_of_life_date', null)),
        exclude_from_latest: build.template(std.get(block, 'exclude_from_latest', null)),
        gallery_name: build.template(block.gallery_name),
        id: build.template(std.get(block, 'id', null)),
        image_name: build.template(block.image_name),
        location: build.template(block.location),
        managed_image_id: build.template(std.get(block, 'managed_image_id', null)),
        name: build.template(block.name),
        os_disk_snapshot_id: build.template(std.get(block, 'os_disk_snapshot_id', null)),
        replication_mode: build.template(std.get(block, 'replication_mode', null)),
        resource_group_name: build.template(block.resource_group_name),
        storage_account_id: build.template(std.get(block, 'storage_account_id', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      blob_uri: resource.field(self._.blocks, 'blob_uri'),
      deletion_of_replicated_locations_enabled: resource.field(self._.blocks, 'deletion_of_replicated_locations_enabled'),
      end_of_life_date: resource.field(self._.blocks, 'end_of_life_date'),
      exclude_from_latest: resource.field(self._.blocks, 'exclude_from_latest'),
      gallery_name: resource.field(self._.blocks, 'gallery_name'),
      id: resource.field(self._.blocks, 'id'),
      image_name: resource.field(self._.blocks, 'image_name'),
      location: resource.field(self._.blocks, 'location'),
      managed_image_id: resource.field(self._.blocks, 'managed_image_id'),
      name: resource.field(self._.blocks, 'name'),
      os_disk_snapshot_id: resource.field(self._.blocks, 'os_disk_snapshot_id'),
      replication_mode: resource.field(self._.blocks, 'replication_mode'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      storage_account_id: resource.field(self._.blocks, 'storage_account_id'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    signalr_service(name, block): {
      local resource = blockType.resource('azurerm_signalr_service', name),
      _: resource._(block, {
        aad_auth_enabled: build.template(std.get(block, 'aad_auth_enabled', null)),
        connectivity_logs_enabled: build.template(std.get(block, 'connectivity_logs_enabled', null)),
        hostname: build.template(std.get(block, 'hostname', null)),
        http_request_logs_enabled: build.template(std.get(block, 'http_request_logs_enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        ip_address: build.template(std.get(block, 'ip_address', null)),
        live_trace_enabled: build.template(std.get(block, 'live_trace_enabled', null)),
        local_auth_enabled: build.template(std.get(block, 'local_auth_enabled', null)),
        location: build.template(block.location),
        messaging_logs_enabled: build.template(std.get(block, 'messaging_logs_enabled', null)),
        name: build.template(block.name),
        primary_access_key: build.template(std.get(block, 'primary_access_key', null)),
        primary_connection_string: build.template(std.get(block, 'primary_connection_string', null)),
        public_network_access_enabled: build.template(std.get(block, 'public_network_access_enabled', null)),
        public_port: build.template(std.get(block, 'public_port', null)),
        resource_group_name: build.template(block.resource_group_name),
        secondary_access_key: build.template(std.get(block, 'secondary_access_key', null)),
        secondary_connection_string: build.template(std.get(block, 'secondary_connection_string', null)),
        server_port: build.template(std.get(block, 'server_port', null)),
        serverless_connection_timeout_in_seconds: build.template(std.get(block, 'serverless_connection_timeout_in_seconds', null)),
        service_mode: build.template(std.get(block, 'service_mode', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tls_client_cert_enabled: build.template(std.get(block, 'tls_client_cert_enabled', null)),
      }),
      aad_auth_enabled: resource.field(self._.blocks, 'aad_auth_enabled'),
      connectivity_logs_enabled: resource.field(self._.blocks, 'connectivity_logs_enabled'),
      hostname: resource.field(self._.blocks, 'hostname'),
      http_request_logs_enabled: resource.field(self._.blocks, 'http_request_logs_enabled'),
      id: resource.field(self._.blocks, 'id'),
      ip_address: resource.field(self._.blocks, 'ip_address'),
      live_trace_enabled: resource.field(self._.blocks, 'live_trace_enabled'),
      local_auth_enabled: resource.field(self._.blocks, 'local_auth_enabled'),
      location: resource.field(self._.blocks, 'location'),
      messaging_logs_enabled: resource.field(self._.blocks, 'messaging_logs_enabled'),
      name: resource.field(self._.blocks, 'name'),
      primary_access_key: resource.field(self._.blocks, 'primary_access_key'),
      primary_connection_string: resource.field(self._.blocks, 'primary_connection_string'),
      public_network_access_enabled: resource.field(self._.blocks, 'public_network_access_enabled'),
      public_port: resource.field(self._.blocks, 'public_port'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      secondary_access_key: resource.field(self._.blocks, 'secondary_access_key'),
      secondary_connection_string: resource.field(self._.blocks, 'secondary_connection_string'),
      server_port: resource.field(self._.blocks, 'server_port'),
      serverless_connection_timeout_in_seconds: resource.field(self._.blocks, 'serverless_connection_timeout_in_seconds'),
      service_mode: resource.field(self._.blocks, 'service_mode'),
      tags: resource.field(self._.blocks, 'tags'),
      tls_client_cert_enabled: resource.field(self._.blocks, 'tls_client_cert_enabled'),
    },
    signalr_service_custom_certificate(name, block): {
      local resource = blockType.resource('azurerm_signalr_service_custom_certificate', name),
      _: resource._(block, {
        certificate_version: build.template(std.get(block, 'certificate_version', null)),
        custom_certificate_id: build.template(block.custom_certificate_id),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        signalr_service_id: build.template(block.signalr_service_id),
      }),
      certificate_version: resource.field(self._.blocks, 'certificate_version'),
      custom_certificate_id: resource.field(self._.blocks, 'custom_certificate_id'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      signalr_service_id: resource.field(self._.blocks, 'signalr_service_id'),
    },
    signalr_service_custom_domain(name, block): {
      local resource = blockType.resource('azurerm_signalr_service_custom_domain', name),
      _: resource._(block, {
        domain_name: build.template(block.domain_name),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        signalr_custom_certificate_id: build.template(block.signalr_custom_certificate_id),
        signalr_service_id: build.template(block.signalr_service_id),
      }),
      domain_name: resource.field(self._.blocks, 'domain_name'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      signalr_custom_certificate_id: resource.field(self._.blocks, 'signalr_custom_certificate_id'),
      signalr_service_id: resource.field(self._.blocks, 'signalr_service_id'),
    },
    signalr_service_network_acl(name, block): {
      local resource = blockType.resource('azurerm_signalr_service_network_acl', name),
      _: resource._(block, {
        default_action: build.template(block.default_action),
        id: build.template(std.get(block, 'id', null)),
        signalr_service_id: build.template(block.signalr_service_id),
      }),
      default_action: resource.field(self._.blocks, 'default_action'),
      id: resource.field(self._.blocks, 'id'),
      signalr_service_id: resource.field(self._.blocks, 'signalr_service_id'),
    },
    signalr_shared_private_link_resource(name, block): {
      local resource = blockType.resource('azurerm_signalr_shared_private_link_resource', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        request_message: build.template(std.get(block, 'request_message', null)),
        signalr_service_id: build.template(block.signalr_service_id),
        status: build.template(std.get(block, 'status', null)),
        sub_resource_name: build.template(block.sub_resource_name),
        target_resource_id: build.template(block.target_resource_id),
      }),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      request_message: resource.field(self._.blocks, 'request_message'),
      signalr_service_id: resource.field(self._.blocks, 'signalr_service_id'),
      status: resource.field(self._.blocks, 'status'),
      sub_resource_name: resource.field(self._.blocks, 'sub_resource_name'),
      target_resource_id: resource.field(self._.blocks, 'target_resource_id'),
    },
    site_recovery_fabric(name, block): {
      local resource = blockType.resource('azurerm_site_recovery_fabric', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        recovery_vault_name: build.template(block.recovery_vault_name),
        resource_group_name: build.template(block.resource_group_name),
      }),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      recovery_vault_name: resource.field(self._.blocks, 'recovery_vault_name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
    },
    site_recovery_hyperv_network_mapping(name, block): {
      local resource = blockType.resource('azurerm_site_recovery_hyperv_network_mapping', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        recovery_vault_id: build.template(block.recovery_vault_id),
        source_network_name: build.template(block.source_network_name),
        source_system_center_virtual_machine_manager_name: build.template(block.source_system_center_virtual_machine_manager_name),
        target_network_id: build.template(block.target_network_id),
      }),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      recovery_vault_id: resource.field(self._.blocks, 'recovery_vault_id'),
      source_network_name: resource.field(self._.blocks, 'source_network_name'),
      source_system_center_virtual_machine_manager_name: resource.field(self._.blocks, 'source_system_center_virtual_machine_manager_name'),
      target_network_id: resource.field(self._.blocks, 'target_network_id'),
    },
    site_recovery_hyperv_replication_policy(name, block): {
      local resource = blockType.resource('azurerm_site_recovery_hyperv_replication_policy', name),
      _: resource._(block, {
        application_consistent_snapshot_frequency_in_hours: build.template(block.application_consistent_snapshot_frequency_in_hours),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        recovery_point_retention_in_hours: build.template(block.recovery_point_retention_in_hours),
        recovery_vault_id: build.template(block.recovery_vault_id),
        replication_interval_in_seconds: build.template(block.replication_interval_in_seconds),
      }),
      application_consistent_snapshot_frequency_in_hours: resource.field(self._.blocks, 'application_consistent_snapshot_frequency_in_hours'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      recovery_point_retention_in_hours: resource.field(self._.blocks, 'recovery_point_retention_in_hours'),
      recovery_vault_id: resource.field(self._.blocks, 'recovery_vault_id'),
      replication_interval_in_seconds: resource.field(self._.blocks, 'replication_interval_in_seconds'),
    },
    site_recovery_hyperv_replication_policy_association(name, block): {
      local resource = blockType.resource('azurerm_site_recovery_hyperv_replication_policy_association', name),
      _: resource._(block, {
        hyperv_site_id: build.template(block.hyperv_site_id),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        policy_id: build.template(block.policy_id),
      }),
      hyperv_site_id: resource.field(self._.blocks, 'hyperv_site_id'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      policy_id: resource.field(self._.blocks, 'policy_id'),
    },
    site_recovery_network_mapping(name, block): {
      local resource = blockType.resource('azurerm_site_recovery_network_mapping', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        recovery_vault_name: build.template(block.recovery_vault_name),
        resource_group_name: build.template(block.resource_group_name),
        source_network_id: build.template(block.source_network_id),
        source_recovery_fabric_name: build.template(block.source_recovery_fabric_name),
        target_network_id: build.template(block.target_network_id),
        target_recovery_fabric_name: build.template(block.target_recovery_fabric_name),
      }),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      recovery_vault_name: resource.field(self._.blocks, 'recovery_vault_name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      source_network_id: resource.field(self._.blocks, 'source_network_id'),
      source_recovery_fabric_name: resource.field(self._.blocks, 'source_recovery_fabric_name'),
      target_network_id: resource.field(self._.blocks, 'target_network_id'),
      target_recovery_fabric_name: resource.field(self._.blocks, 'target_recovery_fabric_name'),
    },
    site_recovery_protection_container(name, block): {
      local resource = blockType.resource('azurerm_site_recovery_protection_container', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        recovery_fabric_name: build.template(block.recovery_fabric_name),
        recovery_vault_name: build.template(block.recovery_vault_name),
        resource_group_name: build.template(block.resource_group_name),
      }),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      recovery_fabric_name: resource.field(self._.blocks, 'recovery_fabric_name'),
      recovery_vault_name: resource.field(self._.blocks, 'recovery_vault_name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
    },
    site_recovery_protection_container_mapping(name, block): {
      local resource = blockType.resource('azurerm_site_recovery_protection_container_mapping', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        recovery_fabric_name: build.template(block.recovery_fabric_name),
        recovery_replication_policy_id: build.template(block.recovery_replication_policy_id),
        recovery_source_protection_container_name: build.template(block.recovery_source_protection_container_name),
        recovery_target_protection_container_id: build.template(block.recovery_target_protection_container_id),
        recovery_vault_name: build.template(block.recovery_vault_name),
        resource_group_name: build.template(block.resource_group_name),
      }),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      recovery_fabric_name: resource.field(self._.blocks, 'recovery_fabric_name'),
      recovery_replication_policy_id: resource.field(self._.blocks, 'recovery_replication_policy_id'),
      recovery_source_protection_container_name: resource.field(self._.blocks, 'recovery_source_protection_container_name'),
      recovery_target_protection_container_id: resource.field(self._.blocks, 'recovery_target_protection_container_id'),
      recovery_vault_name: resource.field(self._.blocks, 'recovery_vault_name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
    },
    site_recovery_replicated_vm(name, block): {
      local resource = blockType.resource('azurerm_site_recovery_replicated_vm', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        managed_disk: build.template(std.get(block, 'managed_disk', null)),
        multi_vm_group_name: build.template(std.get(block, 'multi_vm_group_name', null)),
        name: build.template(block.name),
        network_interface: build.template(std.get(block, 'network_interface', null)),
        recovery_replication_policy_id: build.template(block.recovery_replication_policy_id),
        recovery_vault_name: build.template(block.recovery_vault_name),
        resource_group_name: build.template(block.resource_group_name),
        source_recovery_fabric_name: build.template(block.source_recovery_fabric_name),
        source_recovery_protection_container_name: build.template(block.source_recovery_protection_container_name),
        source_vm_id: build.template(block.source_vm_id),
        target_availability_set_id: build.template(std.get(block, 'target_availability_set_id', null)),
        target_boot_diagnostic_storage_account_id: build.template(std.get(block, 'target_boot_diagnostic_storage_account_id', null)),
        target_capacity_reservation_group_id: build.template(std.get(block, 'target_capacity_reservation_group_id', null)),
        target_edge_zone: build.template(std.get(block, 'target_edge_zone', null)),
        target_network_id: build.template(std.get(block, 'target_network_id', null)),
        target_proximity_placement_group_id: build.template(std.get(block, 'target_proximity_placement_group_id', null)),
        target_recovery_fabric_id: build.template(block.target_recovery_fabric_id),
        target_recovery_protection_container_id: build.template(block.target_recovery_protection_container_id),
        target_resource_group_id: build.template(block.target_resource_group_id),
        target_virtual_machine_scale_set_id: build.template(std.get(block, 'target_virtual_machine_scale_set_id', null)),
        target_virtual_machine_size: build.template(std.get(block, 'target_virtual_machine_size', null)),
        target_zone: build.template(std.get(block, 'target_zone', null)),
        test_network_id: build.template(std.get(block, 'test_network_id', null)),
        unmanaged_disk: build.template(std.get(block, 'unmanaged_disk', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      managed_disk: resource.field(self._.blocks, 'managed_disk'),
      multi_vm_group_name: resource.field(self._.blocks, 'multi_vm_group_name'),
      name: resource.field(self._.blocks, 'name'),
      network_interface: resource.field(self._.blocks, 'network_interface'),
      recovery_replication_policy_id: resource.field(self._.blocks, 'recovery_replication_policy_id'),
      recovery_vault_name: resource.field(self._.blocks, 'recovery_vault_name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      source_recovery_fabric_name: resource.field(self._.blocks, 'source_recovery_fabric_name'),
      source_recovery_protection_container_name: resource.field(self._.blocks, 'source_recovery_protection_container_name'),
      source_vm_id: resource.field(self._.blocks, 'source_vm_id'),
      target_availability_set_id: resource.field(self._.blocks, 'target_availability_set_id'),
      target_boot_diagnostic_storage_account_id: resource.field(self._.blocks, 'target_boot_diagnostic_storage_account_id'),
      target_capacity_reservation_group_id: resource.field(self._.blocks, 'target_capacity_reservation_group_id'),
      target_edge_zone: resource.field(self._.blocks, 'target_edge_zone'),
      target_network_id: resource.field(self._.blocks, 'target_network_id'),
      target_proximity_placement_group_id: resource.field(self._.blocks, 'target_proximity_placement_group_id'),
      target_recovery_fabric_id: resource.field(self._.blocks, 'target_recovery_fabric_id'),
      target_recovery_protection_container_id: resource.field(self._.blocks, 'target_recovery_protection_container_id'),
      target_resource_group_id: resource.field(self._.blocks, 'target_resource_group_id'),
      target_virtual_machine_scale_set_id: resource.field(self._.blocks, 'target_virtual_machine_scale_set_id'),
      target_virtual_machine_size: resource.field(self._.blocks, 'target_virtual_machine_size'),
      target_zone: resource.field(self._.blocks, 'target_zone'),
      test_network_id: resource.field(self._.blocks, 'test_network_id'),
      unmanaged_disk: resource.field(self._.blocks, 'unmanaged_disk'),
    },
    site_recovery_replication_policy(name, block): {
      local resource = blockType.resource('azurerm_site_recovery_replication_policy', name),
      _: resource._(block, {
        application_consistent_snapshot_frequency_in_minutes: build.template(block.application_consistent_snapshot_frequency_in_minutes),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        recovery_point_retention_in_minutes: build.template(block.recovery_point_retention_in_minutes),
        recovery_vault_name: build.template(block.recovery_vault_name),
        resource_group_name: build.template(block.resource_group_name),
      }),
      application_consistent_snapshot_frequency_in_minutes: resource.field(self._.blocks, 'application_consistent_snapshot_frequency_in_minutes'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      recovery_point_retention_in_minutes: resource.field(self._.blocks, 'recovery_point_retention_in_minutes'),
      recovery_vault_name: resource.field(self._.blocks, 'recovery_vault_name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
    },
    site_recovery_replication_recovery_plan(name, block): {
      local resource = blockType.resource('azurerm_site_recovery_replication_recovery_plan', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        recovery_vault_id: build.template(block.recovery_vault_id),
        source_recovery_fabric_id: build.template(block.source_recovery_fabric_id),
        target_recovery_fabric_id: build.template(block.target_recovery_fabric_id),
      }),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      recovery_vault_id: resource.field(self._.blocks, 'recovery_vault_id'),
      source_recovery_fabric_id: resource.field(self._.blocks, 'source_recovery_fabric_id'),
      target_recovery_fabric_id: resource.field(self._.blocks, 'target_recovery_fabric_id'),
    },
    site_recovery_services_vault_hyperv_site(name, block): {
      local resource = blockType.resource('azurerm_site_recovery_services_vault_hyperv_site', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        recovery_vault_id: build.template(block.recovery_vault_id),
      }),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      recovery_vault_id: resource.field(self._.blocks, 'recovery_vault_id'),
    },
    site_recovery_vmware_replicated_vm(name, block): {
      local resource = blockType.resource('azurerm_site_recovery_vmware_replicated_vm', name),
      _: resource._(block, {
        appliance_name: build.template(block.appliance_name),
        default_log_storage_account_id: build.template(std.get(block, 'default_log_storage_account_id', null)),
        default_recovery_disk_type: build.template(std.get(block, 'default_recovery_disk_type', null)),
        default_target_disk_encryption_set_id: build.template(std.get(block, 'default_target_disk_encryption_set_id', null)),
        id: build.template(std.get(block, 'id', null)),
        license_type: build.template(std.get(block, 'license_type', null)),
        multi_vm_group_name: build.template(std.get(block, 'multi_vm_group_name', null)),
        name: build.template(block.name),
        physical_server_credential_name: build.template(block.physical_server_credential_name),
        recovery_replication_policy_id: build.template(block.recovery_replication_policy_id),
        recovery_vault_id: build.template(block.recovery_vault_id),
        source_vm_name: build.template(block.source_vm_name),
        target_availability_set_id: build.template(std.get(block, 'target_availability_set_id', null)),
        target_boot_diagnostics_storage_account_id: build.template(std.get(block, 'target_boot_diagnostics_storage_account_id', null)),
        target_network_id: build.template(std.get(block, 'target_network_id', null)),
        target_proximity_placement_group_id: build.template(std.get(block, 'target_proximity_placement_group_id', null)),
        target_resource_group_id: build.template(block.target_resource_group_id),
        target_vm_name: build.template(block.target_vm_name),
        target_vm_size: build.template(std.get(block, 'target_vm_size', null)),
        target_zone: build.template(std.get(block, 'target_zone', null)),
        test_network_id: build.template(std.get(block, 'test_network_id', null)),
      }),
      appliance_name: resource.field(self._.blocks, 'appliance_name'),
      default_log_storage_account_id: resource.field(self._.blocks, 'default_log_storage_account_id'),
      default_recovery_disk_type: resource.field(self._.blocks, 'default_recovery_disk_type'),
      default_target_disk_encryption_set_id: resource.field(self._.blocks, 'default_target_disk_encryption_set_id'),
      id: resource.field(self._.blocks, 'id'),
      license_type: resource.field(self._.blocks, 'license_type'),
      multi_vm_group_name: resource.field(self._.blocks, 'multi_vm_group_name'),
      name: resource.field(self._.blocks, 'name'),
      physical_server_credential_name: resource.field(self._.blocks, 'physical_server_credential_name'),
      recovery_replication_policy_id: resource.field(self._.blocks, 'recovery_replication_policy_id'),
      recovery_vault_id: resource.field(self._.blocks, 'recovery_vault_id'),
      source_vm_name: resource.field(self._.blocks, 'source_vm_name'),
      target_availability_set_id: resource.field(self._.blocks, 'target_availability_set_id'),
      target_boot_diagnostics_storage_account_id: resource.field(self._.blocks, 'target_boot_diagnostics_storage_account_id'),
      target_network_id: resource.field(self._.blocks, 'target_network_id'),
      target_proximity_placement_group_id: resource.field(self._.blocks, 'target_proximity_placement_group_id'),
      target_resource_group_id: resource.field(self._.blocks, 'target_resource_group_id'),
      target_vm_name: resource.field(self._.blocks, 'target_vm_name'),
      target_vm_size: resource.field(self._.blocks, 'target_vm_size'),
      target_zone: resource.field(self._.blocks, 'target_zone'),
      test_network_id: resource.field(self._.blocks, 'test_network_id'),
    },
    site_recovery_vmware_replication_policy(name, block): {
      local resource = blockType.resource('azurerm_site_recovery_vmware_replication_policy', name),
      _: resource._(block, {
        application_consistent_snapshot_frequency_in_minutes: build.template(block.application_consistent_snapshot_frequency_in_minutes),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        recovery_point_retention_in_minutes: build.template(block.recovery_point_retention_in_minutes),
        recovery_vault_id: build.template(block.recovery_vault_id),
      }),
      application_consistent_snapshot_frequency_in_minutes: resource.field(self._.blocks, 'application_consistent_snapshot_frequency_in_minutes'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      recovery_point_retention_in_minutes: resource.field(self._.blocks, 'recovery_point_retention_in_minutes'),
      recovery_vault_id: resource.field(self._.blocks, 'recovery_vault_id'),
    },
    site_recovery_vmware_replication_policy_association(name, block): {
      local resource = blockType.resource('azurerm_site_recovery_vmware_replication_policy_association', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        policy_id: build.template(block.policy_id),
        recovery_vault_id: build.template(block.recovery_vault_id),
      }),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      policy_id: resource.field(self._.blocks, 'policy_id'),
      recovery_vault_id: resource.field(self._.blocks, 'recovery_vault_id'),
    },
    snapshot(name, block): {
      local resource = blockType.resource('azurerm_snapshot', name),
      _: resource._(block, {
        create_option: build.template(block.create_option),
        disk_access_id: build.template(std.get(block, 'disk_access_id', null)),
        disk_size_gb: build.template(std.get(block, 'disk_size_gb', null)),
        id: build.template(std.get(block, 'id', null)),
        incremental_enabled: build.template(std.get(block, 'incremental_enabled', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        network_access_policy: build.template(std.get(block, 'network_access_policy', null)),
        public_network_access_enabled: build.template(std.get(block, 'public_network_access_enabled', null)),
        resource_group_name: build.template(block.resource_group_name),
        source_resource_id: build.template(std.get(block, 'source_resource_id', null)),
        source_uri: build.template(std.get(block, 'source_uri', null)),
        storage_account_id: build.template(std.get(block, 'storage_account_id', null)),
        tags: build.template(std.get(block, 'tags', null)),
        trusted_launch_enabled: build.template(std.get(block, 'trusted_launch_enabled', null)),
      }),
      create_option: resource.field(self._.blocks, 'create_option'),
      disk_access_id: resource.field(self._.blocks, 'disk_access_id'),
      disk_size_gb: resource.field(self._.blocks, 'disk_size_gb'),
      id: resource.field(self._.blocks, 'id'),
      incremental_enabled: resource.field(self._.blocks, 'incremental_enabled'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      network_access_policy: resource.field(self._.blocks, 'network_access_policy'),
      public_network_access_enabled: resource.field(self._.blocks, 'public_network_access_enabled'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      source_resource_id: resource.field(self._.blocks, 'source_resource_id'),
      source_uri: resource.field(self._.blocks, 'source_uri'),
      storage_account_id: resource.field(self._.blocks, 'storage_account_id'),
      tags: resource.field(self._.blocks, 'tags'),
      trusted_launch_enabled: resource.field(self._.blocks, 'trusted_launch_enabled'),
    },
    source_control_token(name, block): {
      local resource = blockType.resource('azurerm_source_control_token', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        token: build.template(block.token),
        token_secret: build.template(std.get(block, 'token_secret', null)),
        type: build.template(block.type),
      }),
      id: resource.field(self._.blocks, 'id'),
      token: resource.field(self._.blocks, 'token'),
      token_secret: resource.field(self._.blocks, 'token_secret'),
      type: resource.field(self._.blocks, 'type'),
    },
    spatial_anchors_account(name, block): {
      local resource = blockType.resource('azurerm_spatial_anchors_account', name),
      _: resource._(block, {
        account_domain: build.template(std.get(block, 'account_domain', null)),
        account_id: build.template(std.get(block, 'account_id', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      account_domain: resource.field(self._.blocks, 'account_domain'),
      account_id: resource.field(self._.blocks, 'account_id'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    spring_cloud_accelerator(name, block): {
      local resource = blockType.resource('azurerm_spring_cloud_accelerator', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        spring_cloud_service_id: build.template(block.spring_cloud_service_id),
      }),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      spring_cloud_service_id: resource.field(self._.blocks, 'spring_cloud_service_id'),
    },
    spring_cloud_active_deployment(name, block): {
      local resource = blockType.resource('azurerm_spring_cloud_active_deployment', name),
      _: resource._(block, {
        deployment_name: build.template(block.deployment_name),
        id: build.template(std.get(block, 'id', null)),
        spring_cloud_app_id: build.template(block.spring_cloud_app_id),
      }),
      deployment_name: resource.field(self._.blocks, 'deployment_name'),
      id: resource.field(self._.blocks, 'id'),
      spring_cloud_app_id: resource.field(self._.blocks, 'spring_cloud_app_id'),
    },
    spring_cloud_api_portal(name, block): {
      local resource = blockType.resource('azurerm_spring_cloud_api_portal', name),
      _: resource._(block, {
        api_try_out_enabled: build.template(std.get(block, 'api_try_out_enabled', null)),
        gateway_ids: build.template(std.get(block, 'gateway_ids', null)),
        https_only_enabled: build.template(std.get(block, 'https_only_enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        instance_count: build.template(std.get(block, 'instance_count', null)),
        name: build.template(block.name),
        public_network_access_enabled: build.template(std.get(block, 'public_network_access_enabled', null)),
        spring_cloud_service_id: build.template(block.spring_cloud_service_id),
        url: build.template(std.get(block, 'url', null)),
      }),
      api_try_out_enabled: resource.field(self._.blocks, 'api_try_out_enabled'),
      gateway_ids: resource.field(self._.blocks, 'gateway_ids'),
      https_only_enabled: resource.field(self._.blocks, 'https_only_enabled'),
      id: resource.field(self._.blocks, 'id'),
      instance_count: resource.field(self._.blocks, 'instance_count'),
      name: resource.field(self._.blocks, 'name'),
      public_network_access_enabled: resource.field(self._.blocks, 'public_network_access_enabled'),
      spring_cloud_service_id: resource.field(self._.blocks, 'spring_cloud_service_id'),
      url: resource.field(self._.blocks, 'url'),
    },
    spring_cloud_api_portal_custom_domain(name, block): {
      local resource = blockType.resource('azurerm_spring_cloud_api_portal_custom_domain', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        spring_cloud_api_portal_id: build.template(block.spring_cloud_api_portal_id),
        thumbprint: build.template(std.get(block, 'thumbprint', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      spring_cloud_api_portal_id: resource.field(self._.blocks, 'spring_cloud_api_portal_id'),
      thumbprint: resource.field(self._.blocks, 'thumbprint'),
    },
    spring_cloud_app(name, block): {
      local resource = blockType.resource('azurerm_spring_cloud_app', name),
      _: resource._(block, {
        addon_json: build.template(std.get(block, 'addon_json', null)),
        fqdn: build.template(std.get(block, 'fqdn', null)),
        https_only: build.template(std.get(block, 'https_only', null)),
        id: build.template(std.get(block, 'id', null)),
        is_public: build.template(std.get(block, 'is_public', null)),
        name: build.template(block.name),
        public_endpoint_enabled: build.template(std.get(block, 'public_endpoint_enabled', null)),
        resource_group_name: build.template(block.resource_group_name),
        service_name: build.template(block.service_name),
        tls_enabled: build.template(std.get(block, 'tls_enabled', null)),
        url: build.template(std.get(block, 'url', null)),
      }),
      addon_json: resource.field(self._.blocks, 'addon_json'),
      fqdn: resource.field(self._.blocks, 'fqdn'),
      https_only: resource.field(self._.blocks, 'https_only'),
      id: resource.field(self._.blocks, 'id'),
      is_public: resource.field(self._.blocks, 'is_public'),
      name: resource.field(self._.blocks, 'name'),
      public_endpoint_enabled: resource.field(self._.blocks, 'public_endpoint_enabled'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      service_name: resource.field(self._.blocks, 'service_name'),
      tls_enabled: resource.field(self._.blocks, 'tls_enabled'),
      url: resource.field(self._.blocks, 'url'),
    },
    spring_cloud_app_cosmosdb_association(name, block): {
      local resource = blockType.resource('azurerm_spring_cloud_app_cosmosdb_association', name),
      _: resource._(block, {
        api_type: build.template(block.api_type),
        cosmosdb_access_key: build.template(block.cosmosdb_access_key),
        cosmosdb_account_id: build.template(block.cosmosdb_account_id),
        cosmosdb_cassandra_keyspace_name: build.template(std.get(block, 'cosmosdb_cassandra_keyspace_name', null)),
        cosmosdb_gremlin_database_name: build.template(std.get(block, 'cosmosdb_gremlin_database_name', null)),
        cosmosdb_gremlin_graph_name: build.template(std.get(block, 'cosmosdb_gremlin_graph_name', null)),
        cosmosdb_mongo_database_name: build.template(std.get(block, 'cosmosdb_mongo_database_name', null)),
        cosmosdb_sql_database_name: build.template(std.get(block, 'cosmosdb_sql_database_name', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        spring_cloud_app_id: build.template(block.spring_cloud_app_id),
      }),
      api_type: resource.field(self._.blocks, 'api_type'),
      cosmosdb_access_key: resource.field(self._.blocks, 'cosmosdb_access_key'),
      cosmosdb_account_id: resource.field(self._.blocks, 'cosmosdb_account_id'),
      cosmosdb_cassandra_keyspace_name: resource.field(self._.blocks, 'cosmosdb_cassandra_keyspace_name'),
      cosmosdb_gremlin_database_name: resource.field(self._.blocks, 'cosmosdb_gremlin_database_name'),
      cosmosdb_gremlin_graph_name: resource.field(self._.blocks, 'cosmosdb_gremlin_graph_name'),
      cosmosdb_mongo_database_name: resource.field(self._.blocks, 'cosmosdb_mongo_database_name'),
      cosmosdb_sql_database_name: resource.field(self._.blocks, 'cosmosdb_sql_database_name'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      spring_cloud_app_id: resource.field(self._.blocks, 'spring_cloud_app_id'),
    },
    spring_cloud_app_dynamics_application_performance_monitoring(name, block): {
      local resource = blockType.resource('azurerm_spring_cloud_app_dynamics_application_performance_monitoring', name),
      _: resource._(block, {
        agent_account_access_key: build.template(block.agent_account_access_key),
        agent_account_name: build.template(block.agent_account_name),
        agent_application_name: build.template(std.get(block, 'agent_application_name', null)),
        agent_node_name: build.template(std.get(block, 'agent_node_name', null)),
        agent_tier_name: build.template(std.get(block, 'agent_tier_name', null)),
        agent_unique_host_id: build.template(std.get(block, 'agent_unique_host_id', null)),
        controller_host_name: build.template(block.controller_host_name),
        controller_port: build.template(std.get(block, 'controller_port', null)),
        controller_ssl_enabled: build.template(std.get(block, 'controller_ssl_enabled', null)),
        globally_enabled: build.template(std.get(block, 'globally_enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        spring_cloud_service_id: build.template(block.spring_cloud_service_id),
      }),
      agent_account_access_key: resource.field(self._.blocks, 'agent_account_access_key'),
      agent_account_name: resource.field(self._.blocks, 'agent_account_name'),
      agent_application_name: resource.field(self._.blocks, 'agent_application_name'),
      agent_node_name: resource.field(self._.blocks, 'agent_node_name'),
      agent_tier_name: resource.field(self._.blocks, 'agent_tier_name'),
      agent_unique_host_id: resource.field(self._.blocks, 'agent_unique_host_id'),
      controller_host_name: resource.field(self._.blocks, 'controller_host_name'),
      controller_port: resource.field(self._.blocks, 'controller_port'),
      controller_ssl_enabled: resource.field(self._.blocks, 'controller_ssl_enabled'),
      globally_enabled: resource.field(self._.blocks, 'globally_enabled'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      spring_cloud_service_id: resource.field(self._.blocks, 'spring_cloud_service_id'),
    },
    spring_cloud_app_mysql_association(name, block): {
      local resource = blockType.resource('azurerm_spring_cloud_app_mysql_association', name),
      _: resource._(block, {
        database_name: build.template(block.database_name),
        id: build.template(std.get(block, 'id', null)),
        mysql_server_id: build.template(block.mysql_server_id),
        name: build.template(block.name),
        password: build.template(block.password),
        spring_cloud_app_id: build.template(block.spring_cloud_app_id),
        username: build.template(block.username),
      }),
      database_name: resource.field(self._.blocks, 'database_name'),
      id: resource.field(self._.blocks, 'id'),
      mysql_server_id: resource.field(self._.blocks, 'mysql_server_id'),
      name: resource.field(self._.blocks, 'name'),
      password: resource.field(self._.blocks, 'password'),
      spring_cloud_app_id: resource.field(self._.blocks, 'spring_cloud_app_id'),
      username: resource.field(self._.blocks, 'username'),
    },
    spring_cloud_app_redis_association(name, block): {
      local resource = blockType.resource('azurerm_spring_cloud_app_redis_association', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        redis_access_key: build.template(block.redis_access_key),
        redis_cache_id: build.template(block.redis_cache_id),
        spring_cloud_app_id: build.template(block.spring_cloud_app_id),
        ssl_enabled: build.template(std.get(block, 'ssl_enabled', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      redis_access_key: resource.field(self._.blocks, 'redis_access_key'),
      redis_cache_id: resource.field(self._.blocks, 'redis_cache_id'),
      spring_cloud_app_id: resource.field(self._.blocks, 'spring_cloud_app_id'),
      ssl_enabled: resource.field(self._.blocks, 'ssl_enabled'),
    },
    spring_cloud_application_insights_application_performance_monitoring(name, block): {
      local resource = blockType.resource('azurerm_spring_cloud_application_insights_application_performance_monitoring', name),
      _: resource._(block, {
        connection_string: build.template(std.get(block, 'connection_string', null)),
        globally_enabled: build.template(std.get(block, 'globally_enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        role_instance: build.template(std.get(block, 'role_instance', null)),
        role_name: build.template(std.get(block, 'role_name', null)),
        sampling_percentage: build.template(std.get(block, 'sampling_percentage', null)),
        sampling_requests_per_second: build.template(std.get(block, 'sampling_requests_per_second', null)),
        spring_cloud_service_id: build.template(block.spring_cloud_service_id),
      }),
      connection_string: resource.field(self._.blocks, 'connection_string'),
      globally_enabled: resource.field(self._.blocks, 'globally_enabled'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      role_instance: resource.field(self._.blocks, 'role_instance'),
      role_name: resource.field(self._.blocks, 'role_name'),
      sampling_percentage: resource.field(self._.blocks, 'sampling_percentage'),
      sampling_requests_per_second: resource.field(self._.blocks, 'sampling_requests_per_second'),
      spring_cloud_service_id: resource.field(self._.blocks, 'spring_cloud_service_id'),
    },
    spring_cloud_application_live_view(name, block): {
      local resource = blockType.resource('azurerm_spring_cloud_application_live_view', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        spring_cloud_service_id: build.template(block.spring_cloud_service_id),
      }),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      spring_cloud_service_id: resource.field(self._.blocks, 'spring_cloud_service_id'),
    },
    spring_cloud_build_deployment(name, block): {
      local resource = blockType.resource('azurerm_spring_cloud_build_deployment', name),
      _: resource._(block, {
        addon_json: build.template(std.get(block, 'addon_json', null)),
        application_performance_monitoring_ids: build.template(std.get(block, 'application_performance_monitoring_ids', null)),
        build_result_id: build.template(block.build_result_id),
        environment_variables: build.template(std.get(block, 'environment_variables', null)),
        id: build.template(std.get(block, 'id', null)),
        instance_count: build.template(std.get(block, 'instance_count', null)),
        name: build.template(block.name),
        spring_cloud_app_id: build.template(block.spring_cloud_app_id),
      }),
      addon_json: resource.field(self._.blocks, 'addon_json'),
      application_performance_monitoring_ids: resource.field(self._.blocks, 'application_performance_monitoring_ids'),
      build_result_id: resource.field(self._.blocks, 'build_result_id'),
      environment_variables: resource.field(self._.blocks, 'environment_variables'),
      id: resource.field(self._.blocks, 'id'),
      instance_count: resource.field(self._.blocks, 'instance_count'),
      name: resource.field(self._.blocks, 'name'),
      spring_cloud_app_id: resource.field(self._.blocks, 'spring_cloud_app_id'),
    },
    spring_cloud_build_pack_binding(name, block): {
      local resource = blockType.resource('azurerm_spring_cloud_build_pack_binding', name),
      _: resource._(block, {
        binding_type: build.template(std.get(block, 'binding_type', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        spring_cloud_builder_id: build.template(block.spring_cloud_builder_id),
      }),
      binding_type: resource.field(self._.blocks, 'binding_type'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      spring_cloud_builder_id: resource.field(self._.blocks, 'spring_cloud_builder_id'),
    },
    spring_cloud_builder(name, block): {
      local resource = blockType.resource('azurerm_spring_cloud_builder', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        spring_cloud_service_id: build.template(block.spring_cloud_service_id),
      }),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      spring_cloud_service_id: resource.field(self._.blocks, 'spring_cloud_service_id'),
    },
    spring_cloud_certificate(name, block): {
      local resource = blockType.resource('azurerm_spring_cloud_certificate', name),
      _: resource._(block, {
        certificate_content: build.template(std.get(block, 'certificate_content', null)),
        exclude_private_key: build.template(std.get(block, 'exclude_private_key', null)),
        id: build.template(std.get(block, 'id', null)),
        key_vault_certificate_id: build.template(std.get(block, 'key_vault_certificate_id', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        service_name: build.template(block.service_name),
        thumbprint: build.template(std.get(block, 'thumbprint', null)),
      }),
      certificate_content: resource.field(self._.blocks, 'certificate_content'),
      exclude_private_key: resource.field(self._.blocks, 'exclude_private_key'),
      id: resource.field(self._.blocks, 'id'),
      key_vault_certificate_id: resource.field(self._.blocks, 'key_vault_certificate_id'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      service_name: resource.field(self._.blocks, 'service_name'),
      thumbprint: resource.field(self._.blocks, 'thumbprint'),
    },
    spring_cloud_configuration_service(name, block): {
      local resource = blockType.resource('azurerm_spring_cloud_configuration_service', name),
      _: resource._(block, {
        generation: build.template(std.get(block, 'generation', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        refresh_interval_in_seconds: build.template(std.get(block, 'refresh_interval_in_seconds', null)),
        spring_cloud_service_id: build.template(block.spring_cloud_service_id),
      }),
      generation: resource.field(self._.blocks, 'generation'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      refresh_interval_in_seconds: resource.field(self._.blocks, 'refresh_interval_in_seconds'),
      spring_cloud_service_id: resource.field(self._.blocks, 'spring_cloud_service_id'),
    },
    spring_cloud_connection(name, block): {
      local resource = blockType.resource('azurerm_spring_cloud_connection', name),
      _: resource._(block, {
        client_type: build.template(std.get(block, 'client_type', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        spring_cloud_id: build.template(block.spring_cloud_id),
        target_resource_id: build.template(block.target_resource_id),
        vnet_solution: build.template(std.get(block, 'vnet_solution', null)),
      }),
      client_type: resource.field(self._.blocks, 'client_type'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      spring_cloud_id: resource.field(self._.blocks, 'spring_cloud_id'),
      target_resource_id: resource.field(self._.blocks, 'target_resource_id'),
      vnet_solution: resource.field(self._.blocks, 'vnet_solution'),
    },
    spring_cloud_container_deployment(name, block): {
      local resource = blockType.resource('azurerm_spring_cloud_container_deployment', name),
      _: resource._(block, {
        addon_json: build.template(std.get(block, 'addon_json', null)),
        application_performance_monitoring_ids: build.template(std.get(block, 'application_performance_monitoring_ids', null)),
        arguments: build.template(std.get(block, 'arguments', null)),
        commands: build.template(std.get(block, 'commands', null)),
        environment_variables: build.template(std.get(block, 'environment_variables', null)),
        id: build.template(std.get(block, 'id', null)),
        image: build.template(block.image),
        instance_count: build.template(std.get(block, 'instance_count', null)),
        language_framework: build.template(std.get(block, 'language_framework', null)),
        name: build.template(block.name),
        server: build.template(block.server),
        spring_cloud_app_id: build.template(block.spring_cloud_app_id),
      }),
      addon_json: resource.field(self._.blocks, 'addon_json'),
      application_performance_monitoring_ids: resource.field(self._.blocks, 'application_performance_monitoring_ids'),
      arguments: resource.field(self._.blocks, 'arguments'),
      commands: resource.field(self._.blocks, 'commands'),
      environment_variables: resource.field(self._.blocks, 'environment_variables'),
      id: resource.field(self._.blocks, 'id'),
      image: resource.field(self._.blocks, 'image'),
      instance_count: resource.field(self._.blocks, 'instance_count'),
      language_framework: resource.field(self._.blocks, 'language_framework'),
      name: resource.field(self._.blocks, 'name'),
      server: resource.field(self._.blocks, 'server'),
      spring_cloud_app_id: resource.field(self._.blocks, 'spring_cloud_app_id'),
    },
    spring_cloud_custom_domain(name, block): {
      local resource = blockType.resource('azurerm_spring_cloud_custom_domain', name),
      _: resource._(block, {
        certificate_name: build.template(std.get(block, 'certificate_name', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        spring_cloud_app_id: build.template(block.spring_cloud_app_id),
        thumbprint: build.template(std.get(block, 'thumbprint', null)),
      }),
      certificate_name: resource.field(self._.blocks, 'certificate_name'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      spring_cloud_app_id: resource.field(self._.blocks, 'spring_cloud_app_id'),
      thumbprint: resource.field(self._.blocks, 'thumbprint'),
    },
    spring_cloud_customized_accelerator(name, block): {
      local resource = blockType.resource('azurerm_spring_cloud_customized_accelerator', name),
      _: resource._(block, {
        accelerator_tags: build.template(std.get(block, 'accelerator_tags', null)),
        accelerator_type: build.template(std.get(block, 'accelerator_type', null)),
        description: build.template(std.get(block, 'description', null)),
        display_name: build.template(std.get(block, 'display_name', null)),
        icon_url: build.template(std.get(block, 'icon_url', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        spring_cloud_accelerator_id: build.template(block.spring_cloud_accelerator_id),
      }),
      accelerator_tags: resource.field(self._.blocks, 'accelerator_tags'),
      accelerator_type: resource.field(self._.blocks, 'accelerator_type'),
      description: resource.field(self._.blocks, 'description'),
      display_name: resource.field(self._.blocks, 'display_name'),
      icon_url: resource.field(self._.blocks, 'icon_url'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      spring_cloud_accelerator_id: resource.field(self._.blocks, 'spring_cloud_accelerator_id'),
    },
    spring_cloud_dev_tool_portal(name, block): {
      local resource = blockType.resource('azurerm_spring_cloud_dev_tool_portal', name),
      _: resource._(block, {
        application_accelerator_enabled: build.template(std.get(block, 'application_accelerator_enabled', null)),
        application_live_view_enabled: build.template(std.get(block, 'application_live_view_enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        public_network_access_enabled: build.template(std.get(block, 'public_network_access_enabled', null)),
        spring_cloud_service_id: build.template(block.spring_cloud_service_id),
      }),
      application_accelerator_enabled: resource.field(self._.blocks, 'application_accelerator_enabled'),
      application_live_view_enabled: resource.field(self._.blocks, 'application_live_view_enabled'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      public_network_access_enabled: resource.field(self._.blocks, 'public_network_access_enabled'),
      spring_cloud_service_id: resource.field(self._.blocks, 'spring_cloud_service_id'),
    },
    spring_cloud_dynatrace_application_performance_monitoring(name, block): {
      local resource = blockType.resource('azurerm_spring_cloud_dynatrace_application_performance_monitoring', name),
      _: resource._(block, {
        api_token: build.template(std.get(block, 'api_token', null)),
        api_url: build.template(std.get(block, 'api_url', null)),
        connection_point: build.template(block.connection_point),
        environment_id: build.template(std.get(block, 'environment_id', null)),
        globally_enabled: build.template(std.get(block, 'globally_enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        spring_cloud_service_id: build.template(block.spring_cloud_service_id),
        tenant: build.template(block.tenant),
        tenant_token: build.template(block.tenant_token),
      }),
      api_token: resource.field(self._.blocks, 'api_token'),
      api_url: resource.field(self._.blocks, 'api_url'),
      connection_point: resource.field(self._.blocks, 'connection_point'),
      environment_id: resource.field(self._.blocks, 'environment_id'),
      globally_enabled: resource.field(self._.blocks, 'globally_enabled'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      spring_cloud_service_id: resource.field(self._.blocks, 'spring_cloud_service_id'),
      tenant: resource.field(self._.blocks, 'tenant'),
      tenant_token: resource.field(self._.blocks, 'tenant_token'),
    },
    spring_cloud_elastic_application_performance_monitoring(name, block): {
      local resource = blockType.resource('azurerm_spring_cloud_elastic_application_performance_monitoring', name),
      _: resource._(block, {
        application_packages: build.template(block.application_packages),
        globally_enabled: build.template(std.get(block, 'globally_enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        server_url: build.template(block.server_url),
        service_name: build.template(block.service_name),
        spring_cloud_service_id: build.template(block.spring_cloud_service_id),
      }),
      application_packages: resource.field(self._.blocks, 'application_packages'),
      globally_enabled: resource.field(self._.blocks, 'globally_enabled'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      server_url: resource.field(self._.blocks, 'server_url'),
      service_name: resource.field(self._.blocks, 'service_name'),
      spring_cloud_service_id: resource.field(self._.blocks, 'spring_cloud_service_id'),
    },
    spring_cloud_gateway(name, block): {
      local resource = blockType.resource('azurerm_spring_cloud_gateway', name),
      _: resource._(block, {
        application_performance_monitoring_ids: build.template(std.get(block, 'application_performance_monitoring_ids', null)),
        application_performance_monitoring_types: build.template(std.get(block, 'application_performance_monitoring_types', null)),
        environment_variables: build.template(std.get(block, 'environment_variables', null)),
        https_only: build.template(std.get(block, 'https_only', null)),
        id: build.template(std.get(block, 'id', null)),
        instance_count: build.template(std.get(block, 'instance_count', null)),
        name: build.template(block.name),
        public_network_access_enabled: build.template(std.get(block, 'public_network_access_enabled', null)),
        sensitive_environment_variables: build.template(std.get(block, 'sensitive_environment_variables', null)),
        spring_cloud_service_id: build.template(block.spring_cloud_service_id),
        url: build.template(std.get(block, 'url', null)),
      }),
      application_performance_monitoring_ids: resource.field(self._.blocks, 'application_performance_monitoring_ids'),
      application_performance_monitoring_types: resource.field(self._.blocks, 'application_performance_monitoring_types'),
      environment_variables: resource.field(self._.blocks, 'environment_variables'),
      https_only: resource.field(self._.blocks, 'https_only'),
      id: resource.field(self._.blocks, 'id'),
      instance_count: resource.field(self._.blocks, 'instance_count'),
      name: resource.field(self._.blocks, 'name'),
      public_network_access_enabled: resource.field(self._.blocks, 'public_network_access_enabled'),
      sensitive_environment_variables: resource.field(self._.blocks, 'sensitive_environment_variables'),
      spring_cloud_service_id: resource.field(self._.blocks, 'spring_cloud_service_id'),
      url: resource.field(self._.blocks, 'url'),
    },
    spring_cloud_gateway_custom_domain(name, block): {
      local resource = blockType.resource('azurerm_spring_cloud_gateway_custom_domain', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        spring_cloud_gateway_id: build.template(block.spring_cloud_gateway_id),
        thumbprint: build.template(std.get(block, 'thumbprint', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      spring_cloud_gateway_id: resource.field(self._.blocks, 'spring_cloud_gateway_id'),
      thumbprint: resource.field(self._.blocks, 'thumbprint'),
    },
    spring_cloud_gateway_route_config(name, block): {
      local resource = blockType.resource('azurerm_spring_cloud_gateway_route_config', name),
      _: resource._(block, {
        filters: build.template(std.get(block, 'filters', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        predicates: build.template(std.get(block, 'predicates', null)),
        protocol: build.template(block.protocol),
        spring_cloud_app_id: build.template(std.get(block, 'spring_cloud_app_id', null)),
        spring_cloud_gateway_id: build.template(block.spring_cloud_gateway_id),
        sso_validation_enabled: build.template(std.get(block, 'sso_validation_enabled', null)),
      }),
      filters: resource.field(self._.blocks, 'filters'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      predicates: resource.field(self._.blocks, 'predicates'),
      protocol: resource.field(self._.blocks, 'protocol'),
      spring_cloud_app_id: resource.field(self._.blocks, 'spring_cloud_app_id'),
      spring_cloud_gateway_id: resource.field(self._.blocks, 'spring_cloud_gateway_id'),
      sso_validation_enabled: resource.field(self._.blocks, 'sso_validation_enabled'),
    },
    spring_cloud_java_deployment(name, block): {
      local resource = blockType.resource('azurerm_spring_cloud_java_deployment', name),
      _: resource._(block, {
        environment_variables: build.template(std.get(block, 'environment_variables', null)),
        id: build.template(std.get(block, 'id', null)),
        instance_count: build.template(std.get(block, 'instance_count', null)),
        jvm_options: build.template(std.get(block, 'jvm_options', null)),
        name: build.template(block.name),
        runtime_version: build.template(std.get(block, 'runtime_version', null)),
        spring_cloud_app_id: build.template(block.spring_cloud_app_id),
      }),
      environment_variables: resource.field(self._.blocks, 'environment_variables'),
      id: resource.field(self._.blocks, 'id'),
      instance_count: resource.field(self._.blocks, 'instance_count'),
      jvm_options: resource.field(self._.blocks, 'jvm_options'),
      name: resource.field(self._.blocks, 'name'),
      runtime_version: resource.field(self._.blocks, 'runtime_version'),
      spring_cloud_app_id: resource.field(self._.blocks, 'spring_cloud_app_id'),
    },
    spring_cloud_new_relic_application_performance_monitoring(name, block): {
      local resource = blockType.resource('azurerm_spring_cloud_new_relic_application_performance_monitoring', name),
      _: resource._(block, {
        agent_enabled: build.template(std.get(block, 'agent_enabled', null)),
        app_name: build.template(block.app_name),
        app_server_port: build.template(std.get(block, 'app_server_port', null)),
        audit_mode_enabled: build.template(std.get(block, 'audit_mode_enabled', null)),
        auto_app_naming_enabled: build.template(std.get(block, 'auto_app_naming_enabled', null)),
        auto_transaction_naming_enabled: build.template(std.get(block, 'auto_transaction_naming_enabled', null)),
        custom_tracing_enabled: build.template(std.get(block, 'custom_tracing_enabled', null)),
        globally_enabled: build.template(std.get(block, 'globally_enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        license_key: build.template(block.license_key),
        name: build.template(block.name),
        spring_cloud_service_id: build.template(block.spring_cloud_service_id),
      }),
      agent_enabled: resource.field(self._.blocks, 'agent_enabled'),
      app_name: resource.field(self._.blocks, 'app_name'),
      app_server_port: resource.field(self._.blocks, 'app_server_port'),
      audit_mode_enabled: resource.field(self._.blocks, 'audit_mode_enabled'),
      auto_app_naming_enabled: resource.field(self._.blocks, 'auto_app_naming_enabled'),
      auto_transaction_naming_enabled: resource.field(self._.blocks, 'auto_transaction_naming_enabled'),
      custom_tracing_enabled: resource.field(self._.blocks, 'custom_tracing_enabled'),
      globally_enabled: resource.field(self._.blocks, 'globally_enabled'),
      id: resource.field(self._.blocks, 'id'),
      labels: resource.field(self._.blocks, 'labels'),
      license_key: resource.field(self._.blocks, 'license_key'),
      name: resource.field(self._.blocks, 'name'),
      spring_cloud_service_id: resource.field(self._.blocks, 'spring_cloud_service_id'),
    },
    spring_cloud_service(name, block): {
      local resource = blockType.resource('azurerm_spring_cloud_service', name),
      _: resource._(block, {
        build_agent_pool_size: build.template(std.get(block, 'build_agent_pool_size', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        log_stream_public_endpoint_enabled: build.template(std.get(block, 'log_stream_public_endpoint_enabled', null)),
        managed_environment_id: build.template(std.get(block, 'managed_environment_id', null)),
        name: build.template(block.name),
        outbound_public_ip_addresses: build.template(std.get(block, 'outbound_public_ip_addresses', null)),
        required_network_traffic_rules: build.template(std.get(block, 'required_network_traffic_rules', null)),
        resource_group_name: build.template(block.resource_group_name),
        service_registry_enabled: build.template(std.get(block, 'service_registry_enabled', null)),
        service_registry_id: build.template(std.get(block, 'service_registry_id', null)),
        sku_name: build.template(std.get(block, 'sku_name', null)),
        sku_tier: build.template(std.get(block, 'sku_tier', null)),
        tags: build.template(std.get(block, 'tags', null)),
        zone_redundant: build.template(std.get(block, 'zone_redundant', null)),
      }),
      build_agent_pool_size: resource.field(self._.blocks, 'build_agent_pool_size'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      log_stream_public_endpoint_enabled: resource.field(self._.blocks, 'log_stream_public_endpoint_enabled'),
      managed_environment_id: resource.field(self._.blocks, 'managed_environment_id'),
      name: resource.field(self._.blocks, 'name'),
      outbound_public_ip_addresses: resource.field(self._.blocks, 'outbound_public_ip_addresses'),
      required_network_traffic_rules: resource.field(self._.blocks, 'required_network_traffic_rules'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      service_registry_enabled: resource.field(self._.blocks, 'service_registry_enabled'),
      service_registry_id: resource.field(self._.blocks, 'service_registry_id'),
      sku_name: resource.field(self._.blocks, 'sku_name'),
      sku_tier: resource.field(self._.blocks, 'sku_tier'),
      tags: resource.field(self._.blocks, 'tags'),
      zone_redundant: resource.field(self._.blocks, 'zone_redundant'),
    },
    spring_cloud_storage(name, block): {
      local resource = blockType.resource('azurerm_spring_cloud_storage', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        spring_cloud_service_id: build.template(block.spring_cloud_service_id),
        storage_account_key: build.template(block.storage_account_key),
        storage_account_name: build.template(block.storage_account_name),
      }),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      spring_cloud_service_id: resource.field(self._.blocks, 'spring_cloud_service_id'),
      storage_account_key: resource.field(self._.blocks, 'storage_account_key'),
      storage_account_name: resource.field(self._.blocks, 'storage_account_name'),
    },
    ssh_public_key(name, block): {
      local resource = blockType.resource('azurerm_ssh_public_key', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        public_key: build.template(block.public_key),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      public_key: resource.field(self._.blocks, 'public_key'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    stack_hci_cluster(name, block): {
      local resource = blockType.resource('azurerm_stack_hci_cluster', name),
      _: resource._(block, {
        automanage_configuration_id: build.template(std.get(block, 'automanage_configuration_id', null)),
        client_id: build.template(std.get(block, 'client_id', null)),
        cloud_id: build.template(std.get(block, 'cloud_id', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        resource_provider_object_id: build.template(std.get(block, 'resource_provider_object_id', null)),
        service_endpoint: build.template(std.get(block, 'service_endpoint', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tenant_id: build.template(std.get(block, 'tenant_id', null)),
      }),
      automanage_configuration_id: resource.field(self._.blocks, 'automanage_configuration_id'),
      client_id: resource.field(self._.blocks, 'client_id'),
      cloud_id: resource.field(self._.blocks, 'cloud_id'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      resource_provider_object_id: resource.field(self._.blocks, 'resource_provider_object_id'),
      service_endpoint: resource.field(self._.blocks, 'service_endpoint'),
      tags: resource.field(self._.blocks, 'tags'),
      tenant_id: resource.field(self._.blocks, 'tenant_id'),
    },
    stack_hci_deployment_setting(name, block): {
      local resource = blockType.resource('azurerm_stack_hci_deployment_setting', name),
      _: resource._(block, {
        arc_resource_ids: build.template(block.arc_resource_ids),
        id: build.template(std.get(block, 'id', null)),
        stack_hci_cluster_id: build.template(block.stack_hci_cluster_id),
        version: build.template(block.version),
      }),
      arc_resource_ids: resource.field(self._.blocks, 'arc_resource_ids'),
      id: resource.field(self._.blocks, 'id'),
      stack_hci_cluster_id: resource.field(self._.blocks, 'stack_hci_cluster_id'),
      version: resource.field(self._.blocks, 'version'),
    },
    stack_hci_extension(name, block): {
      local resource = blockType.resource('azurerm_stack_hci_extension', name),
      _: resource._(block, {
        arc_setting_id: build.template(block.arc_setting_id),
        auto_upgrade_minor_version_enabled: build.template(std.get(block, 'auto_upgrade_minor_version_enabled', null)),
        automatic_upgrade_enabled: build.template(std.get(block, 'automatic_upgrade_enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        protected_settings: build.template(std.get(block, 'protected_settings', null)),
        publisher: build.template(block.publisher),
        settings: build.template(std.get(block, 'settings', null)),
        type: build.template(block.type),
        type_handler_version: build.template(std.get(block, 'type_handler_version', null)),
      }),
      arc_setting_id: resource.field(self._.blocks, 'arc_setting_id'),
      auto_upgrade_minor_version_enabled: resource.field(self._.blocks, 'auto_upgrade_minor_version_enabled'),
      automatic_upgrade_enabled: resource.field(self._.blocks, 'automatic_upgrade_enabled'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      protected_settings: resource.field(self._.blocks, 'protected_settings'),
      publisher: resource.field(self._.blocks, 'publisher'),
      settings: resource.field(self._.blocks, 'settings'),
      type: resource.field(self._.blocks, 'type'),
      type_handler_version: resource.field(self._.blocks, 'type_handler_version'),
    },
    stack_hci_logical_network(name, block): {
      local resource = blockType.resource('azurerm_stack_hci_logical_network', name),
      _: resource._(block, {
        custom_location_id: build.template(block.custom_location_id),
        dns_servers: build.template(std.get(block, 'dns_servers', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
        virtual_switch_name: build.template(block.virtual_switch_name),
      }),
      custom_location_id: resource.field(self._.blocks, 'custom_location_id'),
      dns_servers: resource.field(self._.blocks, 'dns_servers'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
      virtual_switch_name: resource.field(self._.blocks, 'virtual_switch_name'),
    },
    stack_hci_marketplace_gallery_image(name, block): {
      local resource = blockType.resource('azurerm_stack_hci_marketplace_gallery_image', name),
      _: resource._(block, {
        custom_location_id: build.template(block.custom_location_id),
        hyperv_generation: build.template(block.hyperv_generation),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        os_type: build.template(block.os_type),
        resource_group_name: build.template(block.resource_group_name),
        storage_path_id: build.template(std.get(block, 'storage_path_id', null)),
        tags: build.template(std.get(block, 'tags', null)),
        version: build.template(block.version),
      }),
      custom_location_id: resource.field(self._.blocks, 'custom_location_id'),
      hyperv_generation: resource.field(self._.blocks, 'hyperv_generation'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      os_type: resource.field(self._.blocks, 'os_type'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      storage_path_id: resource.field(self._.blocks, 'storage_path_id'),
      tags: resource.field(self._.blocks, 'tags'),
      version: resource.field(self._.blocks, 'version'),
    },
    stack_hci_network_interface(name, block): {
      local resource = blockType.resource('azurerm_stack_hci_network_interface', name),
      _: resource._(block, {
        custom_location_id: build.template(block.custom_location_id),
        dns_servers: build.template(std.get(block, 'dns_servers', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        mac_address: build.template(std.get(block, 'mac_address', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      custom_location_id: resource.field(self._.blocks, 'custom_location_id'),
      dns_servers: resource.field(self._.blocks, 'dns_servers'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      mac_address: resource.field(self._.blocks, 'mac_address'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    stack_hci_storage_path(name, block): {
      local resource = blockType.resource('azurerm_stack_hci_storage_path', name),
      _: resource._(block, {
        custom_location_id: build.template(block.custom_location_id),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        path: build.template(block.path),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      custom_location_id: resource.field(self._.blocks, 'custom_location_id'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      path: resource.field(self._.blocks, 'path'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    stack_hci_virtual_hard_disk(name, block): {
      local resource = blockType.resource('azurerm_stack_hci_virtual_hard_disk', name),
      _: resource._(block, {
        block_size_in_bytes: build.template(std.get(block, 'block_size_in_bytes', null)),
        custom_location_id: build.template(block.custom_location_id),
        disk_file_format: build.template(std.get(block, 'disk_file_format', null)),
        disk_size_in_gb: build.template(block.disk_size_in_gb),
        dynamic_enabled: build.template(std.get(block, 'dynamic_enabled', null)),
        hyperv_generation: build.template(std.get(block, 'hyperv_generation', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        logical_sector_in_bytes: build.template(std.get(block, 'logical_sector_in_bytes', null)),
        name: build.template(block.name),
        physical_sector_in_bytes: build.template(std.get(block, 'physical_sector_in_bytes', null)),
        resource_group_name: build.template(block.resource_group_name),
        storage_path_id: build.template(std.get(block, 'storage_path_id', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      block_size_in_bytes: resource.field(self._.blocks, 'block_size_in_bytes'),
      custom_location_id: resource.field(self._.blocks, 'custom_location_id'),
      disk_file_format: resource.field(self._.blocks, 'disk_file_format'),
      disk_size_in_gb: resource.field(self._.blocks, 'disk_size_in_gb'),
      dynamic_enabled: resource.field(self._.blocks, 'dynamic_enabled'),
      hyperv_generation: resource.field(self._.blocks, 'hyperv_generation'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      logical_sector_in_bytes: resource.field(self._.blocks, 'logical_sector_in_bytes'),
      name: resource.field(self._.blocks, 'name'),
      physical_sector_in_bytes: resource.field(self._.blocks, 'physical_sector_in_bytes'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      storage_path_id: resource.field(self._.blocks, 'storage_path_id'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    static_site(name, block): {
      local resource = blockType.resource('azurerm_static_site', name),
      _: resource._(block, {
        api_key: build.template(std.get(block, 'api_key', null)),
        app_settings: build.template(std.get(block, 'app_settings', null)),
        default_host_name: build.template(std.get(block, 'default_host_name', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        sku_size: build.template(std.get(block, 'sku_size', null)),
        sku_tier: build.template(std.get(block, 'sku_tier', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      api_key: resource.field(self._.blocks, 'api_key'),
      app_settings: resource.field(self._.blocks, 'app_settings'),
      default_host_name: resource.field(self._.blocks, 'default_host_name'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      sku_size: resource.field(self._.blocks, 'sku_size'),
      sku_tier: resource.field(self._.blocks, 'sku_tier'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    static_site_custom_domain(name, block): {
      local resource = blockType.resource('azurerm_static_site_custom_domain', name),
      _: resource._(block, {
        domain_name: build.template(block.domain_name),
        id: build.template(std.get(block, 'id', null)),
        static_site_id: build.template(block.static_site_id),
        validation_token: build.template(std.get(block, 'validation_token', null)),
        validation_type: build.template(std.get(block, 'validation_type', null)),
      }),
      domain_name: resource.field(self._.blocks, 'domain_name'),
      id: resource.field(self._.blocks, 'id'),
      static_site_id: resource.field(self._.blocks, 'static_site_id'),
      validation_token: resource.field(self._.blocks, 'validation_token'),
      validation_type: resource.field(self._.blocks, 'validation_type'),
    },
    static_web_app(name, block): {
      local resource = blockType.resource('azurerm_static_web_app', name),
      _: resource._(block, {
        api_key: build.template(std.get(block, 'api_key', null)),
        app_settings: build.template(std.get(block, 'app_settings', null)),
        configuration_file_changes_enabled: build.template(std.get(block, 'configuration_file_changes_enabled', null)),
        default_host_name: build.template(std.get(block, 'default_host_name', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        preview_environments_enabled: build.template(std.get(block, 'preview_environments_enabled', null)),
        public_network_access_enabled: build.template(std.get(block, 'public_network_access_enabled', null)),
        repository_branch: build.template(std.get(block, 'repository_branch', null)),
        repository_token: build.template(std.get(block, 'repository_token', null)),
        repository_url: build.template(std.get(block, 'repository_url', null)),
        resource_group_name: build.template(block.resource_group_name),
        sku_size: build.template(std.get(block, 'sku_size', null)),
        sku_tier: build.template(std.get(block, 'sku_tier', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      api_key: resource.field(self._.blocks, 'api_key'),
      app_settings: resource.field(self._.blocks, 'app_settings'),
      configuration_file_changes_enabled: resource.field(self._.blocks, 'configuration_file_changes_enabled'),
      default_host_name: resource.field(self._.blocks, 'default_host_name'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      preview_environments_enabled: resource.field(self._.blocks, 'preview_environments_enabled'),
      public_network_access_enabled: resource.field(self._.blocks, 'public_network_access_enabled'),
      repository_branch: resource.field(self._.blocks, 'repository_branch'),
      repository_token: resource.field(self._.blocks, 'repository_token'),
      repository_url: resource.field(self._.blocks, 'repository_url'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      sku_size: resource.field(self._.blocks, 'sku_size'),
      sku_tier: resource.field(self._.blocks, 'sku_tier'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    static_web_app_custom_domain(name, block): {
      local resource = blockType.resource('azurerm_static_web_app_custom_domain', name),
      _: resource._(block, {
        domain_name: build.template(block.domain_name),
        id: build.template(std.get(block, 'id', null)),
        static_web_app_id: build.template(block.static_web_app_id),
        validation_token: build.template(std.get(block, 'validation_token', null)),
        validation_type: build.template(block.validation_type),
      }),
      domain_name: resource.field(self._.blocks, 'domain_name'),
      id: resource.field(self._.blocks, 'id'),
      static_web_app_id: resource.field(self._.blocks, 'static_web_app_id'),
      validation_token: resource.field(self._.blocks, 'validation_token'),
      validation_type: resource.field(self._.blocks, 'validation_type'),
    },
    static_web_app_function_app_registration(name, block): {
      local resource = blockType.resource('azurerm_static_web_app_function_app_registration', name),
      _: resource._(block, {
        function_app_id: build.template(block.function_app_id),
        id: build.template(std.get(block, 'id', null)),
        static_web_app_id: build.template(block.static_web_app_id),
      }),
      function_app_id: resource.field(self._.blocks, 'function_app_id'),
      id: resource.field(self._.blocks, 'id'),
      static_web_app_id: resource.field(self._.blocks, 'static_web_app_id'),
    },
    storage_account(name, block): {
      local resource = blockType.resource('azurerm_storage_account', name),
      _: resource._(block, {
        access_tier: build.template(std.get(block, 'access_tier', null)),
        account_kind: build.template(std.get(block, 'account_kind', null)),
        account_replication_type: build.template(block.account_replication_type),
        account_tier: build.template(block.account_tier),
        allow_nested_items_to_be_public: build.template(std.get(block, 'allow_nested_items_to_be_public', null)),
        allowed_copy_scope: build.template(std.get(block, 'allowed_copy_scope', null)),
        cross_tenant_replication_enabled: build.template(std.get(block, 'cross_tenant_replication_enabled', null)),
        default_to_oauth_authentication: build.template(std.get(block, 'default_to_oauth_authentication', null)),
        dns_endpoint_type: build.template(std.get(block, 'dns_endpoint_type', null)),
        edge_zone: build.template(std.get(block, 'edge_zone', null)),
        https_traffic_only_enabled: build.template(std.get(block, 'https_traffic_only_enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        infrastructure_encryption_enabled: build.template(std.get(block, 'infrastructure_encryption_enabled', null)),
        is_hns_enabled: build.template(std.get(block, 'is_hns_enabled', null)),
        large_file_share_enabled: build.template(std.get(block, 'large_file_share_enabled', null)),
        local_user_enabled: build.template(std.get(block, 'local_user_enabled', null)),
        location: build.template(block.location),
        min_tls_version: build.template(std.get(block, 'min_tls_version', null)),
        name: build.template(block.name),
        nfsv3_enabled: build.template(std.get(block, 'nfsv3_enabled', null)),
        primary_access_key: build.template(std.get(block, 'primary_access_key', null)),
        primary_blob_connection_string: build.template(std.get(block, 'primary_blob_connection_string', null)),
        primary_blob_endpoint: build.template(std.get(block, 'primary_blob_endpoint', null)),
        primary_blob_host: build.template(std.get(block, 'primary_blob_host', null)),
        primary_blob_internet_endpoint: build.template(std.get(block, 'primary_blob_internet_endpoint', null)),
        primary_blob_internet_host: build.template(std.get(block, 'primary_blob_internet_host', null)),
        primary_blob_microsoft_endpoint: build.template(std.get(block, 'primary_blob_microsoft_endpoint', null)),
        primary_blob_microsoft_host: build.template(std.get(block, 'primary_blob_microsoft_host', null)),
        primary_connection_string: build.template(std.get(block, 'primary_connection_string', null)),
        primary_dfs_endpoint: build.template(std.get(block, 'primary_dfs_endpoint', null)),
        primary_dfs_host: build.template(std.get(block, 'primary_dfs_host', null)),
        primary_dfs_internet_endpoint: build.template(std.get(block, 'primary_dfs_internet_endpoint', null)),
        primary_dfs_internet_host: build.template(std.get(block, 'primary_dfs_internet_host', null)),
        primary_dfs_microsoft_endpoint: build.template(std.get(block, 'primary_dfs_microsoft_endpoint', null)),
        primary_dfs_microsoft_host: build.template(std.get(block, 'primary_dfs_microsoft_host', null)),
        primary_file_endpoint: build.template(std.get(block, 'primary_file_endpoint', null)),
        primary_file_host: build.template(std.get(block, 'primary_file_host', null)),
        primary_file_internet_endpoint: build.template(std.get(block, 'primary_file_internet_endpoint', null)),
        primary_file_internet_host: build.template(std.get(block, 'primary_file_internet_host', null)),
        primary_file_microsoft_endpoint: build.template(std.get(block, 'primary_file_microsoft_endpoint', null)),
        primary_file_microsoft_host: build.template(std.get(block, 'primary_file_microsoft_host', null)),
        primary_location: build.template(std.get(block, 'primary_location', null)),
        primary_queue_endpoint: build.template(std.get(block, 'primary_queue_endpoint', null)),
        primary_queue_host: build.template(std.get(block, 'primary_queue_host', null)),
        primary_queue_microsoft_endpoint: build.template(std.get(block, 'primary_queue_microsoft_endpoint', null)),
        primary_queue_microsoft_host: build.template(std.get(block, 'primary_queue_microsoft_host', null)),
        primary_table_endpoint: build.template(std.get(block, 'primary_table_endpoint', null)),
        primary_table_host: build.template(std.get(block, 'primary_table_host', null)),
        primary_table_microsoft_endpoint: build.template(std.get(block, 'primary_table_microsoft_endpoint', null)),
        primary_table_microsoft_host: build.template(std.get(block, 'primary_table_microsoft_host', null)),
        primary_web_endpoint: build.template(std.get(block, 'primary_web_endpoint', null)),
        primary_web_host: build.template(std.get(block, 'primary_web_host', null)),
        primary_web_internet_endpoint: build.template(std.get(block, 'primary_web_internet_endpoint', null)),
        primary_web_internet_host: build.template(std.get(block, 'primary_web_internet_host', null)),
        primary_web_microsoft_endpoint: build.template(std.get(block, 'primary_web_microsoft_endpoint', null)),
        primary_web_microsoft_host: build.template(std.get(block, 'primary_web_microsoft_host', null)),
        public_network_access_enabled: build.template(std.get(block, 'public_network_access_enabled', null)),
        queue_encryption_key_type: build.template(std.get(block, 'queue_encryption_key_type', null)),
        resource_group_name: build.template(block.resource_group_name),
        secondary_access_key: build.template(std.get(block, 'secondary_access_key', null)),
        secondary_blob_connection_string: build.template(std.get(block, 'secondary_blob_connection_string', null)),
        secondary_blob_endpoint: build.template(std.get(block, 'secondary_blob_endpoint', null)),
        secondary_blob_host: build.template(std.get(block, 'secondary_blob_host', null)),
        secondary_blob_internet_endpoint: build.template(std.get(block, 'secondary_blob_internet_endpoint', null)),
        secondary_blob_internet_host: build.template(std.get(block, 'secondary_blob_internet_host', null)),
        secondary_blob_microsoft_endpoint: build.template(std.get(block, 'secondary_blob_microsoft_endpoint', null)),
        secondary_blob_microsoft_host: build.template(std.get(block, 'secondary_blob_microsoft_host', null)),
        secondary_connection_string: build.template(std.get(block, 'secondary_connection_string', null)),
        secondary_dfs_endpoint: build.template(std.get(block, 'secondary_dfs_endpoint', null)),
        secondary_dfs_host: build.template(std.get(block, 'secondary_dfs_host', null)),
        secondary_dfs_internet_endpoint: build.template(std.get(block, 'secondary_dfs_internet_endpoint', null)),
        secondary_dfs_internet_host: build.template(std.get(block, 'secondary_dfs_internet_host', null)),
        secondary_dfs_microsoft_endpoint: build.template(std.get(block, 'secondary_dfs_microsoft_endpoint', null)),
        secondary_dfs_microsoft_host: build.template(std.get(block, 'secondary_dfs_microsoft_host', null)),
        secondary_file_endpoint: build.template(std.get(block, 'secondary_file_endpoint', null)),
        secondary_file_host: build.template(std.get(block, 'secondary_file_host', null)),
        secondary_file_internet_endpoint: build.template(std.get(block, 'secondary_file_internet_endpoint', null)),
        secondary_file_internet_host: build.template(std.get(block, 'secondary_file_internet_host', null)),
        secondary_file_microsoft_endpoint: build.template(std.get(block, 'secondary_file_microsoft_endpoint', null)),
        secondary_file_microsoft_host: build.template(std.get(block, 'secondary_file_microsoft_host', null)),
        secondary_location: build.template(std.get(block, 'secondary_location', null)),
        secondary_queue_endpoint: build.template(std.get(block, 'secondary_queue_endpoint', null)),
        secondary_queue_host: build.template(std.get(block, 'secondary_queue_host', null)),
        secondary_queue_microsoft_endpoint: build.template(std.get(block, 'secondary_queue_microsoft_endpoint', null)),
        secondary_queue_microsoft_host: build.template(std.get(block, 'secondary_queue_microsoft_host', null)),
        secondary_table_endpoint: build.template(std.get(block, 'secondary_table_endpoint', null)),
        secondary_table_host: build.template(std.get(block, 'secondary_table_host', null)),
        secondary_table_microsoft_endpoint: build.template(std.get(block, 'secondary_table_microsoft_endpoint', null)),
        secondary_table_microsoft_host: build.template(std.get(block, 'secondary_table_microsoft_host', null)),
        secondary_web_endpoint: build.template(std.get(block, 'secondary_web_endpoint', null)),
        secondary_web_host: build.template(std.get(block, 'secondary_web_host', null)),
        secondary_web_internet_endpoint: build.template(std.get(block, 'secondary_web_internet_endpoint', null)),
        secondary_web_internet_host: build.template(std.get(block, 'secondary_web_internet_host', null)),
        secondary_web_microsoft_endpoint: build.template(std.get(block, 'secondary_web_microsoft_endpoint', null)),
        secondary_web_microsoft_host: build.template(std.get(block, 'secondary_web_microsoft_host', null)),
        sftp_enabled: build.template(std.get(block, 'sftp_enabled', null)),
        shared_access_key_enabled: build.template(std.get(block, 'shared_access_key_enabled', null)),
        table_encryption_key_type: build.template(std.get(block, 'table_encryption_key_type', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      access_tier: resource.field(self._.blocks, 'access_tier'),
      account_kind: resource.field(self._.blocks, 'account_kind'),
      account_replication_type: resource.field(self._.blocks, 'account_replication_type'),
      account_tier: resource.field(self._.blocks, 'account_tier'),
      allow_nested_items_to_be_public: resource.field(self._.blocks, 'allow_nested_items_to_be_public'),
      allowed_copy_scope: resource.field(self._.blocks, 'allowed_copy_scope'),
      cross_tenant_replication_enabled: resource.field(self._.blocks, 'cross_tenant_replication_enabled'),
      default_to_oauth_authentication: resource.field(self._.blocks, 'default_to_oauth_authentication'),
      dns_endpoint_type: resource.field(self._.blocks, 'dns_endpoint_type'),
      edge_zone: resource.field(self._.blocks, 'edge_zone'),
      https_traffic_only_enabled: resource.field(self._.blocks, 'https_traffic_only_enabled'),
      id: resource.field(self._.blocks, 'id'),
      infrastructure_encryption_enabled: resource.field(self._.blocks, 'infrastructure_encryption_enabled'),
      is_hns_enabled: resource.field(self._.blocks, 'is_hns_enabled'),
      large_file_share_enabled: resource.field(self._.blocks, 'large_file_share_enabled'),
      local_user_enabled: resource.field(self._.blocks, 'local_user_enabled'),
      location: resource.field(self._.blocks, 'location'),
      min_tls_version: resource.field(self._.blocks, 'min_tls_version'),
      name: resource.field(self._.blocks, 'name'),
      nfsv3_enabled: resource.field(self._.blocks, 'nfsv3_enabled'),
      primary_access_key: resource.field(self._.blocks, 'primary_access_key'),
      primary_blob_connection_string: resource.field(self._.blocks, 'primary_blob_connection_string'),
      primary_blob_endpoint: resource.field(self._.blocks, 'primary_blob_endpoint'),
      primary_blob_host: resource.field(self._.blocks, 'primary_blob_host'),
      primary_blob_internet_endpoint: resource.field(self._.blocks, 'primary_blob_internet_endpoint'),
      primary_blob_internet_host: resource.field(self._.blocks, 'primary_blob_internet_host'),
      primary_blob_microsoft_endpoint: resource.field(self._.blocks, 'primary_blob_microsoft_endpoint'),
      primary_blob_microsoft_host: resource.field(self._.blocks, 'primary_blob_microsoft_host'),
      primary_connection_string: resource.field(self._.blocks, 'primary_connection_string'),
      primary_dfs_endpoint: resource.field(self._.blocks, 'primary_dfs_endpoint'),
      primary_dfs_host: resource.field(self._.blocks, 'primary_dfs_host'),
      primary_dfs_internet_endpoint: resource.field(self._.blocks, 'primary_dfs_internet_endpoint'),
      primary_dfs_internet_host: resource.field(self._.blocks, 'primary_dfs_internet_host'),
      primary_dfs_microsoft_endpoint: resource.field(self._.blocks, 'primary_dfs_microsoft_endpoint'),
      primary_dfs_microsoft_host: resource.field(self._.blocks, 'primary_dfs_microsoft_host'),
      primary_file_endpoint: resource.field(self._.blocks, 'primary_file_endpoint'),
      primary_file_host: resource.field(self._.blocks, 'primary_file_host'),
      primary_file_internet_endpoint: resource.field(self._.blocks, 'primary_file_internet_endpoint'),
      primary_file_internet_host: resource.field(self._.blocks, 'primary_file_internet_host'),
      primary_file_microsoft_endpoint: resource.field(self._.blocks, 'primary_file_microsoft_endpoint'),
      primary_file_microsoft_host: resource.field(self._.blocks, 'primary_file_microsoft_host'),
      primary_location: resource.field(self._.blocks, 'primary_location'),
      primary_queue_endpoint: resource.field(self._.blocks, 'primary_queue_endpoint'),
      primary_queue_host: resource.field(self._.blocks, 'primary_queue_host'),
      primary_queue_microsoft_endpoint: resource.field(self._.blocks, 'primary_queue_microsoft_endpoint'),
      primary_queue_microsoft_host: resource.field(self._.blocks, 'primary_queue_microsoft_host'),
      primary_table_endpoint: resource.field(self._.blocks, 'primary_table_endpoint'),
      primary_table_host: resource.field(self._.blocks, 'primary_table_host'),
      primary_table_microsoft_endpoint: resource.field(self._.blocks, 'primary_table_microsoft_endpoint'),
      primary_table_microsoft_host: resource.field(self._.blocks, 'primary_table_microsoft_host'),
      primary_web_endpoint: resource.field(self._.blocks, 'primary_web_endpoint'),
      primary_web_host: resource.field(self._.blocks, 'primary_web_host'),
      primary_web_internet_endpoint: resource.field(self._.blocks, 'primary_web_internet_endpoint'),
      primary_web_internet_host: resource.field(self._.blocks, 'primary_web_internet_host'),
      primary_web_microsoft_endpoint: resource.field(self._.blocks, 'primary_web_microsoft_endpoint'),
      primary_web_microsoft_host: resource.field(self._.blocks, 'primary_web_microsoft_host'),
      public_network_access_enabled: resource.field(self._.blocks, 'public_network_access_enabled'),
      queue_encryption_key_type: resource.field(self._.blocks, 'queue_encryption_key_type'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      secondary_access_key: resource.field(self._.blocks, 'secondary_access_key'),
      secondary_blob_connection_string: resource.field(self._.blocks, 'secondary_blob_connection_string'),
      secondary_blob_endpoint: resource.field(self._.blocks, 'secondary_blob_endpoint'),
      secondary_blob_host: resource.field(self._.blocks, 'secondary_blob_host'),
      secondary_blob_internet_endpoint: resource.field(self._.blocks, 'secondary_blob_internet_endpoint'),
      secondary_blob_internet_host: resource.field(self._.blocks, 'secondary_blob_internet_host'),
      secondary_blob_microsoft_endpoint: resource.field(self._.blocks, 'secondary_blob_microsoft_endpoint'),
      secondary_blob_microsoft_host: resource.field(self._.blocks, 'secondary_blob_microsoft_host'),
      secondary_connection_string: resource.field(self._.blocks, 'secondary_connection_string'),
      secondary_dfs_endpoint: resource.field(self._.blocks, 'secondary_dfs_endpoint'),
      secondary_dfs_host: resource.field(self._.blocks, 'secondary_dfs_host'),
      secondary_dfs_internet_endpoint: resource.field(self._.blocks, 'secondary_dfs_internet_endpoint'),
      secondary_dfs_internet_host: resource.field(self._.blocks, 'secondary_dfs_internet_host'),
      secondary_dfs_microsoft_endpoint: resource.field(self._.blocks, 'secondary_dfs_microsoft_endpoint'),
      secondary_dfs_microsoft_host: resource.field(self._.blocks, 'secondary_dfs_microsoft_host'),
      secondary_file_endpoint: resource.field(self._.blocks, 'secondary_file_endpoint'),
      secondary_file_host: resource.field(self._.blocks, 'secondary_file_host'),
      secondary_file_internet_endpoint: resource.field(self._.blocks, 'secondary_file_internet_endpoint'),
      secondary_file_internet_host: resource.field(self._.blocks, 'secondary_file_internet_host'),
      secondary_file_microsoft_endpoint: resource.field(self._.blocks, 'secondary_file_microsoft_endpoint'),
      secondary_file_microsoft_host: resource.field(self._.blocks, 'secondary_file_microsoft_host'),
      secondary_location: resource.field(self._.blocks, 'secondary_location'),
      secondary_queue_endpoint: resource.field(self._.blocks, 'secondary_queue_endpoint'),
      secondary_queue_host: resource.field(self._.blocks, 'secondary_queue_host'),
      secondary_queue_microsoft_endpoint: resource.field(self._.blocks, 'secondary_queue_microsoft_endpoint'),
      secondary_queue_microsoft_host: resource.field(self._.blocks, 'secondary_queue_microsoft_host'),
      secondary_table_endpoint: resource.field(self._.blocks, 'secondary_table_endpoint'),
      secondary_table_host: resource.field(self._.blocks, 'secondary_table_host'),
      secondary_table_microsoft_endpoint: resource.field(self._.blocks, 'secondary_table_microsoft_endpoint'),
      secondary_table_microsoft_host: resource.field(self._.blocks, 'secondary_table_microsoft_host'),
      secondary_web_endpoint: resource.field(self._.blocks, 'secondary_web_endpoint'),
      secondary_web_host: resource.field(self._.blocks, 'secondary_web_host'),
      secondary_web_internet_endpoint: resource.field(self._.blocks, 'secondary_web_internet_endpoint'),
      secondary_web_internet_host: resource.field(self._.blocks, 'secondary_web_internet_host'),
      secondary_web_microsoft_endpoint: resource.field(self._.blocks, 'secondary_web_microsoft_endpoint'),
      secondary_web_microsoft_host: resource.field(self._.blocks, 'secondary_web_microsoft_host'),
      sftp_enabled: resource.field(self._.blocks, 'sftp_enabled'),
      shared_access_key_enabled: resource.field(self._.blocks, 'shared_access_key_enabled'),
      table_encryption_key_type: resource.field(self._.blocks, 'table_encryption_key_type'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    storage_account_customer_managed_key(name, block): {
      local resource = blockType.resource('azurerm_storage_account_customer_managed_key', name),
      _: resource._(block, {
        federated_identity_client_id: build.template(std.get(block, 'federated_identity_client_id', null)),
        id: build.template(std.get(block, 'id', null)),
        key_name: build.template(block.key_name),
        key_vault_id: build.template(std.get(block, 'key_vault_id', null)),
        key_vault_uri: build.template(std.get(block, 'key_vault_uri', null)),
        key_version: build.template(std.get(block, 'key_version', null)),
        managed_hsm_key_id: build.template(std.get(block, 'managed_hsm_key_id', null)),
        storage_account_id: build.template(block.storage_account_id),
        user_assigned_identity_id: build.template(std.get(block, 'user_assigned_identity_id', null)),
      }),
      federated_identity_client_id: resource.field(self._.blocks, 'federated_identity_client_id'),
      id: resource.field(self._.blocks, 'id'),
      key_name: resource.field(self._.blocks, 'key_name'),
      key_vault_id: resource.field(self._.blocks, 'key_vault_id'),
      key_vault_uri: resource.field(self._.blocks, 'key_vault_uri'),
      key_version: resource.field(self._.blocks, 'key_version'),
      managed_hsm_key_id: resource.field(self._.blocks, 'managed_hsm_key_id'),
      storage_account_id: resource.field(self._.blocks, 'storage_account_id'),
      user_assigned_identity_id: resource.field(self._.blocks, 'user_assigned_identity_id'),
    },
    storage_account_local_user(name, block): {
      local resource = blockType.resource('azurerm_storage_account_local_user', name),
      _: resource._(block, {
        home_directory: build.template(std.get(block, 'home_directory', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        password: build.template(std.get(block, 'password', null)),
        sid: build.template(std.get(block, 'sid', null)),
        ssh_key_enabled: build.template(std.get(block, 'ssh_key_enabled', null)),
        ssh_password_enabled: build.template(std.get(block, 'ssh_password_enabled', null)),
        storage_account_id: build.template(block.storage_account_id),
      }),
      home_directory: resource.field(self._.blocks, 'home_directory'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      password: resource.field(self._.blocks, 'password'),
      sid: resource.field(self._.blocks, 'sid'),
      ssh_key_enabled: resource.field(self._.blocks, 'ssh_key_enabled'),
      ssh_password_enabled: resource.field(self._.blocks, 'ssh_password_enabled'),
      storage_account_id: resource.field(self._.blocks, 'storage_account_id'),
    },
    storage_account_network_rules(name, block): {
      local resource = blockType.resource('azurerm_storage_account_network_rules', name),
      _: resource._(block, {
        bypass: build.template(std.get(block, 'bypass', null)),
        default_action: build.template(block.default_action),
        id: build.template(std.get(block, 'id', null)),
        ip_rules: build.template(std.get(block, 'ip_rules', null)),
        storage_account_id: build.template(block.storage_account_id),
        virtual_network_subnet_ids: build.template(std.get(block, 'virtual_network_subnet_ids', null)),
      }),
      bypass: resource.field(self._.blocks, 'bypass'),
      default_action: resource.field(self._.blocks, 'default_action'),
      id: resource.field(self._.blocks, 'id'),
      ip_rules: resource.field(self._.blocks, 'ip_rules'),
      storage_account_id: resource.field(self._.blocks, 'storage_account_id'),
      virtual_network_subnet_ids: resource.field(self._.blocks, 'virtual_network_subnet_ids'),
    },
    storage_account_queue_properties(name, block): {
      local resource = blockType.resource('azurerm_storage_account_queue_properties', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        storage_account_id: build.template(block.storage_account_id),
      }),
      id: resource.field(self._.blocks, 'id'),
      storage_account_id: resource.field(self._.blocks, 'storage_account_id'),
    },
    storage_account_static_website(name, block): {
      local resource = blockType.resource('azurerm_storage_account_static_website', name),
      _: resource._(block, {
        error_404_document: build.template(std.get(block, 'error_404_document', null)),
        id: build.template(std.get(block, 'id', null)),
        index_document: build.template(std.get(block, 'index_document', null)),
        storage_account_id: build.template(block.storage_account_id),
      }),
      error_404_document: resource.field(self._.blocks, 'error_404_document'),
      id: resource.field(self._.blocks, 'id'),
      index_document: resource.field(self._.blocks, 'index_document'),
      storage_account_id: resource.field(self._.blocks, 'storage_account_id'),
    },
    storage_blob(name, block): {
      local resource = blockType.resource('azurerm_storage_blob', name),
      _: resource._(block, {
        access_tier: build.template(std.get(block, 'access_tier', null)),
        cache_control: build.template(std.get(block, 'cache_control', null)),
        content_md5: build.template(std.get(block, 'content_md5', null)),
        content_type: build.template(std.get(block, 'content_type', null)),
        encryption_scope: build.template(std.get(block, 'encryption_scope', null)),
        id: build.template(std.get(block, 'id', null)),
        metadata: build.template(std.get(block, 'metadata', null)),
        name: build.template(block.name),
        parallelism: build.template(std.get(block, 'parallelism', null)),
        size: build.template(std.get(block, 'size', null)),
        source: build.template(std.get(block, 'source', null)),
        source_content: build.template(std.get(block, 'source_content', null)),
        source_uri: build.template(std.get(block, 'source_uri', null)),
        storage_account_name: build.template(block.storage_account_name),
        storage_container_name: build.template(block.storage_container_name),
        type: build.template(block.type),
        url: build.template(std.get(block, 'url', null)),
      }),
      access_tier: resource.field(self._.blocks, 'access_tier'),
      cache_control: resource.field(self._.blocks, 'cache_control'),
      content_md5: resource.field(self._.blocks, 'content_md5'),
      content_type: resource.field(self._.blocks, 'content_type'),
      encryption_scope: resource.field(self._.blocks, 'encryption_scope'),
      id: resource.field(self._.blocks, 'id'),
      metadata: resource.field(self._.blocks, 'metadata'),
      name: resource.field(self._.blocks, 'name'),
      parallelism: resource.field(self._.blocks, 'parallelism'),
      size: resource.field(self._.blocks, 'size'),
      source: resource.field(self._.blocks, 'source'),
      source_content: resource.field(self._.blocks, 'source_content'),
      source_uri: resource.field(self._.blocks, 'source_uri'),
      storage_account_name: resource.field(self._.blocks, 'storage_account_name'),
      storage_container_name: resource.field(self._.blocks, 'storage_container_name'),
      type: resource.field(self._.blocks, 'type'),
      url: resource.field(self._.blocks, 'url'),
    },
    storage_blob_inventory_policy(name, block): {
      local resource = blockType.resource('azurerm_storage_blob_inventory_policy', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        storage_account_id: build.template(block.storage_account_id),
      }),
      id: resource.field(self._.blocks, 'id'),
      storage_account_id: resource.field(self._.blocks, 'storage_account_id'),
    },
    storage_container(name, block): {
      local resource = blockType.resource('azurerm_storage_container', name),
      _: resource._(block, {
        container_access_type: build.template(std.get(block, 'container_access_type', null)),
        default_encryption_scope: build.template(std.get(block, 'default_encryption_scope', null)),
        encryption_scope_override_enabled: build.template(std.get(block, 'encryption_scope_override_enabled', null)),
        has_immutability_policy: build.template(std.get(block, 'has_immutability_policy', null)),
        has_legal_hold: build.template(std.get(block, 'has_legal_hold', null)),
        id: build.template(std.get(block, 'id', null)),
        metadata: build.template(std.get(block, 'metadata', null)),
        name: build.template(block.name),
        resource_manager_id: build.template(std.get(block, 'resource_manager_id', null)),
        storage_account_id: build.template(std.get(block, 'storage_account_id', null)),
        storage_account_name: build.template(std.get(block, 'storage_account_name', null)),
      }),
      container_access_type: resource.field(self._.blocks, 'container_access_type'),
      default_encryption_scope: resource.field(self._.blocks, 'default_encryption_scope'),
      encryption_scope_override_enabled: resource.field(self._.blocks, 'encryption_scope_override_enabled'),
      has_immutability_policy: resource.field(self._.blocks, 'has_immutability_policy'),
      has_legal_hold: resource.field(self._.blocks, 'has_legal_hold'),
      id: resource.field(self._.blocks, 'id'),
      metadata: resource.field(self._.blocks, 'metadata'),
      name: resource.field(self._.blocks, 'name'),
      resource_manager_id: resource.field(self._.blocks, 'resource_manager_id'),
      storage_account_id: resource.field(self._.blocks, 'storage_account_id'),
      storage_account_name: resource.field(self._.blocks, 'storage_account_name'),
    },
    storage_container_immutability_policy(name, block): {
      local resource = blockType.resource('azurerm_storage_container_immutability_policy', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        immutability_period_in_days: build.template(block.immutability_period_in_days),
        locked: build.template(std.get(block, 'locked', null)),
        protected_append_writes_all_enabled: build.template(std.get(block, 'protected_append_writes_all_enabled', null)),
        protected_append_writes_enabled: build.template(std.get(block, 'protected_append_writes_enabled', null)),
        storage_container_resource_manager_id: build.template(block.storage_container_resource_manager_id),
      }),
      id: resource.field(self._.blocks, 'id'),
      immutability_period_in_days: resource.field(self._.blocks, 'immutability_period_in_days'),
      locked: resource.field(self._.blocks, 'locked'),
      protected_append_writes_all_enabled: resource.field(self._.blocks, 'protected_append_writes_all_enabled'),
      protected_append_writes_enabled: resource.field(self._.blocks, 'protected_append_writes_enabled'),
      storage_container_resource_manager_id: resource.field(self._.blocks, 'storage_container_resource_manager_id'),
    },
    storage_data_lake_gen2_filesystem(name, block): {
      local resource = blockType.resource('azurerm_storage_data_lake_gen2_filesystem', name),
      _: resource._(block, {
        default_encryption_scope: build.template(std.get(block, 'default_encryption_scope', null)),
        group: build.template(std.get(block, 'group', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        owner: build.template(std.get(block, 'owner', null)),
        properties: build.template(std.get(block, 'properties', null)),
        storage_account_id: build.template(block.storage_account_id),
      }),
      default_encryption_scope: resource.field(self._.blocks, 'default_encryption_scope'),
      group: resource.field(self._.blocks, 'group'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      owner: resource.field(self._.blocks, 'owner'),
      properties: resource.field(self._.blocks, 'properties'),
      storage_account_id: resource.field(self._.blocks, 'storage_account_id'),
    },
    storage_data_lake_gen2_path(name, block): {
      local resource = blockType.resource('azurerm_storage_data_lake_gen2_path', name),
      _: resource._(block, {
        filesystem_name: build.template(block.filesystem_name),
        group: build.template(std.get(block, 'group', null)),
        id: build.template(std.get(block, 'id', null)),
        owner: build.template(std.get(block, 'owner', null)),
        path: build.template(block.path),
        resource: build.template(block.resource),
        storage_account_id: build.template(block.storage_account_id),
      }),
      filesystem_name: resource.field(self._.blocks, 'filesystem_name'),
      group: resource.field(self._.blocks, 'group'),
      id: resource.field(self._.blocks, 'id'),
      owner: resource.field(self._.blocks, 'owner'),
      path: resource.field(self._.blocks, 'path'),
      resource: resource.field(self._.blocks, 'resource'),
      storage_account_id: resource.field(self._.blocks, 'storage_account_id'),
    },
    storage_encryption_scope(name, block): {
      local resource = blockType.resource('azurerm_storage_encryption_scope', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        infrastructure_encryption_required: build.template(std.get(block, 'infrastructure_encryption_required', null)),
        key_vault_key_id: build.template(std.get(block, 'key_vault_key_id', null)),
        name: build.template(block.name),
        source: build.template(block.source),
        storage_account_id: build.template(block.storage_account_id),
      }),
      id: resource.field(self._.blocks, 'id'),
      infrastructure_encryption_required: resource.field(self._.blocks, 'infrastructure_encryption_required'),
      key_vault_key_id: resource.field(self._.blocks, 'key_vault_key_id'),
      name: resource.field(self._.blocks, 'name'),
      source: resource.field(self._.blocks, 'source'),
      storage_account_id: resource.field(self._.blocks, 'storage_account_id'),
    },
    storage_management_policy(name, block): {
      local resource = blockType.resource('azurerm_storage_management_policy', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        storage_account_id: build.template(block.storage_account_id),
      }),
      id: resource.field(self._.blocks, 'id'),
      storage_account_id: resource.field(self._.blocks, 'storage_account_id'),
    },
    storage_mover(name, block): {
      local resource = blockType.resource('azurerm_storage_mover', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      description: resource.field(self._.blocks, 'description'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    storage_mover_agent(name, block): {
      local resource = blockType.resource('azurerm_storage_mover_agent', name),
      _: resource._(block, {
        arc_virtual_machine_id: build.template(block.arc_virtual_machine_id),
        arc_virtual_machine_uuid: build.template(block.arc_virtual_machine_uuid),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        storage_mover_id: build.template(block.storage_mover_id),
      }),
      arc_virtual_machine_id: resource.field(self._.blocks, 'arc_virtual_machine_id'),
      arc_virtual_machine_uuid: resource.field(self._.blocks, 'arc_virtual_machine_uuid'),
      description: resource.field(self._.blocks, 'description'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      storage_mover_id: resource.field(self._.blocks, 'storage_mover_id'),
    },
    storage_mover_job_definition(name, block): {
      local resource = blockType.resource('azurerm_storage_mover_job_definition', name),
      _: resource._(block, {
        agent_name: build.template(std.get(block, 'agent_name', null)),
        copy_mode: build.template(block.copy_mode),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        source_name: build.template(block.source_name),
        source_sub_path: build.template(std.get(block, 'source_sub_path', null)),
        storage_mover_project_id: build.template(block.storage_mover_project_id),
        target_name: build.template(block.target_name),
        target_sub_path: build.template(std.get(block, 'target_sub_path', null)),
      }),
      agent_name: resource.field(self._.blocks, 'agent_name'),
      copy_mode: resource.field(self._.blocks, 'copy_mode'),
      description: resource.field(self._.blocks, 'description'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      source_name: resource.field(self._.blocks, 'source_name'),
      source_sub_path: resource.field(self._.blocks, 'source_sub_path'),
      storage_mover_project_id: resource.field(self._.blocks, 'storage_mover_project_id'),
      target_name: resource.field(self._.blocks, 'target_name'),
      target_sub_path: resource.field(self._.blocks, 'target_sub_path'),
    },
    storage_mover_project(name, block): {
      local resource = blockType.resource('azurerm_storage_mover_project', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        storage_mover_id: build.template(block.storage_mover_id),
      }),
      description: resource.field(self._.blocks, 'description'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      storage_mover_id: resource.field(self._.blocks, 'storage_mover_id'),
    },
    storage_mover_source_endpoint(name, block): {
      local resource = blockType.resource('azurerm_storage_mover_source_endpoint', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        export: build.template(std.get(block, 'export', null)),
        host: build.template(block.host),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        nfs_version: build.template(std.get(block, 'nfs_version', null)),
        storage_mover_id: build.template(block.storage_mover_id),
      }),
      description: resource.field(self._.blocks, 'description'),
      export: resource.field(self._.blocks, 'export'),
      host: resource.field(self._.blocks, 'host'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      nfs_version: resource.field(self._.blocks, 'nfs_version'),
      storage_mover_id: resource.field(self._.blocks, 'storage_mover_id'),
    },
    storage_mover_target_endpoint(name, block): {
      local resource = blockType.resource('azurerm_storage_mover_target_endpoint', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        storage_account_id: build.template(block.storage_account_id),
        storage_container_name: build.template(block.storage_container_name),
        storage_mover_id: build.template(block.storage_mover_id),
      }),
      description: resource.field(self._.blocks, 'description'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      storage_account_id: resource.field(self._.blocks, 'storage_account_id'),
      storage_container_name: resource.field(self._.blocks, 'storage_container_name'),
      storage_mover_id: resource.field(self._.blocks, 'storage_mover_id'),
    },
    storage_object_replication(name, block): {
      local resource = blockType.resource('azurerm_storage_object_replication', name),
      _: resource._(block, {
        destination_object_replication_id: build.template(std.get(block, 'destination_object_replication_id', null)),
        destination_storage_account_id: build.template(block.destination_storage_account_id),
        id: build.template(std.get(block, 'id', null)),
        source_object_replication_id: build.template(std.get(block, 'source_object_replication_id', null)),
        source_storage_account_id: build.template(block.source_storage_account_id),
      }),
      destination_object_replication_id: resource.field(self._.blocks, 'destination_object_replication_id'),
      destination_storage_account_id: resource.field(self._.blocks, 'destination_storage_account_id'),
      id: resource.field(self._.blocks, 'id'),
      source_object_replication_id: resource.field(self._.blocks, 'source_object_replication_id'),
      source_storage_account_id: resource.field(self._.blocks, 'source_storage_account_id'),
    },
    storage_queue(name, block): {
      local resource = blockType.resource('azurerm_storage_queue', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        metadata: build.template(std.get(block, 'metadata', null)),
        name: build.template(block.name),
        resource_manager_id: build.template(std.get(block, 'resource_manager_id', null)),
        storage_account_name: build.template(block.storage_account_name),
      }),
      id: resource.field(self._.blocks, 'id'),
      metadata: resource.field(self._.blocks, 'metadata'),
      name: resource.field(self._.blocks, 'name'),
      resource_manager_id: resource.field(self._.blocks, 'resource_manager_id'),
      storage_account_name: resource.field(self._.blocks, 'storage_account_name'),
    },
    storage_share(name, block): {
      local resource = blockType.resource('azurerm_storage_share', name),
      _: resource._(block, {
        access_tier: build.template(std.get(block, 'access_tier', null)),
        enabled_protocol: build.template(std.get(block, 'enabled_protocol', null)),
        id: build.template(std.get(block, 'id', null)),
        metadata: build.template(std.get(block, 'metadata', null)),
        name: build.template(block.name),
        quota: build.template(block.quota),
        resource_manager_id: build.template(std.get(block, 'resource_manager_id', null)),
        storage_account_id: build.template(std.get(block, 'storage_account_id', null)),
        storage_account_name: build.template(std.get(block, 'storage_account_name', null)),
        url: build.template(std.get(block, 'url', null)),
      }),
      access_tier: resource.field(self._.blocks, 'access_tier'),
      enabled_protocol: resource.field(self._.blocks, 'enabled_protocol'),
      id: resource.field(self._.blocks, 'id'),
      metadata: resource.field(self._.blocks, 'metadata'),
      name: resource.field(self._.blocks, 'name'),
      quota: resource.field(self._.blocks, 'quota'),
      resource_manager_id: resource.field(self._.blocks, 'resource_manager_id'),
      storage_account_id: resource.field(self._.blocks, 'storage_account_id'),
      storage_account_name: resource.field(self._.blocks, 'storage_account_name'),
      url: resource.field(self._.blocks, 'url'),
    },
    storage_share_directory(name, block): {
      local resource = blockType.resource('azurerm_storage_share_directory', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        metadata: build.template(std.get(block, 'metadata', null)),
        name: build.template(block.name),
        storage_share_id: build.template(block.storage_share_id),
      }),
      id: resource.field(self._.blocks, 'id'),
      metadata: resource.field(self._.blocks, 'metadata'),
      name: resource.field(self._.blocks, 'name'),
      storage_share_id: resource.field(self._.blocks, 'storage_share_id'),
    },
    storage_share_file(name, block): {
      local resource = blockType.resource('azurerm_storage_share_file', name),
      _: resource._(block, {
        content_disposition: build.template(std.get(block, 'content_disposition', null)),
        content_encoding: build.template(std.get(block, 'content_encoding', null)),
        content_length: build.template(std.get(block, 'content_length', null)),
        content_md5: build.template(std.get(block, 'content_md5', null)),
        content_type: build.template(std.get(block, 'content_type', null)),
        id: build.template(std.get(block, 'id', null)),
        metadata: build.template(std.get(block, 'metadata', null)),
        name: build.template(block.name),
        path: build.template(std.get(block, 'path', null)),
        source: build.template(std.get(block, 'source', null)),
        storage_share_id: build.template(block.storage_share_id),
      }),
      content_disposition: resource.field(self._.blocks, 'content_disposition'),
      content_encoding: resource.field(self._.blocks, 'content_encoding'),
      content_length: resource.field(self._.blocks, 'content_length'),
      content_md5: resource.field(self._.blocks, 'content_md5'),
      content_type: resource.field(self._.blocks, 'content_type'),
      id: resource.field(self._.blocks, 'id'),
      metadata: resource.field(self._.blocks, 'metadata'),
      name: resource.field(self._.blocks, 'name'),
      path: resource.field(self._.blocks, 'path'),
      source: resource.field(self._.blocks, 'source'),
      storage_share_id: resource.field(self._.blocks, 'storage_share_id'),
    },
    storage_sync(name, block): {
      local resource = blockType.resource('azurerm_storage_sync', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        incoming_traffic_policy: build.template(std.get(block, 'incoming_traffic_policy', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        registered_servers: build.template(std.get(block, 'registered_servers', null)),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      incoming_traffic_policy: resource.field(self._.blocks, 'incoming_traffic_policy'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      registered_servers: resource.field(self._.blocks, 'registered_servers'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    storage_sync_cloud_endpoint(name, block): {
      local resource = blockType.resource('azurerm_storage_sync_cloud_endpoint', name),
      _: resource._(block, {
        file_share_name: build.template(block.file_share_name),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        storage_account_id: build.template(block.storage_account_id),
        storage_account_tenant_id: build.template(std.get(block, 'storage_account_tenant_id', null)),
        storage_sync_group_id: build.template(block.storage_sync_group_id),
      }),
      file_share_name: resource.field(self._.blocks, 'file_share_name'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      storage_account_id: resource.field(self._.blocks, 'storage_account_id'),
      storage_account_tenant_id: resource.field(self._.blocks, 'storage_account_tenant_id'),
      storage_sync_group_id: resource.field(self._.blocks, 'storage_sync_group_id'),
    },
    storage_sync_group(name, block): {
      local resource = blockType.resource('azurerm_storage_sync_group', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        storage_sync_id: build.template(block.storage_sync_id),
      }),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      storage_sync_id: resource.field(self._.blocks, 'storage_sync_id'),
    },
    storage_sync_server_endpoint(name, block): {
      local resource = blockType.resource('azurerm_storage_sync_server_endpoint', name),
      _: resource._(block, {
        cloud_tiering_enabled: build.template(std.get(block, 'cloud_tiering_enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        initial_download_policy: build.template(std.get(block, 'initial_download_policy', null)),
        local_cache_mode: build.template(std.get(block, 'local_cache_mode', null)),
        name: build.template(block.name),
        registered_server_id: build.template(block.registered_server_id),
        server_local_path: build.template(block.server_local_path),
        storage_sync_group_id: build.template(block.storage_sync_group_id),
        tier_files_older_than_days: build.template(std.get(block, 'tier_files_older_than_days', null)),
        volume_free_space_percent: build.template(std.get(block, 'volume_free_space_percent', null)),
      }),
      cloud_tiering_enabled: resource.field(self._.blocks, 'cloud_tiering_enabled'),
      id: resource.field(self._.blocks, 'id'),
      initial_download_policy: resource.field(self._.blocks, 'initial_download_policy'),
      local_cache_mode: resource.field(self._.blocks, 'local_cache_mode'),
      name: resource.field(self._.blocks, 'name'),
      registered_server_id: resource.field(self._.blocks, 'registered_server_id'),
      server_local_path: resource.field(self._.blocks, 'server_local_path'),
      storage_sync_group_id: resource.field(self._.blocks, 'storage_sync_group_id'),
      tier_files_older_than_days: resource.field(self._.blocks, 'tier_files_older_than_days'),
      volume_free_space_percent: resource.field(self._.blocks, 'volume_free_space_percent'),
    },
    storage_table(name, block): {
      local resource = blockType.resource('azurerm_storage_table', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        resource_manager_id: build.template(std.get(block, 'resource_manager_id', null)),
        storage_account_name: build.template(block.storage_account_name),
      }),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      resource_manager_id: resource.field(self._.blocks, 'resource_manager_id'),
      storage_account_name: resource.field(self._.blocks, 'storage_account_name'),
    },
    storage_table_entity(name, block): {
      local resource = blockType.resource('azurerm_storage_table_entity', name),
      _: resource._(block, {
        entity: build.template(block.entity),
        id: build.template(std.get(block, 'id', null)),
        partition_key: build.template(block.partition_key),
        row_key: build.template(block.row_key),
        storage_table_id: build.template(block.storage_table_id),
      }),
      entity: resource.field(self._.blocks, 'entity'),
      id: resource.field(self._.blocks, 'id'),
      partition_key: resource.field(self._.blocks, 'partition_key'),
      row_key: resource.field(self._.blocks, 'row_key'),
      storage_table_id: resource.field(self._.blocks, 'storage_table_id'),
    },
    stream_analytics_cluster(name, block): {
      local resource = blockType.resource('azurerm_stream_analytics_cluster', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        streaming_capacity: build.template(block.streaming_capacity),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      streaming_capacity: resource.field(self._.blocks, 'streaming_capacity'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    stream_analytics_function_javascript_uda(name, block): {
      local resource = blockType.resource('azurerm_stream_analytics_function_javascript_uda', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        script: build.template(block.script),
        stream_analytics_job_id: build.template(block.stream_analytics_job_id),
      }),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      script: resource.field(self._.blocks, 'script'),
      stream_analytics_job_id: resource.field(self._.blocks, 'stream_analytics_job_id'),
    },
    stream_analytics_function_javascript_udf(name, block): {
      local resource = blockType.resource('azurerm_stream_analytics_function_javascript_udf', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        script: build.template(block.script),
        stream_analytics_job_name: build.template(block.stream_analytics_job_name),
      }),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      script: resource.field(self._.blocks, 'script'),
      stream_analytics_job_name: resource.field(self._.blocks, 'stream_analytics_job_name'),
    },
    stream_analytics_job(name, block): {
      local resource = blockType.resource('azurerm_stream_analytics_job', name),
      _: resource._(block, {
        compatibility_level: build.template(std.get(block, 'compatibility_level', null)),
        content_storage_policy: build.template(std.get(block, 'content_storage_policy', null)),
        data_locale: build.template(std.get(block, 'data_locale', null)),
        events_late_arrival_max_delay_in_seconds: build.template(std.get(block, 'events_late_arrival_max_delay_in_seconds', null)),
        events_out_of_order_max_delay_in_seconds: build.template(std.get(block, 'events_out_of_order_max_delay_in_seconds', null)),
        events_out_of_order_policy: build.template(std.get(block, 'events_out_of_order_policy', null)),
        id: build.template(std.get(block, 'id', null)),
        job_id: build.template(std.get(block, 'job_id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        output_error_policy: build.template(std.get(block, 'output_error_policy', null)),
        resource_group_name: build.template(block.resource_group_name),
        sku_name: build.template(std.get(block, 'sku_name', null)),
        stream_analytics_cluster_id: build.template(std.get(block, 'stream_analytics_cluster_id', null)),
        streaming_units: build.template(std.get(block, 'streaming_units', null)),
        tags: build.template(std.get(block, 'tags', null)),
        transformation_query: build.template(block.transformation_query),
        type: build.template(std.get(block, 'type', null)),
      }),
      compatibility_level: resource.field(self._.blocks, 'compatibility_level'),
      content_storage_policy: resource.field(self._.blocks, 'content_storage_policy'),
      data_locale: resource.field(self._.blocks, 'data_locale'),
      events_late_arrival_max_delay_in_seconds: resource.field(self._.blocks, 'events_late_arrival_max_delay_in_seconds'),
      events_out_of_order_max_delay_in_seconds: resource.field(self._.blocks, 'events_out_of_order_max_delay_in_seconds'),
      events_out_of_order_policy: resource.field(self._.blocks, 'events_out_of_order_policy'),
      id: resource.field(self._.blocks, 'id'),
      job_id: resource.field(self._.blocks, 'job_id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      output_error_policy: resource.field(self._.blocks, 'output_error_policy'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      sku_name: resource.field(self._.blocks, 'sku_name'),
      stream_analytics_cluster_id: resource.field(self._.blocks, 'stream_analytics_cluster_id'),
      streaming_units: resource.field(self._.blocks, 'streaming_units'),
      tags: resource.field(self._.blocks, 'tags'),
      transformation_query: resource.field(self._.blocks, 'transformation_query'),
      type: resource.field(self._.blocks, 'type'),
    },
    stream_analytics_job_schedule(name, block): {
      local resource = blockType.resource('azurerm_stream_analytics_job_schedule', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        last_output_time: build.template(std.get(block, 'last_output_time', null)),
        start_mode: build.template(block.start_mode),
        start_time: build.template(std.get(block, 'start_time', null)),
        stream_analytics_job_id: build.template(block.stream_analytics_job_id),
      }),
      id: resource.field(self._.blocks, 'id'),
      last_output_time: resource.field(self._.blocks, 'last_output_time'),
      start_mode: resource.field(self._.blocks, 'start_mode'),
      start_time: resource.field(self._.blocks, 'start_time'),
      stream_analytics_job_id: resource.field(self._.blocks, 'stream_analytics_job_id'),
    },
    stream_analytics_managed_private_endpoint(name, block): {
      local resource = blockType.resource('azurerm_stream_analytics_managed_private_endpoint', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        stream_analytics_cluster_name: build.template(block.stream_analytics_cluster_name),
        subresource_name: build.template(block.subresource_name),
        target_resource_id: build.template(block.target_resource_id),
      }),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      stream_analytics_cluster_name: resource.field(self._.blocks, 'stream_analytics_cluster_name'),
      subresource_name: resource.field(self._.blocks, 'subresource_name'),
      target_resource_id: resource.field(self._.blocks, 'target_resource_id'),
    },
    stream_analytics_output_blob(name, block): {
      local resource = blockType.resource('azurerm_stream_analytics_output_blob', name),
      _: resource._(block, {
        authentication_mode: build.template(std.get(block, 'authentication_mode', null)),
        batch_max_wait_time: build.template(std.get(block, 'batch_max_wait_time', null)),
        batch_min_rows: build.template(std.get(block, 'batch_min_rows', null)),
        blob_write_mode: build.template(std.get(block, 'blob_write_mode', null)),
        date_format: build.template(block.date_format),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        path_pattern: build.template(block.path_pattern),
        resource_group_name: build.template(block.resource_group_name),
        storage_account_key: build.template(std.get(block, 'storage_account_key', null)),
        storage_account_name: build.template(block.storage_account_name),
        storage_container_name: build.template(block.storage_container_name),
        stream_analytics_job_name: build.template(block.stream_analytics_job_name),
        time_format: build.template(block.time_format),
      }),
      authentication_mode: resource.field(self._.blocks, 'authentication_mode'),
      batch_max_wait_time: resource.field(self._.blocks, 'batch_max_wait_time'),
      batch_min_rows: resource.field(self._.blocks, 'batch_min_rows'),
      blob_write_mode: resource.field(self._.blocks, 'blob_write_mode'),
      date_format: resource.field(self._.blocks, 'date_format'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      path_pattern: resource.field(self._.blocks, 'path_pattern'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      storage_account_key: resource.field(self._.blocks, 'storage_account_key'),
      storage_account_name: resource.field(self._.blocks, 'storage_account_name'),
      storage_container_name: resource.field(self._.blocks, 'storage_container_name'),
      stream_analytics_job_name: resource.field(self._.blocks, 'stream_analytics_job_name'),
      time_format: resource.field(self._.blocks, 'time_format'),
    },
    stream_analytics_output_cosmosdb(name, block): {
      local resource = blockType.resource('azurerm_stream_analytics_output_cosmosdb', name),
      _: resource._(block, {
        authentication_mode: build.template(std.get(block, 'authentication_mode', null)),
        container_name: build.template(block.container_name),
        cosmosdb_account_key: build.template(block.cosmosdb_account_key),
        cosmosdb_sql_database_id: build.template(block.cosmosdb_sql_database_id),
        document_id: build.template(std.get(block, 'document_id', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        partition_key: build.template(std.get(block, 'partition_key', null)),
        stream_analytics_job_id: build.template(block.stream_analytics_job_id),
      }),
      authentication_mode: resource.field(self._.blocks, 'authentication_mode'),
      container_name: resource.field(self._.blocks, 'container_name'),
      cosmosdb_account_key: resource.field(self._.blocks, 'cosmosdb_account_key'),
      cosmosdb_sql_database_id: resource.field(self._.blocks, 'cosmosdb_sql_database_id'),
      document_id: resource.field(self._.blocks, 'document_id'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      partition_key: resource.field(self._.blocks, 'partition_key'),
      stream_analytics_job_id: resource.field(self._.blocks, 'stream_analytics_job_id'),
    },
    stream_analytics_output_eventhub(name, block): {
      local resource = blockType.resource('azurerm_stream_analytics_output_eventhub', name),
      _: resource._(block, {
        authentication_mode: build.template(std.get(block, 'authentication_mode', null)),
        eventhub_name: build.template(block.eventhub_name),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        partition_key: build.template(std.get(block, 'partition_key', null)),
        property_columns: build.template(std.get(block, 'property_columns', null)),
        resource_group_name: build.template(block.resource_group_name),
        servicebus_namespace: build.template(block.servicebus_namespace),
        shared_access_policy_key: build.template(std.get(block, 'shared_access_policy_key', null)),
        shared_access_policy_name: build.template(std.get(block, 'shared_access_policy_name', null)),
        stream_analytics_job_name: build.template(block.stream_analytics_job_name),
      }),
      authentication_mode: resource.field(self._.blocks, 'authentication_mode'),
      eventhub_name: resource.field(self._.blocks, 'eventhub_name'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      partition_key: resource.field(self._.blocks, 'partition_key'),
      property_columns: resource.field(self._.blocks, 'property_columns'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      servicebus_namespace: resource.field(self._.blocks, 'servicebus_namespace'),
      shared_access_policy_key: resource.field(self._.blocks, 'shared_access_policy_key'),
      shared_access_policy_name: resource.field(self._.blocks, 'shared_access_policy_name'),
      stream_analytics_job_name: resource.field(self._.blocks, 'stream_analytics_job_name'),
    },
    stream_analytics_output_function(name, block): {
      local resource = blockType.resource('azurerm_stream_analytics_output_function', name),
      _: resource._(block, {
        api_key: build.template(block.api_key),
        batch_max_count: build.template(std.get(block, 'batch_max_count', null)),
        batch_max_in_bytes: build.template(std.get(block, 'batch_max_in_bytes', null)),
        function_app: build.template(block.function_app),
        function_name: build.template(block.function_name),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        stream_analytics_job_name: build.template(block.stream_analytics_job_name),
      }),
      api_key: resource.field(self._.blocks, 'api_key'),
      batch_max_count: resource.field(self._.blocks, 'batch_max_count'),
      batch_max_in_bytes: resource.field(self._.blocks, 'batch_max_in_bytes'),
      function_app: resource.field(self._.blocks, 'function_app'),
      function_name: resource.field(self._.blocks, 'function_name'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      stream_analytics_job_name: resource.field(self._.blocks, 'stream_analytics_job_name'),
    },
    stream_analytics_output_mssql(name, block): {
      local resource = blockType.resource('azurerm_stream_analytics_output_mssql', name),
      _: resource._(block, {
        authentication_mode: build.template(std.get(block, 'authentication_mode', null)),
        database: build.template(block.database),
        id: build.template(std.get(block, 'id', null)),
        max_batch_count: build.template(std.get(block, 'max_batch_count', null)),
        max_writer_count: build.template(std.get(block, 'max_writer_count', null)),
        name: build.template(block.name),
        password: build.template(std.get(block, 'password', null)),
        resource_group_name: build.template(block.resource_group_name),
        server: build.template(block.server),
        stream_analytics_job_name: build.template(block.stream_analytics_job_name),
        table: build.template(block.table),
        user: build.template(std.get(block, 'user', null)),
      }),
      authentication_mode: resource.field(self._.blocks, 'authentication_mode'),
      database: resource.field(self._.blocks, 'database'),
      id: resource.field(self._.blocks, 'id'),
      max_batch_count: resource.field(self._.blocks, 'max_batch_count'),
      max_writer_count: resource.field(self._.blocks, 'max_writer_count'),
      name: resource.field(self._.blocks, 'name'),
      password: resource.field(self._.blocks, 'password'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      server: resource.field(self._.blocks, 'server'),
      stream_analytics_job_name: resource.field(self._.blocks, 'stream_analytics_job_name'),
      table: resource.field(self._.blocks, 'table'),
      user: resource.field(self._.blocks, 'user'),
    },
    stream_analytics_output_powerbi(name, block): {
      local resource = blockType.resource('azurerm_stream_analytics_output_powerbi', name),
      _: resource._(block, {
        dataset: build.template(block.dataset),
        group_id: build.template(block.group_id),
        group_name: build.template(block.group_name),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        stream_analytics_job_id: build.template(block.stream_analytics_job_id),
        table: build.template(block.table),
        token_user_display_name: build.template(std.get(block, 'token_user_display_name', null)),
        token_user_principal_name: build.template(std.get(block, 'token_user_principal_name', null)),
      }),
      dataset: resource.field(self._.blocks, 'dataset'),
      group_id: resource.field(self._.blocks, 'group_id'),
      group_name: resource.field(self._.blocks, 'group_name'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      stream_analytics_job_id: resource.field(self._.blocks, 'stream_analytics_job_id'),
      table: resource.field(self._.blocks, 'table'),
      token_user_display_name: resource.field(self._.blocks, 'token_user_display_name'),
      token_user_principal_name: resource.field(self._.blocks, 'token_user_principal_name'),
    },
    stream_analytics_output_servicebus_queue(name, block): {
      local resource = blockType.resource('azurerm_stream_analytics_output_servicebus_queue', name),
      _: resource._(block, {
        authentication_mode: build.template(std.get(block, 'authentication_mode', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        property_columns: build.template(std.get(block, 'property_columns', null)),
        queue_name: build.template(block.queue_name),
        resource_group_name: build.template(block.resource_group_name),
        servicebus_namespace: build.template(block.servicebus_namespace),
        shared_access_policy_key: build.template(std.get(block, 'shared_access_policy_key', null)),
        shared_access_policy_name: build.template(std.get(block, 'shared_access_policy_name', null)),
        stream_analytics_job_name: build.template(block.stream_analytics_job_name),
        system_property_columns: build.template(std.get(block, 'system_property_columns', null)),
      }),
      authentication_mode: resource.field(self._.blocks, 'authentication_mode'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      property_columns: resource.field(self._.blocks, 'property_columns'),
      queue_name: resource.field(self._.blocks, 'queue_name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      servicebus_namespace: resource.field(self._.blocks, 'servicebus_namespace'),
      shared_access_policy_key: resource.field(self._.blocks, 'shared_access_policy_key'),
      shared_access_policy_name: resource.field(self._.blocks, 'shared_access_policy_name'),
      stream_analytics_job_name: resource.field(self._.blocks, 'stream_analytics_job_name'),
      system_property_columns: resource.field(self._.blocks, 'system_property_columns'),
    },
    stream_analytics_output_servicebus_topic(name, block): {
      local resource = blockType.resource('azurerm_stream_analytics_output_servicebus_topic', name),
      _: resource._(block, {
        authentication_mode: build.template(std.get(block, 'authentication_mode', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        property_columns: build.template(std.get(block, 'property_columns', null)),
        resource_group_name: build.template(block.resource_group_name),
        servicebus_namespace: build.template(block.servicebus_namespace),
        shared_access_policy_key: build.template(std.get(block, 'shared_access_policy_key', null)),
        shared_access_policy_name: build.template(std.get(block, 'shared_access_policy_name', null)),
        stream_analytics_job_name: build.template(block.stream_analytics_job_name),
        system_property_columns: build.template(std.get(block, 'system_property_columns', null)),
        topic_name: build.template(block.topic_name),
      }),
      authentication_mode: resource.field(self._.blocks, 'authentication_mode'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      property_columns: resource.field(self._.blocks, 'property_columns'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      servicebus_namespace: resource.field(self._.blocks, 'servicebus_namespace'),
      shared_access_policy_key: resource.field(self._.blocks, 'shared_access_policy_key'),
      shared_access_policy_name: resource.field(self._.blocks, 'shared_access_policy_name'),
      stream_analytics_job_name: resource.field(self._.blocks, 'stream_analytics_job_name'),
      system_property_columns: resource.field(self._.blocks, 'system_property_columns'),
      topic_name: resource.field(self._.blocks, 'topic_name'),
    },
    stream_analytics_output_synapse(name, block): {
      local resource = blockType.resource('azurerm_stream_analytics_output_synapse', name),
      _: resource._(block, {
        database: build.template(block.database),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        password: build.template(block.password),
        resource_group_name: build.template(block.resource_group_name),
        server: build.template(block.server),
        stream_analytics_job_name: build.template(block.stream_analytics_job_name),
        table: build.template(block.table),
        user: build.template(block.user),
      }),
      database: resource.field(self._.blocks, 'database'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      password: resource.field(self._.blocks, 'password'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      server: resource.field(self._.blocks, 'server'),
      stream_analytics_job_name: resource.field(self._.blocks, 'stream_analytics_job_name'),
      table: resource.field(self._.blocks, 'table'),
      user: resource.field(self._.blocks, 'user'),
    },
    stream_analytics_output_table(name, block): {
      local resource = blockType.resource('azurerm_stream_analytics_output_table', name),
      _: resource._(block, {
        batch_size: build.template(block.batch_size),
        columns_to_remove: build.template(std.get(block, 'columns_to_remove', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        partition_key: build.template(block.partition_key),
        resource_group_name: build.template(block.resource_group_name),
        row_key: build.template(block.row_key),
        storage_account_key: build.template(block.storage_account_key),
        storage_account_name: build.template(block.storage_account_name),
        stream_analytics_job_name: build.template(block.stream_analytics_job_name),
        table: build.template(block.table),
      }),
      batch_size: resource.field(self._.blocks, 'batch_size'),
      columns_to_remove: resource.field(self._.blocks, 'columns_to_remove'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      partition_key: resource.field(self._.blocks, 'partition_key'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      row_key: resource.field(self._.blocks, 'row_key'),
      storage_account_key: resource.field(self._.blocks, 'storage_account_key'),
      storage_account_name: resource.field(self._.blocks, 'storage_account_name'),
      stream_analytics_job_name: resource.field(self._.blocks, 'stream_analytics_job_name'),
      table: resource.field(self._.blocks, 'table'),
    },
    stream_analytics_reference_input_blob(name, block): {
      local resource = blockType.resource('azurerm_stream_analytics_reference_input_blob', name),
      _: resource._(block, {
        authentication_mode: build.template(std.get(block, 'authentication_mode', null)),
        date_format: build.template(block.date_format),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        path_pattern: build.template(block.path_pattern),
        resource_group_name: build.template(block.resource_group_name),
        storage_account_key: build.template(std.get(block, 'storage_account_key', null)),
        storage_account_name: build.template(block.storage_account_name),
        storage_container_name: build.template(block.storage_container_name),
        stream_analytics_job_name: build.template(block.stream_analytics_job_name),
        time_format: build.template(block.time_format),
      }),
      authentication_mode: resource.field(self._.blocks, 'authentication_mode'),
      date_format: resource.field(self._.blocks, 'date_format'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      path_pattern: resource.field(self._.blocks, 'path_pattern'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      storage_account_key: resource.field(self._.blocks, 'storage_account_key'),
      storage_account_name: resource.field(self._.blocks, 'storage_account_name'),
      storage_container_name: resource.field(self._.blocks, 'storage_container_name'),
      stream_analytics_job_name: resource.field(self._.blocks, 'stream_analytics_job_name'),
      time_format: resource.field(self._.blocks, 'time_format'),
    },
    stream_analytics_reference_input_mssql(name, block): {
      local resource = blockType.resource('azurerm_stream_analytics_reference_input_mssql', name),
      _: resource._(block, {
        database: build.template(block.database),
        delta_snapshot_query: build.template(std.get(block, 'delta_snapshot_query', null)),
        full_snapshot_query: build.template(block.full_snapshot_query),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        password: build.template(block.password),
        refresh_interval_duration: build.template(std.get(block, 'refresh_interval_duration', null)),
        refresh_type: build.template(block.refresh_type),
        resource_group_name: build.template(block.resource_group_name),
        server: build.template(block.server),
        stream_analytics_job_name: build.template(block.stream_analytics_job_name),
        table: build.template(std.get(block, 'table', null)),
        username: build.template(block.username),
      }),
      database: resource.field(self._.blocks, 'database'),
      delta_snapshot_query: resource.field(self._.blocks, 'delta_snapshot_query'),
      full_snapshot_query: resource.field(self._.blocks, 'full_snapshot_query'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      password: resource.field(self._.blocks, 'password'),
      refresh_interval_duration: resource.field(self._.blocks, 'refresh_interval_duration'),
      refresh_type: resource.field(self._.blocks, 'refresh_type'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      server: resource.field(self._.blocks, 'server'),
      stream_analytics_job_name: resource.field(self._.blocks, 'stream_analytics_job_name'),
      table: resource.field(self._.blocks, 'table'),
      username: resource.field(self._.blocks, 'username'),
    },
    stream_analytics_stream_input_blob(name, block): {
      local resource = blockType.resource('azurerm_stream_analytics_stream_input_blob', name),
      _: resource._(block, {
        authentication_mode: build.template(std.get(block, 'authentication_mode', null)),
        date_format: build.template(block.date_format),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        path_pattern: build.template(block.path_pattern),
        resource_group_name: build.template(block.resource_group_name),
        storage_account_key: build.template(block.storage_account_key),
        storage_account_name: build.template(block.storage_account_name),
        storage_container_name: build.template(block.storage_container_name),
        stream_analytics_job_name: build.template(block.stream_analytics_job_name),
        time_format: build.template(block.time_format),
      }),
      authentication_mode: resource.field(self._.blocks, 'authentication_mode'),
      date_format: resource.field(self._.blocks, 'date_format'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      path_pattern: resource.field(self._.blocks, 'path_pattern'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      storage_account_key: resource.field(self._.blocks, 'storage_account_key'),
      storage_account_name: resource.field(self._.blocks, 'storage_account_name'),
      storage_container_name: resource.field(self._.blocks, 'storage_container_name'),
      stream_analytics_job_name: resource.field(self._.blocks, 'stream_analytics_job_name'),
      time_format: resource.field(self._.blocks, 'time_format'),
    },
    stream_analytics_stream_input_eventhub(name, block): {
      local resource = blockType.resource('azurerm_stream_analytics_stream_input_eventhub', name),
      _: resource._(block, {
        authentication_mode: build.template(std.get(block, 'authentication_mode', null)),
        eventhub_consumer_group_name: build.template(std.get(block, 'eventhub_consumer_group_name', null)),
        eventhub_name: build.template(block.eventhub_name),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        partition_key: build.template(std.get(block, 'partition_key', null)),
        resource_group_name: build.template(block.resource_group_name),
        servicebus_namespace: build.template(block.servicebus_namespace),
        shared_access_policy_key: build.template(std.get(block, 'shared_access_policy_key', null)),
        shared_access_policy_name: build.template(std.get(block, 'shared_access_policy_name', null)),
        stream_analytics_job_name: build.template(block.stream_analytics_job_name),
      }),
      authentication_mode: resource.field(self._.blocks, 'authentication_mode'),
      eventhub_consumer_group_name: resource.field(self._.blocks, 'eventhub_consumer_group_name'),
      eventhub_name: resource.field(self._.blocks, 'eventhub_name'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      partition_key: resource.field(self._.blocks, 'partition_key'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      servicebus_namespace: resource.field(self._.blocks, 'servicebus_namespace'),
      shared_access_policy_key: resource.field(self._.blocks, 'shared_access_policy_key'),
      shared_access_policy_name: resource.field(self._.blocks, 'shared_access_policy_name'),
      stream_analytics_job_name: resource.field(self._.blocks, 'stream_analytics_job_name'),
    },
    stream_analytics_stream_input_eventhub_v2(name, block): {
      local resource = blockType.resource('azurerm_stream_analytics_stream_input_eventhub_v2', name),
      _: resource._(block, {
        authentication_mode: build.template(std.get(block, 'authentication_mode', null)),
        eventhub_consumer_group_name: build.template(std.get(block, 'eventhub_consumer_group_name', null)),
        eventhub_name: build.template(block.eventhub_name),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        partition_key: build.template(std.get(block, 'partition_key', null)),
        servicebus_namespace: build.template(block.servicebus_namespace),
        shared_access_policy_key: build.template(std.get(block, 'shared_access_policy_key', null)),
        shared_access_policy_name: build.template(std.get(block, 'shared_access_policy_name', null)),
        stream_analytics_job_id: build.template(block.stream_analytics_job_id),
      }),
      authentication_mode: resource.field(self._.blocks, 'authentication_mode'),
      eventhub_consumer_group_name: resource.field(self._.blocks, 'eventhub_consumer_group_name'),
      eventhub_name: resource.field(self._.blocks, 'eventhub_name'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      partition_key: resource.field(self._.blocks, 'partition_key'),
      servicebus_namespace: resource.field(self._.blocks, 'servicebus_namespace'),
      shared_access_policy_key: resource.field(self._.blocks, 'shared_access_policy_key'),
      shared_access_policy_name: resource.field(self._.blocks, 'shared_access_policy_name'),
      stream_analytics_job_id: resource.field(self._.blocks, 'stream_analytics_job_id'),
    },
    stream_analytics_stream_input_iothub(name, block): {
      local resource = blockType.resource('azurerm_stream_analytics_stream_input_iothub', name),
      _: resource._(block, {
        endpoint: build.template(block.endpoint),
        eventhub_consumer_group_name: build.template(block.eventhub_consumer_group_name),
        id: build.template(std.get(block, 'id', null)),
        iothub_namespace: build.template(block.iothub_namespace),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        shared_access_policy_key: build.template(block.shared_access_policy_key),
        shared_access_policy_name: build.template(block.shared_access_policy_name),
        stream_analytics_job_name: build.template(block.stream_analytics_job_name),
      }),
      endpoint: resource.field(self._.blocks, 'endpoint'),
      eventhub_consumer_group_name: resource.field(self._.blocks, 'eventhub_consumer_group_name'),
      id: resource.field(self._.blocks, 'id'),
      iothub_namespace: resource.field(self._.blocks, 'iothub_namespace'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      shared_access_policy_key: resource.field(self._.blocks, 'shared_access_policy_key'),
      shared_access_policy_name: resource.field(self._.blocks, 'shared_access_policy_name'),
      stream_analytics_job_name: resource.field(self._.blocks, 'stream_analytics_job_name'),
    },
    subnet(name, block): {
      local resource = blockType.resource('azurerm_subnet', name),
      _: resource._(block, {
        address_prefixes: build.template(block.address_prefixes),
        default_outbound_access_enabled: build.template(std.get(block, 'default_outbound_access_enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        private_endpoint_network_policies: build.template(std.get(block, 'private_endpoint_network_policies', null)),
        private_link_service_network_policies_enabled: build.template(std.get(block, 'private_link_service_network_policies_enabled', null)),
        resource_group_name: build.template(block.resource_group_name),
        service_endpoint_policy_ids: build.template(std.get(block, 'service_endpoint_policy_ids', null)),
        service_endpoints: build.template(std.get(block, 'service_endpoints', null)),
        virtual_network_name: build.template(block.virtual_network_name),
      }),
      address_prefixes: resource.field(self._.blocks, 'address_prefixes'),
      default_outbound_access_enabled: resource.field(self._.blocks, 'default_outbound_access_enabled'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      private_endpoint_network_policies: resource.field(self._.blocks, 'private_endpoint_network_policies'),
      private_link_service_network_policies_enabled: resource.field(self._.blocks, 'private_link_service_network_policies_enabled'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      service_endpoint_policy_ids: resource.field(self._.blocks, 'service_endpoint_policy_ids'),
      service_endpoints: resource.field(self._.blocks, 'service_endpoints'),
      virtual_network_name: resource.field(self._.blocks, 'virtual_network_name'),
    },
    subnet_nat_gateway_association(name, block): {
      local resource = blockType.resource('azurerm_subnet_nat_gateway_association', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        nat_gateway_id: build.template(block.nat_gateway_id),
        subnet_id: build.template(block.subnet_id),
      }),
      id: resource.field(self._.blocks, 'id'),
      nat_gateway_id: resource.field(self._.blocks, 'nat_gateway_id'),
      subnet_id: resource.field(self._.blocks, 'subnet_id'),
    },
    subnet_network_security_group_association(name, block): {
      local resource = blockType.resource('azurerm_subnet_network_security_group_association', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        network_security_group_id: build.template(block.network_security_group_id),
        subnet_id: build.template(block.subnet_id),
      }),
      id: resource.field(self._.blocks, 'id'),
      network_security_group_id: resource.field(self._.blocks, 'network_security_group_id'),
      subnet_id: resource.field(self._.blocks, 'subnet_id'),
    },
    subnet_route_table_association(name, block): {
      local resource = blockType.resource('azurerm_subnet_route_table_association', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        route_table_id: build.template(block.route_table_id),
        subnet_id: build.template(block.subnet_id),
      }),
      id: resource.field(self._.blocks, 'id'),
      route_table_id: resource.field(self._.blocks, 'route_table_id'),
      subnet_id: resource.field(self._.blocks, 'subnet_id'),
    },
    subnet_service_endpoint_storage_policy(name, block): {
      local resource = blockType.resource('azurerm_subnet_service_endpoint_storage_policy', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    subscription(name, block): {
      local resource = blockType.resource('azurerm_subscription', name),
      _: resource._(block, {
        alias: build.template(std.get(block, 'alias', null)),
        billing_scope_id: build.template(std.get(block, 'billing_scope_id', null)),
        id: build.template(std.get(block, 'id', null)),
        subscription_id: build.template(std.get(block, 'subscription_id', null)),
        subscription_name: build.template(block.subscription_name),
        tags: build.template(std.get(block, 'tags', null)),
        tenant_id: build.template(std.get(block, 'tenant_id', null)),
        workload: build.template(std.get(block, 'workload', null)),
      }),
      alias: resource.field(self._.blocks, 'alias'),
      billing_scope_id: resource.field(self._.blocks, 'billing_scope_id'),
      id: resource.field(self._.blocks, 'id'),
      subscription_id: resource.field(self._.blocks, 'subscription_id'),
      subscription_name: resource.field(self._.blocks, 'subscription_name'),
      tags: resource.field(self._.blocks, 'tags'),
      tenant_id: resource.field(self._.blocks, 'tenant_id'),
      workload: resource.field(self._.blocks, 'workload'),
    },
    subscription_cost_management_export(name, block): {
      local resource = blockType.resource('azurerm_subscription_cost_management_export', name),
      _: resource._(block, {
        active: build.template(std.get(block, 'active', null)),
        file_format: build.template(std.get(block, 'file_format', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        recurrence_period_end_date: build.template(block.recurrence_period_end_date),
        recurrence_period_start_date: build.template(block.recurrence_period_start_date),
        recurrence_type: build.template(block.recurrence_type),
        subscription_id: build.template(block.subscription_id),
      }),
      active: resource.field(self._.blocks, 'active'),
      file_format: resource.field(self._.blocks, 'file_format'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      recurrence_period_end_date: resource.field(self._.blocks, 'recurrence_period_end_date'),
      recurrence_period_start_date: resource.field(self._.blocks, 'recurrence_period_start_date'),
      recurrence_type: resource.field(self._.blocks, 'recurrence_type'),
      subscription_id: resource.field(self._.blocks, 'subscription_id'),
    },
    subscription_cost_management_view(name, block): {
      local resource = blockType.resource('azurerm_subscription_cost_management_view', name),
      _: resource._(block, {
        accumulated: build.template(block.accumulated),
        chart_type: build.template(block.chart_type),
        display_name: build.template(block.display_name),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        report_type: build.template(block.report_type),
        subscription_id: build.template(block.subscription_id),
        timeframe: build.template(block.timeframe),
      }),
      accumulated: resource.field(self._.blocks, 'accumulated'),
      chart_type: resource.field(self._.blocks, 'chart_type'),
      display_name: resource.field(self._.blocks, 'display_name'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      report_type: resource.field(self._.blocks, 'report_type'),
      subscription_id: resource.field(self._.blocks, 'subscription_id'),
      timeframe: resource.field(self._.blocks, 'timeframe'),
    },
    subscription_policy_assignment(name, block): {
      local resource = blockType.resource('azurerm_subscription_policy_assignment', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        display_name: build.template(std.get(block, 'display_name', null)),
        enforce: build.template(std.get(block, 'enforce', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        metadata: build.template(std.get(block, 'metadata', null)),
        name: build.template(block.name),
        not_scopes: build.template(std.get(block, 'not_scopes', null)),
        parameters: build.template(std.get(block, 'parameters', null)),
        policy_definition_id: build.template(block.policy_definition_id),
        subscription_id: build.template(block.subscription_id),
      }),
      description: resource.field(self._.blocks, 'description'),
      display_name: resource.field(self._.blocks, 'display_name'),
      enforce: resource.field(self._.blocks, 'enforce'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      metadata: resource.field(self._.blocks, 'metadata'),
      name: resource.field(self._.blocks, 'name'),
      not_scopes: resource.field(self._.blocks, 'not_scopes'),
      parameters: resource.field(self._.blocks, 'parameters'),
      policy_definition_id: resource.field(self._.blocks, 'policy_definition_id'),
      subscription_id: resource.field(self._.blocks, 'subscription_id'),
    },
    subscription_policy_exemption(name, block): {
      local resource = blockType.resource('azurerm_subscription_policy_exemption', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        display_name: build.template(std.get(block, 'display_name', null)),
        exemption_category: build.template(block.exemption_category),
        expires_on: build.template(std.get(block, 'expires_on', null)),
        id: build.template(std.get(block, 'id', null)),
        metadata: build.template(std.get(block, 'metadata', null)),
        name: build.template(block.name),
        policy_assignment_id: build.template(block.policy_assignment_id),
        policy_definition_reference_ids: build.template(std.get(block, 'policy_definition_reference_ids', null)),
        subscription_id: build.template(block.subscription_id),
      }),
      description: resource.field(self._.blocks, 'description'),
      display_name: resource.field(self._.blocks, 'display_name'),
      exemption_category: resource.field(self._.blocks, 'exemption_category'),
      expires_on: resource.field(self._.blocks, 'expires_on'),
      id: resource.field(self._.blocks, 'id'),
      metadata: resource.field(self._.blocks, 'metadata'),
      name: resource.field(self._.blocks, 'name'),
      policy_assignment_id: resource.field(self._.blocks, 'policy_assignment_id'),
      policy_definition_reference_ids: resource.field(self._.blocks, 'policy_definition_reference_ids'),
      subscription_id: resource.field(self._.blocks, 'subscription_id'),
    },
    subscription_policy_remediation(name, block): {
      local resource = blockType.resource('azurerm_subscription_policy_remediation', name),
      _: resource._(block, {
        failure_percentage: build.template(std.get(block, 'failure_percentage', null)),
        id: build.template(std.get(block, 'id', null)),
        location_filters: build.template(std.get(block, 'location_filters', null)),
        name: build.template(block.name),
        parallel_deployments: build.template(std.get(block, 'parallel_deployments', null)),
        policy_assignment_id: build.template(block.policy_assignment_id),
        policy_definition_reference_id: build.template(std.get(block, 'policy_definition_reference_id', null)),
        resource_count: build.template(std.get(block, 'resource_count', null)),
        resource_discovery_mode: build.template(std.get(block, 'resource_discovery_mode', null)),
        subscription_id: build.template(block.subscription_id),
      }),
      failure_percentage: resource.field(self._.blocks, 'failure_percentage'),
      id: resource.field(self._.blocks, 'id'),
      location_filters: resource.field(self._.blocks, 'location_filters'),
      name: resource.field(self._.blocks, 'name'),
      parallel_deployments: resource.field(self._.blocks, 'parallel_deployments'),
      policy_assignment_id: resource.field(self._.blocks, 'policy_assignment_id'),
      policy_definition_reference_id: resource.field(self._.blocks, 'policy_definition_reference_id'),
      resource_count: resource.field(self._.blocks, 'resource_count'),
      resource_discovery_mode: resource.field(self._.blocks, 'resource_discovery_mode'),
      subscription_id: resource.field(self._.blocks, 'subscription_id'),
    },
    subscription_template_deployment(name, block): {
      local resource = blockType.resource('azurerm_subscription_template_deployment', name),
      _: resource._(block, {
        debug_level: build.template(std.get(block, 'debug_level', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        output_content: build.template(std.get(block, 'output_content', null)),
        parameters_content: build.template(std.get(block, 'parameters_content', null)),
        tags: build.template(std.get(block, 'tags', null)),
        template_content: build.template(std.get(block, 'template_content', null)),
        template_spec_version_id: build.template(std.get(block, 'template_spec_version_id', null)),
      }),
      debug_level: resource.field(self._.blocks, 'debug_level'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      output_content: resource.field(self._.blocks, 'output_content'),
      parameters_content: resource.field(self._.blocks, 'parameters_content'),
      tags: resource.field(self._.blocks, 'tags'),
      template_content: resource.field(self._.blocks, 'template_content'),
      template_spec_version_id: resource.field(self._.blocks, 'template_spec_version_id'),
    },
    synapse_firewall_rule(name, block): {
      local resource = blockType.resource('azurerm_synapse_firewall_rule', name),
      _: resource._(block, {
        end_ip_address: build.template(block.end_ip_address),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        start_ip_address: build.template(block.start_ip_address),
        synapse_workspace_id: build.template(block.synapse_workspace_id),
      }),
      end_ip_address: resource.field(self._.blocks, 'end_ip_address'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      start_ip_address: resource.field(self._.blocks, 'start_ip_address'),
      synapse_workspace_id: resource.field(self._.blocks, 'synapse_workspace_id'),
    },
    synapse_integration_runtime_azure(name, block): {
      local resource = blockType.resource('azurerm_synapse_integration_runtime_azure', name),
      _: resource._(block, {
        compute_type: build.template(std.get(block, 'compute_type', null)),
        core_count: build.template(std.get(block, 'core_count', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        synapse_workspace_id: build.template(block.synapse_workspace_id),
        time_to_live_min: build.template(std.get(block, 'time_to_live_min', null)),
      }),
      compute_type: resource.field(self._.blocks, 'compute_type'),
      core_count: resource.field(self._.blocks, 'core_count'),
      description: resource.field(self._.blocks, 'description'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      synapse_workspace_id: resource.field(self._.blocks, 'synapse_workspace_id'),
      time_to_live_min: resource.field(self._.blocks, 'time_to_live_min'),
    },
    synapse_integration_runtime_self_hosted(name, block): {
      local resource = blockType.resource('azurerm_synapse_integration_runtime_self_hosted', name),
      _: resource._(block, {
        authorization_key_primary: build.template(std.get(block, 'authorization_key_primary', null)),
        authorization_key_secondary: build.template(std.get(block, 'authorization_key_secondary', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        synapse_workspace_id: build.template(block.synapse_workspace_id),
      }),
      authorization_key_primary: resource.field(self._.blocks, 'authorization_key_primary'),
      authorization_key_secondary: resource.field(self._.blocks, 'authorization_key_secondary'),
      description: resource.field(self._.blocks, 'description'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      synapse_workspace_id: resource.field(self._.blocks, 'synapse_workspace_id'),
    },
    synapse_linked_service(name, block): {
      local resource = blockType.resource('azurerm_synapse_linked_service', name),
      _: resource._(block, {
        additional_properties: build.template(std.get(block, 'additional_properties', null)),
        annotations: build.template(std.get(block, 'annotations', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        parameters: build.template(std.get(block, 'parameters', null)),
        synapse_workspace_id: build.template(block.synapse_workspace_id),
        type: build.template(block.type),
        type_properties_json: build.template(block.type_properties_json),
      }),
      additional_properties: resource.field(self._.blocks, 'additional_properties'),
      annotations: resource.field(self._.blocks, 'annotations'),
      description: resource.field(self._.blocks, 'description'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      parameters: resource.field(self._.blocks, 'parameters'),
      synapse_workspace_id: resource.field(self._.blocks, 'synapse_workspace_id'),
      type: resource.field(self._.blocks, 'type'),
      type_properties_json: resource.field(self._.blocks, 'type_properties_json'),
    },
    synapse_managed_private_endpoint(name, block): {
      local resource = blockType.resource('azurerm_synapse_managed_private_endpoint', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        subresource_name: build.template(block.subresource_name),
        synapse_workspace_id: build.template(block.synapse_workspace_id),
        target_resource_id: build.template(block.target_resource_id),
      }),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      subresource_name: resource.field(self._.blocks, 'subresource_name'),
      synapse_workspace_id: resource.field(self._.blocks, 'synapse_workspace_id'),
      target_resource_id: resource.field(self._.blocks, 'target_resource_id'),
    },
    synapse_private_link_hub(name, block): {
      local resource = blockType.resource('azurerm_synapse_private_link_hub', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    synapse_role_assignment(name, block): {
      local resource = blockType.resource('azurerm_synapse_role_assignment', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        principal_id: build.template(block.principal_id),
        principal_type: build.template(std.get(block, 'principal_type', null)),
        role_name: build.template(block.role_name),
        synapse_spark_pool_id: build.template(std.get(block, 'synapse_spark_pool_id', null)),
        synapse_workspace_id: build.template(std.get(block, 'synapse_workspace_id', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      principal_id: resource.field(self._.blocks, 'principal_id'),
      principal_type: resource.field(self._.blocks, 'principal_type'),
      role_name: resource.field(self._.blocks, 'role_name'),
      synapse_spark_pool_id: resource.field(self._.blocks, 'synapse_spark_pool_id'),
      synapse_workspace_id: resource.field(self._.blocks, 'synapse_workspace_id'),
    },
    synapse_spark_pool(name, block): {
      local resource = blockType.resource('azurerm_synapse_spark_pool', name),
      _: resource._(block, {
        cache_size: build.template(std.get(block, 'cache_size', null)),
        compute_isolation_enabled: build.template(std.get(block, 'compute_isolation_enabled', null)),
        dynamic_executor_allocation_enabled: build.template(std.get(block, 'dynamic_executor_allocation_enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        max_executors: build.template(std.get(block, 'max_executors', null)),
        min_executors: build.template(std.get(block, 'min_executors', null)),
        name: build.template(block.name),
        node_count: build.template(std.get(block, 'node_count', null)),
        node_size: build.template(block.node_size),
        node_size_family: build.template(block.node_size_family),
        session_level_packages_enabled: build.template(std.get(block, 'session_level_packages_enabled', null)),
        spark_events_folder: build.template(std.get(block, 'spark_events_folder', null)),
        spark_log_folder: build.template(std.get(block, 'spark_log_folder', null)),
        spark_version: build.template(block.spark_version),
        synapse_workspace_id: build.template(block.synapse_workspace_id),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      cache_size: resource.field(self._.blocks, 'cache_size'),
      compute_isolation_enabled: resource.field(self._.blocks, 'compute_isolation_enabled'),
      dynamic_executor_allocation_enabled: resource.field(self._.blocks, 'dynamic_executor_allocation_enabled'),
      id: resource.field(self._.blocks, 'id'),
      max_executors: resource.field(self._.blocks, 'max_executors'),
      min_executors: resource.field(self._.blocks, 'min_executors'),
      name: resource.field(self._.blocks, 'name'),
      node_count: resource.field(self._.blocks, 'node_count'),
      node_size: resource.field(self._.blocks, 'node_size'),
      node_size_family: resource.field(self._.blocks, 'node_size_family'),
      session_level_packages_enabled: resource.field(self._.blocks, 'session_level_packages_enabled'),
      spark_events_folder: resource.field(self._.blocks, 'spark_events_folder'),
      spark_log_folder: resource.field(self._.blocks, 'spark_log_folder'),
      spark_version: resource.field(self._.blocks, 'spark_version'),
      synapse_workspace_id: resource.field(self._.blocks, 'synapse_workspace_id'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    synapse_sql_pool(name, block): {
      local resource = blockType.resource('azurerm_synapse_sql_pool', name),
      _: resource._(block, {
        collation: build.template(std.get(block, 'collation', null)),
        create_mode: build.template(std.get(block, 'create_mode', null)),
        data_encrypted: build.template(std.get(block, 'data_encrypted', null)),
        geo_backup_policy_enabled: build.template(std.get(block, 'geo_backup_policy_enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        recovery_database_id: build.template(std.get(block, 'recovery_database_id', null)),
        sku_name: build.template(block.sku_name),
        storage_account_type: build.template(block.storage_account_type),
        synapse_workspace_id: build.template(block.synapse_workspace_id),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      collation: resource.field(self._.blocks, 'collation'),
      create_mode: resource.field(self._.blocks, 'create_mode'),
      data_encrypted: resource.field(self._.blocks, 'data_encrypted'),
      geo_backup_policy_enabled: resource.field(self._.blocks, 'geo_backup_policy_enabled'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      recovery_database_id: resource.field(self._.blocks, 'recovery_database_id'),
      sku_name: resource.field(self._.blocks, 'sku_name'),
      storage_account_type: resource.field(self._.blocks, 'storage_account_type'),
      synapse_workspace_id: resource.field(self._.blocks, 'synapse_workspace_id'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    synapse_sql_pool_extended_auditing_policy(name, block): {
      local resource = blockType.resource('azurerm_synapse_sql_pool_extended_auditing_policy', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        log_monitoring_enabled: build.template(std.get(block, 'log_monitoring_enabled', null)),
        retention_in_days: build.template(std.get(block, 'retention_in_days', null)),
        sql_pool_id: build.template(block.sql_pool_id),
        storage_account_access_key: build.template(std.get(block, 'storage_account_access_key', null)),
        storage_account_access_key_is_secondary: build.template(std.get(block, 'storage_account_access_key_is_secondary', null)),
        storage_endpoint: build.template(std.get(block, 'storage_endpoint', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      log_monitoring_enabled: resource.field(self._.blocks, 'log_monitoring_enabled'),
      retention_in_days: resource.field(self._.blocks, 'retention_in_days'),
      sql_pool_id: resource.field(self._.blocks, 'sql_pool_id'),
      storage_account_access_key: resource.field(self._.blocks, 'storage_account_access_key'),
      storage_account_access_key_is_secondary: resource.field(self._.blocks, 'storage_account_access_key_is_secondary'),
      storage_endpoint: resource.field(self._.blocks, 'storage_endpoint'),
    },
    synapse_sql_pool_security_alert_policy(name, block): {
      local resource = blockType.resource('azurerm_synapse_sql_pool_security_alert_policy', name),
      _: resource._(block, {
        disabled_alerts: build.template(std.get(block, 'disabled_alerts', null)),
        email_account_admins_enabled: build.template(std.get(block, 'email_account_admins_enabled', null)),
        email_addresses: build.template(std.get(block, 'email_addresses', null)),
        id: build.template(std.get(block, 'id', null)),
        policy_state: build.template(block.policy_state),
        retention_days: build.template(std.get(block, 'retention_days', null)),
        sql_pool_id: build.template(block.sql_pool_id),
        storage_account_access_key: build.template(std.get(block, 'storage_account_access_key', null)),
        storage_endpoint: build.template(std.get(block, 'storage_endpoint', null)),
      }),
      disabled_alerts: resource.field(self._.blocks, 'disabled_alerts'),
      email_account_admins_enabled: resource.field(self._.blocks, 'email_account_admins_enabled'),
      email_addresses: resource.field(self._.blocks, 'email_addresses'),
      id: resource.field(self._.blocks, 'id'),
      policy_state: resource.field(self._.blocks, 'policy_state'),
      retention_days: resource.field(self._.blocks, 'retention_days'),
      sql_pool_id: resource.field(self._.blocks, 'sql_pool_id'),
      storage_account_access_key: resource.field(self._.blocks, 'storage_account_access_key'),
      storage_endpoint: resource.field(self._.blocks, 'storage_endpoint'),
    },
    synapse_sql_pool_vulnerability_assessment(name, block): {
      local resource = blockType.resource('azurerm_synapse_sql_pool_vulnerability_assessment', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        sql_pool_security_alert_policy_id: build.template(block.sql_pool_security_alert_policy_id),
        storage_account_access_key: build.template(std.get(block, 'storage_account_access_key', null)),
        storage_container_path: build.template(block.storage_container_path),
        storage_container_sas_key: build.template(std.get(block, 'storage_container_sas_key', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      sql_pool_security_alert_policy_id: resource.field(self._.blocks, 'sql_pool_security_alert_policy_id'),
      storage_account_access_key: resource.field(self._.blocks, 'storage_account_access_key'),
      storage_container_path: resource.field(self._.blocks, 'storage_container_path'),
      storage_container_sas_key: resource.field(self._.blocks, 'storage_container_sas_key'),
    },
    synapse_sql_pool_vulnerability_assessment_baseline(name, block): {
      local resource = blockType.resource('azurerm_synapse_sql_pool_vulnerability_assessment_baseline', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        rule_name: build.template(block.rule_name),
        sql_pool_vulnerability_assessment_id: build.template(block.sql_pool_vulnerability_assessment_id),
      }),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      rule_name: resource.field(self._.blocks, 'rule_name'),
      sql_pool_vulnerability_assessment_id: resource.field(self._.blocks, 'sql_pool_vulnerability_assessment_id'),
    },
    synapse_sql_pool_workload_classifier(name, block): {
      local resource = blockType.resource('azurerm_synapse_sql_pool_workload_classifier', name),
      _: resource._(block, {
        context: build.template(std.get(block, 'context', null)),
        end_time: build.template(std.get(block, 'end_time', null)),
        id: build.template(std.get(block, 'id', null)),
        importance: build.template(std.get(block, 'importance', null)),
        label: build.template(std.get(block, 'label', null)),
        member_name: build.template(block.member_name),
        name: build.template(block.name),
        start_time: build.template(std.get(block, 'start_time', null)),
        workload_group_id: build.template(block.workload_group_id),
      }),
      context: resource.field(self._.blocks, 'context'),
      end_time: resource.field(self._.blocks, 'end_time'),
      id: resource.field(self._.blocks, 'id'),
      importance: resource.field(self._.blocks, 'importance'),
      label: resource.field(self._.blocks, 'label'),
      member_name: resource.field(self._.blocks, 'member_name'),
      name: resource.field(self._.blocks, 'name'),
      start_time: resource.field(self._.blocks, 'start_time'),
      workload_group_id: resource.field(self._.blocks, 'workload_group_id'),
    },
    synapse_sql_pool_workload_group(name, block): {
      local resource = blockType.resource('azurerm_synapse_sql_pool_workload_group', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        importance: build.template(std.get(block, 'importance', null)),
        max_resource_percent: build.template(block.max_resource_percent),
        max_resource_percent_per_request: build.template(std.get(block, 'max_resource_percent_per_request', null)),
        min_resource_percent: build.template(block.min_resource_percent),
        min_resource_percent_per_request: build.template(std.get(block, 'min_resource_percent_per_request', null)),
        name: build.template(block.name),
        query_execution_timeout_in_seconds: build.template(std.get(block, 'query_execution_timeout_in_seconds', null)),
        sql_pool_id: build.template(block.sql_pool_id),
      }),
      id: resource.field(self._.blocks, 'id'),
      importance: resource.field(self._.blocks, 'importance'),
      max_resource_percent: resource.field(self._.blocks, 'max_resource_percent'),
      max_resource_percent_per_request: resource.field(self._.blocks, 'max_resource_percent_per_request'),
      min_resource_percent: resource.field(self._.blocks, 'min_resource_percent'),
      min_resource_percent_per_request: resource.field(self._.blocks, 'min_resource_percent_per_request'),
      name: resource.field(self._.blocks, 'name'),
      query_execution_timeout_in_seconds: resource.field(self._.blocks, 'query_execution_timeout_in_seconds'),
      sql_pool_id: resource.field(self._.blocks, 'sql_pool_id'),
    },
    synapse_workspace(name, block): {
      local resource = blockType.resource('azurerm_synapse_workspace', name),
      _: resource._(block, {
        azuread_authentication_only: build.template(std.get(block, 'azuread_authentication_only', null)),
        compute_subnet_id: build.template(std.get(block, 'compute_subnet_id', null)),
        connectivity_endpoints: build.template(std.get(block, 'connectivity_endpoints', null)),
        data_exfiltration_protection_enabled: build.template(std.get(block, 'data_exfiltration_protection_enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        linking_allowed_for_aad_tenant_ids: build.template(std.get(block, 'linking_allowed_for_aad_tenant_ids', null)),
        location: build.template(block.location),
        managed_resource_group_name: build.template(std.get(block, 'managed_resource_group_name', null)),
        managed_virtual_network_enabled: build.template(std.get(block, 'managed_virtual_network_enabled', null)),
        name: build.template(block.name),
        public_network_access_enabled: build.template(std.get(block, 'public_network_access_enabled', null)),
        purview_id: build.template(std.get(block, 'purview_id', null)),
        resource_group_name: build.template(block.resource_group_name),
        sql_administrator_login: build.template(std.get(block, 'sql_administrator_login', null)),
        sql_administrator_login_password: build.template(std.get(block, 'sql_administrator_login_password', null)),
        sql_identity_control_enabled: build.template(std.get(block, 'sql_identity_control_enabled', null)),
        storage_data_lake_gen2_filesystem_id: build.template(block.storage_data_lake_gen2_filesystem_id),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      azuread_authentication_only: resource.field(self._.blocks, 'azuread_authentication_only'),
      compute_subnet_id: resource.field(self._.blocks, 'compute_subnet_id'),
      connectivity_endpoints: resource.field(self._.blocks, 'connectivity_endpoints'),
      data_exfiltration_protection_enabled: resource.field(self._.blocks, 'data_exfiltration_protection_enabled'),
      id: resource.field(self._.blocks, 'id'),
      linking_allowed_for_aad_tenant_ids: resource.field(self._.blocks, 'linking_allowed_for_aad_tenant_ids'),
      location: resource.field(self._.blocks, 'location'),
      managed_resource_group_name: resource.field(self._.blocks, 'managed_resource_group_name'),
      managed_virtual_network_enabled: resource.field(self._.blocks, 'managed_virtual_network_enabled'),
      name: resource.field(self._.blocks, 'name'),
      public_network_access_enabled: resource.field(self._.blocks, 'public_network_access_enabled'),
      purview_id: resource.field(self._.blocks, 'purview_id'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      sql_administrator_login: resource.field(self._.blocks, 'sql_administrator_login'),
      sql_administrator_login_password: resource.field(self._.blocks, 'sql_administrator_login_password'),
      sql_identity_control_enabled: resource.field(self._.blocks, 'sql_identity_control_enabled'),
      storage_data_lake_gen2_filesystem_id: resource.field(self._.blocks, 'storage_data_lake_gen2_filesystem_id'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    synapse_workspace_aad_admin(name, block): {
      local resource = blockType.resource('azurerm_synapse_workspace_aad_admin', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        login: build.template(block.login),
        object_id: build.template(block.object_id),
        synapse_workspace_id: build.template(block.synapse_workspace_id),
        tenant_id: build.template(block.tenant_id),
      }),
      id: resource.field(self._.blocks, 'id'),
      login: resource.field(self._.blocks, 'login'),
      object_id: resource.field(self._.blocks, 'object_id'),
      synapse_workspace_id: resource.field(self._.blocks, 'synapse_workspace_id'),
      tenant_id: resource.field(self._.blocks, 'tenant_id'),
    },
    synapse_workspace_extended_auditing_policy(name, block): {
      local resource = blockType.resource('azurerm_synapse_workspace_extended_auditing_policy', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        log_monitoring_enabled: build.template(std.get(block, 'log_monitoring_enabled', null)),
        retention_in_days: build.template(std.get(block, 'retention_in_days', null)),
        storage_account_access_key: build.template(std.get(block, 'storage_account_access_key', null)),
        storage_account_access_key_is_secondary: build.template(std.get(block, 'storage_account_access_key_is_secondary', null)),
        storage_endpoint: build.template(std.get(block, 'storage_endpoint', null)),
        synapse_workspace_id: build.template(block.synapse_workspace_id),
      }),
      id: resource.field(self._.blocks, 'id'),
      log_monitoring_enabled: resource.field(self._.blocks, 'log_monitoring_enabled'),
      retention_in_days: resource.field(self._.blocks, 'retention_in_days'),
      storage_account_access_key: resource.field(self._.blocks, 'storage_account_access_key'),
      storage_account_access_key_is_secondary: resource.field(self._.blocks, 'storage_account_access_key_is_secondary'),
      storage_endpoint: resource.field(self._.blocks, 'storage_endpoint'),
      synapse_workspace_id: resource.field(self._.blocks, 'synapse_workspace_id'),
    },
    synapse_workspace_key(name, block): {
      local resource = blockType.resource('azurerm_synapse_workspace_key', name),
      _: resource._(block, {
        active: build.template(block.active),
        customer_managed_key_name: build.template(block.customer_managed_key_name),
        customer_managed_key_versionless_id: build.template(std.get(block, 'customer_managed_key_versionless_id', null)),
        id: build.template(std.get(block, 'id', null)),
        synapse_workspace_id: build.template(block.synapse_workspace_id),
      }),
      active: resource.field(self._.blocks, 'active'),
      customer_managed_key_name: resource.field(self._.blocks, 'customer_managed_key_name'),
      customer_managed_key_versionless_id: resource.field(self._.blocks, 'customer_managed_key_versionless_id'),
      id: resource.field(self._.blocks, 'id'),
      synapse_workspace_id: resource.field(self._.blocks, 'synapse_workspace_id'),
    },
    synapse_workspace_security_alert_policy(name, block): {
      local resource = blockType.resource('azurerm_synapse_workspace_security_alert_policy', name),
      _: resource._(block, {
        disabled_alerts: build.template(std.get(block, 'disabled_alerts', null)),
        email_account_admins_enabled: build.template(std.get(block, 'email_account_admins_enabled', null)),
        email_addresses: build.template(std.get(block, 'email_addresses', null)),
        id: build.template(std.get(block, 'id', null)),
        policy_state: build.template(block.policy_state),
        retention_days: build.template(std.get(block, 'retention_days', null)),
        storage_account_access_key: build.template(std.get(block, 'storage_account_access_key', null)),
        storage_endpoint: build.template(std.get(block, 'storage_endpoint', null)),
        synapse_workspace_id: build.template(block.synapse_workspace_id),
      }),
      disabled_alerts: resource.field(self._.blocks, 'disabled_alerts'),
      email_account_admins_enabled: resource.field(self._.blocks, 'email_account_admins_enabled'),
      email_addresses: resource.field(self._.blocks, 'email_addresses'),
      id: resource.field(self._.blocks, 'id'),
      policy_state: resource.field(self._.blocks, 'policy_state'),
      retention_days: resource.field(self._.blocks, 'retention_days'),
      storage_account_access_key: resource.field(self._.blocks, 'storage_account_access_key'),
      storage_endpoint: resource.field(self._.blocks, 'storage_endpoint'),
      synapse_workspace_id: resource.field(self._.blocks, 'synapse_workspace_id'),
    },
    synapse_workspace_sql_aad_admin(name, block): {
      local resource = blockType.resource('azurerm_synapse_workspace_sql_aad_admin', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        login: build.template(block.login),
        object_id: build.template(block.object_id),
        synapse_workspace_id: build.template(block.synapse_workspace_id),
        tenant_id: build.template(block.tenant_id),
      }),
      id: resource.field(self._.blocks, 'id'),
      login: resource.field(self._.blocks, 'login'),
      object_id: resource.field(self._.blocks, 'object_id'),
      synapse_workspace_id: resource.field(self._.blocks, 'synapse_workspace_id'),
      tenant_id: resource.field(self._.blocks, 'tenant_id'),
    },
    synapse_workspace_vulnerability_assessment(name, block): {
      local resource = blockType.resource('azurerm_synapse_workspace_vulnerability_assessment', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        storage_account_access_key: build.template(std.get(block, 'storage_account_access_key', null)),
        storage_container_path: build.template(block.storage_container_path),
        storage_container_sas_key: build.template(std.get(block, 'storage_container_sas_key', null)),
        workspace_security_alert_policy_id: build.template(block.workspace_security_alert_policy_id),
      }),
      id: resource.field(self._.blocks, 'id'),
      storage_account_access_key: resource.field(self._.blocks, 'storage_account_access_key'),
      storage_container_path: resource.field(self._.blocks, 'storage_container_path'),
      storage_container_sas_key: resource.field(self._.blocks, 'storage_container_sas_key'),
      workspace_security_alert_policy_id: resource.field(self._.blocks, 'workspace_security_alert_policy_id'),
    },
    system_center_virtual_machine_manager_availability_set(name, block): {
      local resource = blockType.resource('azurerm_system_center_virtual_machine_manager_availability_set', name),
      _: resource._(block, {
        custom_location_id: build.template(block.custom_location_id),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        system_center_virtual_machine_manager_server_id: build.template(block.system_center_virtual_machine_manager_server_id),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      custom_location_id: resource.field(self._.blocks, 'custom_location_id'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      system_center_virtual_machine_manager_server_id: resource.field(self._.blocks, 'system_center_virtual_machine_manager_server_id'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    system_center_virtual_machine_manager_cloud(name, block): {
      local resource = blockType.resource('azurerm_system_center_virtual_machine_manager_cloud', name),
      _: resource._(block, {
        custom_location_id: build.template(block.custom_location_id),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        system_center_virtual_machine_manager_server_inventory_item_id: build.template(block.system_center_virtual_machine_manager_server_inventory_item_id),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      custom_location_id: resource.field(self._.blocks, 'custom_location_id'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      system_center_virtual_machine_manager_server_inventory_item_id: resource.field(self._.blocks, 'system_center_virtual_machine_manager_server_inventory_item_id'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    system_center_virtual_machine_manager_server(name, block): {
      local resource = blockType.resource('azurerm_system_center_virtual_machine_manager_server', name),
      _: resource._(block, {
        custom_location_id: build.template(block.custom_location_id),
        fqdn: build.template(block.fqdn),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        password: build.template(block.password),
        port: build.template(std.get(block, 'port', null)),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
        username: build.template(block.username),
      }),
      custom_location_id: resource.field(self._.blocks, 'custom_location_id'),
      fqdn: resource.field(self._.blocks, 'fqdn'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      password: resource.field(self._.blocks, 'password'),
      port: resource.field(self._.blocks, 'port'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
      username: resource.field(self._.blocks, 'username'),
    },
    system_center_virtual_machine_manager_virtual_machine_instance(name, block): {
      local resource = blockType.resource('azurerm_system_center_virtual_machine_manager_virtual_machine_instance', name),
      _: resource._(block, {
        custom_location_id: build.template(block.custom_location_id),
        id: build.template(std.get(block, 'id', null)),
        scoped_resource_id: build.template(block.scoped_resource_id),
        system_center_virtual_machine_manager_availability_set_ids: build.template(std.get(block, 'system_center_virtual_machine_manager_availability_set_ids', null)),
      }),
      custom_location_id: resource.field(self._.blocks, 'custom_location_id'),
      id: resource.field(self._.blocks, 'id'),
      scoped_resource_id: resource.field(self._.blocks, 'scoped_resource_id'),
      system_center_virtual_machine_manager_availability_set_ids: resource.field(self._.blocks, 'system_center_virtual_machine_manager_availability_set_ids'),
    },
    system_center_virtual_machine_manager_virtual_machine_template(name, block): {
      local resource = blockType.resource('azurerm_system_center_virtual_machine_manager_virtual_machine_template', name),
      _: resource._(block, {
        custom_location_id: build.template(block.custom_location_id),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        system_center_virtual_machine_manager_server_inventory_item_id: build.template(block.system_center_virtual_machine_manager_server_inventory_item_id),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      custom_location_id: resource.field(self._.blocks, 'custom_location_id'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      system_center_virtual_machine_manager_server_inventory_item_id: resource.field(self._.blocks, 'system_center_virtual_machine_manager_server_inventory_item_id'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    system_center_virtual_machine_manager_virtual_network(name, block): {
      local resource = blockType.resource('azurerm_system_center_virtual_machine_manager_virtual_network', name),
      _: resource._(block, {
        custom_location_id: build.template(block.custom_location_id),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        system_center_virtual_machine_manager_server_inventory_item_id: build.template(block.system_center_virtual_machine_manager_server_inventory_item_id),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      custom_location_id: resource.field(self._.blocks, 'custom_location_id'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      system_center_virtual_machine_manager_server_inventory_item_id: resource.field(self._.blocks, 'system_center_virtual_machine_manager_server_inventory_item_id'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    tenant_template_deployment(name, block): {
      local resource = blockType.resource('azurerm_tenant_template_deployment', name),
      _: resource._(block, {
        debug_level: build.template(std.get(block, 'debug_level', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        output_content: build.template(std.get(block, 'output_content', null)),
        parameters_content: build.template(std.get(block, 'parameters_content', null)),
        tags: build.template(std.get(block, 'tags', null)),
        template_content: build.template(std.get(block, 'template_content', null)),
        template_spec_version_id: build.template(std.get(block, 'template_spec_version_id', null)),
      }),
      debug_level: resource.field(self._.blocks, 'debug_level'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      output_content: resource.field(self._.blocks, 'output_content'),
      parameters_content: resource.field(self._.blocks, 'parameters_content'),
      tags: resource.field(self._.blocks, 'tags'),
      template_content: resource.field(self._.blocks, 'template_content'),
      template_spec_version_id: resource.field(self._.blocks, 'template_spec_version_id'),
    },
    traffic_manager_azure_endpoint(name, block): {
      local resource = blockType.resource('azurerm_traffic_manager_azure_endpoint', name),
      _: resource._(block, {
        always_serve_enabled: build.template(std.get(block, 'always_serve_enabled', null)),
        enabled: build.template(std.get(block, 'enabled', null)),
        geo_mappings: build.template(std.get(block, 'geo_mappings', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        priority: build.template(std.get(block, 'priority', null)),
        profile_id: build.template(block.profile_id),
        target_resource_id: build.template(block.target_resource_id),
        weight: build.template(std.get(block, 'weight', null)),
      }),
      always_serve_enabled: resource.field(self._.blocks, 'always_serve_enabled'),
      enabled: resource.field(self._.blocks, 'enabled'),
      geo_mappings: resource.field(self._.blocks, 'geo_mappings'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      priority: resource.field(self._.blocks, 'priority'),
      profile_id: resource.field(self._.blocks, 'profile_id'),
      target_resource_id: resource.field(self._.blocks, 'target_resource_id'),
      weight: resource.field(self._.blocks, 'weight'),
    },
    traffic_manager_external_endpoint(name, block): {
      local resource = blockType.resource('azurerm_traffic_manager_external_endpoint', name),
      _: resource._(block, {
        always_serve_enabled: build.template(std.get(block, 'always_serve_enabled', null)),
        enabled: build.template(std.get(block, 'enabled', null)),
        endpoint_location: build.template(std.get(block, 'endpoint_location', null)),
        geo_mappings: build.template(std.get(block, 'geo_mappings', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        priority: build.template(std.get(block, 'priority', null)),
        profile_id: build.template(block.profile_id),
        target: build.template(block.target),
        weight: build.template(std.get(block, 'weight', null)),
      }),
      always_serve_enabled: resource.field(self._.blocks, 'always_serve_enabled'),
      enabled: resource.field(self._.blocks, 'enabled'),
      endpoint_location: resource.field(self._.blocks, 'endpoint_location'),
      geo_mappings: resource.field(self._.blocks, 'geo_mappings'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      priority: resource.field(self._.blocks, 'priority'),
      profile_id: resource.field(self._.blocks, 'profile_id'),
      target: resource.field(self._.blocks, 'target'),
      weight: resource.field(self._.blocks, 'weight'),
    },
    traffic_manager_nested_endpoint(name, block): {
      local resource = blockType.resource('azurerm_traffic_manager_nested_endpoint', name),
      _: resource._(block, {
        enabled: build.template(std.get(block, 'enabled', null)),
        endpoint_location: build.template(std.get(block, 'endpoint_location', null)),
        geo_mappings: build.template(std.get(block, 'geo_mappings', null)),
        id: build.template(std.get(block, 'id', null)),
        minimum_child_endpoints: build.template(block.minimum_child_endpoints),
        minimum_required_child_endpoints_ipv4: build.template(std.get(block, 'minimum_required_child_endpoints_ipv4', null)),
        minimum_required_child_endpoints_ipv6: build.template(std.get(block, 'minimum_required_child_endpoints_ipv6', null)),
        name: build.template(block.name),
        priority: build.template(std.get(block, 'priority', null)),
        profile_id: build.template(block.profile_id),
        target_resource_id: build.template(block.target_resource_id),
        weight: build.template(std.get(block, 'weight', null)),
      }),
      enabled: resource.field(self._.blocks, 'enabled'),
      endpoint_location: resource.field(self._.blocks, 'endpoint_location'),
      geo_mappings: resource.field(self._.blocks, 'geo_mappings'),
      id: resource.field(self._.blocks, 'id'),
      minimum_child_endpoints: resource.field(self._.blocks, 'minimum_child_endpoints'),
      minimum_required_child_endpoints_ipv4: resource.field(self._.blocks, 'minimum_required_child_endpoints_ipv4'),
      minimum_required_child_endpoints_ipv6: resource.field(self._.blocks, 'minimum_required_child_endpoints_ipv6'),
      name: resource.field(self._.blocks, 'name'),
      priority: resource.field(self._.blocks, 'priority'),
      profile_id: resource.field(self._.blocks, 'profile_id'),
      target_resource_id: resource.field(self._.blocks, 'target_resource_id'),
      weight: resource.field(self._.blocks, 'weight'),
    },
    traffic_manager_profile(name, block): {
      local resource = blockType.resource('azurerm_traffic_manager_profile', name),
      _: resource._(block, {
        fqdn: build.template(std.get(block, 'fqdn', null)),
        id: build.template(std.get(block, 'id', null)),
        max_return: build.template(std.get(block, 'max_return', null)),
        name: build.template(block.name),
        profile_status: build.template(std.get(block, 'profile_status', null)),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
        traffic_routing_method: build.template(block.traffic_routing_method),
        traffic_view_enabled: build.template(std.get(block, 'traffic_view_enabled', null)),
      }),
      fqdn: resource.field(self._.blocks, 'fqdn'),
      id: resource.field(self._.blocks, 'id'),
      max_return: resource.field(self._.blocks, 'max_return'),
      name: resource.field(self._.blocks, 'name'),
      profile_status: resource.field(self._.blocks, 'profile_status'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
      traffic_routing_method: resource.field(self._.blocks, 'traffic_routing_method'),
      traffic_view_enabled: resource.field(self._.blocks, 'traffic_view_enabled'),
    },
    trusted_signing_account(name, block): {
      local resource = blockType.resource('azurerm_trusted_signing_account', name),
      _: resource._(block, {
        account_uri: build.template(std.get(block, 'account_uri', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        sku_name: build.template(block.sku_name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      account_uri: resource.field(self._.blocks, 'account_uri'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      sku_name: resource.field(self._.blocks, 'sku_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    user_assigned_identity(name, block): {
      local resource = blockType.resource('azurerm_user_assigned_identity', name),
      _: resource._(block, {
        client_id: build.template(std.get(block, 'client_id', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        principal_id: build.template(std.get(block, 'principal_id', null)),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
        tenant_id: build.template(std.get(block, 'tenant_id', null)),
      }),
      client_id: resource.field(self._.blocks, 'client_id'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      principal_id: resource.field(self._.blocks, 'principal_id'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
      tenant_id: resource.field(self._.blocks, 'tenant_id'),
    },
    video_indexer_account(name, block): {
      local resource = blockType.resource('azurerm_video_indexer_account', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    virtual_desktop_application(name, block): {
      local resource = blockType.resource('azurerm_virtual_desktop_application', name),
      _: resource._(block, {
        application_group_id: build.template(block.application_group_id),
        command_line_argument_policy: build.template(block.command_line_argument_policy),
        command_line_arguments: build.template(std.get(block, 'command_line_arguments', null)),
        description: build.template(std.get(block, 'description', null)),
        friendly_name: build.template(std.get(block, 'friendly_name', null)),
        icon_index: build.template(std.get(block, 'icon_index', null)),
        icon_path: build.template(std.get(block, 'icon_path', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        path: build.template(block.path),
        show_in_portal: build.template(std.get(block, 'show_in_portal', null)),
      }),
      application_group_id: resource.field(self._.blocks, 'application_group_id'),
      command_line_argument_policy: resource.field(self._.blocks, 'command_line_argument_policy'),
      command_line_arguments: resource.field(self._.blocks, 'command_line_arguments'),
      description: resource.field(self._.blocks, 'description'),
      friendly_name: resource.field(self._.blocks, 'friendly_name'),
      icon_index: resource.field(self._.blocks, 'icon_index'),
      icon_path: resource.field(self._.blocks, 'icon_path'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      path: resource.field(self._.blocks, 'path'),
      show_in_portal: resource.field(self._.blocks, 'show_in_portal'),
    },
    virtual_desktop_application_group(name, block): {
      local resource = blockType.resource('azurerm_virtual_desktop_application_group', name),
      _: resource._(block, {
        default_desktop_display_name: build.template(std.get(block, 'default_desktop_display_name', null)),
        description: build.template(std.get(block, 'description', null)),
        friendly_name: build.template(std.get(block, 'friendly_name', null)),
        host_pool_id: build.template(block.host_pool_id),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
        type: build.template(block.type),
      }),
      default_desktop_display_name: resource.field(self._.blocks, 'default_desktop_display_name'),
      description: resource.field(self._.blocks, 'description'),
      friendly_name: resource.field(self._.blocks, 'friendly_name'),
      host_pool_id: resource.field(self._.blocks, 'host_pool_id'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
      type: resource.field(self._.blocks, 'type'),
    },
    virtual_desktop_host_pool(name, block): {
      local resource = blockType.resource('azurerm_virtual_desktop_host_pool', name),
      _: resource._(block, {
        custom_rdp_properties: build.template(std.get(block, 'custom_rdp_properties', null)),
        description: build.template(std.get(block, 'description', null)),
        friendly_name: build.template(std.get(block, 'friendly_name', null)),
        id: build.template(std.get(block, 'id', null)),
        load_balancer_type: build.template(block.load_balancer_type),
        location: build.template(block.location),
        maximum_sessions_allowed: build.template(std.get(block, 'maximum_sessions_allowed', null)),
        name: build.template(block.name),
        personal_desktop_assignment_type: build.template(std.get(block, 'personal_desktop_assignment_type', null)),
        preferred_app_group_type: build.template(std.get(block, 'preferred_app_group_type', null)),
        public_network_access: build.template(std.get(block, 'public_network_access', null)),
        resource_group_name: build.template(block.resource_group_name),
        start_vm_on_connect: build.template(std.get(block, 'start_vm_on_connect', null)),
        tags: build.template(std.get(block, 'tags', null)),
        type: build.template(block.type),
        validate_environment: build.template(std.get(block, 'validate_environment', null)),
        vm_template: build.template(std.get(block, 'vm_template', null)),
      }),
      custom_rdp_properties: resource.field(self._.blocks, 'custom_rdp_properties'),
      description: resource.field(self._.blocks, 'description'),
      friendly_name: resource.field(self._.blocks, 'friendly_name'),
      id: resource.field(self._.blocks, 'id'),
      load_balancer_type: resource.field(self._.blocks, 'load_balancer_type'),
      location: resource.field(self._.blocks, 'location'),
      maximum_sessions_allowed: resource.field(self._.blocks, 'maximum_sessions_allowed'),
      name: resource.field(self._.blocks, 'name'),
      personal_desktop_assignment_type: resource.field(self._.blocks, 'personal_desktop_assignment_type'),
      preferred_app_group_type: resource.field(self._.blocks, 'preferred_app_group_type'),
      public_network_access: resource.field(self._.blocks, 'public_network_access'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      start_vm_on_connect: resource.field(self._.blocks, 'start_vm_on_connect'),
      tags: resource.field(self._.blocks, 'tags'),
      type: resource.field(self._.blocks, 'type'),
      validate_environment: resource.field(self._.blocks, 'validate_environment'),
      vm_template: resource.field(self._.blocks, 'vm_template'),
    },
    virtual_desktop_host_pool_registration_info(name, block): {
      local resource = blockType.resource('azurerm_virtual_desktop_host_pool_registration_info', name),
      _: resource._(block, {
        expiration_date: build.template(block.expiration_date),
        hostpool_id: build.template(block.hostpool_id),
        id: build.template(std.get(block, 'id', null)),
        token: build.template(std.get(block, 'token', null)),
      }),
      expiration_date: resource.field(self._.blocks, 'expiration_date'),
      hostpool_id: resource.field(self._.blocks, 'hostpool_id'),
      id: resource.field(self._.blocks, 'id'),
      token: resource.field(self._.blocks, 'token'),
    },
    virtual_desktop_scaling_plan(name, block): {
      local resource = blockType.resource('azurerm_virtual_desktop_scaling_plan', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        exclusion_tag: build.template(std.get(block, 'exclusion_tag', null)),
        friendly_name: build.template(std.get(block, 'friendly_name', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
        time_zone: build.template(block.time_zone),
      }),
      description: resource.field(self._.blocks, 'description'),
      exclusion_tag: resource.field(self._.blocks, 'exclusion_tag'),
      friendly_name: resource.field(self._.blocks, 'friendly_name'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
      time_zone: resource.field(self._.blocks, 'time_zone'),
    },
    virtual_desktop_scaling_plan_host_pool_association(name, block): {
      local resource = blockType.resource('azurerm_virtual_desktop_scaling_plan_host_pool_association', name),
      _: resource._(block, {
        enabled: build.template(block.enabled),
        host_pool_id: build.template(block.host_pool_id),
        id: build.template(std.get(block, 'id', null)),
        scaling_plan_id: build.template(block.scaling_plan_id),
      }),
      enabled: resource.field(self._.blocks, 'enabled'),
      host_pool_id: resource.field(self._.blocks, 'host_pool_id'),
      id: resource.field(self._.blocks, 'id'),
      scaling_plan_id: resource.field(self._.blocks, 'scaling_plan_id'),
    },
    virtual_desktop_workspace(name, block): {
      local resource = blockType.resource('azurerm_virtual_desktop_workspace', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        friendly_name: build.template(std.get(block, 'friendly_name', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        public_network_access_enabled: build.template(std.get(block, 'public_network_access_enabled', null)),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      description: resource.field(self._.blocks, 'description'),
      friendly_name: resource.field(self._.blocks, 'friendly_name'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      public_network_access_enabled: resource.field(self._.blocks, 'public_network_access_enabled'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    virtual_desktop_workspace_application_group_association(name, block): {
      local resource = blockType.resource('azurerm_virtual_desktop_workspace_application_group_association', name),
      _: resource._(block, {
        application_group_id: build.template(block.application_group_id),
        id: build.template(std.get(block, 'id', null)),
        workspace_id: build.template(block.workspace_id),
      }),
      application_group_id: resource.field(self._.blocks, 'application_group_id'),
      id: resource.field(self._.blocks, 'id'),
      workspace_id: resource.field(self._.blocks, 'workspace_id'),
    },
    virtual_hub(name, block): {
      local resource = blockType.resource('azurerm_virtual_hub', name),
      _: resource._(block, {
        address_prefix: build.template(std.get(block, 'address_prefix', null)),
        default_route_table_id: build.template(std.get(block, 'default_route_table_id', null)),
        hub_routing_preference: build.template(std.get(block, 'hub_routing_preference', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        sku: build.template(std.get(block, 'sku', null)),
        tags: build.template(std.get(block, 'tags', null)),
        virtual_router_asn: build.template(std.get(block, 'virtual_router_asn', null)),
        virtual_router_auto_scale_min_capacity: build.template(std.get(block, 'virtual_router_auto_scale_min_capacity', null)),
        virtual_router_ips: build.template(std.get(block, 'virtual_router_ips', null)),
        virtual_wan_id: build.template(std.get(block, 'virtual_wan_id', null)),
      }),
      address_prefix: resource.field(self._.blocks, 'address_prefix'),
      default_route_table_id: resource.field(self._.blocks, 'default_route_table_id'),
      hub_routing_preference: resource.field(self._.blocks, 'hub_routing_preference'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      sku: resource.field(self._.blocks, 'sku'),
      tags: resource.field(self._.blocks, 'tags'),
      virtual_router_asn: resource.field(self._.blocks, 'virtual_router_asn'),
      virtual_router_auto_scale_min_capacity: resource.field(self._.blocks, 'virtual_router_auto_scale_min_capacity'),
      virtual_router_ips: resource.field(self._.blocks, 'virtual_router_ips'),
      virtual_wan_id: resource.field(self._.blocks, 'virtual_wan_id'),
    },
    virtual_hub_bgp_connection(name, block): {
      local resource = blockType.resource('azurerm_virtual_hub_bgp_connection', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        peer_asn: build.template(block.peer_asn),
        peer_ip: build.template(block.peer_ip),
        virtual_hub_id: build.template(block.virtual_hub_id),
        virtual_network_connection_id: build.template(std.get(block, 'virtual_network_connection_id', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      peer_asn: resource.field(self._.blocks, 'peer_asn'),
      peer_ip: resource.field(self._.blocks, 'peer_ip'),
      virtual_hub_id: resource.field(self._.blocks, 'virtual_hub_id'),
      virtual_network_connection_id: resource.field(self._.blocks, 'virtual_network_connection_id'),
    },
    virtual_hub_connection(name, block): {
      local resource = blockType.resource('azurerm_virtual_hub_connection', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        internet_security_enabled: build.template(std.get(block, 'internet_security_enabled', null)),
        name: build.template(block.name),
        remote_virtual_network_id: build.template(block.remote_virtual_network_id),
        virtual_hub_id: build.template(block.virtual_hub_id),
      }),
      id: resource.field(self._.blocks, 'id'),
      internet_security_enabled: resource.field(self._.blocks, 'internet_security_enabled'),
      name: resource.field(self._.blocks, 'name'),
      remote_virtual_network_id: resource.field(self._.blocks, 'remote_virtual_network_id'),
      virtual_hub_id: resource.field(self._.blocks, 'virtual_hub_id'),
    },
    virtual_hub_ip(name, block): {
      local resource = blockType.resource('azurerm_virtual_hub_ip', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        private_ip_address: build.template(std.get(block, 'private_ip_address', null)),
        private_ip_allocation_method: build.template(std.get(block, 'private_ip_allocation_method', null)),
        public_ip_address_id: build.template(block.public_ip_address_id),
        subnet_id: build.template(block.subnet_id),
        virtual_hub_id: build.template(block.virtual_hub_id),
      }),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      private_ip_address: resource.field(self._.blocks, 'private_ip_address'),
      private_ip_allocation_method: resource.field(self._.blocks, 'private_ip_allocation_method'),
      public_ip_address_id: resource.field(self._.blocks, 'public_ip_address_id'),
      subnet_id: resource.field(self._.blocks, 'subnet_id'),
      virtual_hub_id: resource.field(self._.blocks, 'virtual_hub_id'),
    },
    virtual_hub_route_table(name, block): {
      local resource = blockType.resource('azurerm_virtual_hub_route_table', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        name: build.template(block.name),
        virtual_hub_id: build.template(block.virtual_hub_id),
      }),
      id: resource.field(self._.blocks, 'id'),
      labels: resource.field(self._.blocks, 'labels'),
      name: resource.field(self._.blocks, 'name'),
      virtual_hub_id: resource.field(self._.blocks, 'virtual_hub_id'),
    },
    virtual_hub_route_table_route(name, block): {
      local resource = blockType.resource('azurerm_virtual_hub_route_table_route', name),
      _: resource._(block, {
        destinations: build.template(block.destinations),
        destinations_type: build.template(block.destinations_type),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        next_hop: build.template(block.next_hop),
        next_hop_type: build.template(std.get(block, 'next_hop_type', null)),
        route_table_id: build.template(block.route_table_id),
      }),
      destinations: resource.field(self._.blocks, 'destinations'),
      destinations_type: resource.field(self._.blocks, 'destinations_type'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      next_hop: resource.field(self._.blocks, 'next_hop'),
      next_hop_type: resource.field(self._.blocks, 'next_hop_type'),
      route_table_id: resource.field(self._.blocks, 'route_table_id'),
    },
    virtual_hub_routing_intent(name, block): {
      local resource = blockType.resource('azurerm_virtual_hub_routing_intent', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        virtual_hub_id: build.template(block.virtual_hub_id),
      }),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      virtual_hub_id: resource.field(self._.blocks, 'virtual_hub_id'),
    },
    virtual_hub_security_partner_provider(name, block): {
      local resource = blockType.resource('azurerm_virtual_hub_security_partner_provider', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        security_provider_name: build.template(block.security_provider_name),
        tags: build.template(std.get(block, 'tags', null)),
        virtual_hub_id: build.template(std.get(block, 'virtual_hub_id', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      security_provider_name: resource.field(self._.blocks, 'security_provider_name'),
      tags: resource.field(self._.blocks, 'tags'),
      virtual_hub_id: resource.field(self._.blocks, 'virtual_hub_id'),
    },
    virtual_machine(name, block): {
      local resource = blockType.resource('azurerm_virtual_machine', name),
      _: resource._(block, {
        availability_set_id: build.template(std.get(block, 'availability_set_id', null)),
        delete_data_disks_on_termination: build.template(std.get(block, 'delete_data_disks_on_termination', null)),
        delete_os_disk_on_termination: build.template(std.get(block, 'delete_os_disk_on_termination', null)),
        id: build.template(std.get(block, 'id', null)),
        license_type: build.template(std.get(block, 'license_type', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        network_interface_ids: build.template(block.network_interface_ids),
        primary_network_interface_id: build.template(std.get(block, 'primary_network_interface_id', null)),
        proximity_placement_group_id: build.template(std.get(block, 'proximity_placement_group_id', null)),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
        vm_size: build.template(block.vm_size),
        zones: build.template(std.get(block, 'zones', null)),
      }),
      availability_set_id: resource.field(self._.blocks, 'availability_set_id'),
      delete_data_disks_on_termination: resource.field(self._.blocks, 'delete_data_disks_on_termination'),
      delete_os_disk_on_termination: resource.field(self._.blocks, 'delete_os_disk_on_termination'),
      id: resource.field(self._.blocks, 'id'),
      license_type: resource.field(self._.blocks, 'license_type'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      network_interface_ids: resource.field(self._.blocks, 'network_interface_ids'),
      primary_network_interface_id: resource.field(self._.blocks, 'primary_network_interface_id'),
      proximity_placement_group_id: resource.field(self._.blocks, 'proximity_placement_group_id'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
      vm_size: resource.field(self._.blocks, 'vm_size'),
      zones: resource.field(self._.blocks, 'zones'),
    },
    virtual_machine_automanage_configuration_assignment(name, block): {
      local resource = blockType.resource('azurerm_virtual_machine_automanage_configuration_assignment', name),
      _: resource._(block, {
        configuration_id: build.template(block.configuration_id),
        id: build.template(std.get(block, 'id', null)),
        virtual_machine_id: build.template(block.virtual_machine_id),
      }),
      configuration_id: resource.field(self._.blocks, 'configuration_id'),
      id: resource.field(self._.blocks, 'id'),
      virtual_machine_id: resource.field(self._.blocks, 'virtual_machine_id'),
    },
    virtual_machine_data_disk_attachment(name, block): {
      local resource = blockType.resource('azurerm_virtual_machine_data_disk_attachment', name),
      _: resource._(block, {
        caching: build.template(block.caching),
        create_option: build.template(std.get(block, 'create_option', null)),
        id: build.template(std.get(block, 'id', null)),
        lun: build.template(block.lun),
        managed_disk_id: build.template(block.managed_disk_id),
        virtual_machine_id: build.template(block.virtual_machine_id),
        write_accelerator_enabled: build.template(std.get(block, 'write_accelerator_enabled', null)),
      }),
      caching: resource.field(self._.blocks, 'caching'),
      create_option: resource.field(self._.blocks, 'create_option'),
      id: resource.field(self._.blocks, 'id'),
      lun: resource.field(self._.blocks, 'lun'),
      managed_disk_id: resource.field(self._.blocks, 'managed_disk_id'),
      virtual_machine_id: resource.field(self._.blocks, 'virtual_machine_id'),
      write_accelerator_enabled: resource.field(self._.blocks, 'write_accelerator_enabled'),
    },
    virtual_machine_extension(name, block): {
      local resource = blockType.resource('azurerm_virtual_machine_extension', name),
      _: resource._(block, {
        auto_upgrade_minor_version: build.template(std.get(block, 'auto_upgrade_minor_version', null)),
        automatic_upgrade_enabled: build.template(std.get(block, 'automatic_upgrade_enabled', null)),
        failure_suppression_enabled: build.template(std.get(block, 'failure_suppression_enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        protected_settings: build.template(std.get(block, 'protected_settings', null)),
        provision_after_extensions: build.template(std.get(block, 'provision_after_extensions', null)),
        publisher: build.template(block.publisher),
        settings: build.template(std.get(block, 'settings', null)),
        tags: build.template(std.get(block, 'tags', null)),
        type: build.template(block.type),
        type_handler_version: build.template(block.type_handler_version),
        virtual_machine_id: build.template(block.virtual_machine_id),
      }),
      auto_upgrade_minor_version: resource.field(self._.blocks, 'auto_upgrade_minor_version'),
      automatic_upgrade_enabled: resource.field(self._.blocks, 'automatic_upgrade_enabled'),
      failure_suppression_enabled: resource.field(self._.blocks, 'failure_suppression_enabled'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      protected_settings: resource.field(self._.blocks, 'protected_settings'),
      provision_after_extensions: resource.field(self._.blocks, 'provision_after_extensions'),
      publisher: resource.field(self._.blocks, 'publisher'),
      settings: resource.field(self._.blocks, 'settings'),
      tags: resource.field(self._.blocks, 'tags'),
      type: resource.field(self._.blocks, 'type'),
      type_handler_version: resource.field(self._.blocks, 'type_handler_version'),
      virtual_machine_id: resource.field(self._.blocks, 'virtual_machine_id'),
    },
    virtual_machine_gallery_application_assignment(name, block): {
      local resource = blockType.resource('azurerm_virtual_machine_gallery_application_assignment', name),
      _: resource._(block, {
        configuration_blob_uri: build.template(std.get(block, 'configuration_blob_uri', null)),
        gallery_application_version_id: build.template(block.gallery_application_version_id),
        id: build.template(std.get(block, 'id', null)),
        order: build.template(std.get(block, 'order', null)),
        tag: build.template(std.get(block, 'tag', null)),
        virtual_machine_id: build.template(block.virtual_machine_id),
      }),
      configuration_blob_uri: resource.field(self._.blocks, 'configuration_blob_uri'),
      gallery_application_version_id: resource.field(self._.blocks, 'gallery_application_version_id'),
      id: resource.field(self._.blocks, 'id'),
      order: resource.field(self._.blocks, 'order'),
      tag: resource.field(self._.blocks, 'tag'),
      virtual_machine_id: resource.field(self._.blocks, 'virtual_machine_id'),
    },
    virtual_machine_implicit_data_disk_from_source(name, block): {
      local resource = blockType.resource('azurerm_virtual_machine_implicit_data_disk_from_source', name),
      _: resource._(block, {
        caching: build.template(std.get(block, 'caching', null)),
        create_option: build.template(block.create_option),
        disk_size_gb: build.template(block.disk_size_gb),
        id: build.template(std.get(block, 'id', null)),
        lun: build.template(block.lun),
        name: build.template(block.name),
        source_resource_id: build.template(block.source_resource_id),
        virtual_machine_id: build.template(block.virtual_machine_id),
        write_accelerator_enabled: build.template(std.get(block, 'write_accelerator_enabled', null)),
      }),
      caching: resource.field(self._.blocks, 'caching'),
      create_option: resource.field(self._.blocks, 'create_option'),
      disk_size_gb: resource.field(self._.blocks, 'disk_size_gb'),
      id: resource.field(self._.blocks, 'id'),
      lun: resource.field(self._.blocks, 'lun'),
      name: resource.field(self._.blocks, 'name'),
      source_resource_id: resource.field(self._.blocks, 'source_resource_id'),
      virtual_machine_id: resource.field(self._.blocks, 'virtual_machine_id'),
      write_accelerator_enabled: resource.field(self._.blocks, 'write_accelerator_enabled'),
    },
    virtual_machine_packet_capture(name, block): {
      local resource = blockType.resource('azurerm_virtual_machine_packet_capture', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        maximum_bytes_per_packet: build.template(std.get(block, 'maximum_bytes_per_packet', null)),
        maximum_bytes_per_session: build.template(std.get(block, 'maximum_bytes_per_session', null)),
        maximum_capture_duration_in_seconds: build.template(std.get(block, 'maximum_capture_duration_in_seconds', null)),
        name: build.template(block.name),
        network_watcher_id: build.template(block.network_watcher_id),
        virtual_machine_id: build.template(block.virtual_machine_id),
      }),
      id: resource.field(self._.blocks, 'id'),
      maximum_bytes_per_packet: resource.field(self._.blocks, 'maximum_bytes_per_packet'),
      maximum_bytes_per_session: resource.field(self._.blocks, 'maximum_bytes_per_session'),
      maximum_capture_duration_in_seconds: resource.field(self._.blocks, 'maximum_capture_duration_in_seconds'),
      name: resource.field(self._.blocks, 'name'),
      network_watcher_id: resource.field(self._.blocks, 'network_watcher_id'),
      virtual_machine_id: resource.field(self._.blocks, 'virtual_machine_id'),
    },
    virtual_machine_restore_point(name, block): {
      local resource = blockType.resource('azurerm_virtual_machine_restore_point', name),
      _: resource._(block, {
        crash_consistency_mode_enabled: build.template(std.get(block, 'crash_consistency_mode_enabled', null)),
        excluded_disks: build.template(std.get(block, 'excluded_disks', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        virtual_machine_restore_point_collection_id: build.template(block.virtual_machine_restore_point_collection_id),
      }),
      crash_consistency_mode_enabled: resource.field(self._.blocks, 'crash_consistency_mode_enabled'),
      excluded_disks: resource.field(self._.blocks, 'excluded_disks'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      virtual_machine_restore_point_collection_id: resource.field(self._.blocks, 'virtual_machine_restore_point_collection_id'),
    },
    virtual_machine_restore_point_collection(name, block): {
      local resource = blockType.resource('azurerm_virtual_machine_restore_point_collection', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        source_virtual_machine_id: build.template(block.source_virtual_machine_id),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      source_virtual_machine_id: resource.field(self._.blocks, 'source_virtual_machine_id'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    virtual_machine_run_command(name, block): {
      local resource = blockType.resource('azurerm_virtual_machine_run_command', name),
      _: resource._(block, {
        error_blob_uri: build.template(std.get(block, 'error_blob_uri', null)),
        id: build.template(std.get(block, 'id', null)),
        instance_view: build.template(std.get(block, 'instance_view', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        output_blob_uri: build.template(std.get(block, 'output_blob_uri', null)),
        run_as_password: build.template(std.get(block, 'run_as_password', null)),
        run_as_user: build.template(std.get(block, 'run_as_user', null)),
        tags: build.template(std.get(block, 'tags', null)),
        virtual_machine_id: build.template(block.virtual_machine_id),
      }),
      error_blob_uri: resource.field(self._.blocks, 'error_blob_uri'),
      id: resource.field(self._.blocks, 'id'),
      instance_view: resource.field(self._.blocks, 'instance_view'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      output_blob_uri: resource.field(self._.blocks, 'output_blob_uri'),
      run_as_password: resource.field(self._.blocks, 'run_as_password'),
      run_as_user: resource.field(self._.blocks, 'run_as_user'),
      tags: resource.field(self._.blocks, 'tags'),
      virtual_machine_id: resource.field(self._.blocks, 'virtual_machine_id'),
    },
    virtual_machine_scale_set(name, block): {
      local resource = blockType.resource('azurerm_virtual_machine_scale_set', name),
      _: resource._(block, {
        automatic_os_upgrade: build.template(std.get(block, 'automatic_os_upgrade', null)),
        eviction_policy: build.template(std.get(block, 'eviction_policy', null)),
        health_probe_id: build.template(std.get(block, 'health_probe_id', null)),
        id: build.template(std.get(block, 'id', null)),
        license_type: build.template(std.get(block, 'license_type', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        overprovision: build.template(std.get(block, 'overprovision', null)),
        priority: build.template(std.get(block, 'priority', null)),
        proximity_placement_group_id: build.template(std.get(block, 'proximity_placement_group_id', null)),
        resource_group_name: build.template(block.resource_group_name),
        single_placement_group: build.template(std.get(block, 'single_placement_group', null)),
        tags: build.template(std.get(block, 'tags', null)),
        upgrade_policy_mode: build.template(block.upgrade_policy_mode),
        zones: build.template(std.get(block, 'zones', null)),
      }),
      automatic_os_upgrade: resource.field(self._.blocks, 'automatic_os_upgrade'),
      eviction_policy: resource.field(self._.blocks, 'eviction_policy'),
      health_probe_id: resource.field(self._.blocks, 'health_probe_id'),
      id: resource.field(self._.blocks, 'id'),
      license_type: resource.field(self._.blocks, 'license_type'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      overprovision: resource.field(self._.blocks, 'overprovision'),
      priority: resource.field(self._.blocks, 'priority'),
      proximity_placement_group_id: resource.field(self._.blocks, 'proximity_placement_group_id'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      single_placement_group: resource.field(self._.blocks, 'single_placement_group'),
      tags: resource.field(self._.blocks, 'tags'),
      upgrade_policy_mode: resource.field(self._.blocks, 'upgrade_policy_mode'),
      zones: resource.field(self._.blocks, 'zones'),
    },
    virtual_machine_scale_set_extension(name, block): {
      local resource = blockType.resource('azurerm_virtual_machine_scale_set_extension', name),
      _: resource._(block, {
        auto_upgrade_minor_version: build.template(std.get(block, 'auto_upgrade_minor_version', null)),
        automatic_upgrade_enabled: build.template(std.get(block, 'automatic_upgrade_enabled', null)),
        failure_suppression_enabled: build.template(std.get(block, 'failure_suppression_enabled', null)),
        force_update_tag: build.template(std.get(block, 'force_update_tag', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        protected_settings: build.template(std.get(block, 'protected_settings', null)),
        provision_after_extensions: build.template(std.get(block, 'provision_after_extensions', null)),
        publisher: build.template(block.publisher),
        settings: build.template(std.get(block, 'settings', null)),
        type: build.template(block.type),
        type_handler_version: build.template(block.type_handler_version),
        virtual_machine_scale_set_id: build.template(block.virtual_machine_scale_set_id),
      }),
      auto_upgrade_minor_version: resource.field(self._.blocks, 'auto_upgrade_minor_version'),
      automatic_upgrade_enabled: resource.field(self._.blocks, 'automatic_upgrade_enabled'),
      failure_suppression_enabled: resource.field(self._.blocks, 'failure_suppression_enabled'),
      force_update_tag: resource.field(self._.blocks, 'force_update_tag'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      protected_settings: resource.field(self._.blocks, 'protected_settings'),
      provision_after_extensions: resource.field(self._.blocks, 'provision_after_extensions'),
      publisher: resource.field(self._.blocks, 'publisher'),
      settings: resource.field(self._.blocks, 'settings'),
      type: resource.field(self._.blocks, 'type'),
      type_handler_version: resource.field(self._.blocks, 'type_handler_version'),
      virtual_machine_scale_set_id: resource.field(self._.blocks, 'virtual_machine_scale_set_id'),
    },
    virtual_machine_scale_set_packet_capture(name, block): {
      local resource = blockType.resource('azurerm_virtual_machine_scale_set_packet_capture', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        maximum_bytes_per_packet: build.template(std.get(block, 'maximum_bytes_per_packet', null)),
        maximum_bytes_per_session: build.template(std.get(block, 'maximum_bytes_per_session', null)),
        maximum_capture_duration_in_seconds: build.template(std.get(block, 'maximum_capture_duration_in_seconds', null)),
        name: build.template(block.name),
        network_watcher_id: build.template(block.network_watcher_id),
        virtual_machine_scale_set_id: build.template(block.virtual_machine_scale_set_id),
      }),
      id: resource.field(self._.blocks, 'id'),
      maximum_bytes_per_packet: resource.field(self._.blocks, 'maximum_bytes_per_packet'),
      maximum_bytes_per_session: resource.field(self._.blocks, 'maximum_bytes_per_session'),
      maximum_capture_duration_in_seconds: resource.field(self._.blocks, 'maximum_capture_duration_in_seconds'),
      name: resource.field(self._.blocks, 'name'),
      network_watcher_id: resource.field(self._.blocks, 'network_watcher_id'),
      virtual_machine_scale_set_id: resource.field(self._.blocks, 'virtual_machine_scale_set_id'),
    },
    virtual_machine_scale_set_standby_pool(name, block): {
      local resource = blockType.resource('azurerm_virtual_machine_scale_set_standby_pool', name),
      _: resource._(block, {
        attached_virtual_machine_scale_set_id: build.template(block.attached_virtual_machine_scale_set_id),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
        virtual_machine_state: build.template(block.virtual_machine_state),
      }),
      attached_virtual_machine_scale_set_id: resource.field(self._.blocks, 'attached_virtual_machine_scale_set_id'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
      virtual_machine_state: resource.field(self._.blocks, 'virtual_machine_state'),
    },
    virtual_network(name, block): {
      local resource = blockType.resource('azurerm_virtual_network', name),
      _: resource._(block, {
        address_space: build.template(block.address_space),
        bgp_community: build.template(std.get(block, 'bgp_community', null)),
        dns_servers: build.template(std.get(block, 'dns_servers', null)),
        edge_zone: build.template(std.get(block, 'edge_zone', null)),
        flow_timeout_in_minutes: build.template(std.get(block, 'flow_timeout_in_minutes', null)),
        guid: build.template(std.get(block, 'guid', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        private_endpoint_vnet_policies: build.template(std.get(block, 'private_endpoint_vnet_policies', null)),
        resource_group_name: build.template(block.resource_group_name),
        subnet: build.template(std.get(block, 'subnet', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      address_space: resource.field(self._.blocks, 'address_space'),
      bgp_community: resource.field(self._.blocks, 'bgp_community'),
      dns_servers: resource.field(self._.blocks, 'dns_servers'),
      edge_zone: resource.field(self._.blocks, 'edge_zone'),
      flow_timeout_in_minutes: resource.field(self._.blocks, 'flow_timeout_in_minutes'),
      guid: resource.field(self._.blocks, 'guid'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      private_endpoint_vnet_policies: resource.field(self._.blocks, 'private_endpoint_vnet_policies'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      subnet: resource.field(self._.blocks, 'subnet'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    virtual_network_dns_servers(name, block): {
      local resource = blockType.resource('azurerm_virtual_network_dns_servers', name),
      _: resource._(block, {
        dns_servers: build.template(std.get(block, 'dns_servers', null)),
        id: build.template(std.get(block, 'id', null)),
        virtual_network_id: build.template(block.virtual_network_id),
      }),
      dns_servers: resource.field(self._.blocks, 'dns_servers'),
      id: resource.field(self._.blocks, 'id'),
      virtual_network_id: resource.field(self._.blocks, 'virtual_network_id'),
    },
    virtual_network_gateway(name, block): {
      local resource = blockType.resource('azurerm_virtual_network_gateway', name),
      _: resource._(block, {
        active_active: build.template(std.get(block, 'active_active', null)),
        bgp_route_translation_for_nat_enabled: build.template(std.get(block, 'bgp_route_translation_for_nat_enabled', null)),
        default_local_network_gateway_id: build.template(std.get(block, 'default_local_network_gateway_id', null)),
        dns_forwarding_enabled: build.template(std.get(block, 'dns_forwarding_enabled', null)),
        edge_zone: build.template(std.get(block, 'edge_zone', null)),
        enable_bgp: build.template(std.get(block, 'enable_bgp', null)),
        generation: build.template(std.get(block, 'generation', null)),
        id: build.template(std.get(block, 'id', null)),
        ip_sec_replay_protection_enabled: build.template(std.get(block, 'ip_sec_replay_protection_enabled', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        private_ip_address_enabled: build.template(std.get(block, 'private_ip_address_enabled', null)),
        remote_vnet_traffic_enabled: build.template(std.get(block, 'remote_vnet_traffic_enabled', null)),
        resource_group_name: build.template(block.resource_group_name),
        sku: build.template(block.sku),
        tags: build.template(std.get(block, 'tags', null)),
        type: build.template(block.type),
        virtual_wan_traffic_enabled: build.template(std.get(block, 'virtual_wan_traffic_enabled', null)),
        vpn_type: build.template(std.get(block, 'vpn_type', null)),
      }),
      active_active: resource.field(self._.blocks, 'active_active'),
      bgp_route_translation_for_nat_enabled: resource.field(self._.blocks, 'bgp_route_translation_for_nat_enabled'),
      default_local_network_gateway_id: resource.field(self._.blocks, 'default_local_network_gateway_id'),
      dns_forwarding_enabled: resource.field(self._.blocks, 'dns_forwarding_enabled'),
      edge_zone: resource.field(self._.blocks, 'edge_zone'),
      enable_bgp: resource.field(self._.blocks, 'enable_bgp'),
      generation: resource.field(self._.blocks, 'generation'),
      id: resource.field(self._.blocks, 'id'),
      ip_sec_replay_protection_enabled: resource.field(self._.blocks, 'ip_sec_replay_protection_enabled'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      private_ip_address_enabled: resource.field(self._.blocks, 'private_ip_address_enabled'),
      remote_vnet_traffic_enabled: resource.field(self._.blocks, 'remote_vnet_traffic_enabled'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      sku: resource.field(self._.blocks, 'sku'),
      tags: resource.field(self._.blocks, 'tags'),
      type: resource.field(self._.blocks, 'type'),
      virtual_wan_traffic_enabled: resource.field(self._.blocks, 'virtual_wan_traffic_enabled'),
      vpn_type: resource.field(self._.blocks, 'vpn_type'),
    },
    virtual_network_gateway_connection(name, block): {
      local resource = blockType.resource('azurerm_virtual_network_gateway_connection', name),
      _: resource._(block, {
        authorization_key: build.template(std.get(block, 'authorization_key', null)),
        connection_mode: build.template(std.get(block, 'connection_mode', null)),
        connection_protocol: build.template(std.get(block, 'connection_protocol', null)),
        dpd_timeout_seconds: build.template(std.get(block, 'dpd_timeout_seconds', null)),
        egress_nat_rule_ids: build.template(std.get(block, 'egress_nat_rule_ids', null)),
        enable_bgp: build.template(std.get(block, 'enable_bgp', null)),
        express_route_circuit_id: build.template(std.get(block, 'express_route_circuit_id', null)),
        express_route_gateway_bypass: build.template(std.get(block, 'express_route_gateway_bypass', null)),
        id: build.template(std.get(block, 'id', null)),
        ingress_nat_rule_ids: build.template(std.get(block, 'ingress_nat_rule_ids', null)),
        local_azure_ip_address_enabled: build.template(std.get(block, 'local_azure_ip_address_enabled', null)),
        local_network_gateway_id: build.template(std.get(block, 'local_network_gateway_id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        peer_virtual_network_gateway_id: build.template(std.get(block, 'peer_virtual_network_gateway_id', null)),
        private_link_fast_path_enabled: build.template(std.get(block, 'private_link_fast_path_enabled', null)),
        resource_group_name: build.template(block.resource_group_name),
        routing_weight: build.template(std.get(block, 'routing_weight', null)),
        shared_key: build.template(std.get(block, 'shared_key', null)),
        tags: build.template(std.get(block, 'tags', null)),
        type: build.template(block.type),
        use_policy_based_traffic_selectors: build.template(std.get(block, 'use_policy_based_traffic_selectors', null)),
        virtual_network_gateway_id: build.template(block.virtual_network_gateway_id),
      }),
      authorization_key: resource.field(self._.blocks, 'authorization_key'),
      connection_mode: resource.field(self._.blocks, 'connection_mode'),
      connection_protocol: resource.field(self._.blocks, 'connection_protocol'),
      dpd_timeout_seconds: resource.field(self._.blocks, 'dpd_timeout_seconds'),
      egress_nat_rule_ids: resource.field(self._.blocks, 'egress_nat_rule_ids'),
      enable_bgp: resource.field(self._.blocks, 'enable_bgp'),
      express_route_circuit_id: resource.field(self._.blocks, 'express_route_circuit_id'),
      express_route_gateway_bypass: resource.field(self._.blocks, 'express_route_gateway_bypass'),
      id: resource.field(self._.blocks, 'id'),
      ingress_nat_rule_ids: resource.field(self._.blocks, 'ingress_nat_rule_ids'),
      local_azure_ip_address_enabled: resource.field(self._.blocks, 'local_azure_ip_address_enabled'),
      local_network_gateway_id: resource.field(self._.blocks, 'local_network_gateway_id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      peer_virtual_network_gateway_id: resource.field(self._.blocks, 'peer_virtual_network_gateway_id'),
      private_link_fast_path_enabled: resource.field(self._.blocks, 'private_link_fast_path_enabled'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      routing_weight: resource.field(self._.blocks, 'routing_weight'),
      shared_key: resource.field(self._.blocks, 'shared_key'),
      tags: resource.field(self._.blocks, 'tags'),
      type: resource.field(self._.blocks, 'type'),
      use_policy_based_traffic_selectors: resource.field(self._.blocks, 'use_policy_based_traffic_selectors'),
      virtual_network_gateway_id: resource.field(self._.blocks, 'virtual_network_gateway_id'),
    },
    virtual_network_gateway_nat_rule(name, block): {
      local resource = blockType.resource('azurerm_virtual_network_gateway_nat_rule', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        ip_configuration_id: build.template(std.get(block, 'ip_configuration_id', null)),
        mode: build.template(std.get(block, 'mode', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        type: build.template(std.get(block, 'type', null)),
        virtual_network_gateway_id: build.template(block.virtual_network_gateway_id),
      }),
      id: resource.field(self._.blocks, 'id'),
      ip_configuration_id: resource.field(self._.blocks, 'ip_configuration_id'),
      mode: resource.field(self._.blocks, 'mode'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      type: resource.field(self._.blocks, 'type'),
      virtual_network_gateway_id: resource.field(self._.blocks, 'virtual_network_gateway_id'),
    },
    virtual_network_peering(name, block): {
      local resource = blockType.resource('azurerm_virtual_network_peering', name),
      _: resource._(block, {
        allow_forwarded_traffic: build.template(std.get(block, 'allow_forwarded_traffic', null)),
        allow_gateway_transit: build.template(std.get(block, 'allow_gateway_transit', null)),
        allow_virtual_network_access: build.template(std.get(block, 'allow_virtual_network_access', null)),
        id: build.template(std.get(block, 'id', null)),
        local_subnet_names: build.template(std.get(block, 'local_subnet_names', null)),
        name: build.template(block.name),
        only_ipv6_peering_enabled: build.template(std.get(block, 'only_ipv6_peering_enabled', null)),
        peer_complete_virtual_networks_enabled: build.template(std.get(block, 'peer_complete_virtual_networks_enabled', null)),
        remote_subnet_names: build.template(std.get(block, 'remote_subnet_names', null)),
        remote_virtual_network_id: build.template(block.remote_virtual_network_id),
        resource_group_name: build.template(block.resource_group_name),
        triggers: build.template(std.get(block, 'triggers', null)),
        use_remote_gateways: build.template(std.get(block, 'use_remote_gateways', null)),
        virtual_network_name: build.template(block.virtual_network_name),
      }),
      allow_forwarded_traffic: resource.field(self._.blocks, 'allow_forwarded_traffic'),
      allow_gateway_transit: resource.field(self._.blocks, 'allow_gateway_transit'),
      allow_virtual_network_access: resource.field(self._.blocks, 'allow_virtual_network_access'),
      id: resource.field(self._.blocks, 'id'),
      local_subnet_names: resource.field(self._.blocks, 'local_subnet_names'),
      name: resource.field(self._.blocks, 'name'),
      only_ipv6_peering_enabled: resource.field(self._.blocks, 'only_ipv6_peering_enabled'),
      peer_complete_virtual_networks_enabled: resource.field(self._.blocks, 'peer_complete_virtual_networks_enabled'),
      remote_subnet_names: resource.field(self._.blocks, 'remote_subnet_names'),
      remote_virtual_network_id: resource.field(self._.blocks, 'remote_virtual_network_id'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      triggers: resource.field(self._.blocks, 'triggers'),
      use_remote_gateways: resource.field(self._.blocks, 'use_remote_gateways'),
      virtual_network_name: resource.field(self._.blocks, 'virtual_network_name'),
    },
    virtual_wan(name, block): {
      local resource = blockType.resource('azurerm_virtual_wan', name),
      _: resource._(block, {
        allow_branch_to_branch_traffic: build.template(std.get(block, 'allow_branch_to_branch_traffic', null)),
        disable_vpn_encryption: build.template(std.get(block, 'disable_vpn_encryption', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        office365_local_breakout_category: build.template(std.get(block, 'office365_local_breakout_category', null)),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
        type: build.template(std.get(block, 'type', null)),
      }),
      allow_branch_to_branch_traffic: resource.field(self._.blocks, 'allow_branch_to_branch_traffic'),
      disable_vpn_encryption: resource.field(self._.blocks, 'disable_vpn_encryption'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      office365_local_breakout_category: resource.field(self._.blocks, 'office365_local_breakout_category'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
      type: resource.field(self._.blocks, 'type'),
    },
    vmware_cluster(name, block): {
      local resource = blockType.resource('azurerm_vmware_cluster', name),
      _: resource._(block, {
        cluster_node_count: build.template(block.cluster_node_count),
        cluster_number: build.template(std.get(block, 'cluster_number', null)),
        hosts: build.template(std.get(block, 'hosts', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        sku_name: build.template(block.sku_name),
        vmware_cloud_id: build.template(block.vmware_cloud_id),
      }),
      cluster_node_count: resource.field(self._.blocks, 'cluster_node_count'),
      cluster_number: resource.field(self._.blocks, 'cluster_number'),
      hosts: resource.field(self._.blocks, 'hosts'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      sku_name: resource.field(self._.blocks, 'sku_name'),
      vmware_cloud_id: resource.field(self._.blocks, 'vmware_cloud_id'),
    },
    vmware_express_route_authorization(name, block): {
      local resource = blockType.resource('azurerm_vmware_express_route_authorization', name),
      _: resource._(block, {
        express_route_authorization_id: build.template(std.get(block, 'express_route_authorization_id', null)),
        express_route_authorization_key: build.template(std.get(block, 'express_route_authorization_key', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        private_cloud_id: build.template(block.private_cloud_id),
      }),
      express_route_authorization_id: resource.field(self._.blocks, 'express_route_authorization_id'),
      express_route_authorization_key: resource.field(self._.blocks, 'express_route_authorization_key'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      private_cloud_id: resource.field(self._.blocks, 'private_cloud_id'),
    },
    vmware_netapp_volume_attachment(name, block): {
      local resource = blockType.resource('azurerm_vmware_netapp_volume_attachment', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        netapp_volume_id: build.template(block.netapp_volume_id),
        vmware_cluster_id: build.template(block.vmware_cluster_id),
      }),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      netapp_volume_id: resource.field(self._.blocks, 'netapp_volume_id'),
      vmware_cluster_id: resource.field(self._.blocks, 'vmware_cluster_id'),
    },
    vmware_private_cloud(name, block): {
      local resource = blockType.resource('azurerm_vmware_private_cloud', name),
      _: resource._(block, {
        circuit: build.template(std.get(block, 'circuit', null)),
        hcx_cloud_manager_endpoint: build.template(std.get(block, 'hcx_cloud_manager_endpoint', null)),
        id: build.template(std.get(block, 'id', null)),
        internet_connection_enabled: build.template(std.get(block, 'internet_connection_enabled', null)),
        location: build.template(block.location),
        management_subnet_cidr: build.template(std.get(block, 'management_subnet_cidr', null)),
        name: build.template(block.name),
        network_subnet_cidr: build.template(block.network_subnet_cidr),
        nsxt_certificate_thumbprint: build.template(std.get(block, 'nsxt_certificate_thumbprint', null)),
        nsxt_manager_endpoint: build.template(std.get(block, 'nsxt_manager_endpoint', null)),
        nsxt_password: build.template(std.get(block, 'nsxt_password', null)),
        provisioning_subnet_cidr: build.template(std.get(block, 'provisioning_subnet_cidr', null)),
        resource_group_name: build.template(block.resource_group_name),
        sku_name: build.template(block.sku_name),
        tags: build.template(std.get(block, 'tags', null)),
        vcenter_certificate_thumbprint: build.template(std.get(block, 'vcenter_certificate_thumbprint', null)),
        vcenter_password: build.template(std.get(block, 'vcenter_password', null)),
        vcsa_endpoint: build.template(std.get(block, 'vcsa_endpoint', null)),
        vmotion_subnet_cidr: build.template(std.get(block, 'vmotion_subnet_cidr', null)),
      }),
      circuit: resource.field(self._.blocks, 'circuit'),
      hcx_cloud_manager_endpoint: resource.field(self._.blocks, 'hcx_cloud_manager_endpoint'),
      id: resource.field(self._.blocks, 'id'),
      internet_connection_enabled: resource.field(self._.blocks, 'internet_connection_enabled'),
      location: resource.field(self._.blocks, 'location'),
      management_subnet_cidr: resource.field(self._.blocks, 'management_subnet_cidr'),
      name: resource.field(self._.blocks, 'name'),
      network_subnet_cidr: resource.field(self._.blocks, 'network_subnet_cidr'),
      nsxt_certificate_thumbprint: resource.field(self._.blocks, 'nsxt_certificate_thumbprint'),
      nsxt_manager_endpoint: resource.field(self._.blocks, 'nsxt_manager_endpoint'),
      nsxt_password: resource.field(self._.blocks, 'nsxt_password'),
      provisioning_subnet_cidr: resource.field(self._.blocks, 'provisioning_subnet_cidr'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      sku_name: resource.field(self._.blocks, 'sku_name'),
      tags: resource.field(self._.blocks, 'tags'),
      vcenter_certificate_thumbprint: resource.field(self._.blocks, 'vcenter_certificate_thumbprint'),
      vcenter_password: resource.field(self._.blocks, 'vcenter_password'),
      vcsa_endpoint: resource.field(self._.blocks, 'vcsa_endpoint'),
      vmotion_subnet_cidr: resource.field(self._.blocks, 'vmotion_subnet_cidr'),
    },
    voice_services_communications_gateway(name, block): {
      local resource = blockType.resource('azurerm_voice_services_communications_gateway', name),
      _: resource._(block, {
        api_bridge: build.template(std.get(block, 'api_bridge', null)),
        auto_generated_domain_name_label_scope: build.template(std.get(block, 'auto_generated_domain_name_label_scope', null)),
        codecs: build.template(block.codecs),
        connectivity: build.template(block.connectivity),
        e911_type: build.template(block.e911_type),
        emergency_dial_strings: build.template(std.get(block, 'emergency_dial_strings', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        microsoft_teams_voicemail_pilot_number: build.template(std.get(block, 'microsoft_teams_voicemail_pilot_number', null)),
        name: build.template(block.name),
        on_prem_mcp_enabled: build.template(std.get(block, 'on_prem_mcp_enabled', null)),
        platforms: build.template(block.platforms),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      api_bridge: resource.field(self._.blocks, 'api_bridge'),
      auto_generated_domain_name_label_scope: resource.field(self._.blocks, 'auto_generated_domain_name_label_scope'),
      codecs: resource.field(self._.blocks, 'codecs'),
      connectivity: resource.field(self._.blocks, 'connectivity'),
      e911_type: resource.field(self._.blocks, 'e911_type'),
      emergency_dial_strings: resource.field(self._.blocks, 'emergency_dial_strings'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      microsoft_teams_voicemail_pilot_number: resource.field(self._.blocks, 'microsoft_teams_voicemail_pilot_number'),
      name: resource.field(self._.blocks, 'name'),
      on_prem_mcp_enabled: resource.field(self._.blocks, 'on_prem_mcp_enabled'),
      platforms: resource.field(self._.blocks, 'platforms'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    voice_services_communications_gateway_test_line(name, block): {
      local resource = blockType.resource('azurerm_voice_services_communications_gateway_test_line', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        phone_number: build.template(block.phone_number),
        purpose: build.template(block.purpose),
        tags: build.template(std.get(block, 'tags', null)),
        voice_services_communications_gateway_id: build.template(block.voice_services_communications_gateway_id),
      }),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      phone_number: resource.field(self._.blocks, 'phone_number'),
      purpose: resource.field(self._.blocks, 'purpose'),
      tags: resource.field(self._.blocks, 'tags'),
      voice_services_communications_gateway_id: resource.field(self._.blocks, 'voice_services_communications_gateway_id'),
    },
    vpn_gateway(name, block): {
      local resource = blockType.resource('azurerm_vpn_gateway', name),
      _: resource._(block, {
        bgp_route_translation_for_nat_enabled: build.template(std.get(block, 'bgp_route_translation_for_nat_enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        routing_preference: build.template(std.get(block, 'routing_preference', null)),
        scale_unit: build.template(std.get(block, 'scale_unit', null)),
        tags: build.template(std.get(block, 'tags', null)),
        virtual_hub_id: build.template(block.virtual_hub_id),
      }),
      bgp_route_translation_for_nat_enabled: resource.field(self._.blocks, 'bgp_route_translation_for_nat_enabled'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      routing_preference: resource.field(self._.blocks, 'routing_preference'),
      scale_unit: resource.field(self._.blocks, 'scale_unit'),
      tags: resource.field(self._.blocks, 'tags'),
      virtual_hub_id: resource.field(self._.blocks, 'virtual_hub_id'),
    },
    vpn_gateway_connection(name, block): {
      local resource = blockType.resource('azurerm_vpn_gateway_connection', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        internet_security_enabled: build.template(std.get(block, 'internet_security_enabled', null)),
        name: build.template(block.name),
        remote_vpn_site_id: build.template(block.remote_vpn_site_id),
        vpn_gateway_id: build.template(block.vpn_gateway_id),
      }),
      id: resource.field(self._.blocks, 'id'),
      internet_security_enabled: resource.field(self._.blocks, 'internet_security_enabled'),
      name: resource.field(self._.blocks, 'name'),
      remote_vpn_site_id: resource.field(self._.blocks, 'remote_vpn_site_id'),
      vpn_gateway_id: resource.field(self._.blocks, 'vpn_gateway_id'),
    },
    vpn_gateway_nat_rule(name, block): {
      local resource = blockType.resource('azurerm_vpn_gateway_nat_rule', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        ip_configuration_id: build.template(std.get(block, 'ip_configuration_id', null)),
        mode: build.template(std.get(block, 'mode', null)),
        name: build.template(block.name),
        type: build.template(std.get(block, 'type', null)),
        vpn_gateway_id: build.template(block.vpn_gateway_id),
      }),
      id: resource.field(self._.blocks, 'id'),
      ip_configuration_id: resource.field(self._.blocks, 'ip_configuration_id'),
      mode: resource.field(self._.blocks, 'mode'),
      name: resource.field(self._.blocks, 'name'),
      type: resource.field(self._.blocks, 'type'),
      vpn_gateway_id: resource.field(self._.blocks, 'vpn_gateway_id'),
    },
    vpn_server_configuration(name, block): {
      local resource = blockType.resource('azurerm_vpn_server_configuration', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
        vpn_authentication_types: build.template(block.vpn_authentication_types),
        vpn_protocols: build.template(std.get(block, 'vpn_protocols', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
      vpn_authentication_types: resource.field(self._.blocks, 'vpn_authentication_types'),
      vpn_protocols: resource.field(self._.blocks, 'vpn_protocols'),
    },
    vpn_server_configuration_policy_group(name, block): {
      local resource = blockType.resource('azurerm_vpn_server_configuration_policy_group', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        is_default: build.template(std.get(block, 'is_default', null)),
        name: build.template(block.name),
        priority: build.template(std.get(block, 'priority', null)),
        vpn_server_configuration_id: build.template(block.vpn_server_configuration_id),
      }),
      id: resource.field(self._.blocks, 'id'),
      is_default: resource.field(self._.blocks, 'is_default'),
      name: resource.field(self._.blocks, 'name'),
      priority: resource.field(self._.blocks, 'priority'),
      vpn_server_configuration_id: resource.field(self._.blocks, 'vpn_server_configuration_id'),
    },
    vpn_site(name, block): {
      local resource = blockType.resource('azurerm_vpn_site', name),
      _: resource._(block, {
        address_cidrs: build.template(std.get(block, 'address_cidrs', null)),
        device_model: build.template(std.get(block, 'device_model', null)),
        device_vendor: build.template(std.get(block, 'device_vendor', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
        virtual_wan_id: build.template(block.virtual_wan_id),
      }),
      address_cidrs: resource.field(self._.blocks, 'address_cidrs'),
      device_model: resource.field(self._.blocks, 'device_model'),
      device_vendor: resource.field(self._.blocks, 'device_vendor'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
      virtual_wan_id: resource.field(self._.blocks, 'virtual_wan_id'),
    },
    web_app_active_slot(name, block): {
      local resource = blockType.resource('azurerm_web_app_active_slot', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        last_successful_swap: build.template(std.get(block, 'last_successful_swap', null)),
        overwrite_network_config: build.template(std.get(block, 'overwrite_network_config', null)),
        slot_id: build.template(block.slot_id),
      }),
      id: resource.field(self._.blocks, 'id'),
      last_successful_swap: resource.field(self._.blocks, 'last_successful_swap'),
      overwrite_network_config: resource.field(self._.blocks, 'overwrite_network_config'),
      slot_id: resource.field(self._.blocks, 'slot_id'),
    },
    web_app_hybrid_connection(name, block): {
      local resource = blockType.resource('azurerm_web_app_hybrid_connection', name),
      _: resource._(block, {
        hostname: build.template(block.hostname),
        id: build.template(std.get(block, 'id', null)),
        namespace_name: build.template(std.get(block, 'namespace_name', null)),
        port: build.template(block.port),
        relay_id: build.template(block.relay_id),
        relay_name: build.template(std.get(block, 'relay_name', null)),
        send_key_name: build.template(std.get(block, 'send_key_name', null)),
        send_key_value: build.template(std.get(block, 'send_key_value', null)),
        service_bus_namespace: build.template(std.get(block, 'service_bus_namespace', null)),
        service_bus_suffix: build.template(std.get(block, 'service_bus_suffix', null)),
        web_app_id: build.template(block.web_app_id),
      }),
      hostname: resource.field(self._.blocks, 'hostname'),
      id: resource.field(self._.blocks, 'id'),
      namespace_name: resource.field(self._.blocks, 'namespace_name'),
      port: resource.field(self._.blocks, 'port'),
      relay_id: resource.field(self._.blocks, 'relay_id'),
      relay_name: resource.field(self._.blocks, 'relay_name'),
      send_key_name: resource.field(self._.blocks, 'send_key_name'),
      send_key_value: resource.field(self._.blocks, 'send_key_value'),
      service_bus_namespace: resource.field(self._.blocks, 'service_bus_namespace'),
      service_bus_suffix: resource.field(self._.blocks, 'service_bus_suffix'),
      web_app_id: resource.field(self._.blocks, 'web_app_id'),
    },
    web_application_firewall_policy(name, block): {
      local resource = blockType.resource('azurerm_web_application_firewall_policy', name),
      _: resource._(block, {
        http_listener_ids: build.template(std.get(block, 'http_listener_ids', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        path_based_rule_ids: build.template(std.get(block, 'path_based_rule_ids', null)),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      http_listener_ids: resource.field(self._.blocks, 'http_listener_ids'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      path_based_rule_ids: resource.field(self._.blocks, 'path_based_rule_ids'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    web_pubsub(name, block): {
      local resource = blockType.resource('azurerm_web_pubsub', name),
      _: resource._(block, {
        aad_auth_enabled: build.template(std.get(block, 'aad_auth_enabled', null)),
        capacity: build.template(std.get(block, 'capacity', null)),
        external_ip: build.template(std.get(block, 'external_ip', null)),
        hostname: build.template(std.get(block, 'hostname', null)),
        id: build.template(std.get(block, 'id', null)),
        local_auth_enabled: build.template(std.get(block, 'local_auth_enabled', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        primary_access_key: build.template(std.get(block, 'primary_access_key', null)),
        primary_connection_string: build.template(std.get(block, 'primary_connection_string', null)),
        public_network_access_enabled: build.template(std.get(block, 'public_network_access_enabled', null)),
        public_port: build.template(std.get(block, 'public_port', null)),
        resource_group_name: build.template(block.resource_group_name),
        secondary_access_key: build.template(std.get(block, 'secondary_access_key', null)),
        secondary_connection_string: build.template(std.get(block, 'secondary_connection_string', null)),
        server_port: build.template(std.get(block, 'server_port', null)),
        sku: build.template(block.sku),
        tags: build.template(std.get(block, 'tags', null)),
        tls_client_cert_enabled: build.template(std.get(block, 'tls_client_cert_enabled', null)),
        version: build.template(std.get(block, 'version', null)),
      }),
      aad_auth_enabled: resource.field(self._.blocks, 'aad_auth_enabled'),
      capacity: resource.field(self._.blocks, 'capacity'),
      external_ip: resource.field(self._.blocks, 'external_ip'),
      hostname: resource.field(self._.blocks, 'hostname'),
      id: resource.field(self._.blocks, 'id'),
      local_auth_enabled: resource.field(self._.blocks, 'local_auth_enabled'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      primary_access_key: resource.field(self._.blocks, 'primary_access_key'),
      primary_connection_string: resource.field(self._.blocks, 'primary_connection_string'),
      public_network_access_enabled: resource.field(self._.blocks, 'public_network_access_enabled'),
      public_port: resource.field(self._.blocks, 'public_port'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      secondary_access_key: resource.field(self._.blocks, 'secondary_access_key'),
      secondary_connection_string: resource.field(self._.blocks, 'secondary_connection_string'),
      server_port: resource.field(self._.blocks, 'server_port'),
      sku: resource.field(self._.blocks, 'sku'),
      tags: resource.field(self._.blocks, 'tags'),
      tls_client_cert_enabled: resource.field(self._.blocks, 'tls_client_cert_enabled'),
      version: resource.field(self._.blocks, 'version'),
    },
    web_pubsub_custom_certificate(name, block): {
      local resource = blockType.resource('azurerm_web_pubsub_custom_certificate', name),
      _: resource._(block, {
        certificate_version: build.template(std.get(block, 'certificate_version', null)),
        custom_certificate_id: build.template(block.custom_certificate_id),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        web_pubsub_id: build.template(block.web_pubsub_id),
      }),
      certificate_version: resource.field(self._.blocks, 'certificate_version'),
      custom_certificate_id: resource.field(self._.blocks, 'custom_certificate_id'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      web_pubsub_id: resource.field(self._.blocks, 'web_pubsub_id'),
    },
    web_pubsub_custom_domain(name, block): {
      local resource = blockType.resource('azurerm_web_pubsub_custom_domain', name),
      _: resource._(block, {
        domain_name: build.template(block.domain_name),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        web_pubsub_custom_certificate_id: build.template(block.web_pubsub_custom_certificate_id),
        web_pubsub_id: build.template(block.web_pubsub_id),
      }),
      domain_name: resource.field(self._.blocks, 'domain_name'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      web_pubsub_custom_certificate_id: resource.field(self._.blocks, 'web_pubsub_custom_certificate_id'),
      web_pubsub_id: resource.field(self._.blocks, 'web_pubsub_id'),
    },
    web_pubsub_hub(name, block): {
      local resource = blockType.resource('azurerm_web_pubsub_hub', name),
      _: resource._(block, {
        anonymous_connections_enabled: build.template(std.get(block, 'anonymous_connections_enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        web_pubsub_id: build.template(block.web_pubsub_id),
      }),
      anonymous_connections_enabled: resource.field(self._.blocks, 'anonymous_connections_enabled'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      web_pubsub_id: resource.field(self._.blocks, 'web_pubsub_id'),
    },
    web_pubsub_network_acl(name, block): {
      local resource = blockType.resource('azurerm_web_pubsub_network_acl', name),
      _: resource._(block, {
        default_action: build.template(std.get(block, 'default_action', null)),
        id: build.template(std.get(block, 'id', null)),
        web_pubsub_id: build.template(block.web_pubsub_id),
      }),
      default_action: resource.field(self._.blocks, 'default_action'),
      id: resource.field(self._.blocks, 'id'),
      web_pubsub_id: resource.field(self._.blocks, 'web_pubsub_id'),
    },
    web_pubsub_shared_private_link_resource(name, block): {
      local resource = blockType.resource('azurerm_web_pubsub_shared_private_link_resource', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        request_message: build.template(std.get(block, 'request_message', null)),
        status: build.template(std.get(block, 'status', null)),
        subresource_name: build.template(block.subresource_name),
        target_resource_id: build.template(block.target_resource_id),
        web_pubsub_id: build.template(block.web_pubsub_id),
      }),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      request_message: resource.field(self._.blocks, 'request_message'),
      status: resource.field(self._.blocks, 'status'),
      subresource_name: resource.field(self._.blocks, 'subresource_name'),
      target_resource_id: resource.field(self._.blocks, 'target_resource_id'),
      web_pubsub_id: resource.field(self._.blocks, 'web_pubsub_id'),
    },
    windows_function_app(name, block): {
      local resource = blockType.resource('azurerm_windows_function_app', name),
      _: resource._(block, {
        app_settings: build.template(std.get(block, 'app_settings', null)),
        builtin_logging_enabled: build.template(std.get(block, 'builtin_logging_enabled', null)),
        client_certificate_enabled: build.template(std.get(block, 'client_certificate_enabled', null)),
        client_certificate_exclusion_paths: build.template(std.get(block, 'client_certificate_exclusion_paths', null)),
        client_certificate_mode: build.template(std.get(block, 'client_certificate_mode', null)),
        content_share_force_disabled: build.template(std.get(block, 'content_share_force_disabled', null)),
        custom_domain_verification_id: build.template(std.get(block, 'custom_domain_verification_id', null)),
        daily_memory_time_quota: build.template(std.get(block, 'daily_memory_time_quota', null)),
        default_hostname: build.template(std.get(block, 'default_hostname', null)),
        enabled: build.template(std.get(block, 'enabled', null)),
        ftp_publish_basic_authentication_enabled: build.template(std.get(block, 'ftp_publish_basic_authentication_enabled', null)),
        functions_extension_version: build.template(std.get(block, 'functions_extension_version', null)),
        hosting_environment_id: build.template(std.get(block, 'hosting_environment_id', null)),
        https_only: build.template(std.get(block, 'https_only', null)),
        id: build.template(std.get(block, 'id', null)),
        key_vault_reference_identity_id: build.template(std.get(block, 'key_vault_reference_identity_id', null)),
        kind: build.template(std.get(block, 'kind', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        outbound_ip_address_list: build.template(std.get(block, 'outbound_ip_address_list', null)),
        outbound_ip_addresses: build.template(std.get(block, 'outbound_ip_addresses', null)),
        possible_outbound_ip_address_list: build.template(std.get(block, 'possible_outbound_ip_address_list', null)),
        possible_outbound_ip_addresses: build.template(std.get(block, 'possible_outbound_ip_addresses', null)),
        public_network_access_enabled: build.template(std.get(block, 'public_network_access_enabled', null)),
        resource_group_name: build.template(block.resource_group_name),
        service_plan_id: build.template(block.service_plan_id),
        site_credential: build.template(std.get(block, 'site_credential', null)),
        storage_account_access_key: build.template(std.get(block, 'storage_account_access_key', null)),
        storage_account_name: build.template(std.get(block, 'storage_account_name', null)),
        storage_key_vault_secret_id: build.template(std.get(block, 'storage_key_vault_secret_id', null)),
        storage_uses_managed_identity: build.template(std.get(block, 'storage_uses_managed_identity', null)),
        tags: build.template(std.get(block, 'tags', null)),
        virtual_network_subnet_id: build.template(std.get(block, 'virtual_network_subnet_id', null)),
        vnet_image_pull_enabled: build.template(std.get(block, 'vnet_image_pull_enabled', null)),
        webdeploy_publish_basic_authentication_enabled: build.template(std.get(block, 'webdeploy_publish_basic_authentication_enabled', null)),
        zip_deploy_file: build.template(std.get(block, 'zip_deploy_file', null)),
      }),
      app_settings: resource.field(self._.blocks, 'app_settings'),
      builtin_logging_enabled: resource.field(self._.blocks, 'builtin_logging_enabled'),
      client_certificate_enabled: resource.field(self._.blocks, 'client_certificate_enabled'),
      client_certificate_exclusion_paths: resource.field(self._.blocks, 'client_certificate_exclusion_paths'),
      client_certificate_mode: resource.field(self._.blocks, 'client_certificate_mode'),
      content_share_force_disabled: resource.field(self._.blocks, 'content_share_force_disabled'),
      custom_domain_verification_id: resource.field(self._.blocks, 'custom_domain_verification_id'),
      daily_memory_time_quota: resource.field(self._.blocks, 'daily_memory_time_quota'),
      default_hostname: resource.field(self._.blocks, 'default_hostname'),
      enabled: resource.field(self._.blocks, 'enabled'),
      ftp_publish_basic_authentication_enabled: resource.field(self._.blocks, 'ftp_publish_basic_authentication_enabled'),
      functions_extension_version: resource.field(self._.blocks, 'functions_extension_version'),
      hosting_environment_id: resource.field(self._.blocks, 'hosting_environment_id'),
      https_only: resource.field(self._.blocks, 'https_only'),
      id: resource.field(self._.blocks, 'id'),
      key_vault_reference_identity_id: resource.field(self._.blocks, 'key_vault_reference_identity_id'),
      kind: resource.field(self._.blocks, 'kind'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      outbound_ip_address_list: resource.field(self._.blocks, 'outbound_ip_address_list'),
      outbound_ip_addresses: resource.field(self._.blocks, 'outbound_ip_addresses'),
      possible_outbound_ip_address_list: resource.field(self._.blocks, 'possible_outbound_ip_address_list'),
      possible_outbound_ip_addresses: resource.field(self._.blocks, 'possible_outbound_ip_addresses'),
      public_network_access_enabled: resource.field(self._.blocks, 'public_network_access_enabled'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      service_plan_id: resource.field(self._.blocks, 'service_plan_id'),
      site_credential: resource.field(self._.blocks, 'site_credential'),
      storage_account_access_key: resource.field(self._.blocks, 'storage_account_access_key'),
      storage_account_name: resource.field(self._.blocks, 'storage_account_name'),
      storage_key_vault_secret_id: resource.field(self._.blocks, 'storage_key_vault_secret_id'),
      storage_uses_managed_identity: resource.field(self._.blocks, 'storage_uses_managed_identity'),
      tags: resource.field(self._.blocks, 'tags'),
      virtual_network_subnet_id: resource.field(self._.blocks, 'virtual_network_subnet_id'),
      vnet_image_pull_enabled: resource.field(self._.blocks, 'vnet_image_pull_enabled'),
      webdeploy_publish_basic_authentication_enabled: resource.field(self._.blocks, 'webdeploy_publish_basic_authentication_enabled'),
      zip_deploy_file: resource.field(self._.blocks, 'zip_deploy_file'),
    },
    windows_function_app_slot(name, block): {
      local resource = blockType.resource('azurerm_windows_function_app_slot', name),
      _: resource._(block, {
        app_settings: build.template(std.get(block, 'app_settings', null)),
        builtin_logging_enabled: build.template(std.get(block, 'builtin_logging_enabled', null)),
        client_certificate_enabled: build.template(std.get(block, 'client_certificate_enabled', null)),
        client_certificate_exclusion_paths: build.template(std.get(block, 'client_certificate_exclusion_paths', null)),
        client_certificate_mode: build.template(std.get(block, 'client_certificate_mode', null)),
        content_share_force_disabled: build.template(std.get(block, 'content_share_force_disabled', null)),
        custom_domain_verification_id: build.template(std.get(block, 'custom_domain_verification_id', null)),
        daily_memory_time_quota: build.template(std.get(block, 'daily_memory_time_quota', null)),
        default_hostname: build.template(std.get(block, 'default_hostname', null)),
        enabled: build.template(std.get(block, 'enabled', null)),
        ftp_publish_basic_authentication_enabled: build.template(std.get(block, 'ftp_publish_basic_authentication_enabled', null)),
        function_app_id: build.template(block.function_app_id),
        functions_extension_version: build.template(std.get(block, 'functions_extension_version', null)),
        hosting_environment_id: build.template(std.get(block, 'hosting_environment_id', null)),
        https_only: build.template(std.get(block, 'https_only', null)),
        id: build.template(std.get(block, 'id', null)),
        key_vault_reference_identity_id: build.template(std.get(block, 'key_vault_reference_identity_id', null)),
        kind: build.template(std.get(block, 'kind', null)),
        name: build.template(block.name),
        outbound_ip_address_list: build.template(std.get(block, 'outbound_ip_address_list', null)),
        outbound_ip_addresses: build.template(std.get(block, 'outbound_ip_addresses', null)),
        possible_outbound_ip_address_list: build.template(std.get(block, 'possible_outbound_ip_address_list', null)),
        possible_outbound_ip_addresses: build.template(std.get(block, 'possible_outbound_ip_addresses', null)),
        public_network_access_enabled: build.template(std.get(block, 'public_network_access_enabled', null)),
        service_plan_id: build.template(std.get(block, 'service_plan_id', null)),
        site_credential: build.template(std.get(block, 'site_credential', null)),
        storage_account_access_key: build.template(std.get(block, 'storage_account_access_key', null)),
        storage_account_name: build.template(std.get(block, 'storage_account_name', null)),
        storage_key_vault_secret_id: build.template(std.get(block, 'storage_key_vault_secret_id', null)),
        storage_uses_managed_identity: build.template(std.get(block, 'storage_uses_managed_identity', null)),
        tags: build.template(std.get(block, 'tags', null)),
        virtual_network_subnet_id: build.template(std.get(block, 'virtual_network_subnet_id', null)),
        vnet_image_pull_enabled: build.template(std.get(block, 'vnet_image_pull_enabled', null)),
        webdeploy_publish_basic_authentication_enabled: build.template(std.get(block, 'webdeploy_publish_basic_authentication_enabled', null)),
      }),
      app_settings: resource.field(self._.blocks, 'app_settings'),
      builtin_logging_enabled: resource.field(self._.blocks, 'builtin_logging_enabled'),
      client_certificate_enabled: resource.field(self._.blocks, 'client_certificate_enabled'),
      client_certificate_exclusion_paths: resource.field(self._.blocks, 'client_certificate_exclusion_paths'),
      client_certificate_mode: resource.field(self._.blocks, 'client_certificate_mode'),
      content_share_force_disabled: resource.field(self._.blocks, 'content_share_force_disabled'),
      custom_domain_verification_id: resource.field(self._.blocks, 'custom_domain_verification_id'),
      daily_memory_time_quota: resource.field(self._.blocks, 'daily_memory_time_quota'),
      default_hostname: resource.field(self._.blocks, 'default_hostname'),
      enabled: resource.field(self._.blocks, 'enabled'),
      ftp_publish_basic_authentication_enabled: resource.field(self._.blocks, 'ftp_publish_basic_authentication_enabled'),
      function_app_id: resource.field(self._.blocks, 'function_app_id'),
      functions_extension_version: resource.field(self._.blocks, 'functions_extension_version'),
      hosting_environment_id: resource.field(self._.blocks, 'hosting_environment_id'),
      https_only: resource.field(self._.blocks, 'https_only'),
      id: resource.field(self._.blocks, 'id'),
      key_vault_reference_identity_id: resource.field(self._.blocks, 'key_vault_reference_identity_id'),
      kind: resource.field(self._.blocks, 'kind'),
      name: resource.field(self._.blocks, 'name'),
      outbound_ip_address_list: resource.field(self._.blocks, 'outbound_ip_address_list'),
      outbound_ip_addresses: resource.field(self._.blocks, 'outbound_ip_addresses'),
      possible_outbound_ip_address_list: resource.field(self._.blocks, 'possible_outbound_ip_address_list'),
      possible_outbound_ip_addresses: resource.field(self._.blocks, 'possible_outbound_ip_addresses'),
      public_network_access_enabled: resource.field(self._.blocks, 'public_network_access_enabled'),
      service_plan_id: resource.field(self._.blocks, 'service_plan_id'),
      site_credential: resource.field(self._.blocks, 'site_credential'),
      storage_account_access_key: resource.field(self._.blocks, 'storage_account_access_key'),
      storage_account_name: resource.field(self._.blocks, 'storage_account_name'),
      storage_key_vault_secret_id: resource.field(self._.blocks, 'storage_key_vault_secret_id'),
      storage_uses_managed_identity: resource.field(self._.blocks, 'storage_uses_managed_identity'),
      tags: resource.field(self._.blocks, 'tags'),
      virtual_network_subnet_id: resource.field(self._.blocks, 'virtual_network_subnet_id'),
      vnet_image_pull_enabled: resource.field(self._.blocks, 'vnet_image_pull_enabled'),
      webdeploy_publish_basic_authentication_enabled: resource.field(self._.blocks, 'webdeploy_publish_basic_authentication_enabled'),
    },
    windows_virtual_machine(name, block): {
      local resource = blockType.resource('azurerm_windows_virtual_machine', name),
      _: resource._(block, {
        admin_password: build.template(block.admin_password),
        admin_username: build.template(block.admin_username),
        allow_extension_operations: build.template(std.get(block, 'allow_extension_operations', null)),
        availability_set_id: build.template(std.get(block, 'availability_set_id', null)),
        bypass_platform_safety_checks_on_user_schedule_enabled: build.template(std.get(block, 'bypass_platform_safety_checks_on_user_schedule_enabled', null)),
        capacity_reservation_group_id: build.template(std.get(block, 'capacity_reservation_group_id', null)),
        computer_name: build.template(std.get(block, 'computer_name', null)),
        custom_data: build.template(std.get(block, 'custom_data', null)),
        dedicated_host_group_id: build.template(std.get(block, 'dedicated_host_group_id', null)),
        dedicated_host_id: build.template(std.get(block, 'dedicated_host_id', null)),
        disk_controller_type: build.template(std.get(block, 'disk_controller_type', null)),
        edge_zone: build.template(std.get(block, 'edge_zone', null)),
        enable_automatic_updates: build.template(std.get(block, 'enable_automatic_updates', null)),
        encryption_at_host_enabled: build.template(std.get(block, 'encryption_at_host_enabled', null)),
        eviction_policy: build.template(std.get(block, 'eviction_policy', null)),
        extensions_time_budget: build.template(std.get(block, 'extensions_time_budget', null)),
        hotpatching_enabled: build.template(std.get(block, 'hotpatching_enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        license_type: build.template(std.get(block, 'license_type', null)),
        location: build.template(block.location),
        max_bid_price: build.template(std.get(block, 'max_bid_price', null)),
        name: build.template(block.name),
        network_interface_ids: build.template(block.network_interface_ids),
        patch_assessment_mode: build.template(std.get(block, 'patch_assessment_mode', null)),
        patch_mode: build.template(std.get(block, 'patch_mode', null)),
        platform_fault_domain: build.template(std.get(block, 'platform_fault_domain', null)),
        priority: build.template(std.get(block, 'priority', null)),
        private_ip_address: build.template(std.get(block, 'private_ip_address', null)),
        private_ip_addresses: build.template(std.get(block, 'private_ip_addresses', null)),
        provision_vm_agent: build.template(std.get(block, 'provision_vm_agent', null)),
        proximity_placement_group_id: build.template(std.get(block, 'proximity_placement_group_id', null)),
        public_ip_address: build.template(std.get(block, 'public_ip_address', null)),
        public_ip_addresses: build.template(std.get(block, 'public_ip_addresses', null)),
        reboot_setting: build.template(std.get(block, 'reboot_setting', null)),
        resource_group_name: build.template(block.resource_group_name),
        secure_boot_enabled: build.template(std.get(block, 'secure_boot_enabled', null)),
        size: build.template(block.size),
        source_image_id: build.template(std.get(block, 'source_image_id', null)),
        tags: build.template(std.get(block, 'tags', null)),
        timezone: build.template(std.get(block, 'timezone', null)),
        user_data: build.template(std.get(block, 'user_data', null)),
        virtual_machine_id: build.template(std.get(block, 'virtual_machine_id', null)),
        virtual_machine_scale_set_id: build.template(std.get(block, 'virtual_machine_scale_set_id', null)),
        vm_agent_platform_updates_enabled: build.template(std.get(block, 'vm_agent_platform_updates_enabled', null)),
        vtpm_enabled: build.template(std.get(block, 'vtpm_enabled', null)),
        zone: build.template(std.get(block, 'zone', null)),
      }),
      admin_password: resource.field(self._.blocks, 'admin_password'),
      admin_username: resource.field(self._.blocks, 'admin_username'),
      allow_extension_operations: resource.field(self._.blocks, 'allow_extension_operations'),
      availability_set_id: resource.field(self._.blocks, 'availability_set_id'),
      bypass_platform_safety_checks_on_user_schedule_enabled: resource.field(self._.blocks, 'bypass_platform_safety_checks_on_user_schedule_enabled'),
      capacity_reservation_group_id: resource.field(self._.blocks, 'capacity_reservation_group_id'),
      computer_name: resource.field(self._.blocks, 'computer_name'),
      custom_data: resource.field(self._.blocks, 'custom_data'),
      dedicated_host_group_id: resource.field(self._.blocks, 'dedicated_host_group_id'),
      dedicated_host_id: resource.field(self._.blocks, 'dedicated_host_id'),
      disk_controller_type: resource.field(self._.blocks, 'disk_controller_type'),
      edge_zone: resource.field(self._.blocks, 'edge_zone'),
      enable_automatic_updates: resource.field(self._.blocks, 'enable_automatic_updates'),
      encryption_at_host_enabled: resource.field(self._.blocks, 'encryption_at_host_enabled'),
      eviction_policy: resource.field(self._.blocks, 'eviction_policy'),
      extensions_time_budget: resource.field(self._.blocks, 'extensions_time_budget'),
      hotpatching_enabled: resource.field(self._.blocks, 'hotpatching_enabled'),
      id: resource.field(self._.blocks, 'id'),
      license_type: resource.field(self._.blocks, 'license_type'),
      location: resource.field(self._.blocks, 'location'),
      max_bid_price: resource.field(self._.blocks, 'max_bid_price'),
      name: resource.field(self._.blocks, 'name'),
      network_interface_ids: resource.field(self._.blocks, 'network_interface_ids'),
      patch_assessment_mode: resource.field(self._.blocks, 'patch_assessment_mode'),
      patch_mode: resource.field(self._.blocks, 'patch_mode'),
      platform_fault_domain: resource.field(self._.blocks, 'platform_fault_domain'),
      priority: resource.field(self._.blocks, 'priority'),
      private_ip_address: resource.field(self._.blocks, 'private_ip_address'),
      private_ip_addresses: resource.field(self._.blocks, 'private_ip_addresses'),
      provision_vm_agent: resource.field(self._.blocks, 'provision_vm_agent'),
      proximity_placement_group_id: resource.field(self._.blocks, 'proximity_placement_group_id'),
      public_ip_address: resource.field(self._.blocks, 'public_ip_address'),
      public_ip_addresses: resource.field(self._.blocks, 'public_ip_addresses'),
      reboot_setting: resource.field(self._.blocks, 'reboot_setting'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      secure_boot_enabled: resource.field(self._.blocks, 'secure_boot_enabled'),
      size: resource.field(self._.blocks, 'size'),
      source_image_id: resource.field(self._.blocks, 'source_image_id'),
      tags: resource.field(self._.blocks, 'tags'),
      timezone: resource.field(self._.blocks, 'timezone'),
      user_data: resource.field(self._.blocks, 'user_data'),
      virtual_machine_id: resource.field(self._.blocks, 'virtual_machine_id'),
      virtual_machine_scale_set_id: resource.field(self._.blocks, 'virtual_machine_scale_set_id'),
      vm_agent_platform_updates_enabled: resource.field(self._.blocks, 'vm_agent_platform_updates_enabled'),
      vtpm_enabled: resource.field(self._.blocks, 'vtpm_enabled'),
      zone: resource.field(self._.blocks, 'zone'),
    },
    windows_virtual_machine_scale_set(name, block): {
      local resource = blockType.resource('azurerm_windows_virtual_machine_scale_set', name),
      _: resource._(block, {
        admin_password: build.template(block.admin_password),
        admin_username: build.template(block.admin_username),
        capacity_reservation_group_id: build.template(std.get(block, 'capacity_reservation_group_id', null)),
        computer_name_prefix: build.template(std.get(block, 'computer_name_prefix', null)),
        custom_data: build.template(std.get(block, 'custom_data', null)),
        do_not_run_extensions_on_overprovisioned_machines: build.template(std.get(block, 'do_not_run_extensions_on_overprovisioned_machines', null)),
        edge_zone: build.template(std.get(block, 'edge_zone', null)),
        enable_automatic_updates: build.template(std.get(block, 'enable_automatic_updates', null)),
        encryption_at_host_enabled: build.template(std.get(block, 'encryption_at_host_enabled', null)),
        eviction_policy: build.template(std.get(block, 'eviction_policy', null)),
        extension_operations_enabled: build.template(std.get(block, 'extension_operations_enabled', null)),
        extensions_time_budget: build.template(std.get(block, 'extensions_time_budget', null)),
        health_probe_id: build.template(std.get(block, 'health_probe_id', null)),
        host_group_id: build.template(std.get(block, 'host_group_id', null)),
        id: build.template(std.get(block, 'id', null)),
        instances: build.template(block.instances),
        license_type: build.template(std.get(block, 'license_type', null)),
        location: build.template(block.location),
        max_bid_price: build.template(std.get(block, 'max_bid_price', null)),
        name: build.template(block.name),
        overprovision: build.template(std.get(block, 'overprovision', null)),
        platform_fault_domain_count: build.template(std.get(block, 'platform_fault_domain_count', null)),
        priority: build.template(std.get(block, 'priority', null)),
        provision_vm_agent: build.template(std.get(block, 'provision_vm_agent', null)),
        proximity_placement_group_id: build.template(std.get(block, 'proximity_placement_group_id', null)),
        resource_group_name: build.template(block.resource_group_name),
        secure_boot_enabled: build.template(std.get(block, 'secure_boot_enabled', null)),
        single_placement_group: build.template(std.get(block, 'single_placement_group', null)),
        sku: build.template(block.sku),
        source_image_id: build.template(std.get(block, 'source_image_id', null)),
        tags: build.template(std.get(block, 'tags', null)),
        timezone: build.template(std.get(block, 'timezone', null)),
        unique_id: build.template(std.get(block, 'unique_id', null)),
        upgrade_mode: build.template(std.get(block, 'upgrade_mode', null)),
        user_data: build.template(std.get(block, 'user_data', null)),
        vtpm_enabled: build.template(std.get(block, 'vtpm_enabled', null)),
        zone_balance: build.template(std.get(block, 'zone_balance', null)),
        zones: build.template(std.get(block, 'zones', null)),
      }),
      admin_password: resource.field(self._.blocks, 'admin_password'),
      admin_username: resource.field(self._.blocks, 'admin_username'),
      capacity_reservation_group_id: resource.field(self._.blocks, 'capacity_reservation_group_id'),
      computer_name_prefix: resource.field(self._.blocks, 'computer_name_prefix'),
      custom_data: resource.field(self._.blocks, 'custom_data'),
      do_not_run_extensions_on_overprovisioned_machines: resource.field(self._.blocks, 'do_not_run_extensions_on_overprovisioned_machines'),
      edge_zone: resource.field(self._.blocks, 'edge_zone'),
      enable_automatic_updates: resource.field(self._.blocks, 'enable_automatic_updates'),
      encryption_at_host_enabled: resource.field(self._.blocks, 'encryption_at_host_enabled'),
      eviction_policy: resource.field(self._.blocks, 'eviction_policy'),
      extension_operations_enabled: resource.field(self._.blocks, 'extension_operations_enabled'),
      extensions_time_budget: resource.field(self._.blocks, 'extensions_time_budget'),
      health_probe_id: resource.field(self._.blocks, 'health_probe_id'),
      host_group_id: resource.field(self._.blocks, 'host_group_id'),
      id: resource.field(self._.blocks, 'id'),
      instances: resource.field(self._.blocks, 'instances'),
      license_type: resource.field(self._.blocks, 'license_type'),
      location: resource.field(self._.blocks, 'location'),
      max_bid_price: resource.field(self._.blocks, 'max_bid_price'),
      name: resource.field(self._.blocks, 'name'),
      overprovision: resource.field(self._.blocks, 'overprovision'),
      platform_fault_domain_count: resource.field(self._.blocks, 'platform_fault_domain_count'),
      priority: resource.field(self._.blocks, 'priority'),
      provision_vm_agent: resource.field(self._.blocks, 'provision_vm_agent'),
      proximity_placement_group_id: resource.field(self._.blocks, 'proximity_placement_group_id'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      secure_boot_enabled: resource.field(self._.blocks, 'secure_boot_enabled'),
      single_placement_group: resource.field(self._.blocks, 'single_placement_group'),
      sku: resource.field(self._.blocks, 'sku'),
      source_image_id: resource.field(self._.blocks, 'source_image_id'),
      tags: resource.field(self._.blocks, 'tags'),
      timezone: resource.field(self._.blocks, 'timezone'),
      unique_id: resource.field(self._.blocks, 'unique_id'),
      upgrade_mode: resource.field(self._.blocks, 'upgrade_mode'),
      user_data: resource.field(self._.blocks, 'user_data'),
      vtpm_enabled: resource.field(self._.blocks, 'vtpm_enabled'),
      zone_balance: resource.field(self._.blocks, 'zone_balance'),
      zones: resource.field(self._.blocks, 'zones'),
    },
    windows_web_app(name, block): {
      local resource = blockType.resource('azurerm_windows_web_app', name),
      _: resource._(block, {
        app_settings: build.template(std.get(block, 'app_settings', null)),
        client_affinity_enabled: build.template(std.get(block, 'client_affinity_enabled', null)),
        client_certificate_enabled: build.template(std.get(block, 'client_certificate_enabled', null)),
        client_certificate_exclusion_paths: build.template(std.get(block, 'client_certificate_exclusion_paths', null)),
        client_certificate_mode: build.template(std.get(block, 'client_certificate_mode', null)),
        custom_domain_verification_id: build.template(std.get(block, 'custom_domain_verification_id', null)),
        default_hostname: build.template(std.get(block, 'default_hostname', null)),
        enabled: build.template(std.get(block, 'enabled', null)),
        ftp_publish_basic_authentication_enabled: build.template(std.get(block, 'ftp_publish_basic_authentication_enabled', null)),
        hosting_environment_id: build.template(std.get(block, 'hosting_environment_id', null)),
        https_only: build.template(std.get(block, 'https_only', null)),
        id: build.template(std.get(block, 'id', null)),
        key_vault_reference_identity_id: build.template(std.get(block, 'key_vault_reference_identity_id', null)),
        kind: build.template(std.get(block, 'kind', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        outbound_ip_address_list: build.template(std.get(block, 'outbound_ip_address_list', null)),
        outbound_ip_addresses: build.template(std.get(block, 'outbound_ip_addresses', null)),
        possible_outbound_ip_address_list: build.template(std.get(block, 'possible_outbound_ip_address_list', null)),
        possible_outbound_ip_addresses: build.template(std.get(block, 'possible_outbound_ip_addresses', null)),
        public_network_access_enabled: build.template(std.get(block, 'public_network_access_enabled', null)),
        resource_group_name: build.template(block.resource_group_name),
        service_plan_id: build.template(block.service_plan_id),
        site_credential: build.template(std.get(block, 'site_credential', null)),
        tags: build.template(std.get(block, 'tags', null)),
        virtual_network_subnet_id: build.template(std.get(block, 'virtual_network_subnet_id', null)),
        webdeploy_publish_basic_authentication_enabled: build.template(std.get(block, 'webdeploy_publish_basic_authentication_enabled', null)),
        zip_deploy_file: build.template(std.get(block, 'zip_deploy_file', null)),
      }),
      app_settings: resource.field(self._.blocks, 'app_settings'),
      client_affinity_enabled: resource.field(self._.blocks, 'client_affinity_enabled'),
      client_certificate_enabled: resource.field(self._.blocks, 'client_certificate_enabled'),
      client_certificate_exclusion_paths: resource.field(self._.blocks, 'client_certificate_exclusion_paths'),
      client_certificate_mode: resource.field(self._.blocks, 'client_certificate_mode'),
      custom_domain_verification_id: resource.field(self._.blocks, 'custom_domain_verification_id'),
      default_hostname: resource.field(self._.blocks, 'default_hostname'),
      enabled: resource.field(self._.blocks, 'enabled'),
      ftp_publish_basic_authentication_enabled: resource.field(self._.blocks, 'ftp_publish_basic_authentication_enabled'),
      hosting_environment_id: resource.field(self._.blocks, 'hosting_environment_id'),
      https_only: resource.field(self._.blocks, 'https_only'),
      id: resource.field(self._.blocks, 'id'),
      key_vault_reference_identity_id: resource.field(self._.blocks, 'key_vault_reference_identity_id'),
      kind: resource.field(self._.blocks, 'kind'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      outbound_ip_address_list: resource.field(self._.blocks, 'outbound_ip_address_list'),
      outbound_ip_addresses: resource.field(self._.blocks, 'outbound_ip_addresses'),
      possible_outbound_ip_address_list: resource.field(self._.blocks, 'possible_outbound_ip_address_list'),
      possible_outbound_ip_addresses: resource.field(self._.blocks, 'possible_outbound_ip_addresses'),
      public_network_access_enabled: resource.field(self._.blocks, 'public_network_access_enabled'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      service_plan_id: resource.field(self._.blocks, 'service_plan_id'),
      site_credential: resource.field(self._.blocks, 'site_credential'),
      tags: resource.field(self._.blocks, 'tags'),
      virtual_network_subnet_id: resource.field(self._.blocks, 'virtual_network_subnet_id'),
      webdeploy_publish_basic_authentication_enabled: resource.field(self._.blocks, 'webdeploy_publish_basic_authentication_enabled'),
      zip_deploy_file: resource.field(self._.blocks, 'zip_deploy_file'),
    },
    windows_web_app_slot(name, block): {
      local resource = blockType.resource('azurerm_windows_web_app_slot', name),
      _: resource._(block, {
        app_service_id: build.template(block.app_service_id),
        app_settings: build.template(std.get(block, 'app_settings', null)),
        client_affinity_enabled: build.template(std.get(block, 'client_affinity_enabled', null)),
        client_certificate_enabled: build.template(std.get(block, 'client_certificate_enabled', null)),
        client_certificate_exclusion_paths: build.template(std.get(block, 'client_certificate_exclusion_paths', null)),
        client_certificate_mode: build.template(std.get(block, 'client_certificate_mode', null)),
        custom_domain_verification_id: build.template(std.get(block, 'custom_domain_verification_id', null)),
        default_hostname: build.template(std.get(block, 'default_hostname', null)),
        enabled: build.template(std.get(block, 'enabled', null)),
        ftp_publish_basic_authentication_enabled: build.template(std.get(block, 'ftp_publish_basic_authentication_enabled', null)),
        hosting_environment_id: build.template(std.get(block, 'hosting_environment_id', null)),
        https_only: build.template(std.get(block, 'https_only', null)),
        id: build.template(std.get(block, 'id', null)),
        key_vault_reference_identity_id: build.template(std.get(block, 'key_vault_reference_identity_id', null)),
        kind: build.template(std.get(block, 'kind', null)),
        name: build.template(block.name),
        outbound_ip_address_list: build.template(std.get(block, 'outbound_ip_address_list', null)),
        outbound_ip_addresses: build.template(std.get(block, 'outbound_ip_addresses', null)),
        possible_outbound_ip_address_list: build.template(std.get(block, 'possible_outbound_ip_address_list', null)),
        possible_outbound_ip_addresses: build.template(std.get(block, 'possible_outbound_ip_addresses', null)),
        public_network_access_enabled: build.template(std.get(block, 'public_network_access_enabled', null)),
        service_plan_id: build.template(std.get(block, 'service_plan_id', null)),
        site_credential: build.template(std.get(block, 'site_credential', null)),
        tags: build.template(std.get(block, 'tags', null)),
        virtual_network_subnet_id: build.template(std.get(block, 'virtual_network_subnet_id', null)),
        webdeploy_publish_basic_authentication_enabled: build.template(std.get(block, 'webdeploy_publish_basic_authentication_enabled', null)),
        zip_deploy_file: build.template(std.get(block, 'zip_deploy_file', null)),
      }),
      app_service_id: resource.field(self._.blocks, 'app_service_id'),
      app_settings: resource.field(self._.blocks, 'app_settings'),
      client_affinity_enabled: resource.field(self._.blocks, 'client_affinity_enabled'),
      client_certificate_enabled: resource.field(self._.blocks, 'client_certificate_enabled'),
      client_certificate_exclusion_paths: resource.field(self._.blocks, 'client_certificate_exclusion_paths'),
      client_certificate_mode: resource.field(self._.blocks, 'client_certificate_mode'),
      custom_domain_verification_id: resource.field(self._.blocks, 'custom_domain_verification_id'),
      default_hostname: resource.field(self._.blocks, 'default_hostname'),
      enabled: resource.field(self._.blocks, 'enabled'),
      ftp_publish_basic_authentication_enabled: resource.field(self._.blocks, 'ftp_publish_basic_authentication_enabled'),
      hosting_environment_id: resource.field(self._.blocks, 'hosting_environment_id'),
      https_only: resource.field(self._.blocks, 'https_only'),
      id: resource.field(self._.blocks, 'id'),
      key_vault_reference_identity_id: resource.field(self._.blocks, 'key_vault_reference_identity_id'),
      kind: resource.field(self._.blocks, 'kind'),
      name: resource.field(self._.blocks, 'name'),
      outbound_ip_address_list: resource.field(self._.blocks, 'outbound_ip_address_list'),
      outbound_ip_addresses: resource.field(self._.blocks, 'outbound_ip_addresses'),
      possible_outbound_ip_address_list: resource.field(self._.blocks, 'possible_outbound_ip_address_list'),
      possible_outbound_ip_addresses: resource.field(self._.blocks, 'possible_outbound_ip_addresses'),
      public_network_access_enabled: resource.field(self._.blocks, 'public_network_access_enabled'),
      service_plan_id: resource.field(self._.blocks, 'service_plan_id'),
      site_credential: resource.field(self._.blocks, 'site_credential'),
      tags: resource.field(self._.blocks, 'tags'),
      virtual_network_subnet_id: resource.field(self._.blocks, 'virtual_network_subnet_id'),
      webdeploy_publish_basic_authentication_enabled: resource.field(self._.blocks, 'webdeploy_publish_basic_authentication_enabled'),
      zip_deploy_file: resource.field(self._.blocks, 'zip_deploy_file'),
    },
    workloads_sap_discovery_virtual_instance(name, block): {
      local resource = blockType.resource('azurerm_workloads_sap_discovery_virtual_instance', name),
      _: resource._(block, {
        central_server_virtual_machine_id: build.template(block.central_server_virtual_machine_id),
        environment: build.template(block.environment),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        managed_resource_group_name: build.template(std.get(block, 'managed_resource_group_name', null)),
        managed_resources_network_access_type: build.template(std.get(block, 'managed_resources_network_access_type', null)),
        managed_storage_account_name: build.template(std.get(block, 'managed_storage_account_name', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        sap_product: build.template(block.sap_product),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      central_server_virtual_machine_id: resource.field(self._.blocks, 'central_server_virtual_machine_id'),
      environment: resource.field(self._.blocks, 'environment'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      managed_resource_group_name: resource.field(self._.blocks, 'managed_resource_group_name'),
      managed_resources_network_access_type: resource.field(self._.blocks, 'managed_resources_network_access_type'),
      managed_storage_account_name: resource.field(self._.blocks, 'managed_storage_account_name'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      sap_product: resource.field(self._.blocks, 'sap_product'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    workloads_sap_single_node_virtual_instance(name, block): {
      local resource = blockType.resource('azurerm_workloads_sap_single_node_virtual_instance', name),
      _: resource._(block, {
        app_location: build.template(block.app_location),
        environment: build.template(block.environment),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        managed_resource_group_name: build.template(std.get(block, 'managed_resource_group_name', null)),
        managed_resources_network_access_type: build.template(std.get(block, 'managed_resources_network_access_type', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        sap_fqdn: build.template(block.sap_fqdn),
        sap_product: build.template(block.sap_product),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      app_location: resource.field(self._.blocks, 'app_location'),
      environment: resource.field(self._.blocks, 'environment'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      managed_resource_group_name: resource.field(self._.blocks, 'managed_resource_group_name'),
      managed_resources_network_access_type: resource.field(self._.blocks, 'managed_resources_network_access_type'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      sap_fqdn: resource.field(self._.blocks, 'sap_fqdn'),
      sap_product: resource.field(self._.blocks, 'sap_product'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    workloads_sap_three_tier_virtual_instance(name, block): {
      local resource = blockType.resource('azurerm_workloads_sap_three_tier_virtual_instance', name),
      _: resource._(block, {
        app_location: build.template(block.app_location),
        environment: build.template(block.environment),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        managed_resource_group_name: build.template(std.get(block, 'managed_resource_group_name', null)),
        managed_resources_network_access_type: build.template(std.get(block, 'managed_resources_network_access_type', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        sap_fqdn: build.template(block.sap_fqdn),
        sap_product: build.template(block.sap_product),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      app_location: resource.field(self._.blocks, 'app_location'),
      environment: resource.field(self._.blocks, 'environment'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      managed_resource_group_name: resource.field(self._.blocks, 'managed_resource_group_name'),
      managed_resources_network_access_type: resource.field(self._.blocks, 'managed_resources_network_access_type'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      sap_fqdn: resource.field(self._.blocks, 'sap_fqdn'),
      sap_product: resource.field(self._.blocks, 'sap_product'),
      tags: resource.field(self._.blocks, 'tags'),
    },
  },
  data: {
    local blockType = provider.blockType('data'),
    aadb2c_directory(name, block): {
      local resource = blockType.resource('azurerm_aadb2c_directory', name),
      _: resource._(block, {
        billing_type: build.template(std.get(block, 'billing_type', null)),
        data_residency_location: build.template(std.get(block, 'data_residency_location', null)),
        domain_name: build.template(block.domain_name),
        effective_start_date: build.template(std.get(block, 'effective_start_date', null)),
        id: build.template(std.get(block, 'id', null)),
        resource_group_name: build.template(block.resource_group_name),
        sku_name: build.template(std.get(block, 'sku_name', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tenant_id: build.template(std.get(block, 'tenant_id', null)),
      }),
      billing_type: resource.field(self._.blocks, 'billing_type'),
      data_residency_location: resource.field(self._.blocks, 'data_residency_location'),
      domain_name: resource.field(self._.blocks, 'domain_name'),
      effective_start_date: resource.field(self._.blocks, 'effective_start_date'),
      id: resource.field(self._.blocks, 'id'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      sku_name: resource.field(self._.blocks, 'sku_name'),
      tags: resource.field(self._.blocks, 'tags'),
      tenant_id: resource.field(self._.blocks, 'tenant_id'),
    },
    active_directory_domain_service(name, block): {
      local resource = blockType.resource('azurerm_active_directory_domain_service', name),
      _: resource._(block, {
        deployment_id: build.template(std.get(block, 'deployment_id', null)),
        domain_configuration_type: build.template(std.get(block, 'domain_configuration_type', null)),
        domain_name: build.template(std.get(block, 'domain_name', null)),
        filtered_sync_enabled: build.template(std.get(block, 'filtered_sync_enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        notifications: build.template(std.get(block, 'notifications', null)),
        replica_sets: build.template(std.get(block, 'replica_sets', null)),
        resource_group_name: build.template(block.resource_group_name),
        resource_id: build.template(std.get(block, 'resource_id', null)),
        secure_ldap: build.template(std.get(block, 'secure_ldap', null)),
        security: build.template(std.get(block, 'security', null)),
        sku: build.template(std.get(block, 'sku', null)),
        sync_owner: build.template(std.get(block, 'sync_owner', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tenant_id: build.template(std.get(block, 'tenant_id', null)),
        version: build.template(std.get(block, 'version', null)),
      }),
      deployment_id: resource.field(self._.blocks, 'deployment_id'),
      domain_configuration_type: resource.field(self._.blocks, 'domain_configuration_type'),
      domain_name: resource.field(self._.blocks, 'domain_name'),
      filtered_sync_enabled: resource.field(self._.blocks, 'filtered_sync_enabled'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      notifications: resource.field(self._.blocks, 'notifications'),
      replica_sets: resource.field(self._.blocks, 'replica_sets'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      resource_id: resource.field(self._.blocks, 'resource_id'),
      secure_ldap: resource.field(self._.blocks, 'secure_ldap'),
      security: resource.field(self._.blocks, 'security'),
      sku: resource.field(self._.blocks, 'sku'),
      sync_owner: resource.field(self._.blocks, 'sync_owner'),
      tags: resource.field(self._.blocks, 'tags'),
      tenant_id: resource.field(self._.blocks, 'tenant_id'),
      version: resource.field(self._.blocks, 'version'),
    },
    advisor_recommendations(name, block): {
      local resource = blockType.resource('azurerm_advisor_recommendations', name),
      _: resource._(block, {
        filter_by_category: build.template(std.get(block, 'filter_by_category', null)),
        filter_by_resource_groups: build.template(std.get(block, 'filter_by_resource_groups', null)),
        id: build.template(std.get(block, 'id', null)),
        recommendations: build.template(std.get(block, 'recommendations', null)),
      }),
      filter_by_category: resource.field(self._.blocks, 'filter_by_category'),
      filter_by_resource_groups: resource.field(self._.blocks, 'filter_by_resource_groups'),
      id: resource.field(self._.blocks, 'id'),
      recommendations: resource.field(self._.blocks, 'recommendations'),
    },
    api_management(name, block): {
      local resource = blockType.resource('azurerm_api_management', name),
      _: resource._(block, {
        additional_location: build.template(std.get(block, 'additional_location', null)),
        developer_portal_url: build.template(std.get(block, 'developer_portal_url', null)),
        gateway_regional_url: build.template(std.get(block, 'gateway_regional_url', null)),
        gateway_url: build.template(std.get(block, 'gateway_url', null)),
        hostname_configuration: build.template(std.get(block, 'hostname_configuration', null)),
        id: build.template(std.get(block, 'id', null)),
        identity: build.template(std.get(block, 'identity', null)),
        location: build.template(std.get(block, 'location', null)),
        management_api_url: build.template(std.get(block, 'management_api_url', null)),
        name: build.template(block.name),
        notification_sender_email: build.template(std.get(block, 'notification_sender_email', null)),
        portal_url: build.template(std.get(block, 'portal_url', null)),
        private_ip_addresses: build.template(std.get(block, 'private_ip_addresses', null)),
        public_ip_address_id: build.template(std.get(block, 'public_ip_address_id', null)),
        public_ip_addresses: build.template(std.get(block, 'public_ip_addresses', null)),
        publisher_email: build.template(std.get(block, 'publisher_email', null)),
        publisher_name: build.template(std.get(block, 'publisher_name', null)),
        resource_group_name: build.template(block.resource_group_name),
        scm_url: build.template(std.get(block, 'scm_url', null)),
        sku_name: build.template(std.get(block, 'sku_name', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tenant_access: build.template(std.get(block, 'tenant_access', null)),
      }),
      additional_location: resource.field(self._.blocks, 'additional_location'),
      developer_portal_url: resource.field(self._.blocks, 'developer_portal_url'),
      gateway_regional_url: resource.field(self._.blocks, 'gateway_regional_url'),
      gateway_url: resource.field(self._.blocks, 'gateway_url'),
      hostname_configuration: resource.field(self._.blocks, 'hostname_configuration'),
      id: resource.field(self._.blocks, 'id'),
      identity: resource.field(self._.blocks, 'identity'),
      location: resource.field(self._.blocks, 'location'),
      management_api_url: resource.field(self._.blocks, 'management_api_url'),
      name: resource.field(self._.blocks, 'name'),
      notification_sender_email: resource.field(self._.blocks, 'notification_sender_email'),
      portal_url: resource.field(self._.blocks, 'portal_url'),
      private_ip_addresses: resource.field(self._.blocks, 'private_ip_addresses'),
      public_ip_address_id: resource.field(self._.blocks, 'public_ip_address_id'),
      public_ip_addresses: resource.field(self._.blocks, 'public_ip_addresses'),
      publisher_email: resource.field(self._.blocks, 'publisher_email'),
      publisher_name: resource.field(self._.blocks, 'publisher_name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      scm_url: resource.field(self._.blocks, 'scm_url'),
      sku_name: resource.field(self._.blocks, 'sku_name'),
      tags: resource.field(self._.blocks, 'tags'),
      tenant_access: resource.field(self._.blocks, 'tenant_access'),
    },
    api_management_api(name, block): {
      local resource = blockType.resource('azurerm_api_management_api', name),
      _: resource._(block, {
        api_management_name: build.template(block.api_management_name),
        description: build.template(std.get(block, 'description', null)),
        display_name: build.template(std.get(block, 'display_name', null)),
        id: build.template(std.get(block, 'id', null)),
        is_current: build.template(std.get(block, 'is_current', null)),
        is_online: build.template(std.get(block, 'is_online', null)),
        name: build.template(block.name),
        path: build.template(std.get(block, 'path', null)),
        protocols: build.template(std.get(block, 'protocols', null)),
        resource_group_name: build.template(block.resource_group_name),
        revision: build.template(block.revision),
        service_url: build.template(std.get(block, 'service_url', null)),
        soap_pass_through: build.template(std.get(block, 'soap_pass_through', null)),
        subscription_key_parameter_names: build.template(std.get(block, 'subscription_key_parameter_names', null)),
        subscription_required: build.template(std.get(block, 'subscription_required', null)),
        version: build.template(std.get(block, 'version', null)),
        version_set_id: build.template(std.get(block, 'version_set_id', null)),
      }),
      api_management_name: resource.field(self._.blocks, 'api_management_name'),
      description: resource.field(self._.blocks, 'description'),
      display_name: resource.field(self._.blocks, 'display_name'),
      id: resource.field(self._.blocks, 'id'),
      is_current: resource.field(self._.blocks, 'is_current'),
      is_online: resource.field(self._.blocks, 'is_online'),
      name: resource.field(self._.blocks, 'name'),
      path: resource.field(self._.blocks, 'path'),
      protocols: resource.field(self._.blocks, 'protocols'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      revision: resource.field(self._.blocks, 'revision'),
      service_url: resource.field(self._.blocks, 'service_url'),
      soap_pass_through: resource.field(self._.blocks, 'soap_pass_through'),
      subscription_key_parameter_names: resource.field(self._.blocks, 'subscription_key_parameter_names'),
      subscription_required: resource.field(self._.blocks, 'subscription_required'),
      version: resource.field(self._.blocks, 'version'),
      version_set_id: resource.field(self._.blocks, 'version_set_id'),
    },
    api_management_api_version_set(name, block): {
      local resource = blockType.resource('azurerm_api_management_api_version_set', name),
      _: resource._(block, {
        api_management_name: build.template(block.api_management_name),
        description: build.template(std.get(block, 'description', null)),
        display_name: build.template(std.get(block, 'display_name', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        version_header_name: build.template(std.get(block, 'version_header_name', null)),
        version_query_name: build.template(std.get(block, 'version_query_name', null)),
        versioning_scheme: build.template(std.get(block, 'versioning_scheme', null)),
      }),
      api_management_name: resource.field(self._.blocks, 'api_management_name'),
      description: resource.field(self._.blocks, 'description'),
      display_name: resource.field(self._.blocks, 'display_name'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      version_header_name: resource.field(self._.blocks, 'version_header_name'),
      version_query_name: resource.field(self._.blocks, 'version_query_name'),
      versioning_scheme: resource.field(self._.blocks, 'versioning_scheme'),
    },
    api_management_gateway(name, block): {
      local resource = blockType.resource('azurerm_api_management_gateway', name),
      _: resource._(block, {
        api_management_id: build.template(block.api_management_id),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        location_data: build.template(std.get(block, 'location_data', null)),
        name: build.template(block.name),
      }),
      api_management_id: resource.field(self._.blocks, 'api_management_id'),
      description: resource.field(self._.blocks, 'description'),
      id: resource.field(self._.blocks, 'id'),
      location_data: resource.field(self._.blocks, 'location_data'),
      name: resource.field(self._.blocks, 'name'),
    },
    api_management_gateway_host_name_configuration(name, block): {
      local resource = blockType.resource('azurerm_api_management_gateway_host_name_configuration', name),
      _: resource._(block, {
        api_management_id: build.template(block.api_management_id),
        certificate_id: build.template(std.get(block, 'certificate_id', null)),
        gateway_name: build.template(block.gateway_name),
        host_name: build.template(std.get(block, 'host_name', null)),
        http2_enabled: build.template(std.get(block, 'http2_enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        request_client_certificate_enabled: build.template(std.get(block, 'request_client_certificate_enabled', null)),
        tls10_enabled: build.template(std.get(block, 'tls10_enabled', null)),
        tls11_enabled: build.template(std.get(block, 'tls11_enabled', null)),
      }),
      api_management_id: resource.field(self._.blocks, 'api_management_id'),
      certificate_id: resource.field(self._.blocks, 'certificate_id'),
      gateway_name: resource.field(self._.blocks, 'gateway_name'),
      host_name: resource.field(self._.blocks, 'host_name'),
      http2_enabled: resource.field(self._.blocks, 'http2_enabled'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      request_client_certificate_enabled: resource.field(self._.blocks, 'request_client_certificate_enabled'),
      tls10_enabled: resource.field(self._.blocks, 'tls10_enabled'),
      tls11_enabled: resource.field(self._.blocks, 'tls11_enabled'),
    },
    api_management_group(name, block): {
      local resource = blockType.resource('azurerm_api_management_group', name),
      _: resource._(block, {
        api_management_name: build.template(block.api_management_name),
        description: build.template(std.get(block, 'description', null)),
        display_name: build.template(std.get(block, 'display_name', null)),
        external_id: build.template(std.get(block, 'external_id', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        type: build.template(std.get(block, 'type', null)),
      }),
      api_management_name: resource.field(self._.blocks, 'api_management_name'),
      description: resource.field(self._.blocks, 'description'),
      display_name: resource.field(self._.blocks, 'display_name'),
      external_id: resource.field(self._.blocks, 'external_id'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      type: resource.field(self._.blocks, 'type'),
    },
    api_management_product(name, block): {
      local resource = blockType.resource('azurerm_api_management_product', name),
      _: resource._(block, {
        api_management_name: build.template(block.api_management_name),
        approval_required: build.template(std.get(block, 'approval_required', null)),
        description: build.template(std.get(block, 'description', null)),
        display_name: build.template(std.get(block, 'display_name', null)),
        id: build.template(std.get(block, 'id', null)),
        product_id: build.template(block.product_id),
        published: build.template(std.get(block, 'published', null)),
        resource_group_name: build.template(block.resource_group_name),
        subscription_required: build.template(std.get(block, 'subscription_required', null)),
        subscriptions_limit: build.template(std.get(block, 'subscriptions_limit', null)),
        terms: build.template(std.get(block, 'terms', null)),
      }),
      api_management_name: resource.field(self._.blocks, 'api_management_name'),
      approval_required: resource.field(self._.blocks, 'approval_required'),
      description: resource.field(self._.blocks, 'description'),
      display_name: resource.field(self._.blocks, 'display_name'),
      id: resource.field(self._.blocks, 'id'),
      product_id: resource.field(self._.blocks, 'product_id'),
      published: resource.field(self._.blocks, 'published'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      subscription_required: resource.field(self._.blocks, 'subscription_required'),
      subscriptions_limit: resource.field(self._.blocks, 'subscriptions_limit'),
      terms: resource.field(self._.blocks, 'terms'),
    },
    api_management_subscription(name, block): {
      local resource = blockType.resource('azurerm_api_management_subscription', name),
      _: resource._(block, {
        allow_tracing: build.template(std.get(block, 'allow_tracing', null)),
        api_id: build.template(std.get(block, 'api_id', null)),
        api_management_id: build.template(block.api_management_id),
        display_name: build.template(std.get(block, 'display_name', null)),
        id: build.template(std.get(block, 'id', null)),
        primary_key: build.template(std.get(block, 'primary_key', null)),
        product_id: build.template(std.get(block, 'product_id', null)),
        secondary_key: build.template(std.get(block, 'secondary_key', null)),
        state: build.template(std.get(block, 'state', null)),
        subscription_id: build.template(block.subscription_id),
        user_id: build.template(std.get(block, 'user_id', null)),
      }),
      allow_tracing: resource.field(self._.blocks, 'allow_tracing'),
      api_id: resource.field(self._.blocks, 'api_id'),
      api_management_id: resource.field(self._.blocks, 'api_management_id'),
      display_name: resource.field(self._.blocks, 'display_name'),
      id: resource.field(self._.blocks, 'id'),
      primary_key: resource.field(self._.blocks, 'primary_key'),
      product_id: resource.field(self._.blocks, 'product_id'),
      secondary_key: resource.field(self._.blocks, 'secondary_key'),
      state: resource.field(self._.blocks, 'state'),
      subscription_id: resource.field(self._.blocks, 'subscription_id'),
      user_id: resource.field(self._.blocks, 'user_id'),
    },
    api_management_user(name, block): {
      local resource = blockType.resource('azurerm_api_management_user', name),
      _: resource._(block, {
        api_management_name: build.template(block.api_management_name),
        email: build.template(std.get(block, 'email', null)),
        first_name: build.template(std.get(block, 'first_name', null)),
        id: build.template(std.get(block, 'id', null)),
        last_name: build.template(std.get(block, 'last_name', null)),
        note: build.template(std.get(block, 'note', null)),
        resource_group_name: build.template(block.resource_group_name),
        state: build.template(std.get(block, 'state', null)),
        user_id: build.template(block.user_id),
      }),
      api_management_name: resource.field(self._.blocks, 'api_management_name'),
      email: resource.field(self._.blocks, 'email'),
      first_name: resource.field(self._.blocks, 'first_name'),
      id: resource.field(self._.blocks, 'id'),
      last_name: resource.field(self._.blocks, 'last_name'),
      note: resource.field(self._.blocks, 'note'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      state: resource.field(self._.blocks, 'state'),
      user_id: resource.field(self._.blocks, 'user_id'),
    },
    app_configuration(name, block): {
      local resource = blockType.resource('azurerm_app_configuration', name),
      _: resource._(block, {
        data_plane_proxy_authentication_mode: build.template(std.get(block, 'data_plane_proxy_authentication_mode', null)),
        data_plane_proxy_private_link_delegation_enabled: build.template(std.get(block, 'data_plane_proxy_private_link_delegation_enabled', null)),
        encryption: build.template(std.get(block, 'encryption', null)),
        endpoint: build.template(std.get(block, 'endpoint', null)),
        id: build.template(std.get(block, 'id', null)),
        identity: build.template(std.get(block, 'identity', null)),
        local_auth_enabled: build.template(std.get(block, 'local_auth_enabled', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        primary_read_key: build.template(std.get(block, 'primary_read_key', null)),
        primary_write_key: build.template(std.get(block, 'primary_write_key', null)),
        public_network_access: build.template(std.get(block, 'public_network_access', null)),
        public_network_access_enabled: build.template(std.get(block, 'public_network_access_enabled', null)),
        purge_protection_enabled: build.template(std.get(block, 'purge_protection_enabled', null)),
        replica: build.template(std.get(block, 'replica', null)),
        resource_group_name: build.template(block.resource_group_name),
        secondary_read_key: build.template(std.get(block, 'secondary_read_key', null)),
        secondary_write_key: build.template(std.get(block, 'secondary_write_key', null)),
        sku: build.template(std.get(block, 'sku', null)),
        soft_delete_retention_days: build.template(std.get(block, 'soft_delete_retention_days', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      data_plane_proxy_authentication_mode: resource.field(self._.blocks, 'data_plane_proxy_authentication_mode'),
      data_plane_proxy_private_link_delegation_enabled: resource.field(self._.blocks, 'data_plane_proxy_private_link_delegation_enabled'),
      encryption: resource.field(self._.blocks, 'encryption'),
      endpoint: resource.field(self._.blocks, 'endpoint'),
      id: resource.field(self._.blocks, 'id'),
      identity: resource.field(self._.blocks, 'identity'),
      local_auth_enabled: resource.field(self._.blocks, 'local_auth_enabled'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      primary_read_key: resource.field(self._.blocks, 'primary_read_key'),
      primary_write_key: resource.field(self._.blocks, 'primary_write_key'),
      public_network_access: resource.field(self._.blocks, 'public_network_access'),
      public_network_access_enabled: resource.field(self._.blocks, 'public_network_access_enabled'),
      purge_protection_enabled: resource.field(self._.blocks, 'purge_protection_enabled'),
      replica: resource.field(self._.blocks, 'replica'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      secondary_read_key: resource.field(self._.blocks, 'secondary_read_key'),
      secondary_write_key: resource.field(self._.blocks, 'secondary_write_key'),
      sku: resource.field(self._.blocks, 'sku'),
      soft_delete_retention_days: resource.field(self._.blocks, 'soft_delete_retention_days'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    app_configuration_key(name, block): {
      local resource = blockType.resource('azurerm_app_configuration_key', name),
      _: resource._(block, {
        configuration_store_id: build.template(block.configuration_store_id),
        content_type: build.template(std.get(block, 'content_type', null)),
        etag: build.template(std.get(block, 'etag', null)),
        id: build.template(std.get(block, 'id', null)),
        key: build.template(block.key),
        label: build.template(std.get(block, 'label', null)),
        locked: build.template(std.get(block, 'locked', null)),
        tags: build.template(std.get(block, 'tags', null)),
        type: build.template(std.get(block, 'type', null)),
        value: build.template(std.get(block, 'value', null)),
        vault_key_reference: build.template(std.get(block, 'vault_key_reference', null)),
      }),
      configuration_store_id: resource.field(self._.blocks, 'configuration_store_id'),
      content_type: resource.field(self._.blocks, 'content_type'),
      etag: resource.field(self._.blocks, 'etag'),
      id: resource.field(self._.blocks, 'id'),
      key: resource.field(self._.blocks, 'key'),
      label: resource.field(self._.blocks, 'label'),
      locked: resource.field(self._.blocks, 'locked'),
      tags: resource.field(self._.blocks, 'tags'),
      type: resource.field(self._.blocks, 'type'),
      value: resource.field(self._.blocks, 'value'),
      vault_key_reference: resource.field(self._.blocks, 'vault_key_reference'),
    },
    app_configuration_keys(name, block): {
      local resource = blockType.resource('azurerm_app_configuration_keys', name),
      _: resource._(block, {
        configuration_store_id: build.template(block.configuration_store_id),
        id: build.template(std.get(block, 'id', null)),
        items: build.template(std.get(block, 'items', null)),
        key: build.template(std.get(block, 'key', null)),
        label: build.template(std.get(block, 'label', null)),
      }),
      configuration_store_id: resource.field(self._.blocks, 'configuration_store_id'),
      id: resource.field(self._.blocks, 'id'),
      items: resource.field(self._.blocks, 'items'),
      key: resource.field(self._.blocks, 'key'),
      label: resource.field(self._.blocks, 'label'),
    },
    app_service(name, block): {
      local resource = blockType.resource('azurerm_app_service', name),
      _: resource._(block, {
        app_service_plan_id: build.template(std.get(block, 'app_service_plan_id', null)),
        app_settings: build.template(std.get(block, 'app_settings', null)),
        client_affinity_enabled: build.template(std.get(block, 'client_affinity_enabled', null)),
        client_cert_enabled: build.template(std.get(block, 'client_cert_enabled', null)),
        connection_string: build.template(std.get(block, 'connection_string', null)),
        custom_domain_verification_id: build.template(std.get(block, 'custom_domain_verification_id', null)),
        default_site_hostname: build.template(std.get(block, 'default_site_hostname', null)),
        enabled: build.template(std.get(block, 'enabled', null)),
        https_only: build.template(std.get(block, 'https_only', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        outbound_ip_address_list: build.template(std.get(block, 'outbound_ip_address_list', null)),
        outbound_ip_addresses: build.template(std.get(block, 'outbound_ip_addresses', null)),
        possible_outbound_ip_address_list: build.template(std.get(block, 'possible_outbound_ip_address_list', null)),
        possible_outbound_ip_addresses: build.template(std.get(block, 'possible_outbound_ip_addresses', null)),
        resource_group_name: build.template(block.resource_group_name),
        site_config: build.template(std.get(block, 'site_config', null)),
        site_credential: build.template(std.get(block, 'site_credential', null)),
        source_control: build.template(std.get(block, 'source_control', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      app_service_plan_id: resource.field(self._.blocks, 'app_service_plan_id'),
      app_settings: resource.field(self._.blocks, 'app_settings'),
      client_affinity_enabled: resource.field(self._.blocks, 'client_affinity_enabled'),
      client_cert_enabled: resource.field(self._.blocks, 'client_cert_enabled'),
      connection_string: resource.field(self._.blocks, 'connection_string'),
      custom_domain_verification_id: resource.field(self._.blocks, 'custom_domain_verification_id'),
      default_site_hostname: resource.field(self._.blocks, 'default_site_hostname'),
      enabled: resource.field(self._.blocks, 'enabled'),
      https_only: resource.field(self._.blocks, 'https_only'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      outbound_ip_address_list: resource.field(self._.blocks, 'outbound_ip_address_list'),
      outbound_ip_addresses: resource.field(self._.blocks, 'outbound_ip_addresses'),
      possible_outbound_ip_address_list: resource.field(self._.blocks, 'possible_outbound_ip_address_list'),
      possible_outbound_ip_addresses: resource.field(self._.blocks, 'possible_outbound_ip_addresses'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      site_config: resource.field(self._.blocks, 'site_config'),
      site_credential: resource.field(self._.blocks, 'site_credential'),
      source_control: resource.field(self._.blocks, 'source_control'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    app_service_certificate(name, block): {
      local resource = blockType.resource('azurerm_app_service_certificate', name),
      _: resource._(block, {
        expiration_date: build.template(std.get(block, 'expiration_date', null)),
        friendly_name: build.template(std.get(block, 'friendly_name', null)),
        host_names: build.template(std.get(block, 'host_names', null)),
        id: build.template(std.get(block, 'id', null)),
        issue_date: build.template(std.get(block, 'issue_date', null)),
        issuer: build.template(std.get(block, 'issuer', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        subject_name: build.template(std.get(block, 'subject_name', null)),
        tags: build.template(std.get(block, 'tags', null)),
        thumbprint: build.template(std.get(block, 'thumbprint', null)),
      }),
      expiration_date: resource.field(self._.blocks, 'expiration_date'),
      friendly_name: resource.field(self._.blocks, 'friendly_name'),
      host_names: resource.field(self._.blocks, 'host_names'),
      id: resource.field(self._.blocks, 'id'),
      issue_date: resource.field(self._.blocks, 'issue_date'),
      issuer: resource.field(self._.blocks, 'issuer'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      subject_name: resource.field(self._.blocks, 'subject_name'),
      tags: resource.field(self._.blocks, 'tags'),
      thumbprint: resource.field(self._.blocks, 'thumbprint'),
    },
    app_service_certificate_order(name, block): {
      local resource = blockType.resource('azurerm_app_service_certificate_order', name),
      _: resource._(block, {
        app_service_certificate_not_renewable_reasons: build.template(std.get(block, 'app_service_certificate_not_renewable_reasons', null)),
        auto_renew: build.template(std.get(block, 'auto_renew', null)),
        certificates: build.template(std.get(block, 'certificates', null)),
        csr: build.template(std.get(block, 'csr', null)),
        distinguished_name: build.template(std.get(block, 'distinguished_name', null)),
        domain_verification_token: build.template(std.get(block, 'domain_verification_token', null)),
        expiration_time: build.template(std.get(block, 'expiration_time', null)),
        id: build.template(std.get(block, 'id', null)),
        intermediate_thumbprint: build.template(std.get(block, 'intermediate_thumbprint', null)),
        is_private_key_external: build.template(std.get(block, 'is_private_key_external', null)),
        key_size: build.template(std.get(block, 'key_size', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        product_type: build.template(std.get(block, 'product_type', null)),
        resource_group_name: build.template(block.resource_group_name),
        root_thumbprint: build.template(std.get(block, 'root_thumbprint', null)),
        signed_certificate_thumbprint: build.template(std.get(block, 'signed_certificate_thumbprint', null)),
        status: build.template(std.get(block, 'status', null)),
        tags: build.template(std.get(block, 'tags', null)),
        validity_in_years: build.template(std.get(block, 'validity_in_years', null)),
      }),
      app_service_certificate_not_renewable_reasons: resource.field(self._.blocks, 'app_service_certificate_not_renewable_reasons'),
      auto_renew: resource.field(self._.blocks, 'auto_renew'),
      certificates: resource.field(self._.blocks, 'certificates'),
      csr: resource.field(self._.blocks, 'csr'),
      distinguished_name: resource.field(self._.blocks, 'distinguished_name'),
      domain_verification_token: resource.field(self._.blocks, 'domain_verification_token'),
      expiration_time: resource.field(self._.blocks, 'expiration_time'),
      id: resource.field(self._.blocks, 'id'),
      intermediate_thumbprint: resource.field(self._.blocks, 'intermediate_thumbprint'),
      is_private_key_external: resource.field(self._.blocks, 'is_private_key_external'),
      key_size: resource.field(self._.blocks, 'key_size'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      product_type: resource.field(self._.blocks, 'product_type'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      root_thumbprint: resource.field(self._.blocks, 'root_thumbprint'),
      signed_certificate_thumbprint: resource.field(self._.blocks, 'signed_certificate_thumbprint'),
      status: resource.field(self._.blocks, 'status'),
      tags: resource.field(self._.blocks, 'tags'),
      validity_in_years: resource.field(self._.blocks, 'validity_in_years'),
    },
    app_service_environment_v3(name, block): {
      local resource = blockType.resource('azurerm_app_service_environment_v3', name),
      _: resource._(block, {
        allow_new_private_endpoint_connections: build.template(std.get(block, 'allow_new_private_endpoint_connections', null)),
        cluster_setting: build.template(std.get(block, 'cluster_setting', null)),
        dedicated_host_count: build.template(std.get(block, 'dedicated_host_count', null)),
        dns_suffix: build.template(std.get(block, 'dns_suffix', null)),
        external_inbound_ip_addresses: build.template(std.get(block, 'external_inbound_ip_addresses', null)),
        id: build.template(std.get(block, 'id', null)),
        inbound_network_dependencies: build.template(std.get(block, 'inbound_network_dependencies', null)),
        internal_inbound_ip_addresses: build.template(std.get(block, 'internal_inbound_ip_addresses', null)),
        internal_load_balancing_mode: build.template(std.get(block, 'internal_load_balancing_mode', null)),
        ip_ssl_address_count: build.template(std.get(block, 'ip_ssl_address_count', null)),
        linux_outbound_ip_addresses: build.template(std.get(block, 'linux_outbound_ip_addresses', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        pricing_tier: build.template(std.get(block, 'pricing_tier', null)),
        remote_debugging_enabled: build.template(std.get(block, 'remote_debugging_enabled', null)),
        resource_group_name: build.template(block.resource_group_name),
        subnet_id: build.template(std.get(block, 'subnet_id', null)),
        tags: build.template(std.get(block, 'tags', null)),
        windows_outbound_ip_addresses: build.template(std.get(block, 'windows_outbound_ip_addresses', null)),
        zone_redundant: build.template(std.get(block, 'zone_redundant', null)),
      }),
      allow_new_private_endpoint_connections: resource.field(self._.blocks, 'allow_new_private_endpoint_connections'),
      cluster_setting: resource.field(self._.blocks, 'cluster_setting'),
      dedicated_host_count: resource.field(self._.blocks, 'dedicated_host_count'),
      dns_suffix: resource.field(self._.blocks, 'dns_suffix'),
      external_inbound_ip_addresses: resource.field(self._.blocks, 'external_inbound_ip_addresses'),
      id: resource.field(self._.blocks, 'id'),
      inbound_network_dependencies: resource.field(self._.blocks, 'inbound_network_dependencies'),
      internal_inbound_ip_addresses: resource.field(self._.blocks, 'internal_inbound_ip_addresses'),
      internal_load_balancing_mode: resource.field(self._.blocks, 'internal_load_balancing_mode'),
      ip_ssl_address_count: resource.field(self._.blocks, 'ip_ssl_address_count'),
      linux_outbound_ip_addresses: resource.field(self._.blocks, 'linux_outbound_ip_addresses'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      pricing_tier: resource.field(self._.blocks, 'pricing_tier'),
      remote_debugging_enabled: resource.field(self._.blocks, 'remote_debugging_enabled'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      subnet_id: resource.field(self._.blocks, 'subnet_id'),
      tags: resource.field(self._.blocks, 'tags'),
      windows_outbound_ip_addresses: resource.field(self._.blocks, 'windows_outbound_ip_addresses'),
      zone_redundant: resource.field(self._.blocks, 'zone_redundant'),
    },
    app_service_plan(name, block): {
      local resource = blockType.resource('azurerm_app_service_plan', name),
      _: resource._(block, {
        app_service_environment_id: build.template(std.get(block, 'app_service_environment_id', null)),
        id: build.template(std.get(block, 'id', null)),
        is_xenon: build.template(std.get(block, 'is_xenon', null)),
        kind: build.template(std.get(block, 'kind', null)),
        location: build.template(std.get(block, 'location', null)),
        maximum_elastic_worker_count: build.template(std.get(block, 'maximum_elastic_worker_count', null)),
        maximum_number_of_workers: build.template(std.get(block, 'maximum_number_of_workers', null)),
        name: build.template(block.name),
        per_site_scaling: build.template(std.get(block, 'per_site_scaling', null)),
        reserved: build.template(std.get(block, 'reserved', null)),
        resource_group_name: build.template(block.resource_group_name),
        sku: build.template(std.get(block, 'sku', null)),
        tags: build.template(std.get(block, 'tags', null)),
        zone_redundant: build.template(std.get(block, 'zone_redundant', null)),
      }),
      app_service_environment_id: resource.field(self._.blocks, 'app_service_environment_id'),
      id: resource.field(self._.blocks, 'id'),
      is_xenon: resource.field(self._.blocks, 'is_xenon'),
      kind: resource.field(self._.blocks, 'kind'),
      location: resource.field(self._.blocks, 'location'),
      maximum_elastic_worker_count: resource.field(self._.blocks, 'maximum_elastic_worker_count'),
      maximum_number_of_workers: resource.field(self._.blocks, 'maximum_number_of_workers'),
      name: resource.field(self._.blocks, 'name'),
      per_site_scaling: resource.field(self._.blocks, 'per_site_scaling'),
      reserved: resource.field(self._.blocks, 'reserved'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      sku: resource.field(self._.blocks, 'sku'),
      tags: resource.field(self._.blocks, 'tags'),
      zone_redundant: resource.field(self._.blocks, 'zone_redundant'),
    },
    application_gateway(name, block): {
      local resource = blockType.resource('azurerm_application_gateway', name),
      _: resource._(block, {
        authentication_certificate: build.template(std.get(block, 'authentication_certificate', null)),
        autoscale_configuration: build.template(std.get(block, 'autoscale_configuration', null)),
        backend_address_pool: build.template(std.get(block, 'backend_address_pool', null)),
        backend_http_settings: build.template(std.get(block, 'backend_http_settings', null)),
        custom_error_configuration: build.template(std.get(block, 'custom_error_configuration', null)),
        fips_enabled: build.template(std.get(block, 'fips_enabled', null)),
        firewall_policy_id: build.template(std.get(block, 'firewall_policy_id', null)),
        force_firewall_policy_association: build.template(std.get(block, 'force_firewall_policy_association', null)),
        frontend_ip_configuration: build.template(std.get(block, 'frontend_ip_configuration', null)),
        frontend_port: build.template(std.get(block, 'frontend_port', null)),
        gateway_ip_configuration: build.template(std.get(block, 'gateway_ip_configuration', null)),
        global: build.template(std.get(block, 'global', null)),
        http2_enabled: build.template(std.get(block, 'http2_enabled', null)),
        http_listener: build.template(std.get(block, 'http_listener', null)),
        id: build.template(std.get(block, 'id', null)),
        identity: build.template(std.get(block, 'identity', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        private_endpoint_connection: build.template(std.get(block, 'private_endpoint_connection', null)),
        private_link_configuration: build.template(std.get(block, 'private_link_configuration', null)),
        probe: build.template(std.get(block, 'probe', null)),
        redirect_configuration: build.template(std.get(block, 'redirect_configuration', null)),
        request_routing_rule: build.template(std.get(block, 'request_routing_rule', null)),
        resource_group_name: build.template(block.resource_group_name),
        rewrite_rule_set: build.template(std.get(block, 'rewrite_rule_set', null)),
        sku: build.template(std.get(block, 'sku', null)),
        ssl_certificate: build.template(std.get(block, 'ssl_certificate', null)),
        ssl_policy: build.template(std.get(block, 'ssl_policy', null)),
        ssl_profile: build.template(std.get(block, 'ssl_profile', null)),
        tags: build.template(std.get(block, 'tags', null)),
        trusted_client_certificate: build.template(std.get(block, 'trusted_client_certificate', null)),
        trusted_root_certificate: build.template(std.get(block, 'trusted_root_certificate', null)),
        url_path_map: build.template(std.get(block, 'url_path_map', null)),
        waf_configuration: build.template(std.get(block, 'waf_configuration', null)),
        zones: build.template(std.get(block, 'zones', null)),
      }),
      authentication_certificate: resource.field(self._.blocks, 'authentication_certificate'),
      autoscale_configuration: resource.field(self._.blocks, 'autoscale_configuration'),
      backend_address_pool: resource.field(self._.blocks, 'backend_address_pool'),
      backend_http_settings: resource.field(self._.blocks, 'backend_http_settings'),
      custom_error_configuration: resource.field(self._.blocks, 'custom_error_configuration'),
      fips_enabled: resource.field(self._.blocks, 'fips_enabled'),
      firewall_policy_id: resource.field(self._.blocks, 'firewall_policy_id'),
      force_firewall_policy_association: resource.field(self._.blocks, 'force_firewall_policy_association'),
      frontend_ip_configuration: resource.field(self._.blocks, 'frontend_ip_configuration'),
      frontend_port: resource.field(self._.blocks, 'frontend_port'),
      gateway_ip_configuration: resource.field(self._.blocks, 'gateway_ip_configuration'),
      global: resource.field(self._.blocks, 'global'),
      http2_enabled: resource.field(self._.blocks, 'http2_enabled'),
      http_listener: resource.field(self._.blocks, 'http_listener'),
      id: resource.field(self._.blocks, 'id'),
      identity: resource.field(self._.blocks, 'identity'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      private_endpoint_connection: resource.field(self._.blocks, 'private_endpoint_connection'),
      private_link_configuration: resource.field(self._.blocks, 'private_link_configuration'),
      probe: resource.field(self._.blocks, 'probe'),
      redirect_configuration: resource.field(self._.blocks, 'redirect_configuration'),
      request_routing_rule: resource.field(self._.blocks, 'request_routing_rule'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      rewrite_rule_set: resource.field(self._.blocks, 'rewrite_rule_set'),
      sku: resource.field(self._.blocks, 'sku'),
      ssl_certificate: resource.field(self._.blocks, 'ssl_certificate'),
      ssl_policy: resource.field(self._.blocks, 'ssl_policy'),
      ssl_profile: resource.field(self._.blocks, 'ssl_profile'),
      tags: resource.field(self._.blocks, 'tags'),
      trusted_client_certificate: resource.field(self._.blocks, 'trusted_client_certificate'),
      trusted_root_certificate: resource.field(self._.blocks, 'trusted_root_certificate'),
      url_path_map: resource.field(self._.blocks, 'url_path_map'),
      waf_configuration: resource.field(self._.blocks, 'waf_configuration'),
      zones: resource.field(self._.blocks, 'zones'),
    },
    application_insights(name, block): {
      local resource = blockType.resource('azurerm_application_insights', name),
      _: resource._(block, {
        app_id: build.template(std.get(block, 'app_id', null)),
        application_type: build.template(std.get(block, 'application_type', null)),
        connection_string: build.template(std.get(block, 'connection_string', null)),
        id: build.template(std.get(block, 'id', null)),
        instrumentation_key: build.template(std.get(block, 'instrumentation_key', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        retention_in_days: build.template(std.get(block, 'retention_in_days', null)),
        tags: build.template(std.get(block, 'tags', null)),
        workspace_id: build.template(std.get(block, 'workspace_id', null)),
      }),
      app_id: resource.field(self._.blocks, 'app_id'),
      application_type: resource.field(self._.blocks, 'application_type'),
      connection_string: resource.field(self._.blocks, 'connection_string'),
      id: resource.field(self._.blocks, 'id'),
      instrumentation_key: resource.field(self._.blocks, 'instrumentation_key'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      retention_in_days: resource.field(self._.blocks, 'retention_in_days'),
      tags: resource.field(self._.blocks, 'tags'),
      workspace_id: resource.field(self._.blocks, 'workspace_id'),
    },
    application_security_group(name, block): {
      local resource = blockType.resource('azurerm_application_security_group', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    arc_machine(name, block): {
      local resource = blockType.resource('azurerm_arc_machine', name),
      _: resource._(block, {
        active_directory_fqdn: build.template(std.get(block, 'active_directory_fqdn', null)),
        agent: build.template(std.get(block, 'agent', null)),
        agent_version: build.template(std.get(block, 'agent_version', null)),
        client_public_key: build.template(std.get(block, 'client_public_key', null)),
        cloud_metadata: build.template(std.get(block, 'cloud_metadata', null)),
        detected_properties: build.template(std.get(block, 'detected_properties', null)),
        display_name: build.template(std.get(block, 'display_name', null)),
        dns_fqdn: build.template(std.get(block, 'dns_fqdn', null)),
        domain_name: build.template(std.get(block, 'domain_name', null)),
        id: build.template(std.get(block, 'id', null)),
        identity: build.template(std.get(block, 'identity', null)),
        last_status_change_time: build.template(std.get(block, 'last_status_change_time', null)),
        location: build.template(std.get(block, 'location', null)),
        location_data: build.template(std.get(block, 'location_data', null)),
        machine_fqdn: build.template(std.get(block, 'machine_fqdn', null)),
        mssql_discovered: build.template(std.get(block, 'mssql_discovered', null)),
        name: build.template(block.name),
        os_name: build.template(std.get(block, 'os_name', null)),
        os_profile: build.template(std.get(block, 'os_profile', null)),
        os_sku: build.template(std.get(block, 'os_sku', null)),
        os_type: build.template(std.get(block, 'os_type', null)),
        os_version: build.template(std.get(block, 'os_version', null)),
        parent_cluster_resource_id: build.template(std.get(block, 'parent_cluster_resource_id', null)),
        private_link_scope_resource_id: build.template(std.get(block, 'private_link_scope_resource_id', null)),
        resource_group_name: build.template(block.resource_group_name),
        service_status: build.template(std.get(block, 'service_status', null)),
        status: build.template(std.get(block, 'status', null)),
        tags: build.template(std.get(block, 'tags', null)),
        vm_id: build.template(std.get(block, 'vm_id', null)),
        vm_uuid: build.template(std.get(block, 'vm_uuid', null)),
      }),
      active_directory_fqdn: resource.field(self._.blocks, 'active_directory_fqdn'),
      agent: resource.field(self._.blocks, 'agent'),
      agent_version: resource.field(self._.blocks, 'agent_version'),
      client_public_key: resource.field(self._.blocks, 'client_public_key'),
      cloud_metadata: resource.field(self._.blocks, 'cloud_metadata'),
      detected_properties: resource.field(self._.blocks, 'detected_properties'),
      display_name: resource.field(self._.blocks, 'display_name'),
      dns_fqdn: resource.field(self._.blocks, 'dns_fqdn'),
      domain_name: resource.field(self._.blocks, 'domain_name'),
      id: resource.field(self._.blocks, 'id'),
      identity: resource.field(self._.blocks, 'identity'),
      last_status_change_time: resource.field(self._.blocks, 'last_status_change_time'),
      location: resource.field(self._.blocks, 'location'),
      location_data: resource.field(self._.blocks, 'location_data'),
      machine_fqdn: resource.field(self._.blocks, 'machine_fqdn'),
      mssql_discovered: resource.field(self._.blocks, 'mssql_discovered'),
      name: resource.field(self._.blocks, 'name'),
      os_name: resource.field(self._.blocks, 'os_name'),
      os_profile: resource.field(self._.blocks, 'os_profile'),
      os_sku: resource.field(self._.blocks, 'os_sku'),
      os_type: resource.field(self._.blocks, 'os_type'),
      os_version: resource.field(self._.blocks, 'os_version'),
      parent_cluster_resource_id: resource.field(self._.blocks, 'parent_cluster_resource_id'),
      private_link_scope_resource_id: resource.field(self._.blocks, 'private_link_scope_resource_id'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      service_status: resource.field(self._.blocks, 'service_status'),
      status: resource.field(self._.blocks, 'status'),
      tags: resource.field(self._.blocks, 'tags'),
      vm_id: resource.field(self._.blocks, 'vm_id'),
      vm_uuid: resource.field(self._.blocks, 'vm_uuid'),
    },
    arc_resource_bridge_appliance(name, block): {
      local resource = blockType.resource('azurerm_arc_resource_bridge_appliance', name),
      _: resource._(block, {
        distro: build.template(std.get(block, 'distro', null)),
        id: build.template(std.get(block, 'id', null)),
        identity: build.template(std.get(block, 'identity', null)),
        infrastructure_provider: build.template(std.get(block, 'infrastructure_provider', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        public_key_base64: build.template(std.get(block, 'public_key_base64', null)),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      distro: resource.field(self._.blocks, 'distro'),
      id: resource.field(self._.blocks, 'id'),
      identity: resource.field(self._.blocks, 'identity'),
      infrastructure_provider: resource.field(self._.blocks, 'infrastructure_provider'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      public_key_base64: resource.field(self._.blocks, 'public_key_base64'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    attestation_provider(name, block): {
      local resource = blockType.resource('azurerm_attestation_provider', name),
      _: resource._(block, {
        attestation_uri: build.template(std.get(block, 'attestation_uri', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
        trust_model: build.template(std.get(block, 'trust_model', null)),
      }),
      attestation_uri: resource.field(self._.blocks, 'attestation_uri'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
      trust_model: resource.field(self._.blocks, 'trust_model'),
    },
    automation_account(name, block): {
      local resource = blockType.resource('azurerm_automation_account', name),
      _: resource._(block, {
        endpoint: build.template(std.get(block, 'endpoint', null)),
        hybrid_service_url: build.template(std.get(block, 'hybrid_service_url', null)),
        id: build.template(std.get(block, 'id', null)),
        identity: build.template(std.get(block, 'identity', null)),
        name: build.template(block.name),
        primary_key: build.template(std.get(block, 'primary_key', null)),
        private_endpoint_connection: build.template(std.get(block, 'private_endpoint_connection', null)),
        resource_group_name: build.template(block.resource_group_name),
        secondary_key: build.template(std.get(block, 'secondary_key', null)),
      }),
      endpoint: resource.field(self._.blocks, 'endpoint'),
      hybrid_service_url: resource.field(self._.blocks, 'hybrid_service_url'),
      id: resource.field(self._.blocks, 'id'),
      identity: resource.field(self._.blocks, 'identity'),
      name: resource.field(self._.blocks, 'name'),
      primary_key: resource.field(self._.blocks, 'primary_key'),
      private_endpoint_connection: resource.field(self._.blocks, 'private_endpoint_connection'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      secondary_key: resource.field(self._.blocks, 'secondary_key'),
    },
    automation_runbook(name, block): {
      local resource = blockType.resource('azurerm_automation_runbook', name),
      _: resource._(block, {
        automation_account_name: build.template(block.automation_account_name),
        content: build.template(std.get(block, 'content', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        log_activity_trace_level: build.template(std.get(block, 'log_activity_trace_level', null)),
        log_progress: build.template(std.get(block, 'log_progress', null)),
        log_verbose: build.template(std.get(block, 'log_verbose', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        runbook_type: build.template(std.get(block, 'runbook_type', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      automation_account_name: resource.field(self._.blocks, 'automation_account_name'),
      content: resource.field(self._.blocks, 'content'),
      description: resource.field(self._.blocks, 'description'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      log_activity_trace_level: resource.field(self._.blocks, 'log_activity_trace_level'),
      log_progress: resource.field(self._.blocks, 'log_progress'),
      log_verbose: resource.field(self._.blocks, 'log_verbose'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      runbook_type: resource.field(self._.blocks, 'runbook_type'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    automation_variable_bool(name, block): {
      local resource = blockType.resource('azurerm_automation_variable_bool', name),
      _: resource._(block, {
        automation_account_name: build.template(block.automation_account_name),
        description: build.template(std.get(block, 'description', null)),
        encrypted: build.template(std.get(block, 'encrypted', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        value: build.template(std.get(block, 'value', null)),
      }),
      automation_account_name: resource.field(self._.blocks, 'automation_account_name'),
      description: resource.field(self._.blocks, 'description'),
      encrypted: resource.field(self._.blocks, 'encrypted'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      value: resource.field(self._.blocks, 'value'),
    },
    automation_variable_datetime(name, block): {
      local resource = blockType.resource('azurerm_automation_variable_datetime', name),
      _: resource._(block, {
        automation_account_name: build.template(block.automation_account_name),
        description: build.template(std.get(block, 'description', null)),
        encrypted: build.template(std.get(block, 'encrypted', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        value: build.template(std.get(block, 'value', null)),
      }),
      automation_account_name: resource.field(self._.blocks, 'automation_account_name'),
      description: resource.field(self._.blocks, 'description'),
      encrypted: resource.field(self._.blocks, 'encrypted'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      value: resource.field(self._.blocks, 'value'),
    },
    automation_variable_int(name, block): {
      local resource = blockType.resource('azurerm_automation_variable_int', name),
      _: resource._(block, {
        automation_account_name: build.template(block.automation_account_name),
        description: build.template(std.get(block, 'description', null)),
        encrypted: build.template(std.get(block, 'encrypted', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        value: build.template(std.get(block, 'value', null)),
      }),
      automation_account_name: resource.field(self._.blocks, 'automation_account_name'),
      description: resource.field(self._.blocks, 'description'),
      encrypted: resource.field(self._.blocks, 'encrypted'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      value: resource.field(self._.blocks, 'value'),
    },
    automation_variable_object(name, block): {
      local resource = blockType.resource('azurerm_automation_variable_object', name),
      _: resource._(block, {
        automation_account_name: build.template(block.automation_account_name),
        description: build.template(std.get(block, 'description', null)),
        encrypted: build.template(std.get(block, 'encrypted', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        value: build.template(std.get(block, 'value', null)),
      }),
      automation_account_name: resource.field(self._.blocks, 'automation_account_name'),
      description: resource.field(self._.blocks, 'description'),
      encrypted: resource.field(self._.blocks, 'encrypted'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      value: resource.field(self._.blocks, 'value'),
    },
    automation_variable_string(name, block): {
      local resource = blockType.resource('azurerm_automation_variable_string', name),
      _: resource._(block, {
        automation_account_name: build.template(block.automation_account_name),
        description: build.template(std.get(block, 'description', null)),
        encrypted: build.template(std.get(block, 'encrypted', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        value: build.template(std.get(block, 'value', null)),
      }),
      automation_account_name: resource.field(self._.blocks, 'automation_account_name'),
      description: resource.field(self._.blocks, 'description'),
      encrypted: resource.field(self._.blocks, 'encrypted'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      value: resource.field(self._.blocks, 'value'),
    },
    automation_variables(name, block): {
      local resource = blockType.resource('azurerm_automation_variables', name),
      _: resource._(block, {
        automation_account_id: build.template(block.automation_account_id),
        bool: build.template(std.get(block, 'bool', null)),
        datetime: build.template(std.get(block, 'datetime', null)),
        encrypted: build.template(std.get(block, 'encrypted', null)),
        id: build.template(std.get(block, 'id', null)),
        int: build.template(std.get(block, 'int', null)),
        'null': build.template(std.get(block, 'null', null)),
        object: build.template(std.get(block, 'object', null)),
        string: build.template(std.get(block, 'string', null)),
      }),
      automation_account_id: resource.field(self._.blocks, 'automation_account_id'),
      bool: resource.field(self._.blocks, 'bool'),
      datetime: resource.field(self._.blocks, 'datetime'),
      encrypted: resource.field(self._.blocks, 'encrypted'),
      id: resource.field(self._.blocks, 'id'),
      int: resource.field(self._.blocks, 'int'),
      'null': resource.field(self._.blocks, 'null'),
      object: resource.field(self._.blocks, 'object'),
      string: resource.field(self._.blocks, 'string'),
    },
    availability_set(name, block): {
      local resource = blockType.resource('azurerm_availability_set', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        managed: build.template(std.get(block, 'managed', null)),
        name: build.template(block.name),
        platform_fault_domain_count: build.template(std.get(block, 'platform_fault_domain_count', null)),
        platform_update_domain_count: build.template(std.get(block, 'platform_update_domain_count', null)),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      managed: resource.field(self._.blocks, 'managed'),
      name: resource.field(self._.blocks, 'name'),
      platform_fault_domain_count: resource.field(self._.blocks, 'platform_fault_domain_count'),
      platform_update_domain_count: resource.field(self._.blocks, 'platform_update_domain_count'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    backup_policy_file_share(name, block): {
      local resource = blockType.resource('azurerm_backup_policy_file_share', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        recovery_vault_name: build.template(block.recovery_vault_name),
        resource_group_name: build.template(block.resource_group_name),
      }),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      recovery_vault_name: resource.field(self._.blocks, 'recovery_vault_name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
    },
    backup_policy_vm(name, block): {
      local resource = blockType.resource('azurerm_backup_policy_vm', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        recovery_vault_name: build.template(block.recovery_vault_name),
        resource_group_name: build.template(block.resource_group_name),
      }),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      recovery_vault_name: resource.field(self._.blocks, 'recovery_vault_name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
    },
    bastion_host(name, block): {
      local resource = blockType.resource('azurerm_bastion_host', name),
      _: resource._(block, {
        copy_paste_enabled: build.template(std.get(block, 'copy_paste_enabled', null)),
        dns_name: build.template(std.get(block, 'dns_name', null)),
        file_copy_enabled: build.template(std.get(block, 'file_copy_enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        ip_configuration: build.template(std.get(block, 'ip_configuration', null)),
        ip_connect_enabled: build.template(std.get(block, 'ip_connect_enabled', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        scale_units: build.template(std.get(block, 'scale_units', null)),
        session_recording_enabled: build.template(std.get(block, 'session_recording_enabled', null)),
        shareable_link_enabled: build.template(std.get(block, 'shareable_link_enabled', null)),
        sku: build.template(std.get(block, 'sku', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tunneling_enabled: build.template(std.get(block, 'tunneling_enabled', null)),
        zones: build.template(std.get(block, 'zones', null)),
      }),
      copy_paste_enabled: resource.field(self._.blocks, 'copy_paste_enabled'),
      dns_name: resource.field(self._.blocks, 'dns_name'),
      file_copy_enabled: resource.field(self._.blocks, 'file_copy_enabled'),
      id: resource.field(self._.blocks, 'id'),
      ip_configuration: resource.field(self._.blocks, 'ip_configuration'),
      ip_connect_enabled: resource.field(self._.blocks, 'ip_connect_enabled'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      scale_units: resource.field(self._.blocks, 'scale_units'),
      session_recording_enabled: resource.field(self._.blocks, 'session_recording_enabled'),
      shareable_link_enabled: resource.field(self._.blocks, 'shareable_link_enabled'),
      sku: resource.field(self._.blocks, 'sku'),
      tags: resource.field(self._.blocks, 'tags'),
      tunneling_enabled: resource.field(self._.blocks, 'tunneling_enabled'),
      zones: resource.field(self._.blocks, 'zones'),
    },
    batch_account(name, block): {
      local resource = blockType.resource('azurerm_batch_account', name),
      _: resource._(block, {
        account_endpoint: build.template(std.get(block, 'account_endpoint', null)),
        encryption: build.template(std.get(block, 'encryption', null)),
        id: build.template(std.get(block, 'id', null)),
        key_vault_reference: build.template(std.get(block, 'key_vault_reference', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        pool_allocation_mode: build.template(std.get(block, 'pool_allocation_mode', null)),
        primary_access_key: build.template(std.get(block, 'primary_access_key', null)),
        resource_group_name: build.template(block.resource_group_name),
        secondary_access_key: build.template(std.get(block, 'secondary_access_key', null)),
        storage_account_id: build.template(std.get(block, 'storage_account_id', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      account_endpoint: resource.field(self._.blocks, 'account_endpoint'),
      encryption: resource.field(self._.blocks, 'encryption'),
      id: resource.field(self._.blocks, 'id'),
      key_vault_reference: resource.field(self._.blocks, 'key_vault_reference'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      pool_allocation_mode: resource.field(self._.blocks, 'pool_allocation_mode'),
      primary_access_key: resource.field(self._.blocks, 'primary_access_key'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      secondary_access_key: resource.field(self._.blocks, 'secondary_access_key'),
      storage_account_id: resource.field(self._.blocks, 'storage_account_id'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    batch_application(name, block): {
      local resource = blockType.resource('azurerm_batch_application', name),
      _: resource._(block, {
        account_name: build.template(block.account_name),
        allow_updates: build.template(std.get(block, 'allow_updates', null)),
        default_version: build.template(std.get(block, 'default_version', null)),
        display_name: build.template(std.get(block, 'display_name', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
      }),
      account_name: resource.field(self._.blocks, 'account_name'),
      allow_updates: resource.field(self._.blocks, 'allow_updates'),
      default_version: resource.field(self._.blocks, 'default_version'),
      display_name: resource.field(self._.blocks, 'display_name'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
    },
    batch_certificate(name, block): {
      local resource = blockType.resource('azurerm_batch_certificate', name),
      _: resource._(block, {
        account_name: build.template(block.account_name),
        format: build.template(std.get(block, 'format', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        public_data: build.template(std.get(block, 'public_data', null)),
        resource_group_name: build.template(block.resource_group_name),
        thumbprint: build.template(std.get(block, 'thumbprint', null)),
        thumbprint_algorithm: build.template(std.get(block, 'thumbprint_algorithm', null)),
      }),
      account_name: resource.field(self._.blocks, 'account_name'),
      format: resource.field(self._.blocks, 'format'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      public_data: resource.field(self._.blocks, 'public_data'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      thumbprint: resource.field(self._.blocks, 'thumbprint'),
      thumbprint_algorithm: resource.field(self._.blocks, 'thumbprint_algorithm'),
    },
    batch_pool(name, block): {
      local resource = blockType.resource('azurerm_batch_pool', name),
      _: resource._(block, {
        account_name: build.template(block.account_name),
        auto_scale: build.template(std.get(block, 'auto_scale', null)),
        certificate: build.template(std.get(block, 'certificate', null)),
        container_configuration: build.template(std.get(block, 'container_configuration', null)),
        data_disks: build.template(std.get(block, 'data_disks', null)),
        disk_encryption: build.template(std.get(block, 'disk_encryption', null)),
        display_name: build.template(std.get(block, 'display_name', null)),
        extensions: build.template(std.get(block, 'extensions', null)),
        fixed_scale: build.template(std.get(block, 'fixed_scale', null)),
        id: build.template(std.get(block, 'id', null)),
        inter_node_communication: build.template(std.get(block, 'inter_node_communication', null)),
        license_type: build.template(std.get(block, 'license_type', null)),
        max_tasks_per_node: build.template(std.get(block, 'max_tasks_per_node', null)),
        metadata: build.template(std.get(block, 'metadata', null)),
        mount: build.template(std.get(block, 'mount', null)),
        name: build.template(block.name),
        network_configuration: build.template(std.get(block, 'network_configuration', null)),
        node_agent_sku_id: build.template(std.get(block, 'node_agent_sku_id', null)),
        node_placement: build.template(std.get(block, 'node_placement', null)),
        os_disk_placement: build.template(std.get(block, 'os_disk_placement', null)),
        resource_group_name: build.template(block.resource_group_name),
        start_task: build.template(std.get(block, 'start_task', null)),
        storage_image_reference: build.template(std.get(block, 'storage_image_reference', null)),
        task_scheduling_policy: build.template(std.get(block, 'task_scheduling_policy', null)),
        user_accounts: build.template(std.get(block, 'user_accounts', null)),
        vm_size: build.template(std.get(block, 'vm_size', null)),
        windows: build.template(std.get(block, 'windows', null)),
      }),
      account_name: resource.field(self._.blocks, 'account_name'),
      auto_scale: resource.field(self._.blocks, 'auto_scale'),
      certificate: resource.field(self._.blocks, 'certificate'),
      container_configuration: resource.field(self._.blocks, 'container_configuration'),
      data_disks: resource.field(self._.blocks, 'data_disks'),
      disk_encryption: resource.field(self._.blocks, 'disk_encryption'),
      display_name: resource.field(self._.blocks, 'display_name'),
      extensions: resource.field(self._.blocks, 'extensions'),
      fixed_scale: resource.field(self._.blocks, 'fixed_scale'),
      id: resource.field(self._.blocks, 'id'),
      inter_node_communication: resource.field(self._.blocks, 'inter_node_communication'),
      license_type: resource.field(self._.blocks, 'license_type'),
      max_tasks_per_node: resource.field(self._.blocks, 'max_tasks_per_node'),
      metadata: resource.field(self._.blocks, 'metadata'),
      mount: resource.field(self._.blocks, 'mount'),
      name: resource.field(self._.blocks, 'name'),
      network_configuration: resource.field(self._.blocks, 'network_configuration'),
      node_agent_sku_id: resource.field(self._.blocks, 'node_agent_sku_id'),
      node_placement: resource.field(self._.blocks, 'node_placement'),
      os_disk_placement: resource.field(self._.blocks, 'os_disk_placement'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      start_task: resource.field(self._.blocks, 'start_task'),
      storage_image_reference: resource.field(self._.blocks, 'storage_image_reference'),
      task_scheduling_policy: resource.field(self._.blocks, 'task_scheduling_policy'),
      user_accounts: resource.field(self._.blocks, 'user_accounts'),
      vm_size: resource.field(self._.blocks, 'vm_size'),
      windows: resource.field(self._.blocks, 'windows'),
    },
    billing_enrollment_account_scope(name, block): {
      local resource = blockType.resource('azurerm_billing_enrollment_account_scope', name),
      _: resource._(block, {
        billing_account_name: build.template(block.billing_account_name),
        enrollment_account_name: build.template(block.enrollment_account_name),
        id: build.template(std.get(block, 'id', null)),
      }),
      billing_account_name: resource.field(self._.blocks, 'billing_account_name'),
      enrollment_account_name: resource.field(self._.blocks, 'enrollment_account_name'),
      id: resource.field(self._.blocks, 'id'),
    },
    billing_mca_account_scope(name, block): {
      local resource = blockType.resource('azurerm_billing_mca_account_scope', name),
      _: resource._(block, {
        billing_account_name: build.template(block.billing_account_name),
        billing_profile_name: build.template(block.billing_profile_name),
        id: build.template(std.get(block, 'id', null)),
        invoice_section_name: build.template(block.invoice_section_name),
      }),
      billing_account_name: resource.field(self._.blocks, 'billing_account_name'),
      billing_profile_name: resource.field(self._.blocks, 'billing_profile_name'),
      id: resource.field(self._.blocks, 'id'),
      invoice_section_name: resource.field(self._.blocks, 'invoice_section_name'),
    },
    billing_mpa_account_scope(name, block): {
      local resource = blockType.resource('azurerm_billing_mpa_account_scope', name),
      _: resource._(block, {
        billing_account_name: build.template(block.billing_account_name),
        customer_name: build.template(block.customer_name),
        id: build.template(std.get(block, 'id', null)),
      }),
      billing_account_name: resource.field(self._.blocks, 'billing_account_name'),
      customer_name: resource.field(self._.blocks, 'customer_name'),
      id: resource.field(self._.blocks, 'id'),
    },
    blueprint_definition(name, block): {
      local resource = blockType.resource('azurerm_blueprint_definition', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        display_name: build.template(std.get(block, 'display_name', null)),
        id: build.template(std.get(block, 'id', null)),
        last_modified: build.template(std.get(block, 'last_modified', null)),
        name: build.template(block.name),
        scope_id: build.template(block.scope_id),
        target_scope: build.template(std.get(block, 'target_scope', null)),
        time_created: build.template(std.get(block, 'time_created', null)),
        versions: build.template(std.get(block, 'versions', null)),
      }),
      description: resource.field(self._.blocks, 'description'),
      display_name: resource.field(self._.blocks, 'display_name'),
      id: resource.field(self._.blocks, 'id'),
      last_modified: resource.field(self._.blocks, 'last_modified'),
      name: resource.field(self._.blocks, 'name'),
      scope_id: resource.field(self._.blocks, 'scope_id'),
      target_scope: resource.field(self._.blocks, 'target_scope'),
      time_created: resource.field(self._.blocks, 'time_created'),
      versions: resource.field(self._.blocks, 'versions'),
    },
    blueprint_published_version(name, block): {
      local resource = blockType.resource('azurerm_blueprint_published_version', name),
      _: resource._(block, {
        blueprint_name: build.template(block.blueprint_name),
        description: build.template(std.get(block, 'description', null)),
        display_name: build.template(std.get(block, 'display_name', null)),
        id: build.template(std.get(block, 'id', null)),
        last_modified: build.template(std.get(block, 'last_modified', null)),
        scope_id: build.template(block.scope_id),
        target_scope: build.template(std.get(block, 'target_scope', null)),
        time_created: build.template(std.get(block, 'time_created', null)),
        type: build.template(std.get(block, 'type', null)),
        version: build.template(block.version),
      }),
      blueprint_name: resource.field(self._.blocks, 'blueprint_name'),
      description: resource.field(self._.blocks, 'description'),
      display_name: resource.field(self._.blocks, 'display_name'),
      id: resource.field(self._.blocks, 'id'),
      last_modified: resource.field(self._.blocks, 'last_modified'),
      scope_id: resource.field(self._.blocks, 'scope_id'),
      target_scope: resource.field(self._.blocks, 'target_scope'),
      time_created: resource.field(self._.blocks, 'time_created'),
      type: resource.field(self._.blocks, 'type'),
      version: resource.field(self._.blocks, 'version'),
    },
    cdn_frontdoor_custom_domain(name, block): {
      local resource = blockType.resource('azurerm_cdn_frontdoor_custom_domain', name),
      _: resource._(block, {
        cdn_frontdoor_profile_id: build.template(std.get(block, 'cdn_frontdoor_profile_id', null)),
        dns_zone_id: build.template(std.get(block, 'dns_zone_id', null)),
        expiration_date: build.template(std.get(block, 'expiration_date', null)),
        host_name: build.template(std.get(block, 'host_name', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        profile_name: build.template(block.profile_name),
        resource_group_name: build.template(block.resource_group_name),
        tls: build.template(std.get(block, 'tls', null)),
        validation_token: build.template(std.get(block, 'validation_token', null)),
      }),
      cdn_frontdoor_profile_id: resource.field(self._.blocks, 'cdn_frontdoor_profile_id'),
      dns_zone_id: resource.field(self._.blocks, 'dns_zone_id'),
      expiration_date: resource.field(self._.blocks, 'expiration_date'),
      host_name: resource.field(self._.blocks, 'host_name'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      profile_name: resource.field(self._.blocks, 'profile_name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tls: resource.field(self._.blocks, 'tls'),
      validation_token: resource.field(self._.blocks, 'validation_token'),
    },
    cdn_frontdoor_endpoint(name, block): {
      local resource = blockType.resource('azurerm_cdn_frontdoor_endpoint', name),
      _: resource._(block, {
        enabled: build.template(std.get(block, 'enabled', null)),
        host_name: build.template(std.get(block, 'host_name', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        profile_name: build.template(block.profile_name),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      enabled: resource.field(self._.blocks, 'enabled'),
      host_name: resource.field(self._.blocks, 'host_name'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      profile_name: resource.field(self._.blocks, 'profile_name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    cdn_frontdoor_firewall_policy(name, block): {
      local resource = blockType.resource('azurerm_cdn_frontdoor_firewall_policy', name),
      _: resource._(block, {
        enabled: build.template(std.get(block, 'enabled', null)),
        frontend_endpoint_ids: build.template(std.get(block, 'frontend_endpoint_ids', null)),
        id: build.template(std.get(block, 'id', null)),
        js_challenge_cookie_expiration_in_minutes: build.template(std.get(block, 'js_challenge_cookie_expiration_in_minutes', null)),
        mode: build.template(std.get(block, 'mode', null)),
        name: build.template(block.name),
        redirect_url: build.template(std.get(block, 'redirect_url', null)),
        resource_group_name: build.template(block.resource_group_name),
        sku_name: build.template(std.get(block, 'sku_name', null)),
      }),
      enabled: resource.field(self._.blocks, 'enabled'),
      frontend_endpoint_ids: resource.field(self._.blocks, 'frontend_endpoint_ids'),
      id: resource.field(self._.blocks, 'id'),
      js_challenge_cookie_expiration_in_minutes: resource.field(self._.blocks, 'js_challenge_cookie_expiration_in_minutes'),
      mode: resource.field(self._.blocks, 'mode'),
      name: resource.field(self._.blocks, 'name'),
      redirect_url: resource.field(self._.blocks, 'redirect_url'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      sku_name: resource.field(self._.blocks, 'sku_name'),
    },
    cdn_frontdoor_origin_group(name, block): {
      local resource = blockType.resource('azurerm_cdn_frontdoor_origin_group', name),
      _: resource._(block, {
        cdn_frontdoor_profile_id: build.template(std.get(block, 'cdn_frontdoor_profile_id', null)),
        health_probe: build.template(std.get(block, 'health_probe', null)),
        id: build.template(std.get(block, 'id', null)),
        load_balancing: build.template(std.get(block, 'load_balancing', null)),
        name: build.template(block.name),
        profile_name: build.template(block.profile_name),
        resource_group_name: build.template(block.resource_group_name),
        restore_traffic_time_to_healed_or_new_endpoint_in_minutes: build.template(std.get(block, 'restore_traffic_time_to_healed_or_new_endpoint_in_minutes', null)),
        session_affinity_enabled: build.template(std.get(block, 'session_affinity_enabled', null)),
      }),
      cdn_frontdoor_profile_id: resource.field(self._.blocks, 'cdn_frontdoor_profile_id'),
      health_probe: resource.field(self._.blocks, 'health_probe'),
      id: resource.field(self._.blocks, 'id'),
      load_balancing: resource.field(self._.blocks, 'load_balancing'),
      name: resource.field(self._.blocks, 'name'),
      profile_name: resource.field(self._.blocks, 'profile_name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      restore_traffic_time_to_healed_or_new_endpoint_in_minutes: resource.field(self._.blocks, 'restore_traffic_time_to_healed_or_new_endpoint_in_minutes'),
      session_affinity_enabled: resource.field(self._.blocks, 'session_affinity_enabled'),
    },
    cdn_frontdoor_profile(name, block): {
      local resource = blockType.resource('azurerm_cdn_frontdoor_profile', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        resource_guid: build.template(std.get(block, 'resource_guid', null)),
        response_timeout_seconds: build.template(std.get(block, 'response_timeout_seconds', null)),
        sku_name: build.template(std.get(block, 'sku_name', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      resource_guid: resource.field(self._.blocks, 'resource_guid'),
      response_timeout_seconds: resource.field(self._.blocks, 'response_timeout_seconds'),
      sku_name: resource.field(self._.blocks, 'sku_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    cdn_frontdoor_rule_set(name, block): {
      local resource = blockType.resource('azurerm_cdn_frontdoor_rule_set', name),
      _: resource._(block, {
        cdn_frontdoor_profile_id: build.template(std.get(block, 'cdn_frontdoor_profile_id', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        profile_name: build.template(block.profile_name),
        resource_group_name: build.template(block.resource_group_name),
      }),
      cdn_frontdoor_profile_id: resource.field(self._.blocks, 'cdn_frontdoor_profile_id'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      profile_name: resource.field(self._.blocks, 'profile_name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
    },
    cdn_frontdoor_secret(name, block): {
      local resource = blockType.resource('azurerm_cdn_frontdoor_secret', name),
      _: resource._(block, {
        cdn_frontdoor_profile_id: build.template(std.get(block, 'cdn_frontdoor_profile_id', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        profile_name: build.template(block.profile_name),
        resource_group_name: build.template(block.resource_group_name),
        secret: build.template(std.get(block, 'secret', null)),
      }),
      cdn_frontdoor_profile_id: resource.field(self._.blocks, 'cdn_frontdoor_profile_id'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      profile_name: resource.field(self._.blocks, 'profile_name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      secret: resource.field(self._.blocks, 'secret'),
    },
    cdn_profile(name, block): {
      local resource = blockType.resource('azurerm_cdn_profile', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        sku: build.template(std.get(block, 'sku', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      sku: resource.field(self._.blocks, 'sku'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    client_config(name, block): {
      local resource = blockType.resource('azurerm_client_config', name),
      _: resource._(block, {
        client_id: build.template(std.get(block, 'client_id', null)),
        id: build.template(std.get(block, 'id', null)),
        object_id: build.template(std.get(block, 'object_id', null)),
        subscription_id: build.template(std.get(block, 'subscription_id', null)),
        tenant_id: build.template(std.get(block, 'tenant_id', null)),
      }),
      client_id: resource.field(self._.blocks, 'client_id'),
      id: resource.field(self._.blocks, 'id'),
      object_id: resource.field(self._.blocks, 'object_id'),
      subscription_id: resource.field(self._.blocks, 'subscription_id'),
      tenant_id: resource.field(self._.blocks, 'tenant_id'),
    },
    cognitive_account(name, block): {
      local resource = blockType.resource('azurerm_cognitive_account', name),
      _: resource._(block, {
        endpoint: build.template(std.get(block, 'endpoint', null)),
        id: build.template(std.get(block, 'id', null)),
        identity: build.template(std.get(block, 'identity', null)),
        kind: build.template(std.get(block, 'kind', null)),
        local_auth_enabled: build.template(std.get(block, 'local_auth_enabled', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        primary_access_key: build.template(std.get(block, 'primary_access_key', null)),
        qna_runtime_endpoint: build.template(std.get(block, 'qna_runtime_endpoint', null)),
        resource_group_name: build.template(block.resource_group_name),
        secondary_access_key: build.template(std.get(block, 'secondary_access_key', null)),
        sku_name: build.template(std.get(block, 'sku_name', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      endpoint: resource.field(self._.blocks, 'endpoint'),
      id: resource.field(self._.blocks, 'id'),
      identity: resource.field(self._.blocks, 'identity'),
      kind: resource.field(self._.blocks, 'kind'),
      local_auth_enabled: resource.field(self._.blocks, 'local_auth_enabled'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      primary_access_key: resource.field(self._.blocks, 'primary_access_key'),
      qna_runtime_endpoint: resource.field(self._.blocks, 'qna_runtime_endpoint'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      secondary_access_key: resource.field(self._.blocks, 'secondary_access_key'),
      sku_name: resource.field(self._.blocks, 'sku_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    communication_service(name, block): {
      local resource = blockType.resource('azurerm_communication_service', name),
      _: resource._(block, {
        data_location: build.template(std.get(block, 'data_location', null)),
        hostname: build.template(std.get(block, 'hostname', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        primary_connection_string: build.template(std.get(block, 'primary_connection_string', null)),
        primary_key: build.template(std.get(block, 'primary_key', null)),
        resource_group_name: build.template(block.resource_group_name),
        secondary_connection_string: build.template(std.get(block, 'secondary_connection_string', null)),
        secondary_key: build.template(std.get(block, 'secondary_key', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      data_location: resource.field(self._.blocks, 'data_location'),
      hostname: resource.field(self._.blocks, 'hostname'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      primary_connection_string: resource.field(self._.blocks, 'primary_connection_string'),
      primary_key: resource.field(self._.blocks, 'primary_key'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      secondary_connection_string: resource.field(self._.blocks, 'secondary_connection_string'),
      secondary_key: resource.field(self._.blocks, 'secondary_key'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    confidential_ledger(name, block): {
      local resource = blockType.resource('azurerm_confidential_ledger', name),
      _: resource._(block, {
        azuread_based_service_principal: build.template(std.get(block, 'azuread_based_service_principal', null)),
        certificate_based_security_principal: build.template(std.get(block, 'certificate_based_security_principal', null)),
        id: build.template(std.get(block, 'id', null)),
        identity_service_endpoint: build.template(std.get(block, 'identity_service_endpoint', null)),
        ledger_endpoint: build.template(std.get(block, 'ledger_endpoint', null)),
        ledger_type: build.template(std.get(block, 'ledger_type', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      azuread_based_service_principal: resource.field(self._.blocks, 'azuread_based_service_principal'),
      certificate_based_security_principal: resource.field(self._.blocks, 'certificate_based_security_principal'),
      id: resource.field(self._.blocks, 'id'),
      identity_service_endpoint: resource.field(self._.blocks, 'identity_service_endpoint'),
      ledger_endpoint: resource.field(self._.blocks, 'ledger_endpoint'),
      ledger_type: resource.field(self._.blocks, 'ledger_type'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    consumption_budget_resource_group(name, block): {
      local resource = blockType.resource('azurerm_consumption_budget_resource_group', name),
      _: resource._(block, {
        amount: build.template(std.get(block, 'amount', null)),
        filter: build.template(std.get(block, 'filter', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        notification: build.template(std.get(block, 'notification', null)),
        resource_group_id: build.template(block.resource_group_id),
        time_grain: build.template(std.get(block, 'time_grain', null)),
        time_period: build.template(std.get(block, 'time_period', null)),
      }),
      amount: resource.field(self._.blocks, 'amount'),
      filter: resource.field(self._.blocks, 'filter'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      notification: resource.field(self._.blocks, 'notification'),
      resource_group_id: resource.field(self._.blocks, 'resource_group_id'),
      time_grain: resource.field(self._.blocks, 'time_grain'),
      time_period: resource.field(self._.blocks, 'time_period'),
    },
    consumption_budget_subscription(name, block): {
      local resource = blockType.resource('azurerm_consumption_budget_subscription', name),
      _: resource._(block, {
        amount: build.template(std.get(block, 'amount', null)),
        filter: build.template(std.get(block, 'filter', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        notification: build.template(std.get(block, 'notification', null)),
        subscription_id: build.template(block.subscription_id),
        time_grain: build.template(std.get(block, 'time_grain', null)),
        time_period: build.template(std.get(block, 'time_period', null)),
      }),
      amount: resource.field(self._.blocks, 'amount'),
      filter: resource.field(self._.blocks, 'filter'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      notification: resource.field(self._.blocks, 'notification'),
      subscription_id: resource.field(self._.blocks, 'subscription_id'),
      time_grain: resource.field(self._.blocks, 'time_grain'),
      time_period: resource.field(self._.blocks, 'time_period'),
    },
    container_app(name, block): {
      local resource = blockType.resource('azurerm_container_app', name),
      _: resource._(block, {
        container_app_environment_id: build.template(std.get(block, 'container_app_environment_id', null)),
        custom_domain_verification_id: build.template(std.get(block, 'custom_domain_verification_id', null)),
        dapr: build.template(std.get(block, 'dapr', null)),
        id: build.template(std.get(block, 'id', null)),
        identity: build.template(std.get(block, 'identity', null)),
        ingress: build.template(std.get(block, 'ingress', null)),
        latest_revision_fqdn: build.template(std.get(block, 'latest_revision_fqdn', null)),
        latest_revision_name: build.template(std.get(block, 'latest_revision_name', null)),
        location: build.template(std.get(block, 'location', null)),
        max_inactive_revisions: build.template(std.get(block, 'max_inactive_revisions', null)),
        name: build.template(block.name),
        outbound_ip_addresses: build.template(std.get(block, 'outbound_ip_addresses', null)),
        registry: build.template(std.get(block, 'registry', null)),
        resource_group_name: build.template(block.resource_group_name),
        revision_mode: build.template(std.get(block, 'revision_mode', null)),
        secret: build.template(std.get(block, 'secret', null)),
        tags: build.template(std.get(block, 'tags', null)),
        template: build.template(std.get(block, 'template', null)),
        workload_profile_name: build.template(std.get(block, 'workload_profile_name', null)),
      }),
      container_app_environment_id: resource.field(self._.blocks, 'container_app_environment_id'),
      custom_domain_verification_id: resource.field(self._.blocks, 'custom_domain_verification_id'),
      dapr: resource.field(self._.blocks, 'dapr'),
      id: resource.field(self._.blocks, 'id'),
      identity: resource.field(self._.blocks, 'identity'),
      ingress: resource.field(self._.blocks, 'ingress'),
      latest_revision_fqdn: resource.field(self._.blocks, 'latest_revision_fqdn'),
      latest_revision_name: resource.field(self._.blocks, 'latest_revision_name'),
      location: resource.field(self._.blocks, 'location'),
      max_inactive_revisions: resource.field(self._.blocks, 'max_inactive_revisions'),
      name: resource.field(self._.blocks, 'name'),
      outbound_ip_addresses: resource.field(self._.blocks, 'outbound_ip_addresses'),
      registry: resource.field(self._.blocks, 'registry'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      revision_mode: resource.field(self._.blocks, 'revision_mode'),
      secret: resource.field(self._.blocks, 'secret'),
      tags: resource.field(self._.blocks, 'tags'),
      template: resource.field(self._.blocks, 'template'),
      workload_profile_name: resource.field(self._.blocks, 'workload_profile_name'),
    },
    container_app_environment(name, block): {
      local resource = blockType.resource('azurerm_container_app_environment', name),
      _: resource._(block, {
        custom_domain_verification_id: build.template(std.get(block, 'custom_domain_verification_id', null)),
        default_domain: build.template(std.get(block, 'default_domain', null)),
        docker_bridge_cidr: build.template(std.get(block, 'docker_bridge_cidr', null)),
        id: build.template(std.get(block, 'id', null)),
        infrastructure_subnet_id: build.template(std.get(block, 'infrastructure_subnet_id', null)),
        internal_load_balancer_enabled: build.template(std.get(block, 'internal_load_balancer_enabled', null)),
        location: build.template(std.get(block, 'location', null)),
        log_analytics_workspace_name: build.template(std.get(block, 'log_analytics_workspace_name', null)),
        name: build.template(block.name),
        platform_reserved_cidr: build.template(std.get(block, 'platform_reserved_cidr', null)),
        platform_reserved_dns_ip_address: build.template(std.get(block, 'platform_reserved_dns_ip_address', null)),
        resource_group_name: build.template(block.resource_group_name),
        static_ip_address: build.template(std.get(block, 'static_ip_address', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      custom_domain_verification_id: resource.field(self._.blocks, 'custom_domain_verification_id'),
      default_domain: resource.field(self._.blocks, 'default_domain'),
      docker_bridge_cidr: resource.field(self._.blocks, 'docker_bridge_cidr'),
      id: resource.field(self._.blocks, 'id'),
      infrastructure_subnet_id: resource.field(self._.blocks, 'infrastructure_subnet_id'),
      internal_load_balancer_enabled: resource.field(self._.blocks, 'internal_load_balancer_enabled'),
      location: resource.field(self._.blocks, 'location'),
      log_analytics_workspace_name: resource.field(self._.blocks, 'log_analytics_workspace_name'),
      name: resource.field(self._.blocks, 'name'),
      platform_reserved_cidr: resource.field(self._.blocks, 'platform_reserved_cidr'),
      platform_reserved_dns_ip_address: resource.field(self._.blocks, 'platform_reserved_dns_ip_address'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      static_ip_address: resource.field(self._.blocks, 'static_ip_address'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    container_app_environment_certificate(name, block): {
      local resource = blockType.resource('azurerm_container_app_environment_certificate', name),
      _: resource._(block, {
        container_app_environment_id: build.template(block.container_app_environment_id),
        expiration_date: build.template(std.get(block, 'expiration_date', null)),
        id: build.template(std.get(block, 'id', null)),
        issue_date: build.template(std.get(block, 'issue_date', null)),
        issuer: build.template(std.get(block, 'issuer', null)),
        name: build.template(block.name),
        subject_name: build.template(std.get(block, 'subject_name', null)),
        tags: build.template(std.get(block, 'tags', null)),
        thumbprint: build.template(std.get(block, 'thumbprint', null)),
      }),
      container_app_environment_id: resource.field(self._.blocks, 'container_app_environment_id'),
      expiration_date: resource.field(self._.blocks, 'expiration_date'),
      id: resource.field(self._.blocks, 'id'),
      issue_date: resource.field(self._.blocks, 'issue_date'),
      issuer: resource.field(self._.blocks, 'issuer'),
      name: resource.field(self._.blocks, 'name'),
      subject_name: resource.field(self._.blocks, 'subject_name'),
      tags: resource.field(self._.blocks, 'tags'),
      thumbprint: resource.field(self._.blocks, 'thumbprint'),
    },
    container_group(name, block): {
      local resource = blockType.resource('azurerm_container_group', name),
      _: resource._(block, {
        fqdn: build.template(std.get(block, 'fqdn', null)),
        id: build.template(std.get(block, 'id', null)),
        identity: build.template(std.get(block, 'identity', null)),
        ip_address: build.template(std.get(block, 'ip_address', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        subnet_ids: build.template(std.get(block, 'subnet_ids', null)),
        tags: build.template(std.get(block, 'tags', null)),
        zones: build.template(std.get(block, 'zones', null)),
      }),
      fqdn: resource.field(self._.blocks, 'fqdn'),
      id: resource.field(self._.blocks, 'id'),
      identity: resource.field(self._.blocks, 'identity'),
      ip_address: resource.field(self._.blocks, 'ip_address'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      subnet_ids: resource.field(self._.blocks, 'subnet_ids'),
      tags: resource.field(self._.blocks, 'tags'),
      zones: resource.field(self._.blocks, 'zones'),
    },
    container_registry(name, block): {
      local resource = blockType.resource('azurerm_container_registry', name),
      _: resource._(block, {
        admin_enabled: build.template(std.get(block, 'admin_enabled', null)),
        admin_password: build.template(std.get(block, 'admin_password', null)),
        admin_username: build.template(std.get(block, 'admin_username', null)),
        data_endpoint_enabled: build.template(std.get(block, 'data_endpoint_enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        login_server: build.template(std.get(block, 'login_server', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        sku: build.template(std.get(block, 'sku', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      admin_enabled: resource.field(self._.blocks, 'admin_enabled'),
      admin_password: resource.field(self._.blocks, 'admin_password'),
      admin_username: resource.field(self._.blocks, 'admin_username'),
      data_endpoint_enabled: resource.field(self._.blocks, 'data_endpoint_enabled'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      login_server: resource.field(self._.blocks, 'login_server'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      sku: resource.field(self._.blocks, 'sku'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    container_registry_cache_rule(name, block): {
      local resource = blockType.resource('azurerm_container_registry_cache_rule', name),
      _: resource._(block, {
        container_registry_id: build.template(block.container_registry_id),
        credential_set_id: build.template(std.get(block, 'credential_set_id', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        source_repo: build.template(std.get(block, 'source_repo', null)),
        target_repo: build.template(std.get(block, 'target_repo', null)),
      }),
      container_registry_id: resource.field(self._.blocks, 'container_registry_id'),
      credential_set_id: resource.field(self._.blocks, 'credential_set_id'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      source_repo: resource.field(self._.blocks, 'source_repo'),
      target_repo: resource.field(self._.blocks, 'target_repo'),
    },
    container_registry_scope_map(name, block): {
      local resource = blockType.resource('azurerm_container_registry_scope_map', name),
      _: resource._(block, {
        actions: build.template(std.get(block, 'actions', null)),
        container_registry_name: build.template(block.container_registry_name),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
      }),
      actions: resource.field(self._.blocks, 'actions'),
      container_registry_name: resource.field(self._.blocks, 'container_registry_name'),
      description: resource.field(self._.blocks, 'description'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
    },
    container_registry_token(name, block): {
      local resource = blockType.resource('azurerm_container_registry_token', name),
      _: resource._(block, {
        container_registry_name: build.template(block.container_registry_name),
        enabled: build.template(std.get(block, 'enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        scope_map_id: build.template(std.get(block, 'scope_map_id', null)),
      }),
      container_registry_name: resource.field(self._.blocks, 'container_registry_name'),
      enabled: resource.field(self._.blocks, 'enabled'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      scope_map_id: resource.field(self._.blocks, 'scope_map_id'),
    },
    cosmosdb_account(name, block): {
      local resource = blockType.resource('azurerm_cosmosdb_account', name),
      _: resource._(block, {
        automatic_failover_enabled: build.template(std.get(block, 'automatic_failover_enabled', null)),
        capabilities: build.template(std.get(block, 'capabilities', null)),
        consistency_policy: build.template(std.get(block, 'consistency_policy', null)),
        endpoint: build.template(std.get(block, 'endpoint', null)),
        free_tier_enabled: build.template(std.get(block, 'free_tier_enabled', null)),
        geo_location: build.template(std.get(block, 'geo_location', null)),
        id: build.template(std.get(block, 'id', null)),
        ip_range_filter: build.template(std.get(block, 'ip_range_filter', null)),
        is_virtual_network_filter_enabled: build.template(std.get(block, 'is_virtual_network_filter_enabled', null)),
        key_vault_key_id: build.template(std.get(block, 'key_vault_key_id', null)),
        kind: build.template(std.get(block, 'kind', null)),
        location: build.template(std.get(block, 'location', null)),
        multiple_write_locations_enabled: build.template(std.get(block, 'multiple_write_locations_enabled', null)),
        name: build.template(block.name),
        offer_type: build.template(std.get(block, 'offer_type', null)),
        primary_key: build.template(std.get(block, 'primary_key', null)),
        primary_mongodb_connection_string: build.template(std.get(block, 'primary_mongodb_connection_string', null)),
        primary_readonly_key: build.template(std.get(block, 'primary_readonly_key', null)),
        primary_readonly_mongodb_connection_string: build.template(std.get(block, 'primary_readonly_mongodb_connection_string', null)),
        primary_readonly_sql_connection_string: build.template(std.get(block, 'primary_readonly_sql_connection_string', null)),
        primary_sql_connection_string: build.template(std.get(block, 'primary_sql_connection_string', null)),
        read_endpoints: build.template(std.get(block, 'read_endpoints', null)),
        resource_group_name: build.template(block.resource_group_name),
        secondary_key: build.template(std.get(block, 'secondary_key', null)),
        secondary_mongodb_connection_string: build.template(std.get(block, 'secondary_mongodb_connection_string', null)),
        secondary_readonly_key: build.template(std.get(block, 'secondary_readonly_key', null)),
        secondary_readonly_mongodb_connection_string: build.template(std.get(block, 'secondary_readonly_mongodb_connection_string', null)),
        secondary_readonly_sql_connection_string: build.template(std.get(block, 'secondary_readonly_sql_connection_string', null)),
        secondary_sql_connection_string: build.template(std.get(block, 'secondary_sql_connection_string', null)),
        tags: build.template(std.get(block, 'tags', null)),
        virtual_network_rule: build.template(std.get(block, 'virtual_network_rule', null)),
        write_endpoints: build.template(std.get(block, 'write_endpoints', null)),
      }),
      automatic_failover_enabled: resource.field(self._.blocks, 'automatic_failover_enabled'),
      capabilities: resource.field(self._.blocks, 'capabilities'),
      consistency_policy: resource.field(self._.blocks, 'consistency_policy'),
      endpoint: resource.field(self._.blocks, 'endpoint'),
      free_tier_enabled: resource.field(self._.blocks, 'free_tier_enabled'),
      geo_location: resource.field(self._.blocks, 'geo_location'),
      id: resource.field(self._.blocks, 'id'),
      ip_range_filter: resource.field(self._.blocks, 'ip_range_filter'),
      is_virtual_network_filter_enabled: resource.field(self._.blocks, 'is_virtual_network_filter_enabled'),
      key_vault_key_id: resource.field(self._.blocks, 'key_vault_key_id'),
      kind: resource.field(self._.blocks, 'kind'),
      location: resource.field(self._.blocks, 'location'),
      multiple_write_locations_enabled: resource.field(self._.blocks, 'multiple_write_locations_enabled'),
      name: resource.field(self._.blocks, 'name'),
      offer_type: resource.field(self._.blocks, 'offer_type'),
      primary_key: resource.field(self._.blocks, 'primary_key'),
      primary_mongodb_connection_string: resource.field(self._.blocks, 'primary_mongodb_connection_string'),
      primary_readonly_key: resource.field(self._.blocks, 'primary_readonly_key'),
      primary_readonly_mongodb_connection_string: resource.field(self._.blocks, 'primary_readonly_mongodb_connection_string'),
      primary_readonly_sql_connection_string: resource.field(self._.blocks, 'primary_readonly_sql_connection_string'),
      primary_sql_connection_string: resource.field(self._.blocks, 'primary_sql_connection_string'),
      read_endpoints: resource.field(self._.blocks, 'read_endpoints'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      secondary_key: resource.field(self._.blocks, 'secondary_key'),
      secondary_mongodb_connection_string: resource.field(self._.blocks, 'secondary_mongodb_connection_string'),
      secondary_readonly_key: resource.field(self._.blocks, 'secondary_readonly_key'),
      secondary_readonly_mongodb_connection_string: resource.field(self._.blocks, 'secondary_readonly_mongodb_connection_string'),
      secondary_readonly_sql_connection_string: resource.field(self._.blocks, 'secondary_readonly_sql_connection_string'),
      secondary_sql_connection_string: resource.field(self._.blocks, 'secondary_sql_connection_string'),
      tags: resource.field(self._.blocks, 'tags'),
      virtual_network_rule: resource.field(self._.blocks, 'virtual_network_rule'),
      write_endpoints: resource.field(self._.blocks, 'write_endpoints'),
    },
    cosmosdb_mongo_database(name, block): {
      local resource = blockType.resource('azurerm_cosmosdb_mongo_database', name),
      _: resource._(block, {
        account_name: build.template(block.account_name),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      account_name: resource.field(self._.blocks, 'account_name'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    cosmosdb_restorable_database_accounts(name, block): {
      local resource = blockType.resource('azurerm_cosmosdb_restorable_database_accounts', name),
      _: resource._(block, {
        accounts: build.template(std.get(block, 'accounts', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
      }),
      accounts: resource.field(self._.blocks, 'accounts'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
    },
    cosmosdb_sql_database(name, block): {
      local resource = blockType.resource('azurerm_cosmosdb_sql_database', name),
      _: resource._(block, {
        account_name: build.template(block.account_name),
        autoscale_settings: build.template(std.get(block, 'autoscale_settings', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        throughput: build.template(std.get(block, 'throughput', null)),
      }),
      account_name: resource.field(self._.blocks, 'account_name'),
      autoscale_settings: resource.field(self._.blocks, 'autoscale_settings'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      throughput: resource.field(self._.blocks, 'throughput'),
    },
    cosmosdb_sql_role_definition(name, block): {
      local resource = blockType.resource('azurerm_cosmosdb_sql_role_definition', name),
      _: resource._(block, {
        account_name: build.template(block.account_name),
        assignable_scopes: build.template(std.get(block, 'assignable_scopes', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        permissions: build.template(std.get(block, 'permissions', null)),
        resource_group_name: build.template(block.resource_group_name),
        role_definition_id: build.template(block.role_definition_id),
        type: build.template(std.get(block, 'type', null)),
      }),
      account_name: resource.field(self._.blocks, 'account_name'),
      assignable_scopes: resource.field(self._.blocks, 'assignable_scopes'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      permissions: resource.field(self._.blocks, 'permissions'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      role_definition_id: resource.field(self._.blocks, 'role_definition_id'),
      type: resource.field(self._.blocks, 'type'),
    },
    dashboard_grafana(name, block): {
      local resource = blockType.resource('azurerm_dashboard_grafana', name),
      _: resource._(block, {
        api_key_enabled: build.template(std.get(block, 'api_key_enabled', null)),
        auto_generated_domain_name_label_scope: build.template(std.get(block, 'auto_generated_domain_name_label_scope', null)),
        azure_monitor_workspace_integrations: build.template(std.get(block, 'azure_monitor_workspace_integrations', null)),
        deterministic_outbound_ip_enabled: build.template(std.get(block, 'deterministic_outbound_ip_enabled', null)),
        endpoint: build.template(std.get(block, 'endpoint', null)),
        grafana_major_version: build.template(std.get(block, 'grafana_major_version', null)),
        grafana_version: build.template(std.get(block, 'grafana_version', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        outbound_ips: build.template(std.get(block, 'outbound_ips', null)),
        public_network_access_enabled: build.template(std.get(block, 'public_network_access_enabled', null)),
        resource_group_name: build.template(block.resource_group_name),
        sku: build.template(std.get(block, 'sku', null)),
        tags: build.template(std.get(block, 'tags', null)),
        zone_redundancy_enabled: build.template(std.get(block, 'zone_redundancy_enabled', null)),
      }),
      api_key_enabled: resource.field(self._.blocks, 'api_key_enabled'),
      auto_generated_domain_name_label_scope: resource.field(self._.blocks, 'auto_generated_domain_name_label_scope'),
      azure_monitor_workspace_integrations: resource.field(self._.blocks, 'azure_monitor_workspace_integrations'),
      deterministic_outbound_ip_enabled: resource.field(self._.blocks, 'deterministic_outbound_ip_enabled'),
      endpoint: resource.field(self._.blocks, 'endpoint'),
      grafana_major_version: resource.field(self._.blocks, 'grafana_major_version'),
      grafana_version: resource.field(self._.blocks, 'grafana_version'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      outbound_ips: resource.field(self._.blocks, 'outbound_ips'),
      public_network_access_enabled: resource.field(self._.blocks, 'public_network_access_enabled'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      sku: resource.field(self._.blocks, 'sku'),
      tags: resource.field(self._.blocks, 'tags'),
      zone_redundancy_enabled: resource.field(self._.blocks, 'zone_redundancy_enabled'),
    },
    data_factory(name, block): {
      local resource = blockType.resource('azurerm_data_factory', name),
      _: resource._(block, {
        github_configuration: build.template(std.get(block, 'github_configuration', null)),
        id: build.template(std.get(block, 'id', null)),
        identity: build.template(std.get(block, 'identity', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
        vsts_configuration: build.template(std.get(block, 'vsts_configuration', null)),
      }),
      github_configuration: resource.field(self._.blocks, 'github_configuration'),
      id: resource.field(self._.blocks, 'id'),
      identity: resource.field(self._.blocks, 'identity'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
      vsts_configuration: resource.field(self._.blocks, 'vsts_configuration'),
    },
    data_factory_trigger_schedule(name, block): {
      local resource = blockType.resource('azurerm_data_factory_trigger_schedule', name),
      _: resource._(block, {
        activated: build.template(std.get(block, 'activated', null)),
        annotations: build.template(std.get(block, 'annotations', null)),
        data_factory_id: build.template(block.data_factory_id),
        description: build.template(std.get(block, 'description', null)),
        end_time: build.template(std.get(block, 'end_time', null)),
        frequency: build.template(std.get(block, 'frequency', null)),
        id: build.template(std.get(block, 'id', null)),
        interval: build.template(std.get(block, 'interval', null)),
        name: build.template(block.name),
        pipeline_name: build.template(std.get(block, 'pipeline_name', null)),
        schedule: build.template(std.get(block, 'schedule', null)),
        start_time: build.template(std.get(block, 'start_time', null)),
        time_zone: build.template(std.get(block, 'time_zone', null)),
      }),
      activated: resource.field(self._.blocks, 'activated'),
      annotations: resource.field(self._.blocks, 'annotations'),
      data_factory_id: resource.field(self._.blocks, 'data_factory_id'),
      description: resource.field(self._.blocks, 'description'),
      end_time: resource.field(self._.blocks, 'end_time'),
      frequency: resource.field(self._.blocks, 'frequency'),
      id: resource.field(self._.blocks, 'id'),
      interval: resource.field(self._.blocks, 'interval'),
      name: resource.field(self._.blocks, 'name'),
      pipeline_name: resource.field(self._.blocks, 'pipeline_name'),
      schedule: resource.field(self._.blocks, 'schedule'),
      start_time: resource.field(self._.blocks, 'start_time'),
      time_zone: resource.field(self._.blocks, 'time_zone'),
    },
    data_factory_trigger_schedules(name, block): {
      local resource = blockType.resource('azurerm_data_factory_trigger_schedules', name),
      _: resource._(block, {
        data_factory_id: build.template(block.data_factory_id),
        id: build.template(std.get(block, 'id', null)),
        items: build.template(std.get(block, 'items', null)),
      }),
      data_factory_id: resource.field(self._.blocks, 'data_factory_id'),
      id: resource.field(self._.blocks, 'id'),
      items: resource.field(self._.blocks, 'items'),
    },
    data_protection_backup_vault(name, block): {
      local resource = blockType.resource('azurerm_data_protection_backup_vault', name),
      _: resource._(block, {
        datastore_type: build.template(std.get(block, 'datastore_type', null)),
        id: build.template(std.get(block, 'id', null)),
        identity: build.template(std.get(block, 'identity', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        redundancy: build.template(std.get(block, 'redundancy', null)),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      datastore_type: resource.field(self._.blocks, 'datastore_type'),
      id: resource.field(self._.blocks, 'id'),
      identity: resource.field(self._.blocks, 'identity'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      redundancy: resource.field(self._.blocks, 'redundancy'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    data_share(name, block): {
      local resource = blockType.resource('azurerm_data_share', name),
      _: resource._(block, {
        account_id: build.template(block.account_id),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        kind: build.template(std.get(block, 'kind', null)),
        name: build.template(block.name),
        snapshot_schedule: build.template(std.get(block, 'snapshot_schedule', null)),
        terms: build.template(std.get(block, 'terms', null)),
      }),
      account_id: resource.field(self._.blocks, 'account_id'),
      description: resource.field(self._.blocks, 'description'),
      id: resource.field(self._.blocks, 'id'),
      kind: resource.field(self._.blocks, 'kind'),
      name: resource.field(self._.blocks, 'name'),
      snapshot_schedule: resource.field(self._.blocks, 'snapshot_schedule'),
      terms: resource.field(self._.blocks, 'terms'),
    },
    data_share_account(name, block): {
      local resource = blockType.resource('azurerm_data_share_account', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        identity: build.template(std.get(block, 'identity', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      identity: resource.field(self._.blocks, 'identity'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    data_share_dataset_blob_storage(name, block): {
      local resource = blockType.resource('azurerm_data_share_dataset_blob_storage', name),
      _: resource._(block, {
        container_name: build.template(std.get(block, 'container_name', null)),
        data_share_id: build.template(block.data_share_id),
        display_name: build.template(std.get(block, 'display_name', null)),
        file_path: build.template(std.get(block, 'file_path', null)),
        folder_path: build.template(std.get(block, 'folder_path', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        storage_account: build.template(std.get(block, 'storage_account', null)),
      }),
      container_name: resource.field(self._.blocks, 'container_name'),
      data_share_id: resource.field(self._.blocks, 'data_share_id'),
      display_name: resource.field(self._.blocks, 'display_name'),
      file_path: resource.field(self._.blocks, 'file_path'),
      folder_path: resource.field(self._.blocks, 'folder_path'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      storage_account: resource.field(self._.blocks, 'storage_account'),
    },
    data_share_dataset_data_lake_gen2(name, block): {
      local resource = blockType.resource('azurerm_data_share_dataset_data_lake_gen2', name),
      _: resource._(block, {
        display_name: build.template(std.get(block, 'display_name', null)),
        file_path: build.template(std.get(block, 'file_path', null)),
        file_system_name: build.template(std.get(block, 'file_system_name', null)),
        folder_path: build.template(std.get(block, 'folder_path', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        share_id: build.template(block.share_id),
        storage_account_id: build.template(std.get(block, 'storage_account_id', null)),
      }),
      display_name: resource.field(self._.blocks, 'display_name'),
      file_path: resource.field(self._.blocks, 'file_path'),
      file_system_name: resource.field(self._.blocks, 'file_system_name'),
      folder_path: resource.field(self._.blocks, 'folder_path'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      share_id: resource.field(self._.blocks, 'share_id'),
      storage_account_id: resource.field(self._.blocks, 'storage_account_id'),
    },
    data_share_dataset_kusto_cluster(name, block): {
      local resource = blockType.resource('azurerm_data_share_dataset_kusto_cluster', name),
      _: resource._(block, {
        display_name: build.template(std.get(block, 'display_name', null)),
        id: build.template(std.get(block, 'id', null)),
        kusto_cluster_id: build.template(std.get(block, 'kusto_cluster_id', null)),
        kusto_cluster_location: build.template(std.get(block, 'kusto_cluster_location', null)),
        name: build.template(block.name),
        share_id: build.template(block.share_id),
      }),
      display_name: resource.field(self._.blocks, 'display_name'),
      id: resource.field(self._.blocks, 'id'),
      kusto_cluster_id: resource.field(self._.blocks, 'kusto_cluster_id'),
      kusto_cluster_location: resource.field(self._.blocks, 'kusto_cluster_location'),
      name: resource.field(self._.blocks, 'name'),
      share_id: resource.field(self._.blocks, 'share_id'),
    },
    data_share_dataset_kusto_database(name, block): {
      local resource = blockType.resource('azurerm_data_share_dataset_kusto_database', name),
      _: resource._(block, {
        display_name: build.template(std.get(block, 'display_name', null)),
        id: build.template(std.get(block, 'id', null)),
        kusto_cluster_location: build.template(std.get(block, 'kusto_cluster_location', null)),
        kusto_database_id: build.template(std.get(block, 'kusto_database_id', null)),
        name: build.template(block.name),
        share_id: build.template(block.share_id),
      }),
      display_name: resource.field(self._.blocks, 'display_name'),
      id: resource.field(self._.blocks, 'id'),
      kusto_cluster_location: resource.field(self._.blocks, 'kusto_cluster_location'),
      kusto_database_id: resource.field(self._.blocks, 'kusto_database_id'),
      name: resource.field(self._.blocks, 'name'),
      share_id: resource.field(self._.blocks, 'share_id'),
    },
    database_migration_project(name, block): {
      local resource = blockType.resource('azurerm_database_migration_project', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        service_name: build.template(block.service_name),
        source_platform: build.template(std.get(block, 'source_platform', null)),
        tags: build.template(std.get(block, 'tags', null)),
        target_platform: build.template(std.get(block, 'target_platform', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      service_name: resource.field(self._.blocks, 'service_name'),
      source_platform: resource.field(self._.blocks, 'source_platform'),
      tags: resource.field(self._.blocks, 'tags'),
      target_platform: resource.field(self._.blocks, 'target_platform'),
    },
    database_migration_service(name, block): {
      local resource = blockType.resource('azurerm_database_migration_service', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        sku_name: build.template(std.get(block, 'sku_name', null)),
        subnet_id: build.template(std.get(block, 'subnet_id', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      sku_name: resource.field(self._.blocks, 'sku_name'),
      subnet_id: resource.field(self._.blocks, 'subnet_id'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    databox_edge_device(name, block): {
      local resource = blockType.resource('azurerm_databox_edge_device', name),
      _: resource._(block, {
        device_properties: build.template(std.get(block, 'device_properties', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        sku_name: build.template(std.get(block, 'sku_name', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      device_properties: resource.field(self._.blocks, 'device_properties'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      sku_name: resource.field(self._.blocks, 'sku_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    databricks_access_connector(name, block): {
      local resource = blockType.resource('azurerm_databricks_access_connector', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        identity: build.template(std.get(block, 'identity', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      identity: resource.field(self._.blocks, 'identity'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    databricks_workspace(name, block): {
      local resource = blockType.resource('azurerm_databricks_workspace', name),
      _: resource._(block, {
        enhanced_security_compliance: build.template(std.get(block, 'enhanced_security_compliance', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        managed_disk_identity: build.template(std.get(block, 'managed_disk_identity', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        sku: build.template(std.get(block, 'sku', null)),
        storage_account_identity: build.template(std.get(block, 'storage_account_identity', null)),
        tags: build.template(std.get(block, 'tags', null)),
        workspace_id: build.template(std.get(block, 'workspace_id', null)),
        workspace_url: build.template(std.get(block, 'workspace_url', null)),
      }),
      enhanced_security_compliance: resource.field(self._.blocks, 'enhanced_security_compliance'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      managed_disk_identity: resource.field(self._.blocks, 'managed_disk_identity'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      sku: resource.field(self._.blocks, 'sku'),
      storage_account_identity: resource.field(self._.blocks, 'storage_account_identity'),
      tags: resource.field(self._.blocks, 'tags'),
      workspace_id: resource.field(self._.blocks, 'workspace_id'),
      workspace_url: resource.field(self._.blocks, 'workspace_url'),
    },
    databricks_workspace_private_endpoint_connection(name, block): {
      local resource = blockType.resource('azurerm_databricks_workspace_private_endpoint_connection', name),
      _: resource._(block, {
        connections: build.template(std.get(block, 'connections', null)),
        id: build.template(std.get(block, 'id', null)),
        private_endpoint_id: build.template(block.private_endpoint_id),
        workspace_id: build.template(block.workspace_id),
      }),
      connections: resource.field(self._.blocks, 'connections'),
      id: resource.field(self._.blocks, 'id'),
      private_endpoint_id: resource.field(self._.blocks, 'private_endpoint_id'),
      workspace_id: resource.field(self._.blocks, 'workspace_id'),
    },
    dedicated_host(name, block): {
      local resource = blockType.resource('azurerm_dedicated_host', name),
      _: resource._(block, {
        dedicated_host_group_name: build.template(block.dedicated_host_group_name),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      dedicated_host_group_name: resource.field(self._.blocks, 'dedicated_host_group_name'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    dedicated_host_group(name, block): {
      local resource = blockType.resource('azurerm_dedicated_host_group', name),
      _: resource._(block, {
        automatic_placement_enabled: build.template(std.get(block, 'automatic_placement_enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        platform_fault_domain_count: build.template(std.get(block, 'platform_fault_domain_count', null)),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
        zones: build.template(std.get(block, 'zones', null)),
      }),
      automatic_placement_enabled: resource.field(self._.blocks, 'automatic_placement_enabled'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      platform_fault_domain_count: resource.field(self._.blocks, 'platform_fault_domain_count'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
      zones: resource.field(self._.blocks, 'zones'),
    },
    dev_test_lab(name, block): {
      local resource = blockType.resource('azurerm_dev_test_lab', name),
      _: resource._(block, {
        artifacts_storage_account_id: build.template(std.get(block, 'artifacts_storage_account_id', null)),
        default_premium_storage_account_id: build.template(std.get(block, 'default_premium_storage_account_id', null)),
        default_storage_account_id: build.template(std.get(block, 'default_storage_account_id', null)),
        id: build.template(std.get(block, 'id', null)),
        key_vault_id: build.template(std.get(block, 'key_vault_id', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        premium_data_disk_storage_account_id: build.template(std.get(block, 'premium_data_disk_storage_account_id', null)),
        resource_group_name: build.template(block.resource_group_name),
        storage_type: build.template(std.get(block, 'storage_type', null)),
        tags: build.template(std.get(block, 'tags', null)),
        unique_identifier: build.template(std.get(block, 'unique_identifier', null)),
      }),
      artifacts_storage_account_id: resource.field(self._.blocks, 'artifacts_storage_account_id'),
      default_premium_storage_account_id: resource.field(self._.blocks, 'default_premium_storage_account_id'),
      default_storage_account_id: resource.field(self._.blocks, 'default_storage_account_id'),
      id: resource.field(self._.blocks, 'id'),
      key_vault_id: resource.field(self._.blocks, 'key_vault_id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      premium_data_disk_storage_account_id: resource.field(self._.blocks, 'premium_data_disk_storage_account_id'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      storage_type: resource.field(self._.blocks, 'storage_type'),
      tags: resource.field(self._.blocks, 'tags'),
      unique_identifier: resource.field(self._.blocks, 'unique_identifier'),
    },
    dev_test_virtual_network(name, block): {
      local resource = blockType.resource('azurerm_dev_test_virtual_network', name),
      _: resource._(block, {
        allowed_subnets: build.template(std.get(block, 'allowed_subnets', null)),
        id: build.template(std.get(block, 'id', null)),
        lab_name: build.template(block.lab_name),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        subnet_overrides: build.template(std.get(block, 'subnet_overrides', null)),
        unique_identifier: build.template(std.get(block, 'unique_identifier', null)),
      }),
      allowed_subnets: resource.field(self._.blocks, 'allowed_subnets'),
      id: resource.field(self._.blocks, 'id'),
      lab_name: resource.field(self._.blocks, 'lab_name'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      subnet_overrides: resource.field(self._.blocks, 'subnet_overrides'),
      unique_identifier: resource.field(self._.blocks, 'unique_identifier'),
    },
    digital_twins_instance(name, block): {
      local resource = blockType.resource('azurerm_digital_twins_instance', name),
      _: resource._(block, {
        host_name: build.template(std.get(block, 'host_name', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      host_name: resource.field(self._.blocks, 'host_name'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    disk_access(name, block): {
      local resource = blockType.resource('azurerm_disk_access', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    disk_encryption_set(name, block): {
      local resource = blockType.resource('azurerm_disk_encryption_set', name),
      _: resource._(block, {
        auto_key_rotation_enabled: build.template(std.get(block, 'auto_key_rotation_enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        identity: build.template(std.get(block, 'identity', null)),
        key_vault_key_url: build.template(std.get(block, 'key_vault_key_url', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      auto_key_rotation_enabled: resource.field(self._.blocks, 'auto_key_rotation_enabled'),
      id: resource.field(self._.blocks, 'id'),
      identity: resource.field(self._.blocks, 'identity'),
      key_vault_key_url: resource.field(self._.blocks, 'key_vault_key_url'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    dns_a_record(name, block): {
      local resource = blockType.resource('azurerm_dns_a_record', name),
      _: resource._(block, {
        fqdn: build.template(std.get(block, 'fqdn', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        records: build.template(std.get(block, 'records', null)),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
        target_resource_id: build.template(std.get(block, 'target_resource_id', null)),
        ttl: build.template(std.get(block, 'ttl', null)),
        zone_name: build.template(block.zone_name),
      }),
      fqdn: resource.field(self._.blocks, 'fqdn'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      records: resource.field(self._.blocks, 'records'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
      target_resource_id: resource.field(self._.blocks, 'target_resource_id'),
      ttl: resource.field(self._.blocks, 'ttl'),
      zone_name: resource.field(self._.blocks, 'zone_name'),
    },
    dns_aaaa_record(name, block): {
      local resource = blockType.resource('azurerm_dns_aaaa_record', name),
      _: resource._(block, {
        fqdn: build.template(std.get(block, 'fqdn', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        records: build.template(std.get(block, 'records', null)),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
        target_resource_id: build.template(std.get(block, 'target_resource_id', null)),
        ttl: build.template(std.get(block, 'ttl', null)),
        zone_name: build.template(block.zone_name),
      }),
      fqdn: resource.field(self._.blocks, 'fqdn'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      records: resource.field(self._.blocks, 'records'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
      target_resource_id: resource.field(self._.blocks, 'target_resource_id'),
      ttl: resource.field(self._.blocks, 'ttl'),
      zone_name: resource.field(self._.blocks, 'zone_name'),
    },
    dns_caa_record(name, block): {
      local resource = blockType.resource('azurerm_dns_caa_record', name),
      _: resource._(block, {
        fqdn: build.template(std.get(block, 'fqdn', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        record: build.template(std.get(block, 'record', null)),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
        ttl: build.template(std.get(block, 'ttl', null)),
        zone_name: build.template(block.zone_name),
      }),
      fqdn: resource.field(self._.blocks, 'fqdn'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      record: resource.field(self._.blocks, 'record'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
      ttl: resource.field(self._.blocks, 'ttl'),
      zone_name: resource.field(self._.blocks, 'zone_name'),
    },
    dns_cname_record(name, block): {
      local resource = blockType.resource('azurerm_dns_cname_record', name),
      _: resource._(block, {
        fqdn: build.template(std.get(block, 'fqdn', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        record: build.template(std.get(block, 'record', null)),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
        target_resource_id: build.template(std.get(block, 'target_resource_id', null)),
        ttl: build.template(std.get(block, 'ttl', null)),
        zone_name: build.template(block.zone_name),
      }),
      fqdn: resource.field(self._.blocks, 'fqdn'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      record: resource.field(self._.blocks, 'record'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
      target_resource_id: resource.field(self._.blocks, 'target_resource_id'),
      ttl: resource.field(self._.blocks, 'ttl'),
      zone_name: resource.field(self._.blocks, 'zone_name'),
    },
    dns_mx_record(name, block): {
      local resource = blockType.resource('azurerm_dns_mx_record', name),
      _: resource._(block, {
        fqdn: build.template(std.get(block, 'fqdn', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        record: build.template(std.get(block, 'record', null)),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
        ttl: build.template(std.get(block, 'ttl', null)),
        zone_name: build.template(block.zone_name),
      }),
      fqdn: resource.field(self._.blocks, 'fqdn'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      record: resource.field(self._.blocks, 'record'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
      ttl: resource.field(self._.blocks, 'ttl'),
      zone_name: resource.field(self._.blocks, 'zone_name'),
    },
    dns_ns_record(name, block): {
      local resource = blockType.resource('azurerm_dns_ns_record', name),
      _: resource._(block, {
        fqdn: build.template(std.get(block, 'fqdn', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        records: build.template(std.get(block, 'records', null)),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
        ttl: build.template(std.get(block, 'ttl', null)),
        zone_name: build.template(block.zone_name),
      }),
      fqdn: resource.field(self._.blocks, 'fqdn'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      records: resource.field(self._.blocks, 'records'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
      ttl: resource.field(self._.blocks, 'ttl'),
      zone_name: resource.field(self._.blocks, 'zone_name'),
    },
    dns_ptr_record(name, block): {
      local resource = blockType.resource('azurerm_dns_ptr_record', name),
      _: resource._(block, {
        fqdn: build.template(std.get(block, 'fqdn', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        records: build.template(std.get(block, 'records', null)),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
        ttl: build.template(std.get(block, 'ttl', null)),
        zone_name: build.template(block.zone_name),
      }),
      fqdn: resource.field(self._.blocks, 'fqdn'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      records: resource.field(self._.blocks, 'records'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
      ttl: resource.field(self._.blocks, 'ttl'),
      zone_name: resource.field(self._.blocks, 'zone_name'),
    },
    dns_soa_record(name, block): {
      local resource = blockType.resource('azurerm_dns_soa_record', name),
      _: resource._(block, {
        email: build.template(std.get(block, 'email', null)),
        expire_time: build.template(std.get(block, 'expire_time', null)),
        fqdn: build.template(std.get(block, 'fqdn', null)),
        host_name: build.template(std.get(block, 'host_name', null)),
        id: build.template(std.get(block, 'id', null)),
        minimum_ttl: build.template(std.get(block, 'minimum_ttl', null)),
        name: build.template(std.get(block, 'name', null)),
        refresh_time: build.template(std.get(block, 'refresh_time', null)),
        resource_group_name: build.template(block.resource_group_name),
        retry_time: build.template(std.get(block, 'retry_time', null)),
        serial_number: build.template(std.get(block, 'serial_number', null)),
        tags: build.template(std.get(block, 'tags', null)),
        ttl: build.template(std.get(block, 'ttl', null)),
        zone_name: build.template(block.zone_name),
      }),
      email: resource.field(self._.blocks, 'email'),
      expire_time: resource.field(self._.blocks, 'expire_time'),
      fqdn: resource.field(self._.blocks, 'fqdn'),
      host_name: resource.field(self._.blocks, 'host_name'),
      id: resource.field(self._.blocks, 'id'),
      minimum_ttl: resource.field(self._.blocks, 'minimum_ttl'),
      name: resource.field(self._.blocks, 'name'),
      refresh_time: resource.field(self._.blocks, 'refresh_time'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      retry_time: resource.field(self._.blocks, 'retry_time'),
      serial_number: resource.field(self._.blocks, 'serial_number'),
      tags: resource.field(self._.blocks, 'tags'),
      ttl: resource.field(self._.blocks, 'ttl'),
      zone_name: resource.field(self._.blocks, 'zone_name'),
    },
    dns_srv_record(name, block): {
      local resource = blockType.resource('azurerm_dns_srv_record', name),
      _: resource._(block, {
        fqdn: build.template(std.get(block, 'fqdn', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        record: build.template(std.get(block, 'record', null)),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
        ttl: build.template(std.get(block, 'ttl', null)),
        zone_name: build.template(block.zone_name),
      }),
      fqdn: resource.field(self._.blocks, 'fqdn'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      record: resource.field(self._.blocks, 'record'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
      ttl: resource.field(self._.blocks, 'ttl'),
      zone_name: resource.field(self._.blocks, 'zone_name'),
    },
    dns_txt_record(name, block): {
      local resource = blockType.resource('azurerm_dns_txt_record', name),
      _: resource._(block, {
        fqdn: build.template(std.get(block, 'fqdn', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        record: build.template(std.get(block, 'record', null)),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
        ttl: build.template(std.get(block, 'ttl', null)),
        zone_name: build.template(block.zone_name),
      }),
      fqdn: resource.field(self._.blocks, 'fqdn'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      record: resource.field(self._.blocks, 'record'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
      ttl: resource.field(self._.blocks, 'ttl'),
      zone_name: resource.field(self._.blocks, 'zone_name'),
    },
    dns_zone(name, block): {
      local resource = blockType.resource('azurerm_dns_zone', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        max_number_of_record_sets: build.template(std.get(block, 'max_number_of_record_sets', null)),
        name: build.template(block.name),
        name_servers: build.template(std.get(block, 'name_servers', null)),
        number_of_record_sets: build.template(std.get(block, 'number_of_record_sets', null)),
        resource_group_name: build.template(std.get(block, 'resource_group_name', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      max_number_of_record_sets: resource.field(self._.blocks, 'max_number_of_record_sets'),
      name: resource.field(self._.blocks, 'name'),
      name_servers: resource.field(self._.blocks, 'name_servers'),
      number_of_record_sets: resource.field(self._.blocks, 'number_of_record_sets'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    dynatrace_monitor(name, block): {
      local resource = blockType.resource('azurerm_dynatrace_monitor', name),
      _: resource._(block, {
        environment_properties: build.template(std.get(block, 'environment_properties', null)),
        id: build.template(std.get(block, 'id', null)),
        identity: build.template(std.get(block, 'identity', null)),
        location: build.template(std.get(block, 'location', null)),
        marketplace_subscription: build.template(std.get(block, 'marketplace_subscription', null)),
        monitoring_enabled: build.template(std.get(block, 'monitoring_enabled', null)),
        name: build.template(block.name),
        plan: build.template(std.get(block, 'plan', null)),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
        user: build.template(std.get(block, 'user', null)),
      }),
      environment_properties: resource.field(self._.blocks, 'environment_properties'),
      id: resource.field(self._.blocks, 'id'),
      identity: resource.field(self._.blocks, 'identity'),
      location: resource.field(self._.blocks, 'location'),
      marketplace_subscription: resource.field(self._.blocks, 'marketplace_subscription'),
      monitoring_enabled: resource.field(self._.blocks, 'monitoring_enabled'),
      name: resource.field(self._.blocks, 'name'),
      plan: resource.field(self._.blocks, 'plan'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
      user: resource.field(self._.blocks, 'user'),
    },
    elastic_cloud_elasticsearch(name, block): {
      local resource = blockType.resource('azurerm_elastic_cloud_elasticsearch', name),
      _: resource._(block, {
        elastic_cloud_deployment_id: build.template(std.get(block, 'elastic_cloud_deployment_id', null)),
        elastic_cloud_email_address: build.template(std.get(block, 'elastic_cloud_email_address', null)),
        elastic_cloud_sso_default_url: build.template(std.get(block, 'elastic_cloud_sso_default_url', null)),
        elastic_cloud_user_id: build.template(std.get(block, 'elastic_cloud_user_id', null)),
        elasticsearch_service_url: build.template(std.get(block, 'elasticsearch_service_url', null)),
        id: build.template(std.get(block, 'id', null)),
        kibana_service_url: build.template(std.get(block, 'kibana_service_url', null)),
        kibana_sso_uri: build.template(std.get(block, 'kibana_sso_uri', null)),
        location: build.template(std.get(block, 'location', null)),
        monitoring_enabled: build.template(std.get(block, 'monitoring_enabled', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        sku_name: build.template(std.get(block, 'sku_name', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      elastic_cloud_deployment_id: resource.field(self._.blocks, 'elastic_cloud_deployment_id'),
      elastic_cloud_email_address: resource.field(self._.blocks, 'elastic_cloud_email_address'),
      elastic_cloud_sso_default_url: resource.field(self._.blocks, 'elastic_cloud_sso_default_url'),
      elastic_cloud_user_id: resource.field(self._.blocks, 'elastic_cloud_user_id'),
      elasticsearch_service_url: resource.field(self._.blocks, 'elasticsearch_service_url'),
      id: resource.field(self._.blocks, 'id'),
      kibana_service_url: resource.field(self._.blocks, 'kibana_service_url'),
      kibana_sso_uri: resource.field(self._.blocks, 'kibana_sso_uri'),
      location: resource.field(self._.blocks, 'location'),
      monitoring_enabled: resource.field(self._.blocks, 'monitoring_enabled'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      sku_name: resource.field(self._.blocks, 'sku_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    elastic_san(name, block): {
      local resource = blockType.resource('azurerm_elastic_san', name),
      _: resource._(block, {
        base_size_in_tib: build.template(std.get(block, 'base_size_in_tib', null)),
        extended_size_in_tib: build.template(std.get(block, 'extended_size_in_tib', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        sku: build.template(std.get(block, 'sku', null)),
        tags: build.template(std.get(block, 'tags', null)),
        total_iops: build.template(std.get(block, 'total_iops', null)),
        total_mbps: build.template(std.get(block, 'total_mbps', null)),
        total_size_in_tib: build.template(std.get(block, 'total_size_in_tib', null)),
        total_volume_size_in_gib: build.template(std.get(block, 'total_volume_size_in_gib', null)),
        volume_group_count: build.template(std.get(block, 'volume_group_count', null)),
        zones: build.template(std.get(block, 'zones', null)),
      }),
      base_size_in_tib: resource.field(self._.blocks, 'base_size_in_tib'),
      extended_size_in_tib: resource.field(self._.blocks, 'extended_size_in_tib'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      sku: resource.field(self._.blocks, 'sku'),
      tags: resource.field(self._.blocks, 'tags'),
      total_iops: resource.field(self._.blocks, 'total_iops'),
      total_mbps: resource.field(self._.blocks, 'total_mbps'),
      total_size_in_tib: resource.field(self._.blocks, 'total_size_in_tib'),
      total_volume_size_in_gib: resource.field(self._.blocks, 'total_volume_size_in_gib'),
      volume_group_count: resource.field(self._.blocks, 'volume_group_count'),
      zones: resource.field(self._.blocks, 'zones'),
    },
    elastic_san_volume_group(name, block): {
      local resource = blockType.resource('azurerm_elastic_san_volume_group', name),
      _: resource._(block, {
        elastic_san_id: build.template(block.elastic_san_id),
        encryption: build.template(std.get(block, 'encryption', null)),
        encryption_type: build.template(std.get(block, 'encryption_type', null)),
        id: build.template(std.get(block, 'id', null)),
        identity: build.template(std.get(block, 'identity', null)),
        name: build.template(block.name),
        network_rule: build.template(std.get(block, 'network_rule', null)),
        protocol_type: build.template(std.get(block, 'protocol_type', null)),
      }),
      elastic_san_id: resource.field(self._.blocks, 'elastic_san_id'),
      encryption: resource.field(self._.blocks, 'encryption'),
      encryption_type: resource.field(self._.blocks, 'encryption_type'),
      id: resource.field(self._.blocks, 'id'),
      identity: resource.field(self._.blocks, 'identity'),
      name: resource.field(self._.blocks, 'name'),
      network_rule: resource.field(self._.blocks, 'network_rule'),
      protocol_type: resource.field(self._.blocks, 'protocol_type'),
    },
    elastic_san_volume_snapshot(name, block): {
      local resource = blockType.resource('azurerm_elastic_san_volume_snapshot', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        source_id: build.template(std.get(block, 'source_id', null)),
        source_volume_size_in_gib: build.template(std.get(block, 'source_volume_size_in_gib', null)),
        volume_group_id: build.template(block.volume_group_id),
        volume_name: build.template(std.get(block, 'volume_name', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      source_id: resource.field(self._.blocks, 'source_id'),
      source_volume_size_in_gib: resource.field(self._.blocks, 'source_volume_size_in_gib'),
      volume_group_id: resource.field(self._.blocks, 'volume_group_id'),
      volume_name: resource.field(self._.blocks, 'volume_name'),
    },
    eventgrid_domain(name, block): {
      local resource = blockType.resource('azurerm_eventgrid_domain', name),
      _: resource._(block, {
        endpoint: build.template(std.get(block, 'endpoint', null)),
        id: build.template(std.get(block, 'id', null)),
        identity: build.template(std.get(block, 'identity', null)),
        inbound_ip_rule: build.template(std.get(block, 'inbound_ip_rule', null)),
        input_mapping_default_values: build.template(std.get(block, 'input_mapping_default_values', null)),
        input_mapping_fields: build.template(std.get(block, 'input_mapping_fields', null)),
        input_schema: build.template(std.get(block, 'input_schema', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        primary_access_key: build.template(std.get(block, 'primary_access_key', null)),
        public_network_access_enabled: build.template(std.get(block, 'public_network_access_enabled', null)),
        resource_group_name: build.template(block.resource_group_name),
        secondary_access_key: build.template(std.get(block, 'secondary_access_key', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      endpoint: resource.field(self._.blocks, 'endpoint'),
      id: resource.field(self._.blocks, 'id'),
      identity: resource.field(self._.blocks, 'identity'),
      inbound_ip_rule: resource.field(self._.blocks, 'inbound_ip_rule'),
      input_mapping_default_values: resource.field(self._.blocks, 'input_mapping_default_values'),
      input_mapping_fields: resource.field(self._.blocks, 'input_mapping_fields'),
      input_schema: resource.field(self._.blocks, 'input_schema'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      primary_access_key: resource.field(self._.blocks, 'primary_access_key'),
      public_network_access_enabled: resource.field(self._.blocks, 'public_network_access_enabled'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      secondary_access_key: resource.field(self._.blocks, 'secondary_access_key'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    eventgrid_domain_topic(name, block): {
      local resource = blockType.resource('azurerm_eventgrid_domain_topic', name),
      _: resource._(block, {
        domain_name: build.template(block.domain_name),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
      }),
      domain_name: resource.field(self._.blocks, 'domain_name'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
    },
    eventgrid_system_topic(name, block): {
      local resource = blockType.resource('azurerm_eventgrid_system_topic', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        identity: build.template(std.get(block, 'identity', null)),
        location: build.template(std.get(block, 'location', null)),
        metric_arm_resource_id: build.template(std.get(block, 'metric_arm_resource_id', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        source_arm_resource_id: build.template(std.get(block, 'source_arm_resource_id', null)),
        tags: build.template(std.get(block, 'tags', null)),
        topic_type: build.template(std.get(block, 'topic_type', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      identity: resource.field(self._.blocks, 'identity'),
      location: resource.field(self._.blocks, 'location'),
      metric_arm_resource_id: resource.field(self._.blocks, 'metric_arm_resource_id'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      source_arm_resource_id: resource.field(self._.blocks, 'source_arm_resource_id'),
      tags: resource.field(self._.blocks, 'tags'),
      topic_type: resource.field(self._.blocks, 'topic_type'),
    },
    eventgrid_topic(name, block): {
      local resource = blockType.resource('azurerm_eventgrid_topic', name),
      _: resource._(block, {
        endpoint: build.template(std.get(block, 'endpoint', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        primary_access_key: build.template(std.get(block, 'primary_access_key', null)),
        resource_group_name: build.template(block.resource_group_name),
        secondary_access_key: build.template(std.get(block, 'secondary_access_key', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      endpoint: resource.field(self._.blocks, 'endpoint'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      primary_access_key: resource.field(self._.blocks, 'primary_access_key'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      secondary_access_key: resource.field(self._.blocks, 'secondary_access_key'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    eventhub(name, block): {
      local resource = blockType.resource('azurerm_eventhub', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        namespace_name: build.template(block.namespace_name),
        partition_count: build.template(std.get(block, 'partition_count', null)),
        partition_ids: build.template(std.get(block, 'partition_ids', null)),
        resource_group_name: build.template(block.resource_group_name),
      }),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      namespace_name: resource.field(self._.blocks, 'namespace_name'),
      partition_count: resource.field(self._.blocks, 'partition_count'),
      partition_ids: resource.field(self._.blocks, 'partition_ids'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
    },
    eventhub_authorization_rule(name, block): {
      local resource = blockType.resource('azurerm_eventhub_authorization_rule', name),
      _: resource._(block, {
        eventhub_name: build.template(block.eventhub_name),
        id: build.template(std.get(block, 'id', null)),
        listen: build.template(std.get(block, 'listen', null)),
        manage: build.template(std.get(block, 'manage', null)),
        name: build.template(block.name),
        namespace_name: build.template(block.namespace_name),
        primary_connection_string: build.template(std.get(block, 'primary_connection_string', null)),
        primary_connection_string_alias: build.template(std.get(block, 'primary_connection_string_alias', null)),
        primary_key: build.template(std.get(block, 'primary_key', null)),
        resource_group_name: build.template(block.resource_group_name),
        secondary_connection_string: build.template(std.get(block, 'secondary_connection_string', null)),
        secondary_connection_string_alias: build.template(std.get(block, 'secondary_connection_string_alias', null)),
        secondary_key: build.template(std.get(block, 'secondary_key', null)),
        send: build.template(std.get(block, 'send', null)),
      }),
      eventhub_name: resource.field(self._.blocks, 'eventhub_name'),
      id: resource.field(self._.blocks, 'id'),
      listen: resource.field(self._.blocks, 'listen'),
      manage: resource.field(self._.blocks, 'manage'),
      name: resource.field(self._.blocks, 'name'),
      namespace_name: resource.field(self._.blocks, 'namespace_name'),
      primary_connection_string: resource.field(self._.blocks, 'primary_connection_string'),
      primary_connection_string_alias: resource.field(self._.blocks, 'primary_connection_string_alias'),
      primary_key: resource.field(self._.blocks, 'primary_key'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      secondary_connection_string: resource.field(self._.blocks, 'secondary_connection_string'),
      secondary_connection_string_alias: resource.field(self._.blocks, 'secondary_connection_string_alias'),
      secondary_key: resource.field(self._.blocks, 'secondary_key'),
      send: resource.field(self._.blocks, 'send'),
    },
    eventhub_cluster(name, block): {
      local resource = blockType.resource('azurerm_eventhub_cluster', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        sku_name: build.template(std.get(block, 'sku_name', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      sku_name: resource.field(self._.blocks, 'sku_name'),
    },
    eventhub_consumer_group(name, block): {
      local resource = blockType.resource('azurerm_eventhub_consumer_group', name),
      _: resource._(block, {
        eventhub_name: build.template(block.eventhub_name),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        namespace_name: build.template(block.namespace_name),
        resource_group_name: build.template(block.resource_group_name),
        user_metadata: build.template(std.get(block, 'user_metadata', null)),
      }),
      eventhub_name: resource.field(self._.blocks, 'eventhub_name'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      namespace_name: resource.field(self._.blocks, 'namespace_name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      user_metadata: resource.field(self._.blocks, 'user_metadata'),
    },
    eventhub_namespace(name, block): {
      local resource = blockType.resource('azurerm_eventhub_namespace', name),
      _: resource._(block, {
        auto_inflate_enabled: build.template(std.get(block, 'auto_inflate_enabled', null)),
        capacity: build.template(std.get(block, 'capacity', null)),
        dedicated_cluster_id: build.template(std.get(block, 'dedicated_cluster_id', null)),
        default_primary_connection_string: build.template(std.get(block, 'default_primary_connection_string', null)),
        default_primary_connection_string_alias: build.template(std.get(block, 'default_primary_connection_string_alias', null)),
        default_primary_key: build.template(std.get(block, 'default_primary_key', null)),
        default_secondary_connection_string: build.template(std.get(block, 'default_secondary_connection_string', null)),
        default_secondary_connection_string_alias: build.template(std.get(block, 'default_secondary_connection_string_alias', null)),
        default_secondary_key: build.template(std.get(block, 'default_secondary_key', null)),
        id: build.template(std.get(block, 'id', null)),
        kafka_enabled: build.template(std.get(block, 'kafka_enabled', null)),
        location: build.template(std.get(block, 'location', null)),
        maximum_throughput_units: build.template(std.get(block, 'maximum_throughput_units', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        sku: build.template(std.get(block, 'sku', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      auto_inflate_enabled: resource.field(self._.blocks, 'auto_inflate_enabled'),
      capacity: resource.field(self._.blocks, 'capacity'),
      dedicated_cluster_id: resource.field(self._.blocks, 'dedicated_cluster_id'),
      default_primary_connection_string: resource.field(self._.blocks, 'default_primary_connection_string'),
      default_primary_connection_string_alias: resource.field(self._.blocks, 'default_primary_connection_string_alias'),
      default_primary_key: resource.field(self._.blocks, 'default_primary_key'),
      default_secondary_connection_string: resource.field(self._.blocks, 'default_secondary_connection_string'),
      default_secondary_connection_string_alias: resource.field(self._.blocks, 'default_secondary_connection_string_alias'),
      default_secondary_key: resource.field(self._.blocks, 'default_secondary_key'),
      id: resource.field(self._.blocks, 'id'),
      kafka_enabled: resource.field(self._.blocks, 'kafka_enabled'),
      location: resource.field(self._.blocks, 'location'),
      maximum_throughput_units: resource.field(self._.blocks, 'maximum_throughput_units'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      sku: resource.field(self._.blocks, 'sku'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    eventhub_namespace_authorization_rule(name, block): {
      local resource = blockType.resource('azurerm_eventhub_namespace_authorization_rule', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        listen: build.template(std.get(block, 'listen', null)),
        manage: build.template(std.get(block, 'manage', null)),
        name: build.template(block.name),
        namespace_name: build.template(block.namespace_name),
        primary_connection_string: build.template(std.get(block, 'primary_connection_string', null)),
        primary_connection_string_alias: build.template(std.get(block, 'primary_connection_string_alias', null)),
        primary_key: build.template(std.get(block, 'primary_key', null)),
        resource_group_name: build.template(block.resource_group_name),
        secondary_connection_string: build.template(std.get(block, 'secondary_connection_string', null)),
        secondary_connection_string_alias: build.template(std.get(block, 'secondary_connection_string_alias', null)),
        secondary_key: build.template(std.get(block, 'secondary_key', null)),
        send: build.template(std.get(block, 'send', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      listen: resource.field(self._.blocks, 'listen'),
      manage: resource.field(self._.blocks, 'manage'),
      name: resource.field(self._.blocks, 'name'),
      namespace_name: resource.field(self._.blocks, 'namespace_name'),
      primary_connection_string: resource.field(self._.blocks, 'primary_connection_string'),
      primary_connection_string_alias: resource.field(self._.blocks, 'primary_connection_string_alias'),
      primary_key: resource.field(self._.blocks, 'primary_key'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      secondary_connection_string: resource.field(self._.blocks, 'secondary_connection_string'),
      secondary_connection_string_alias: resource.field(self._.blocks, 'secondary_connection_string_alias'),
      secondary_key: resource.field(self._.blocks, 'secondary_key'),
      send: resource.field(self._.blocks, 'send'),
    },
    eventhub_sas(name, block): {
      local resource = blockType.resource('azurerm_eventhub_sas', name),
      _: resource._(block, {
        connection_string: build.template(block.connection_string),
        expiry: build.template(block.expiry),
        id: build.template(std.get(block, 'id', null)),
        sas: build.template(std.get(block, 'sas', null)),
      }),
      connection_string: resource.field(self._.blocks, 'connection_string'),
      expiry: resource.field(self._.blocks, 'expiry'),
      id: resource.field(self._.blocks, 'id'),
      sas: resource.field(self._.blocks, 'sas'),
    },
    express_route_circuit(name, block): {
      local resource = blockType.resource('azurerm_express_route_circuit', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        peerings: build.template(std.get(block, 'peerings', null)),
        resource_group_name: build.template(block.resource_group_name),
        service_key: build.template(std.get(block, 'service_key', null)),
        service_provider_properties: build.template(std.get(block, 'service_provider_properties', null)),
        service_provider_provisioning_state: build.template(std.get(block, 'service_provider_provisioning_state', null)),
        sku: build.template(std.get(block, 'sku', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      peerings: resource.field(self._.blocks, 'peerings'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      service_key: resource.field(self._.blocks, 'service_key'),
      service_provider_properties: resource.field(self._.blocks, 'service_provider_properties'),
      service_provider_provisioning_state: resource.field(self._.blocks, 'service_provider_provisioning_state'),
      sku: resource.field(self._.blocks, 'sku'),
    },
    express_route_circuit_peering(name, block): {
      local resource = blockType.resource('azurerm_express_route_circuit_peering', name),
      _: resource._(block, {
        azure_asn: build.template(std.get(block, 'azure_asn', null)),
        express_route_circuit_name: build.template(block.express_route_circuit_name),
        gateway_manager_etag: build.template(std.get(block, 'gateway_manager_etag', null)),
        id: build.template(std.get(block, 'id', null)),
        ipv4_enabled: build.template(std.get(block, 'ipv4_enabled', null)),
        peer_asn: build.template(std.get(block, 'peer_asn', null)),
        peering_type: build.template(block.peering_type),
        primary_azure_port: build.template(std.get(block, 'primary_azure_port', null)),
        primary_peer_address_prefix: build.template(std.get(block, 'primary_peer_address_prefix', null)),
        resource_group_name: build.template(block.resource_group_name),
        route_filter_id: build.template(std.get(block, 'route_filter_id', null)),
        secondary_azure_port: build.template(std.get(block, 'secondary_azure_port', null)),
        secondary_peer_address_prefix: build.template(std.get(block, 'secondary_peer_address_prefix', null)),
        shared_key: build.template(std.get(block, 'shared_key', null)),
        vlan_id: build.template(std.get(block, 'vlan_id', null)),
      }),
      azure_asn: resource.field(self._.blocks, 'azure_asn'),
      express_route_circuit_name: resource.field(self._.blocks, 'express_route_circuit_name'),
      gateway_manager_etag: resource.field(self._.blocks, 'gateway_manager_etag'),
      id: resource.field(self._.blocks, 'id'),
      ipv4_enabled: resource.field(self._.blocks, 'ipv4_enabled'),
      peer_asn: resource.field(self._.blocks, 'peer_asn'),
      peering_type: resource.field(self._.blocks, 'peering_type'),
      primary_azure_port: resource.field(self._.blocks, 'primary_azure_port'),
      primary_peer_address_prefix: resource.field(self._.blocks, 'primary_peer_address_prefix'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      route_filter_id: resource.field(self._.blocks, 'route_filter_id'),
      secondary_azure_port: resource.field(self._.blocks, 'secondary_azure_port'),
      secondary_peer_address_prefix: resource.field(self._.blocks, 'secondary_peer_address_prefix'),
      shared_key: resource.field(self._.blocks, 'shared_key'),
      vlan_id: resource.field(self._.blocks, 'vlan_id'),
    },
    extended_location_custom_location(name, block): {
      local resource = blockType.resource('azurerm_extended_location_custom_location', name),
      _: resource._(block, {
        authentication: build.template(std.get(block, 'authentication', null)),
        cluster_extension_ids: build.template(std.get(block, 'cluster_extension_ids', null)),
        display_name: build.template(std.get(block, 'display_name', null)),
        host_resource_id: build.template(std.get(block, 'host_resource_id', null)),
        host_type: build.template(std.get(block, 'host_type', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        namespace: build.template(std.get(block, 'namespace', null)),
        resource_group_name: build.template(block.resource_group_name),
      }),
      authentication: resource.field(self._.blocks, 'authentication'),
      cluster_extension_ids: resource.field(self._.blocks, 'cluster_extension_ids'),
      display_name: resource.field(self._.blocks, 'display_name'),
      host_resource_id: resource.field(self._.blocks, 'host_resource_id'),
      host_type: resource.field(self._.blocks, 'host_type'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      namespace: resource.field(self._.blocks, 'namespace'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
    },
    extended_locations(name, block): {
      local resource = blockType.resource('azurerm_extended_locations', name),
      _: resource._(block, {
        extended_locations: build.template(std.get(block, 'extended_locations', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
      }),
      extended_locations: resource.field(self._.blocks, 'extended_locations'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
    },
    firewall(name, block): {
      local resource = blockType.resource('azurerm_firewall', name),
      _: resource._(block, {
        dns_proxy_enabled: build.template(std.get(block, 'dns_proxy_enabled', null)),
        dns_servers: build.template(std.get(block, 'dns_servers', null)),
        firewall_policy_id: build.template(std.get(block, 'firewall_policy_id', null)),
        id: build.template(std.get(block, 'id', null)),
        ip_configuration: build.template(std.get(block, 'ip_configuration', null)),
        location: build.template(std.get(block, 'location', null)),
        management_ip_configuration: build.template(std.get(block, 'management_ip_configuration', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        sku_name: build.template(std.get(block, 'sku_name', null)),
        sku_tier: build.template(std.get(block, 'sku_tier', null)),
        tags: build.template(std.get(block, 'tags', null)),
        threat_intel_mode: build.template(std.get(block, 'threat_intel_mode', null)),
        virtual_hub: build.template(std.get(block, 'virtual_hub', null)),
        zones: build.template(std.get(block, 'zones', null)),
      }),
      dns_proxy_enabled: resource.field(self._.blocks, 'dns_proxy_enabled'),
      dns_servers: resource.field(self._.blocks, 'dns_servers'),
      firewall_policy_id: resource.field(self._.blocks, 'firewall_policy_id'),
      id: resource.field(self._.blocks, 'id'),
      ip_configuration: resource.field(self._.blocks, 'ip_configuration'),
      location: resource.field(self._.blocks, 'location'),
      management_ip_configuration: resource.field(self._.blocks, 'management_ip_configuration'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      sku_name: resource.field(self._.blocks, 'sku_name'),
      sku_tier: resource.field(self._.blocks, 'sku_tier'),
      tags: resource.field(self._.blocks, 'tags'),
      threat_intel_mode: resource.field(self._.blocks, 'threat_intel_mode'),
      virtual_hub: resource.field(self._.blocks, 'virtual_hub'),
      zones: resource.field(self._.blocks, 'zones'),
    },
    firewall_policy(name, block): {
      local resource = blockType.resource('azurerm_firewall_policy', name),
      _: resource._(block, {
        base_policy_id: build.template(std.get(block, 'base_policy_id', null)),
        child_policies: build.template(std.get(block, 'child_policies', null)),
        dns: build.template(std.get(block, 'dns', null)),
        firewalls: build.template(std.get(block, 'firewalls', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        rule_collection_groups: build.template(std.get(block, 'rule_collection_groups', null)),
        tags: build.template(std.get(block, 'tags', null)),
        threat_intelligence_allowlist: build.template(std.get(block, 'threat_intelligence_allowlist', null)),
        threat_intelligence_mode: build.template(std.get(block, 'threat_intelligence_mode', null)),
      }),
      base_policy_id: resource.field(self._.blocks, 'base_policy_id'),
      child_policies: resource.field(self._.blocks, 'child_policies'),
      dns: resource.field(self._.blocks, 'dns'),
      firewalls: resource.field(self._.blocks, 'firewalls'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      rule_collection_groups: resource.field(self._.blocks, 'rule_collection_groups'),
      tags: resource.field(self._.blocks, 'tags'),
      threat_intelligence_allowlist: resource.field(self._.blocks, 'threat_intelligence_allowlist'),
      threat_intelligence_mode: resource.field(self._.blocks, 'threat_intelligence_mode'),
    },
    function_app(name, block): {
      local resource = blockType.resource('azurerm_function_app', name),
      _: resource._(block, {
        app_service_plan_id: build.template(std.get(block, 'app_service_plan_id', null)),
        app_settings: build.template(std.get(block, 'app_settings', null)),
        client_cert_mode: build.template(std.get(block, 'client_cert_mode', null)),
        connection_string: build.template(std.get(block, 'connection_string', null)),
        custom_domain_verification_id: build.template(std.get(block, 'custom_domain_verification_id', null)),
        default_hostname: build.template(std.get(block, 'default_hostname', null)),
        enabled: build.template(std.get(block, 'enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        identity: build.template(std.get(block, 'identity', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        os_type: build.template(std.get(block, 'os_type', null)),
        outbound_ip_addresses: build.template(std.get(block, 'outbound_ip_addresses', null)),
        possible_outbound_ip_addresses: build.template(std.get(block, 'possible_outbound_ip_addresses', null)),
        resource_group_name: build.template(block.resource_group_name),
        site_config: build.template(std.get(block, 'site_config', null)),
        site_credential: build.template(std.get(block, 'site_credential', null)),
        source_control: build.template(std.get(block, 'source_control', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      app_service_plan_id: resource.field(self._.blocks, 'app_service_plan_id'),
      app_settings: resource.field(self._.blocks, 'app_settings'),
      client_cert_mode: resource.field(self._.blocks, 'client_cert_mode'),
      connection_string: resource.field(self._.blocks, 'connection_string'),
      custom_domain_verification_id: resource.field(self._.blocks, 'custom_domain_verification_id'),
      default_hostname: resource.field(self._.blocks, 'default_hostname'),
      enabled: resource.field(self._.blocks, 'enabled'),
      id: resource.field(self._.blocks, 'id'),
      identity: resource.field(self._.blocks, 'identity'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      os_type: resource.field(self._.blocks, 'os_type'),
      outbound_ip_addresses: resource.field(self._.blocks, 'outbound_ip_addresses'),
      possible_outbound_ip_addresses: resource.field(self._.blocks, 'possible_outbound_ip_addresses'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      site_config: resource.field(self._.blocks, 'site_config'),
      site_credential: resource.field(self._.blocks, 'site_credential'),
      source_control: resource.field(self._.blocks, 'source_control'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    function_app_host_keys(name, block): {
      local resource = blockType.resource('azurerm_function_app_host_keys', name),
      _: resource._(block, {
        blobs_extension_key: build.template(std.get(block, 'blobs_extension_key', null)),
        default_function_key: build.template(std.get(block, 'default_function_key', null)),
        durabletask_extension_key: build.template(std.get(block, 'durabletask_extension_key', null)),
        event_grid_extension_config_key: build.template(std.get(block, 'event_grid_extension_config_key', null)),
        event_grid_extension_key: build.template(std.get(block, 'event_grid_extension_key', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        primary_key: build.template(std.get(block, 'primary_key', null)),
        resource_group_name: build.template(block.resource_group_name),
        signalr_extension_key: build.template(std.get(block, 'signalr_extension_key', null)),
        webpubsub_extension_key: build.template(std.get(block, 'webpubsub_extension_key', null)),
      }),
      blobs_extension_key: resource.field(self._.blocks, 'blobs_extension_key'),
      default_function_key: resource.field(self._.blocks, 'default_function_key'),
      durabletask_extension_key: resource.field(self._.blocks, 'durabletask_extension_key'),
      event_grid_extension_config_key: resource.field(self._.blocks, 'event_grid_extension_config_key'),
      event_grid_extension_key: resource.field(self._.blocks, 'event_grid_extension_key'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      primary_key: resource.field(self._.blocks, 'primary_key'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      signalr_extension_key: resource.field(self._.blocks, 'signalr_extension_key'),
      webpubsub_extension_key: resource.field(self._.blocks, 'webpubsub_extension_key'),
    },
    hdinsight_cluster(name, block): {
      local resource = blockType.resource('azurerm_hdinsight_cluster', name),
      _: resource._(block, {
        cluster_id: build.template(std.get(block, 'cluster_id', null)),
        cluster_version: build.template(std.get(block, 'cluster_version', null)),
        component_versions: build.template(std.get(block, 'component_versions', null)),
        edge_ssh_endpoint: build.template(std.get(block, 'edge_ssh_endpoint', null)),
        gateway: build.template(std.get(block, 'gateway', null)),
        https_endpoint: build.template(std.get(block, 'https_endpoint', null)),
        id: build.template(std.get(block, 'id', null)),
        kafka_rest_proxy_endpoint: build.template(std.get(block, 'kafka_rest_proxy_endpoint', null)),
        kind: build.template(std.get(block, 'kind', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        ssh_endpoint: build.template(std.get(block, 'ssh_endpoint', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tier: build.template(std.get(block, 'tier', null)),
        tls_min_version: build.template(std.get(block, 'tls_min_version', null)),
      }),
      cluster_id: resource.field(self._.blocks, 'cluster_id'),
      cluster_version: resource.field(self._.blocks, 'cluster_version'),
      component_versions: resource.field(self._.blocks, 'component_versions'),
      edge_ssh_endpoint: resource.field(self._.blocks, 'edge_ssh_endpoint'),
      gateway: resource.field(self._.blocks, 'gateway'),
      https_endpoint: resource.field(self._.blocks, 'https_endpoint'),
      id: resource.field(self._.blocks, 'id'),
      kafka_rest_proxy_endpoint: resource.field(self._.blocks, 'kafka_rest_proxy_endpoint'),
      kind: resource.field(self._.blocks, 'kind'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      ssh_endpoint: resource.field(self._.blocks, 'ssh_endpoint'),
      tags: resource.field(self._.blocks, 'tags'),
      tier: resource.field(self._.blocks, 'tier'),
      tls_min_version: resource.field(self._.blocks, 'tls_min_version'),
    },
    healthcare_dicom_service(name, block): {
      local resource = blockType.resource('azurerm_healthcare_dicom_service', name),
      _: resource._(block, {
        authentication: build.template(std.get(block, 'authentication', null)),
        cors: build.template(std.get(block, 'cors', null)),
        data_partitions_enabled: build.template(std.get(block, 'data_partitions_enabled', null)),
        encryption_key_url: build.template(std.get(block, 'encryption_key_url', null)),
        id: build.template(std.get(block, 'id', null)),
        identity: build.template(std.get(block, 'identity', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        private_endpoint: build.template(std.get(block, 'private_endpoint', null)),
        service_url: build.template(std.get(block, 'service_url', null)),
        storage: build.template(std.get(block, 'storage', null)),
        tags: build.template(std.get(block, 'tags', null)),
        workspace_id: build.template(block.workspace_id),
      }),
      authentication: resource.field(self._.blocks, 'authentication'),
      cors: resource.field(self._.blocks, 'cors'),
      data_partitions_enabled: resource.field(self._.blocks, 'data_partitions_enabled'),
      encryption_key_url: resource.field(self._.blocks, 'encryption_key_url'),
      id: resource.field(self._.blocks, 'id'),
      identity: resource.field(self._.blocks, 'identity'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      private_endpoint: resource.field(self._.blocks, 'private_endpoint'),
      service_url: resource.field(self._.blocks, 'service_url'),
      storage: resource.field(self._.blocks, 'storage'),
      tags: resource.field(self._.blocks, 'tags'),
      workspace_id: resource.field(self._.blocks, 'workspace_id'),
    },
    healthcare_fhir_service(name, block): {
      local resource = blockType.resource('azurerm_healthcare_fhir_service', name),
      _: resource._(block, {
        access_policy_object_ids: build.template(std.get(block, 'access_policy_object_ids', null)),
        authentication: build.template(std.get(block, 'authentication', null)),
        configuration_export_storage_account_name: build.template(std.get(block, 'configuration_export_storage_account_name', null)),
        container_registry_login_server_url: build.template(std.get(block, 'container_registry_login_server_url', null)),
        cors: build.template(std.get(block, 'cors', null)),
        id: build.template(std.get(block, 'id', null)),
        identity: build.template(std.get(block, 'identity', null)),
        kind: build.template(std.get(block, 'kind', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        tags: build.template(std.get(block, 'tags', null)),
        workspace_id: build.template(block.workspace_id),
      }),
      access_policy_object_ids: resource.field(self._.blocks, 'access_policy_object_ids'),
      authentication: resource.field(self._.blocks, 'authentication'),
      configuration_export_storage_account_name: resource.field(self._.blocks, 'configuration_export_storage_account_name'),
      container_registry_login_server_url: resource.field(self._.blocks, 'container_registry_login_server_url'),
      cors: resource.field(self._.blocks, 'cors'),
      id: resource.field(self._.blocks, 'id'),
      identity: resource.field(self._.blocks, 'identity'),
      kind: resource.field(self._.blocks, 'kind'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      tags: resource.field(self._.blocks, 'tags'),
      workspace_id: resource.field(self._.blocks, 'workspace_id'),
    },
    healthcare_medtech_service(name, block): {
      local resource = blockType.resource('azurerm_healthcare_medtech_service', name),
      _: resource._(block, {
        device_mapping_json: build.template(std.get(block, 'device_mapping_json', null)),
        eventhub_consumer_group_name: build.template(std.get(block, 'eventhub_consumer_group_name', null)),
        eventhub_name: build.template(std.get(block, 'eventhub_name', null)),
        eventhub_namespace_name: build.template(std.get(block, 'eventhub_namespace_name', null)),
        id: build.template(std.get(block, 'id', null)),
        identity: build.template(std.get(block, 'identity', null)),
        name: build.template(block.name),
        workspace_id: build.template(block.workspace_id),
      }),
      device_mapping_json: resource.field(self._.blocks, 'device_mapping_json'),
      eventhub_consumer_group_name: resource.field(self._.blocks, 'eventhub_consumer_group_name'),
      eventhub_name: resource.field(self._.blocks, 'eventhub_name'),
      eventhub_namespace_name: resource.field(self._.blocks, 'eventhub_namespace_name'),
      id: resource.field(self._.blocks, 'id'),
      identity: resource.field(self._.blocks, 'identity'),
      name: resource.field(self._.blocks, 'name'),
      workspace_id: resource.field(self._.blocks, 'workspace_id'),
    },
    healthcare_service(name, block): {
      local resource = blockType.resource('azurerm_healthcare_service', name),
      _: resource._(block, {
        access_policy_object_ids: build.template(std.get(block, 'access_policy_object_ids', null)),
        authentication_configuration: build.template(std.get(block, 'authentication_configuration', null)),
        cors_configuration: build.template(std.get(block, 'cors_configuration', null)),
        cosmosdb_key_vault_key_versionless_id: build.template(std.get(block, 'cosmosdb_key_vault_key_versionless_id', null)),
        cosmosdb_throughput: build.template(std.get(block, 'cosmosdb_throughput', null)),
        id: build.template(std.get(block, 'id', null)),
        kind: build.template(std.get(block, 'kind', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      access_policy_object_ids: resource.field(self._.blocks, 'access_policy_object_ids'),
      authentication_configuration: resource.field(self._.blocks, 'authentication_configuration'),
      cors_configuration: resource.field(self._.blocks, 'cors_configuration'),
      cosmosdb_key_vault_key_versionless_id: resource.field(self._.blocks, 'cosmosdb_key_vault_key_versionless_id'),
      cosmosdb_throughput: resource.field(self._.blocks, 'cosmosdb_throughput'),
      id: resource.field(self._.blocks, 'id'),
      kind: resource.field(self._.blocks, 'kind'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    healthcare_workspace(name, block): {
      local resource = blockType.resource('azurerm_healthcare_workspace', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    image(name, block): {
      local resource = blockType.resource('azurerm_image', name),
      _: resource._(block, {
        data_disk: build.template(std.get(block, 'data_disk', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(std.get(block, 'name', null)),
        name_regex: build.template(std.get(block, 'name_regex', null)),
        os_disk: build.template(std.get(block, 'os_disk', null)),
        resource_group_name: build.template(block.resource_group_name),
        sort_descending: build.template(std.get(block, 'sort_descending', null)),
        tags: build.template(std.get(block, 'tags', null)),
        zone_resilient: build.template(std.get(block, 'zone_resilient', null)),
      }),
      data_disk: resource.field(self._.blocks, 'data_disk'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      name_regex: resource.field(self._.blocks, 'name_regex'),
      os_disk: resource.field(self._.blocks, 'os_disk'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      sort_descending: resource.field(self._.blocks, 'sort_descending'),
      tags: resource.field(self._.blocks, 'tags'),
      zone_resilient: resource.field(self._.blocks, 'zone_resilient'),
    },
    images(name, block): {
      local resource = blockType.resource('azurerm_images', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        images: build.template(std.get(block, 'images', null)),
        resource_group_name: build.template(block.resource_group_name),
        tags_filter: build.template(std.get(block, 'tags_filter', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      images: resource.field(self._.blocks, 'images'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags_filter: resource.field(self._.blocks, 'tags_filter'),
    },
    iothub(name, block): {
      local resource = blockType.resource('azurerm_iothub', name),
      _: resource._(block, {
        hostname: build.template(std.get(block, 'hostname', null)),
        id: build.template(std.get(block, 'id', null)),
        identity: build.template(std.get(block, 'identity', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      hostname: resource.field(self._.blocks, 'hostname'),
      id: resource.field(self._.blocks, 'id'),
      identity: resource.field(self._.blocks, 'identity'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    iothub_dps(name, block): {
      local resource = blockType.resource('azurerm_iothub_dps', name),
      _: resource._(block, {
        allocation_policy: build.template(std.get(block, 'allocation_policy', null)),
        device_provisioning_host_name: build.template(std.get(block, 'device_provisioning_host_name', null)),
        id: build.template(std.get(block, 'id', null)),
        id_scope: build.template(std.get(block, 'id_scope', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        service_operations_host_name: build.template(std.get(block, 'service_operations_host_name', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      allocation_policy: resource.field(self._.blocks, 'allocation_policy'),
      device_provisioning_host_name: resource.field(self._.blocks, 'device_provisioning_host_name'),
      id: resource.field(self._.blocks, 'id'),
      id_scope: resource.field(self._.blocks, 'id_scope'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      service_operations_host_name: resource.field(self._.blocks, 'service_operations_host_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    iothub_dps_shared_access_policy(name, block): {
      local resource = blockType.resource('azurerm_iothub_dps_shared_access_policy', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        iothub_dps_name: build.template(block.iothub_dps_name),
        name: build.template(block.name),
        primary_connection_string: build.template(std.get(block, 'primary_connection_string', null)),
        primary_key: build.template(std.get(block, 'primary_key', null)),
        resource_group_name: build.template(block.resource_group_name),
        secondary_connection_string: build.template(std.get(block, 'secondary_connection_string', null)),
        secondary_key: build.template(std.get(block, 'secondary_key', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      iothub_dps_name: resource.field(self._.blocks, 'iothub_dps_name'),
      name: resource.field(self._.blocks, 'name'),
      primary_connection_string: resource.field(self._.blocks, 'primary_connection_string'),
      primary_key: resource.field(self._.blocks, 'primary_key'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      secondary_connection_string: resource.field(self._.blocks, 'secondary_connection_string'),
      secondary_key: resource.field(self._.blocks, 'secondary_key'),
    },
    iothub_shared_access_policy(name, block): {
      local resource = blockType.resource('azurerm_iothub_shared_access_policy', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        iothub_name: build.template(block.iothub_name),
        name: build.template(block.name),
        primary_connection_string: build.template(std.get(block, 'primary_connection_string', null)),
        primary_key: build.template(std.get(block, 'primary_key', null)),
        resource_group_name: build.template(block.resource_group_name),
        secondary_connection_string: build.template(std.get(block, 'secondary_connection_string', null)),
        secondary_key: build.template(std.get(block, 'secondary_key', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      iothub_name: resource.field(self._.blocks, 'iothub_name'),
      name: resource.field(self._.blocks, 'name'),
      primary_connection_string: resource.field(self._.blocks, 'primary_connection_string'),
      primary_key: resource.field(self._.blocks, 'primary_key'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      secondary_connection_string: resource.field(self._.blocks, 'secondary_connection_string'),
      secondary_key: resource.field(self._.blocks, 'secondary_key'),
    },
    ip_group(name, block): {
      local resource = blockType.resource('azurerm_ip_group', name),
      _: resource._(block, {
        cidrs: build.template(std.get(block, 'cidrs', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      cidrs: resource.field(self._.blocks, 'cidrs'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    ip_groups(name, block): {
      local resource = blockType.resource('azurerm_ip_groups', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        ids: build.template(std.get(block, 'ids', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        names: build.template(std.get(block, 'names', null)),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      ids: resource.field(self._.blocks, 'ids'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      names: resource.field(self._.blocks, 'names'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    key_vault(name, block): {
      local resource = blockType.resource('azurerm_key_vault', name),
      _: resource._(block, {
        access_policy: build.template(std.get(block, 'access_policy', null)),
        enable_rbac_authorization: build.template(std.get(block, 'enable_rbac_authorization', null)),
        enabled_for_deployment: build.template(std.get(block, 'enabled_for_deployment', null)),
        enabled_for_disk_encryption: build.template(std.get(block, 'enabled_for_disk_encryption', null)),
        enabled_for_template_deployment: build.template(std.get(block, 'enabled_for_template_deployment', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        network_acls: build.template(std.get(block, 'network_acls', null)),
        public_network_access_enabled: build.template(std.get(block, 'public_network_access_enabled', null)),
        purge_protection_enabled: build.template(std.get(block, 'purge_protection_enabled', null)),
        resource_group_name: build.template(block.resource_group_name),
        sku_name: build.template(std.get(block, 'sku_name', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tenant_id: build.template(std.get(block, 'tenant_id', null)),
        vault_uri: build.template(std.get(block, 'vault_uri', null)),
      }),
      access_policy: resource.field(self._.blocks, 'access_policy'),
      enable_rbac_authorization: resource.field(self._.blocks, 'enable_rbac_authorization'),
      enabled_for_deployment: resource.field(self._.blocks, 'enabled_for_deployment'),
      enabled_for_disk_encryption: resource.field(self._.blocks, 'enabled_for_disk_encryption'),
      enabled_for_template_deployment: resource.field(self._.blocks, 'enabled_for_template_deployment'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      network_acls: resource.field(self._.blocks, 'network_acls'),
      public_network_access_enabled: resource.field(self._.blocks, 'public_network_access_enabled'),
      purge_protection_enabled: resource.field(self._.blocks, 'purge_protection_enabled'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      sku_name: resource.field(self._.blocks, 'sku_name'),
      tags: resource.field(self._.blocks, 'tags'),
      tenant_id: resource.field(self._.blocks, 'tenant_id'),
      vault_uri: resource.field(self._.blocks, 'vault_uri'),
    },
    key_vault_access_policy(name, block): {
      local resource = blockType.resource('azurerm_key_vault_access_policy', name),
      _: resource._(block, {
        certificate_permissions: build.template(std.get(block, 'certificate_permissions', null)),
        id: build.template(std.get(block, 'id', null)),
        key_permissions: build.template(std.get(block, 'key_permissions', null)),
        name: build.template(block.name),
        secret_permissions: build.template(std.get(block, 'secret_permissions', null)),
      }),
      certificate_permissions: resource.field(self._.blocks, 'certificate_permissions'),
      id: resource.field(self._.blocks, 'id'),
      key_permissions: resource.field(self._.blocks, 'key_permissions'),
      name: resource.field(self._.blocks, 'name'),
      secret_permissions: resource.field(self._.blocks, 'secret_permissions'),
    },
    key_vault_certificate(name, block): {
      local resource = blockType.resource('azurerm_key_vault_certificate', name),
      _: resource._(block, {
        certificate_data: build.template(std.get(block, 'certificate_data', null)),
        certificate_data_base64: build.template(std.get(block, 'certificate_data_base64', null)),
        certificate_policy: build.template(std.get(block, 'certificate_policy', null)),
        expires: build.template(std.get(block, 'expires', null)),
        id: build.template(std.get(block, 'id', null)),
        key_vault_id: build.template(block.key_vault_id),
        name: build.template(block.name),
        not_before: build.template(std.get(block, 'not_before', null)),
        resource_manager_id: build.template(std.get(block, 'resource_manager_id', null)),
        resource_manager_versionless_id: build.template(std.get(block, 'resource_manager_versionless_id', null)),
        secret_id: build.template(std.get(block, 'secret_id', null)),
        tags: build.template(std.get(block, 'tags', null)),
        thumbprint: build.template(std.get(block, 'thumbprint', null)),
        version: build.template(std.get(block, 'version', null)),
        versionless_id: build.template(std.get(block, 'versionless_id', null)),
        versionless_secret_id: build.template(std.get(block, 'versionless_secret_id', null)),
      }),
      certificate_data: resource.field(self._.blocks, 'certificate_data'),
      certificate_data_base64: resource.field(self._.blocks, 'certificate_data_base64'),
      certificate_policy: resource.field(self._.blocks, 'certificate_policy'),
      expires: resource.field(self._.blocks, 'expires'),
      id: resource.field(self._.blocks, 'id'),
      key_vault_id: resource.field(self._.blocks, 'key_vault_id'),
      name: resource.field(self._.blocks, 'name'),
      not_before: resource.field(self._.blocks, 'not_before'),
      resource_manager_id: resource.field(self._.blocks, 'resource_manager_id'),
      resource_manager_versionless_id: resource.field(self._.blocks, 'resource_manager_versionless_id'),
      secret_id: resource.field(self._.blocks, 'secret_id'),
      tags: resource.field(self._.blocks, 'tags'),
      thumbprint: resource.field(self._.blocks, 'thumbprint'),
      version: resource.field(self._.blocks, 'version'),
      versionless_id: resource.field(self._.blocks, 'versionless_id'),
      versionless_secret_id: resource.field(self._.blocks, 'versionless_secret_id'),
    },
    key_vault_certificate_data(name, block): {
      local resource = blockType.resource('azurerm_key_vault_certificate_data', name),
      _: resource._(block, {
        certificates_count: build.template(std.get(block, 'certificates_count', null)),
        expires: build.template(std.get(block, 'expires', null)),
        hex: build.template(std.get(block, 'hex', null)),
        id: build.template(std.get(block, 'id', null)),
        key: build.template(std.get(block, 'key', null)),
        key_vault_id: build.template(block.key_vault_id),
        name: build.template(block.name),
        not_before: build.template(std.get(block, 'not_before', null)),
        pem: build.template(std.get(block, 'pem', null)),
        tags: build.template(std.get(block, 'tags', null)),
        version: build.template(std.get(block, 'version', null)),
      }),
      certificates_count: resource.field(self._.blocks, 'certificates_count'),
      expires: resource.field(self._.blocks, 'expires'),
      hex: resource.field(self._.blocks, 'hex'),
      id: resource.field(self._.blocks, 'id'),
      key: resource.field(self._.blocks, 'key'),
      key_vault_id: resource.field(self._.blocks, 'key_vault_id'),
      name: resource.field(self._.blocks, 'name'),
      not_before: resource.field(self._.blocks, 'not_before'),
      pem: resource.field(self._.blocks, 'pem'),
      tags: resource.field(self._.blocks, 'tags'),
      version: resource.field(self._.blocks, 'version'),
    },
    key_vault_certificate_issuer(name, block): {
      local resource = blockType.resource('azurerm_key_vault_certificate_issuer', name),
      _: resource._(block, {
        account_id: build.template(std.get(block, 'account_id', null)),
        admin: build.template(std.get(block, 'admin', null)),
        id: build.template(std.get(block, 'id', null)),
        key_vault_id: build.template(block.key_vault_id),
        name: build.template(block.name),
        org_id: build.template(std.get(block, 'org_id', null)),
        provider_name: build.template(std.get(block, 'provider_name', null)),
      }),
      account_id: resource.field(self._.blocks, 'account_id'),
      admin: resource.field(self._.blocks, 'admin'),
      id: resource.field(self._.blocks, 'id'),
      key_vault_id: resource.field(self._.blocks, 'key_vault_id'),
      name: resource.field(self._.blocks, 'name'),
      org_id: resource.field(self._.blocks, 'org_id'),
      provider_name: resource.field(self._.blocks, 'provider_name'),
    },
    key_vault_certificates(name, block): {
      local resource = blockType.resource('azurerm_key_vault_certificates', name),
      _: resource._(block, {
        certificates: build.template(std.get(block, 'certificates', null)),
        id: build.template(std.get(block, 'id', null)),
        include_pending: build.template(std.get(block, 'include_pending', null)),
        key_vault_id: build.template(block.key_vault_id),
        names: build.template(std.get(block, 'names', null)),
      }),
      certificates: resource.field(self._.blocks, 'certificates'),
      id: resource.field(self._.blocks, 'id'),
      include_pending: resource.field(self._.blocks, 'include_pending'),
      key_vault_id: resource.field(self._.blocks, 'key_vault_id'),
      names: resource.field(self._.blocks, 'names'),
    },
    key_vault_encrypted_value(name, block): {
      local resource = blockType.resource('azurerm_key_vault_encrypted_value', name),
      _: resource._(block, {
        algorithm: build.template(block.algorithm),
        decoded_plain_text_value: build.template(std.get(block, 'decoded_plain_text_value', null)),
        encrypted_data: build.template(std.get(block, 'encrypted_data', null)),
        id: build.template(std.get(block, 'id', null)),
        key_vault_key_id: build.template(block.key_vault_key_id),
        plain_text_value: build.template(std.get(block, 'plain_text_value', null)),
      }),
      algorithm: resource.field(self._.blocks, 'algorithm'),
      decoded_plain_text_value: resource.field(self._.blocks, 'decoded_plain_text_value'),
      encrypted_data: resource.field(self._.blocks, 'encrypted_data'),
      id: resource.field(self._.blocks, 'id'),
      key_vault_key_id: resource.field(self._.blocks, 'key_vault_key_id'),
      plain_text_value: resource.field(self._.blocks, 'plain_text_value'),
    },
    key_vault_key(name, block): {
      local resource = blockType.resource('azurerm_key_vault_key', name),
      _: resource._(block, {
        curve: build.template(std.get(block, 'curve', null)),
        e: build.template(std.get(block, 'e', null)),
        id: build.template(std.get(block, 'id', null)),
        key_opts: build.template(std.get(block, 'key_opts', null)),
        key_size: build.template(std.get(block, 'key_size', null)),
        key_type: build.template(std.get(block, 'key_type', null)),
        key_vault_id: build.template(block.key_vault_id),
        n: build.template(std.get(block, 'n', null)),
        name: build.template(block.name),
        public_key_openssh: build.template(std.get(block, 'public_key_openssh', null)),
        public_key_pem: build.template(std.get(block, 'public_key_pem', null)),
        resource_id: build.template(std.get(block, 'resource_id', null)),
        resource_versionless_id: build.template(std.get(block, 'resource_versionless_id', null)),
        tags: build.template(std.get(block, 'tags', null)),
        version: build.template(std.get(block, 'version', null)),
        versionless_id: build.template(std.get(block, 'versionless_id', null)),
        x: build.template(std.get(block, 'x', null)),
        y: build.template(std.get(block, 'y', null)),
      }),
      curve: resource.field(self._.blocks, 'curve'),
      e: resource.field(self._.blocks, 'e'),
      id: resource.field(self._.blocks, 'id'),
      key_opts: resource.field(self._.blocks, 'key_opts'),
      key_size: resource.field(self._.blocks, 'key_size'),
      key_type: resource.field(self._.blocks, 'key_type'),
      key_vault_id: resource.field(self._.blocks, 'key_vault_id'),
      n: resource.field(self._.blocks, 'n'),
      name: resource.field(self._.blocks, 'name'),
      public_key_openssh: resource.field(self._.blocks, 'public_key_openssh'),
      public_key_pem: resource.field(self._.blocks, 'public_key_pem'),
      resource_id: resource.field(self._.blocks, 'resource_id'),
      resource_versionless_id: resource.field(self._.blocks, 'resource_versionless_id'),
      tags: resource.field(self._.blocks, 'tags'),
      version: resource.field(self._.blocks, 'version'),
      versionless_id: resource.field(self._.blocks, 'versionless_id'),
      x: resource.field(self._.blocks, 'x'),
      y: resource.field(self._.blocks, 'y'),
    },
    key_vault_managed_hardware_security_module(name, block): {
      local resource = blockType.resource('azurerm_key_vault_managed_hardware_security_module', name),
      _: resource._(block, {
        admin_object_ids: build.template(std.get(block, 'admin_object_ids', null)),
        hsm_uri: build.template(std.get(block, 'hsm_uri', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        purge_protection_enabled: build.template(std.get(block, 'purge_protection_enabled', null)),
        resource_group_name: build.template(block.resource_group_name),
        sku_name: build.template(std.get(block, 'sku_name', null)),
        soft_delete_retention_days: build.template(std.get(block, 'soft_delete_retention_days', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tenant_id: build.template(std.get(block, 'tenant_id', null)),
      }),
      admin_object_ids: resource.field(self._.blocks, 'admin_object_ids'),
      hsm_uri: resource.field(self._.blocks, 'hsm_uri'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      purge_protection_enabled: resource.field(self._.blocks, 'purge_protection_enabled'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      sku_name: resource.field(self._.blocks, 'sku_name'),
      soft_delete_retention_days: resource.field(self._.blocks, 'soft_delete_retention_days'),
      tags: resource.field(self._.blocks, 'tags'),
      tenant_id: resource.field(self._.blocks, 'tenant_id'),
    },
    key_vault_managed_hardware_security_module_key(name, block): {
      local resource = blockType.resource('azurerm_key_vault_managed_hardware_security_module_key', name),
      _: resource._(block, {
        curve: build.template(std.get(block, 'curve', null)),
        expiration_date: build.template(std.get(block, 'expiration_date', null)),
        id: build.template(std.get(block, 'id', null)),
        key_opts: build.template(std.get(block, 'key_opts', null)),
        key_size: build.template(std.get(block, 'key_size', null)),
        key_type: build.template(std.get(block, 'key_type', null)),
        managed_hsm_id: build.template(block.managed_hsm_id),
        name: build.template(block.name),
        not_before_date: build.template(std.get(block, 'not_before_date', null)),
        tags: build.template(std.get(block, 'tags', null)),
        version: build.template(std.get(block, 'version', null)),
        versioned_id: build.template(std.get(block, 'versioned_id', null)),
      }),
      curve: resource.field(self._.blocks, 'curve'),
      expiration_date: resource.field(self._.blocks, 'expiration_date'),
      id: resource.field(self._.blocks, 'id'),
      key_opts: resource.field(self._.blocks, 'key_opts'),
      key_size: resource.field(self._.blocks, 'key_size'),
      key_type: resource.field(self._.blocks, 'key_type'),
      managed_hsm_id: resource.field(self._.blocks, 'managed_hsm_id'),
      name: resource.field(self._.blocks, 'name'),
      not_before_date: resource.field(self._.blocks, 'not_before_date'),
      tags: resource.field(self._.blocks, 'tags'),
      version: resource.field(self._.blocks, 'version'),
      versioned_id: resource.field(self._.blocks, 'versioned_id'),
    },
    key_vault_managed_hardware_security_module_role_definition(name, block): {
      local resource = blockType.resource('azurerm_key_vault_managed_hardware_security_module_role_definition', name),
      _: resource._(block, {
        assignable_scopes: build.template(std.get(block, 'assignable_scopes', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        managed_hsm_id: build.template(block.managed_hsm_id),
        name: build.template(block.name),
        permission: build.template(std.get(block, 'permission', null)),
        resource_manager_id: build.template(std.get(block, 'resource_manager_id', null)),
        role_name: build.template(std.get(block, 'role_name', null)),
        role_type: build.template(std.get(block, 'role_type', null)),
      }),
      assignable_scopes: resource.field(self._.blocks, 'assignable_scopes'),
      description: resource.field(self._.blocks, 'description'),
      id: resource.field(self._.blocks, 'id'),
      managed_hsm_id: resource.field(self._.blocks, 'managed_hsm_id'),
      name: resource.field(self._.blocks, 'name'),
      permission: resource.field(self._.blocks, 'permission'),
      resource_manager_id: resource.field(self._.blocks, 'resource_manager_id'),
      role_name: resource.field(self._.blocks, 'role_name'),
      role_type: resource.field(self._.blocks, 'role_type'),
    },
    key_vault_secret(name, block): {
      local resource = blockType.resource('azurerm_key_vault_secret', name),
      _: resource._(block, {
        content_type: build.template(std.get(block, 'content_type', null)),
        expiration_date: build.template(std.get(block, 'expiration_date', null)),
        id: build.template(std.get(block, 'id', null)),
        key_vault_id: build.template(block.key_vault_id),
        name: build.template(block.name),
        not_before_date: build.template(std.get(block, 'not_before_date', null)),
        resource_id: build.template(std.get(block, 'resource_id', null)),
        resource_versionless_id: build.template(std.get(block, 'resource_versionless_id', null)),
        tags: build.template(std.get(block, 'tags', null)),
        value: build.template(std.get(block, 'value', null)),
        version: build.template(std.get(block, 'version', null)),
        versionless_id: build.template(std.get(block, 'versionless_id', null)),
      }),
      content_type: resource.field(self._.blocks, 'content_type'),
      expiration_date: resource.field(self._.blocks, 'expiration_date'),
      id: resource.field(self._.blocks, 'id'),
      key_vault_id: resource.field(self._.blocks, 'key_vault_id'),
      name: resource.field(self._.blocks, 'name'),
      not_before_date: resource.field(self._.blocks, 'not_before_date'),
      resource_id: resource.field(self._.blocks, 'resource_id'),
      resource_versionless_id: resource.field(self._.blocks, 'resource_versionless_id'),
      tags: resource.field(self._.blocks, 'tags'),
      value: resource.field(self._.blocks, 'value'),
      version: resource.field(self._.blocks, 'version'),
      versionless_id: resource.field(self._.blocks, 'versionless_id'),
    },
    key_vault_secrets(name, block): {
      local resource = blockType.resource('azurerm_key_vault_secrets', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        key_vault_id: build.template(block.key_vault_id),
        names: build.template(std.get(block, 'names', null)),
        secrets: build.template(std.get(block, 'secrets', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      key_vault_id: resource.field(self._.blocks, 'key_vault_id'),
      names: resource.field(self._.blocks, 'names'),
      secrets: resource.field(self._.blocks, 'secrets'),
    },
    kubernetes_cluster(name, block): {
      local resource = blockType.resource('azurerm_kubernetes_cluster', name),
      _: resource._(block, {
        aci_connector_linux: build.template(std.get(block, 'aci_connector_linux', null)),
        agent_pool_profile: build.template(std.get(block, 'agent_pool_profile', null)),
        api_server_authorized_ip_ranges: build.template(std.get(block, 'api_server_authorized_ip_ranges', null)),
        azure_active_directory_role_based_access_control: build.template(std.get(block, 'azure_active_directory_role_based_access_control', null)),
        azure_policy_enabled: build.template(std.get(block, 'azure_policy_enabled', null)),
        current_kubernetes_version: build.template(std.get(block, 'current_kubernetes_version', null)),
        disk_encryption_set_id: build.template(std.get(block, 'disk_encryption_set_id', null)),
        dns_prefix: build.template(std.get(block, 'dns_prefix', null)),
        fqdn: build.template(std.get(block, 'fqdn', null)),
        http_application_routing_enabled: build.template(std.get(block, 'http_application_routing_enabled', null)),
        http_application_routing_zone_name: build.template(std.get(block, 'http_application_routing_zone_name', null)),
        id: build.template(std.get(block, 'id', null)),
        identity: build.template(std.get(block, 'identity', null)),
        ingress_application_gateway: build.template(std.get(block, 'ingress_application_gateway', null)),
        key_management_service: build.template(std.get(block, 'key_management_service', null)),
        key_vault_secrets_provider: build.template(std.get(block, 'key_vault_secrets_provider', null)),
        kube_admin_config: build.template(std.get(block, 'kube_admin_config', null)),
        kube_admin_config_raw: build.template(std.get(block, 'kube_admin_config_raw', null)),
        kube_config: build.template(std.get(block, 'kube_config', null)),
        kube_config_raw: build.template(std.get(block, 'kube_config_raw', null)),
        kubelet_identity: build.template(std.get(block, 'kubelet_identity', null)),
        kubernetes_version: build.template(std.get(block, 'kubernetes_version', null)),
        linux_profile: build.template(std.get(block, 'linux_profile', null)),
        location: build.template(std.get(block, 'location', null)),
        microsoft_defender: build.template(std.get(block, 'microsoft_defender', null)),
        name: build.template(block.name),
        network_profile: build.template(std.get(block, 'network_profile', null)),
        node_resource_group: build.template(std.get(block, 'node_resource_group', null)),
        node_resource_group_id: build.template(std.get(block, 'node_resource_group_id', null)),
        oidc_issuer_enabled: build.template(std.get(block, 'oidc_issuer_enabled', null)),
        oidc_issuer_url: build.template(std.get(block, 'oidc_issuer_url', null)),
        oms_agent: build.template(std.get(block, 'oms_agent', null)),
        open_service_mesh_enabled: build.template(std.get(block, 'open_service_mesh_enabled', null)),
        private_cluster_enabled: build.template(std.get(block, 'private_cluster_enabled', null)),
        private_fqdn: build.template(std.get(block, 'private_fqdn', null)),
        resource_group_name: build.template(block.resource_group_name),
        role_based_access_control_enabled: build.template(std.get(block, 'role_based_access_control_enabled', null)),
        service_mesh_profile: build.template(std.get(block, 'service_mesh_profile', null)),
        service_principal: build.template(std.get(block, 'service_principal', null)),
        storage_profile: build.template(std.get(block, 'storage_profile', null)),
        tags: build.template(std.get(block, 'tags', null)),
        windows_profile: build.template(std.get(block, 'windows_profile', null)),
      }),
      aci_connector_linux: resource.field(self._.blocks, 'aci_connector_linux'),
      agent_pool_profile: resource.field(self._.blocks, 'agent_pool_profile'),
      api_server_authorized_ip_ranges: resource.field(self._.blocks, 'api_server_authorized_ip_ranges'),
      azure_active_directory_role_based_access_control: resource.field(self._.blocks, 'azure_active_directory_role_based_access_control'),
      azure_policy_enabled: resource.field(self._.blocks, 'azure_policy_enabled'),
      current_kubernetes_version: resource.field(self._.blocks, 'current_kubernetes_version'),
      disk_encryption_set_id: resource.field(self._.blocks, 'disk_encryption_set_id'),
      dns_prefix: resource.field(self._.blocks, 'dns_prefix'),
      fqdn: resource.field(self._.blocks, 'fqdn'),
      http_application_routing_enabled: resource.field(self._.blocks, 'http_application_routing_enabled'),
      http_application_routing_zone_name: resource.field(self._.blocks, 'http_application_routing_zone_name'),
      id: resource.field(self._.blocks, 'id'),
      identity: resource.field(self._.blocks, 'identity'),
      ingress_application_gateway: resource.field(self._.blocks, 'ingress_application_gateway'),
      key_management_service: resource.field(self._.blocks, 'key_management_service'),
      key_vault_secrets_provider: resource.field(self._.blocks, 'key_vault_secrets_provider'),
      kube_admin_config: resource.field(self._.blocks, 'kube_admin_config'),
      kube_admin_config_raw: resource.field(self._.blocks, 'kube_admin_config_raw'),
      kube_config: resource.field(self._.blocks, 'kube_config'),
      kube_config_raw: resource.field(self._.blocks, 'kube_config_raw'),
      kubelet_identity: resource.field(self._.blocks, 'kubelet_identity'),
      kubernetes_version: resource.field(self._.blocks, 'kubernetes_version'),
      linux_profile: resource.field(self._.blocks, 'linux_profile'),
      location: resource.field(self._.blocks, 'location'),
      microsoft_defender: resource.field(self._.blocks, 'microsoft_defender'),
      name: resource.field(self._.blocks, 'name'),
      network_profile: resource.field(self._.blocks, 'network_profile'),
      node_resource_group: resource.field(self._.blocks, 'node_resource_group'),
      node_resource_group_id: resource.field(self._.blocks, 'node_resource_group_id'),
      oidc_issuer_enabled: resource.field(self._.blocks, 'oidc_issuer_enabled'),
      oidc_issuer_url: resource.field(self._.blocks, 'oidc_issuer_url'),
      oms_agent: resource.field(self._.blocks, 'oms_agent'),
      open_service_mesh_enabled: resource.field(self._.blocks, 'open_service_mesh_enabled'),
      private_cluster_enabled: resource.field(self._.blocks, 'private_cluster_enabled'),
      private_fqdn: resource.field(self._.blocks, 'private_fqdn'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      role_based_access_control_enabled: resource.field(self._.blocks, 'role_based_access_control_enabled'),
      service_mesh_profile: resource.field(self._.blocks, 'service_mesh_profile'),
      service_principal: resource.field(self._.blocks, 'service_principal'),
      storage_profile: resource.field(self._.blocks, 'storage_profile'),
      tags: resource.field(self._.blocks, 'tags'),
      windows_profile: resource.field(self._.blocks, 'windows_profile'),
    },
    kubernetes_cluster_node_pool(name, block): {
      local resource = blockType.resource('azurerm_kubernetes_cluster_node_pool', name),
      _: resource._(block, {
        auto_scaling_enabled: build.template(std.get(block, 'auto_scaling_enabled', null)),
        eviction_policy: build.template(std.get(block, 'eviction_policy', null)),
        id: build.template(std.get(block, 'id', null)),
        kubernetes_cluster_name: build.template(block.kubernetes_cluster_name),
        max_count: build.template(std.get(block, 'max_count', null)),
        max_pods: build.template(std.get(block, 'max_pods', null)),
        min_count: build.template(std.get(block, 'min_count', null)),
        mode: build.template(std.get(block, 'mode', null)),
        name: build.template(block.name),
        node_count: build.template(std.get(block, 'node_count', null)),
        node_labels: build.template(std.get(block, 'node_labels', null)),
        node_public_ip_enabled: build.template(std.get(block, 'node_public_ip_enabled', null)),
        node_public_ip_prefix_id: build.template(std.get(block, 'node_public_ip_prefix_id', null)),
        node_taints: build.template(std.get(block, 'node_taints', null)),
        orchestrator_version: build.template(std.get(block, 'orchestrator_version', null)),
        os_disk_size_gb: build.template(std.get(block, 'os_disk_size_gb', null)),
        os_disk_type: build.template(std.get(block, 'os_disk_type', null)),
        os_type: build.template(std.get(block, 'os_type', null)),
        priority: build.template(std.get(block, 'priority', null)),
        proximity_placement_group_id: build.template(std.get(block, 'proximity_placement_group_id', null)),
        resource_group_name: build.template(block.resource_group_name),
        spot_max_price: build.template(std.get(block, 'spot_max_price', null)),
        tags: build.template(std.get(block, 'tags', null)),
        upgrade_settings: build.template(std.get(block, 'upgrade_settings', null)),
        vm_size: build.template(std.get(block, 'vm_size', null)),
        vnet_subnet_id: build.template(std.get(block, 'vnet_subnet_id', null)),
        zones: build.template(std.get(block, 'zones', null)),
      }),
      auto_scaling_enabled: resource.field(self._.blocks, 'auto_scaling_enabled'),
      eviction_policy: resource.field(self._.blocks, 'eviction_policy'),
      id: resource.field(self._.blocks, 'id'),
      kubernetes_cluster_name: resource.field(self._.blocks, 'kubernetes_cluster_name'),
      max_count: resource.field(self._.blocks, 'max_count'),
      max_pods: resource.field(self._.blocks, 'max_pods'),
      min_count: resource.field(self._.blocks, 'min_count'),
      mode: resource.field(self._.blocks, 'mode'),
      name: resource.field(self._.blocks, 'name'),
      node_count: resource.field(self._.blocks, 'node_count'),
      node_labels: resource.field(self._.blocks, 'node_labels'),
      node_public_ip_enabled: resource.field(self._.blocks, 'node_public_ip_enabled'),
      node_public_ip_prefix_id: resource.field(self._.blocks, 'node_public_ip_prefix_id'),
      node_taints: resource.field(self._.blocks, 'node_taints'),
      orchestrator_version: resource.field(self._.blocks, 'orchestrator_version'),
      os_disk_size_gb: resource.field(self._.blocks, 'os_disk_size_gb'),
      os_disk_type: resource.field(self._.blocks, 'os_disk_type'),
      os_type: resource.field(self._.blocks, 'os_type'),
      priority: resource.field(self._.blocks, 'priority'),
      proximity_placement_group_id: resource.field(self._.blocks, 'proximity_placement_group_id'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      spot_max_price: resource.field(self._.blocks, 'spot_max_price'),
      tags: resource.field(self._.blocks, 'tags'),
      upgrade_settings: resource.field(self._.blocks, 'upgrade_settings'),
      vm_size: resource.field(self._.blocks, 'vm_size'),
      vnet_subnet_id: resource.field(self._.blocks, 'vnet_subnet_id'),
      zones: resource.field(self._.blocks, 'zones'),
    },
    kubernetes_fleet_manager(name, block): {
      local resource = blockType.resource('azurerm_kubernetes_fleet_manager', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    kubernetes_node_pool_snapshot(name, block): {
      local resource = blockType.resource('azurerm_kubernetes_node_pool_snapshot', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        source_node_pool_id: build.template(std.get(block, 'source_node_pool_id', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      source_node_pool_id: resource.field(self._.blocks, 'source_node_pool_id'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    kubernetes_service_versions(name, block): {
      local resource = blockType.resource('azurerm_kubernetes_service_versions', name),
      _: resource._(block, {
        default_version: build.template(std.get(block, 'default_version', null)),
        id: build.template(std.get(block, 'id', null)),
        include_preview: build.template(std.get(block, 'include_preview', null)),
        latest_version: build.template(std.get(block, 'latest_version', null)),
        location: build.template(block.location),
        version_prefix: build.template(std.get(block, 'version_prefix', null)),
        versions: build.template(std.get(block, 'versions', null)),
      }),
      default_version: resource.field(self._.blocks, 'default_version'),
      id: resource.field(self._.blocks, 'id'),
      include_preview: resource.field(self._.blocks, 'include_preview'),
      latest_version: resource.field(self._.blocks, 'latest_version'),
      location: resource.field(self._.blocks, 'location'),
      version_prefix: resource.field(self._.blocks, 'version_prefix'),
      versions: resource.field(self._.blocks, 'versions'),
    },
    kusto_cluster(name, block): {
      local resource = blockType.resource('azurerm_kusto_cluster', name),
      _: resource._(block, {
        data_ingestion_uri: build.template(std.get(block, 'data_ingestion_uri', null)),
        id: build.template(std.get(block, 'id', null)),
        identity: build.template(std.get(block, 'identity', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
        uri: build.template(std.get(block, 'uri', null)),
      }),
      data_ingestion_uri: resource.field(self._.blocks, 'data_ingestion_uri'),
      id: resource.field(self._.blocks, 'id'),
      identity: resource.field(self._.blocks, 'identity'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
      uri: resource.field(self._.blocks, 'uri'),
    },
    kusto_database(name, block): {
      local resource = blockType.resource('azurerm_kusto_database', name),
      _: resource._(block, {
        cluster_name: build.template(block.cluster_name),
        hot_cache_period: build.template(std.get(block, 'hot_cache_period', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        size: build.template(std.get(block, 'size', null)),
        soft_delete_period: build.template(std.get(block, 'soft_delete_period', null)),
      }),
      cluster_name: resource.field(self._.blocks, 'cluster_name'),
      hot_cache_period: resource.field(self._.blocks, 'hot_cache_period'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      size: resource.field(self._.blocks, 'size'),
      soft_delete_period: resource.field(self._.blocks, 'soft_delete_period'),
    },
    lb(name, block): {
      local resource = blockType.resource('azurerm_lb', name),
      _: resource._(block, {
        frontend_ip_configuration: build.template(std.get(block, 'frontend_ip_configuration', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        private_ip_address: build.template(std.get(block, 'private_ip_address', null)),
        private_ip_addresses: build.template(std.get(block, 'private_ip_addresses', null)),
        resource_group_name: build.template(block.resource_group_name),
        sku: build.template(std.get(block, 'sku', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      frontend_ip_configuration: resource.field(self._.blocks, 'frontend_ip_configuration'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      private_ip_address: resource.field(self._.blocks, 'private_ip_address'),
      private_ip_addresses: resource.field(self._.blocks, 'private_ip_addresses'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      sku: resource.field(self._.blocks, 'sku'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    lb_backend_address_pool(name, block): {
      local resource = blockType.resource('azurerm_lb_backend_address_pool', name),
      _: resource._(block, {
        backend_address: build.template(std.get(block, 'backend_address', null)),
        backend_ip_configurations: build.template(std.get(block, 'backend_ip_configurations', null)),
        id: build.template(std.get(block, 'id', null)),
        inbound_nat_rules: build.template(std.get(block, 'inbound_nat_rules', null)),
        load_balancing_rules: build.template(std.get(block, 'load_balancing_rules', null)),
        loadbalancer_id: build.template(block.loadbalancer_id),
        name: build.template(block.name),
        outbound_rules: build.template(std.get(block, 'outbound_rules', null)),
      }),
      backend_address: resource.field(self._.blocks, 'backend_address'),
      backend_ip_configurations: resource.field(self._.blocks, 'backend_ip_configurations'),
      id: resource.field(self._.blocks, 'id'),
      inbound_nat_rules: resource.field(self._.blocks, 'inbound_nat_rules'),
      load_balancing_rules: resource.field(self._.blocks, 'load_balancing_rules'),
      loadbalancer_id: resource.field(self._.blocks, 'loadbalancer_id'),
      name: resource.field(self._.blocks, 'name'),
      outbound_rules: resource.field(self._.blocks, 'outbound_rules'),
    },
    lb_outbound_rule(name, block): {
      local resource = blockType.resource('azurerm_lb_outbound_rule', name),
      _: resource._(block, {
        allocated_outbound_ports: build.template(std.get(block, 'allocated_outbound_ports', null)),
        backend_address_pool_id: build.template(std.get(block, 'backend_address_pool_id', null)),
        frontend_ip_configuration: build.template(std.get(block, 'frontend_ip_configuration', null)),
        id: build.template(std.get(block, 'id', null)),
        idle_timeout_in_minutes: build.template(std.get(block, 'idle_timeout_in_minutes', null)),
        loadbalancer_id: build.template(block.loadbalancer_id),
        name: build.template(block.name),
        protocol: build.template(std.get(block, 'protocol', null)),
        tcp_reset_enabled: build.template(std.get(block, 'tcp_reset_enabled', null)),
      }),
      allocated_outbound_ports: resource.field(self._.blocks, 'allocated_outbound_ports'),
      backend_address_pool_id: resource.field(self._.blocks, 'backend_address_pool_id'),
      frontend_ip_configuration: resource.field(self._.blocks, 'frontend_ip_configuration'),
      id: resource.field(self._.blocks, 'id'),
      idle_timeout_in_minutes: resource.field(self._.blocks, 'idle_timeout_in_minutes'),
      loadbalancer_id: resource.field(self._.blocks, 'loadbalancer_id'),
      name: resource.field(self._.blocks, 'name'),
      protocol: resource.field(self._.blocks, 'protocol'),
      tcp_reset_enabled: resource.field(self._.blocks, 'tcp_reset_enabled'),
    },
    lb_rule(name, block): {
      local resource = blockType.resource('azurerm_lb_rule', name),
      _: resource._(block, {
        backend_address_pool_id: build.template(std.get(block, 'backend_address_pool_id', null)),
        backend_port: build.template(std.get(block, 'backend_port', null)),
        disable_outbound_snat: build.template(std.get(block, 'disable_outbound_snat', null)),
        enable_floating_ip: build.template(std.get(block, 'enable_floating_ip', null)),
        enable_tcp_reset: build.template(std.get(block, 'enable_tcp_reset', null)),
        frontend_ip_configuration_name: build.template(std.get(block, 'frontend_ip_configuration_name', null)),
        frontend_port: build.template(std.get(block, 'frontend_port', null)),
        id: build.template(std.get(block, 'id', null)),
        idle_timeout_in_minutes: build.template(std.get(block, 'idle_timeout_in_minutes', null)),
        load_distribution: build.template(std.get(block, 'load_distribution', null)),
        loadbalancer_id: build.template(block.loadbalancer_id),
        name: build.template(block.name),
        probe_id: build.template(std.get(block, 'probe_id', null)),
        protocol: build.template(std.get(block, 'protocol', null)),
      }),
      backend_address_pool_id: resource.field(self._.blocks, 'backend_address_pool_id'),
      backend_port: resource.field(self._.blocks, 'backend_port'),
      disable_outbound_snat: resource.field(self._.blocks, 'disable_outbound_snat'),
      enable_floating_ip: resource.field(self._.blocks, 'enable_floating_ip'),
      enable_tcp_reset: resource.field(self._.blocks, 'enable_tcp_reset'),
      frontend_ip_configuration_name: resource.field(self._.blocks, 'frontend_ip_configuration_name'),
      frontend_port: resource.field(self._.blocks, 'frontend_port'),
      id: resource.field(self._.blocks, 'id'),
      idle_timeout_in_minutes: resource.field(self._.blocks, 'idle_timeout_in_minutes'),
      load_distribution: resource.field(self._.blocks, 'load_distribution'),
      loadbalancer_id: resource.field(self._.blocks, 'loadbalancer_id'),
      name: resource.field(self._.blocks, 'name'),
      probe_id: resource.field(self._.blocks, 'probe_id'),
      protocol: resource.field(self._.blocks, 'protocol'),
    },
    linux_function_app(name, block): {
      local resource = blockType.resource('azurerm_linux_function_app', name),
      _: resource._(block, {
        app_settings: build.template(std.get(block, 'app_settings', null)),
        auth_settings: build.template(std.get(block, 'auth_settings', null)),
        auth_settings_v2: build.template(std.get(block, 'auth_settings_v2', null)),
        availability: build.template(std.get(block, 'availability', null)),
        backup: build.template(std.get(block, 'backup', null)),
        builtin_logging_enabled: build.template(std.get(block, 'builtin_logging_enabled', null)),
        client_certificate_enabled: build.template(std.get(block, 'client_certificate_enabled', null)),
        client_certificate_exclusion_paths: build.template(std.get(block, 'client_certificate_exclusion_paths', null)),
        client_certificate_mode: build.template(std.get(block, 'client_certificate_mode', null)),
        connection_string: build.template(std.get(block, 'connection_string', null)),
        content_share_force_disabled: build.template(std.get(block, 'content_share_force_disabled', null)),
        custom_domain_verification_id: build.template(std.get(block, 'custom_domain_verification_id', null)),
        daily_memory_time_quota: build.template(std.get(block, 'daily_memory_time_quota', null)),
        default_hostname: build.template(std.get(block, 'default_hostname', null)),
        enabled: build.template(std.get(block, 'enabled', null)),
        ftp_publish_basic_authentication_enabled: build.template(std.get(block, 'ftp_publish_basic_authentication_enabled', null)),
        functions_extension_version: build.template(std.get(block, 'functions_extension_version', null)),
        hosting_environment_id: build.template(std.get(block, 'hosting_environment_id', null)),
        https_only: build.template(std.get(block, 'https_only', null)),
        id: build.template(std.get(block, 'id', null)),
        identity: build.template(std.get(block, 'identity', null)),
        kind: build.template(std.get(block, 'kind', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        outbound_ip_address_list: build.template(std.get(block, 'outbound_ip_address_list', null)),
        outbound_ip_addresses: build.template(std.get(block, 'outbound_ip_addresses', null)),
        possible_outbound_ip_address_list: build.template(std.get(block, 'possible_outbound_ip_address_list', null)),
        possible_outbound_ip_addresses: build.template(std.get(block, 'possible_outbound_ip_addresses', null)),
        public_network_access_enabled: build.template(std.get(block, 'public_network_access_enabled', null)),
        resource_group_name: build.template(block.resource_group_name),
        service_plan_id: build.template(std.get(block, 'service_plan_id', null)),
        site_config: build.template(std.get(block, 'site_config', null)),
        site_credential: build.template(std.get(block, 'site_credential', null)),
        sticky_settings: build.template(std.get(block, 'sticky_settings', null)),
        storage_account_access_key: build.template(std.get(block, 'storage_account_access_key', null)),
        storage_account_name: build.template(std.get(block, 'storage_account_name', null)),
        storage_key_vault_secret_id: build.template(std.get(block, 'storage_key_vault_secret_id', null)),
        storage_uses_managed_identity: build.template(std.get(block, 'storage_uses_managed_identity', null)),
        tags: build.template(std.get(block, 'tags', null)),
        usage: build.template(std.get(block, 'usage', null)),
        virtual_network_subnet_id: build.template(std.get(block, 'virtual_network_subnet_id', null)),
        webdeploy_publish_basic_authentication_enabled: build.template(std.get(block, 'webdeploy_publish_basic_authentication_enabled', null)),
      }),
      app_settings: resource.field(self._.blocks, 'app_settings'),
      auth_settings: resource.field(self._.blocks, 'auth_settings'),
      auth_settings_v2: resource.field(self._.blocks, 'auth_settings_v2'),
      availability: resource.field(self._.blocks, 'availability'),
      backup: resource.field(self._.blocks, 'backup'),
      builtin_logging_enabled: resource.field(self._.blocks, 'builtin_logging_enabled'),
      client_certificate_enabled: resource.field(self._.blocks, 'client_certificate_enabled'),
      client_certificate_exclusion_paths: resource.field(self._.blocks, 'client_certificate_exclusion_paths'),
      client_certificate_mode: resource.field(self._.blocks, 'client_certificate_mode'),
      connection_string: resource.field(self._.blocks, 'connection_string'),
      content_share_force_disabled: resource.field(self._.blocks, 'content_share_force_disabled'),
      custom_domain_verification_id: resource.field(self._.blocks, 'custom_domain_verification_id'),
      daily_memory_time_quota: resource.field(self._.blocks, 'daily_memory_time_quota'),
      default_hostname: resource.field(self._.blocks, 'default_hostname'),
      enabled: resource.field(self._.blocks, 'enabled'),
      ftp_publish_basic_authentication_enabled: resource.field(self._.blocks, 'ftp_publish_basic_authentication_enabled'),
      functions_extension_version: resource.field(self._.blocks, 'functions_extension_version'),
      hosting_environment_id: resource.field(self._.blocks, 'hosting_environment_id'),
      https_only: resource.field(self._.blocks, 'https_only'),
      id: resource.field(self._.blocks, 'id'),
      identity: resource.field(self._.blocks, 'identity'),
      kind: resource.field(self._.blocks, 'kind'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      outbound_ip_address_list: resource.field(self._.blocks, 'outbound_ip_address_list'),
      outbound_ip_addresses: resource.field(self._.blocks, 'outbound_ip_addresses'),
      possible_outbound_ip_address_list: resource.field(self._.blocks, 'possible_outbound_ip_address_list'),
      possible_outbound_ip_addresses: resource.field(self._.blocks, 'possible_outbound_ip_addresses'),
      public_network_access_enabled: resource.field(self._.blocks, 'public_network_access_enabled'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      service_plan_id: resource.field(self._.blocks, 'service_plan_id'),
      site_config: resource.field(self._.blocks, 'site_config'),
      site_credential: resource.field(self._.blocks, 'site_credential'),
      sticky_settings: resource.field(self._.blocks, 'sticky_settings'),
      storage_account_access_key: resource.field(self._.blocks, 'storage_account_access_key'),
      storage_account_name: resource.field(self._.blocks, 'storage_account_name'),
      storage_key_vault_secret_id: resource.field(self._.blocks, 'storage_key_vault_secret_id'),
      storage_uses_managed_identity: resource.field(self._.blocks, 'storage_uses_managed_identity'),
      tags: resource.field(self._.blocks, 'tags'),
      usage: resource.field(self._.blocks, 'usage'),
      virtual_network_subnet_id: resource.field(self._.blocks, 'virtual_network_subnet_id'),
      webdeploy_publish_basic_authentication_enabled: resource.field(self._.blocks, 'webdeploy_publish_basic_authentication_enabled'),
    },
    linux_web_app(name, block): {
      local resource = blockType.resource('azurerm_linux_web_app', name),
      _: resource._(block, {
        app_metadata: build.template(std.get(block, 'app_metadata', null)),
        app_settings: build.template(std.get(block, 'app_settings', null)),
        auth_settings: build.template(std.get(block, 'auth_settings', null)),
        auth_settings_v2: build.template(std.get(block, 'auth_settings_v2', null)),
        availability: build.template(std.get(block, 'availability', null)),
        backup: build.template(std.get(block, 'backup', null)),
        client_affinity_enabled: build.template(std.get(block, 'client_affinity_enabled', null)),
        client_certificate_enabled: build.template(std.get(block, 'client_certificate_enabled', null)),
        client_certificate_exclusion_paths: build.template(std.get(block, 'client_certificate_exclusion_paths', null)),
        client_certificate_mode: build.template(std.get(block, 'client_certificate_mode', null)),
        connection_string: build.template(std.get(block, 'connection_string', null)),
        custom_domain_verification_id: build.template(std.get(block, 'custom_domain_verification_id', null)),
        default_hostname: build.template(std.get(block, 'default_hostname', null)),
        enabled: build.template(std.get(block, 'enabled', null)),
        ftp_publish_basic_authentication_enabled: build.template(std.get(block, 'ftp_publish_basic_authentication_enabled', null)),
        hosting_environment_id: build.template(std.get(block, 'hosting_environment_id', null)),
        https_only: build.template(std.get(block, 'https_only', null)),
        id: build.template(std.get(block, 'id', null)),
        identity: build.template(std.get(block, 'identity', null)),
        key_vault_reference_identity_id: build.template(std.get(block, 'key_vault_reference_identity_id', null)),
        kind: build.template(std.get(block, 'kind', null)),
        location: build.template(std.get(block, 'location', null)),
        logs: build.template(std.get(block, 'logs', null)),
        name: build.template(block.name),
        outbound_ip_address_list: build.template(std.get(block, 'outbound_ip_address_list', null)),
        outbound_ip_addresses: build.template(std.get(block, 'outbound_ip_addresses', null)),
        possible_outbound_ip_address_list: build.template(std.get(block, 'possible_outbound_ip_address_list', null)),
        possible_outbound_ip_addresses: build.template(std.get(block, 'possible_outbound_ip_addresses', null)),
        public_network_access_enabled: build.template(std.get(block, 'public_network_access_enabled', null)),
        resource_group_name: build.template(block.resource_group_name),
        service_plan_id: build.template(std.get(block, 'service_plan_id', null)),
        site_config: build.template(std.get(block, 'site_config', null)),
        site_credential: build.template(std.get(block, 'site_credential', null)),
        sticky_settings: build.template(std.get(block, 'sticky_settings', null)),
        storage_account: build.template(std.get(block, 'storage_account', null)),
        tags: build.template(std.get(block, 'tags', null)),
        usage: build.template(std.get(block, 'usage', null)),
        virtual_network_subnet_id: build.template(std.get(block, 'virtual_network_subnet_id', null)),
        webdeploy_publish_basic_authentication_enabled: build.template(std.get(block, 'webdeploy_publish_basic_authentication_enabled', null)),
      }),
      app_metadata: resource.field(self._.blocks, 'app_metadata'),
      app_settings: resource.field(self._.blocks, 'app_settings'),
      auth_settings: resource.field(self._.blocks, 'auth_settings'),
      auth_settings_v2: resource.field(self._.blocks, 'auth_settings_v2'),
      availability: resource.field(self._.blocks, 'availability'),
      backup: resource.field(self._.blocks, 'backup'),
      client_affinity_enabled: resource.field(self._.blocks, 'client_affinity_enabled'),
      client_certificate_enabled: resource.field(self._.blocks, 'client_certificate_enabled'),
      client_certificate_exclusion_paths: resource.field(self._.blocks, 'client_certificate_exclusion_paths'),
      client_certificate_mode: resource.field(self._.blocks, 'client_certificate_mode'),
      connection_string: resource.field(self._.blocks, 'connection_string'),
      custom_domain_verification_id: resource.field(self._.blocks, 'custom_domain_verification_id'),
      default_hostname: resource.field(self._.blocks, 'default_hostname'),
      enabled: resource.field(self._.blocks, 'enabled'),
      ftp_publish_basic_authentication_enabled: resource.field(self._.blocks, 'ftp_publish_basic_authentication_enabled'),
      hosting_environment_id: resource.field(self._.blocks, 'hosting_environment_id'),
      https_only: resource.field(self._.blocks, 'https_only'),
      id: resource.field(self._.blocks, 'id'),
      identity: resource.field(self._.blocks, 'identity'),
      key_vault_reference_identity_id: resource.field(self._.blocks, 'key_vault_reference_identity_id'),
      kind: resource.field(self._.blocks, 'kind'),
      location: resource.field(self._.blocks, 'location'),
      logs: resource.field(self._.blocks, 'logs'),
      name: resource.field(self._.blocks, 'name'),
      outbound_ip_address_list: resource.field(self._.blocks, 'outbound_ip_address_list'),
      outbound_ip_addresses: resource.field(self._.blocks, 'outbound_ip_addresses'),
      possible_outbound_ip_address_list: resource.field(self._.blocks, 'possible_outbound_ip_address_list'),
      possible_outbound_ip_addresses: resource.field(self._.blocks, 'possible_outbound_ip_addresses'),
      public_network_access_enabled: resource.field(self._.blocks, 'public_network_access_enabled'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      service_plan_id: resource.field(self._.blocks, 'service_plan_id'),
      site_config: resource.field(self._.blocks, 'site_config'),
      site_credential: resource.field(self._.blocks, 'site_credential'),
      sticky_settings: resource.field(self._.blocks, 'sticky_settings'),
      storage_account: resource.field(self._.blocks, 'storage_account'),
      tags: resource.field(self._.blocks, 'tags'),
      usage: resource.field(self._.blocks, 'usage'),
      virtual_network_subnet_id: resource.field(self._.blocks, 'virtual_network_subnet_id'),
      webdeploy_publish_basic_authentication_enabled: resource.field(self._.blocks, 'webdeploy_publish_basic_authentication_enabled'),
    },
    load_test(name, block): {
      local resource = blockType.resource('azurerm_load_test', name),
      _: resource._(block, {
        data_plane_uri: build.template(std.get(block, 'data_plane_uri', null)),
        description: build.template(std.get(block, 'description', null)),
        encryption: build.template(std.get(block, 'encryption', null)),
        id: build.template(std.get(block, 'id', null)),
        identity: build.template(std.get(block, 'identity', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      data_plane_uri: resource.field(self._.blocks, 'data_plane_uri'),
      description: resource.field(self._.blocks, 'description'),
      encryption: resource.field(self._.blocks, 'encryption'),
      id: resource.field(self._.blocks, 'id'),
      identity: resource.field(self._.blocks, 'identity'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    local_network_gateway(name, block): {
      local resource = blockType.resource('azurerm_local_network_gateway', name),
      _: resource._(block, {
        address_space: build.template(std.get(block, 'address_space', null)),
        bgp_settings: build.template(std.get(block, 'bgp_settings', null)),
        gateway_address: build.template(std.get(block, 'gateway_address', null)),
        gateway_fqdn: build.template(std.get(block, 'gateway_fqdn', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      address_space: resource.field(self._.blocks, 'address_space'),
      bgp_settings: resource.field(self._.blocks, 'bgp_settings'),
      gateway_address: resource.field(self._.blocks, 'gateway_address'),
      gateway_fqdn: resource.field(self._.blocks, 'gateway_fqdn'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    location(name, block): {
      local resource = blockType.resource('azurerm_location', name),
      _: resource._(block, {
        display_name: build.template(std.get(block, 'display_name', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        zone_mappings: build.template(std.get(block, 'zone_mappings', null)),
      }),
      display_name: resource.field(self._.blocks, 'display_name'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      zone_mappings: resource.field(self._.blocks, 'zone_mappings'),
    },
    log_analytics_workspace(name, block): {
      local resource = blockType.resource('azurerm_log_analytics_workspace', name),
      _: resource._(block, {
        daily_quota_gb: build.template(std.get(block, 'daily_quota_gb', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        primary_shared_key: build.template(std.get(block, 'primary_shared_key', null)),
        resource_group_name: build.template(block.resource_group_name),
        retention_in_days: build.template(std.get(block, 'retention_in_days', null)),
        secondary_shared_key: build.template(std.get(block, 'secondary_shared_key', null)),
        sku: build.template(std.get(block, 'sku', null)),
        tags: build.template(std.get(block, 'tags', null)),
        workspace_id: build.template(std.get(block, 'workspace_id', null)),
      }),
      daily_quota_gb: resource.field(self._.blocks, 'daily_quota_gb'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      primary_shared_key: resource.field(self._.blocks, 'primary_shared_key'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      retention_in_days: resource.field(self._.blocks, 'retention_in_days'),
      secondary_shared_key: resource.field(self._.blocks, 'secondary_shared_key'),
      sku: resource.field(self._.blocks, 'sku'),
      tags: resource.field(self._.blocks, 'tags'),
      workspace_id: resource.field(self._.blocks, 'workspace_id'),
    },
    logic_app_integration_account(name, block): {
      local resource = blockType.resource('azurerm_logic_app_integration_account', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        sku_name: build.template(std.get(block, 'sku_name', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      sku_name: resource.field(self._.blocks, 'sku_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    logic_app_standard(name, block): {
      local resource = blockType.resource('azurerm_logic_app_standard', name),
      _: resource._(block, {
        app_service_plan_id: build.template(std.get(block, 'app_service_plan_id', null)),
        app_settings: build.template(std.get(block, 'app_settings', null)),
        bundle_version: build.template(std.get(block, 'bundle_version', null)),
        client_affinity_enabled: build.template(std.get(block, 'client_affinity_enabled', null)),
        client_certificate_mode: build.template(std.get(block, 'client_certificate_mode', null)),
        connection_string: build.template(std.get(block, 'connection_string', null)),
        custom_domain_verification_id: build.template(std.get(block, 'custom_domain_verification_id', null)),
        default_hostname: build.template(std.get(block, 'default_hostname', null)),
        enabled: build.template(std.get(block, 'enabled', null)),
        ftp_publish_basic_authentication_enabled: build.template(std.get(block, 'ftp_publish_basic_authentication_enabled', null)),
        https_only: build.template(std.get(block, 'https_only', null)),
        id: build.template(std.get(block, 'id', null)),
        identity: build.template(std.get(block, 'identity', null)),
        kind: build.template(std.get(block, 'kind', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        outbound_ip_addresses: build.template(std.get(block, 'outbound_ip_addresses', null)),
        possible_outbound_ip_addresses: build.template(std.get(block, 'possible_outbound_ip_addresses', null)),
        public_network_access: build.template(std.get(block, 'public_network_access', null)),
        resource_group_name: build.template(block.resource_group_name),
        scm_publish_basic_authentication_enabled: build.template(std.get(block, 'scm_publish_basic_authentication_enabled', null)),
        site_credential: build.template(std.get(block, 'site_credential', null)),
        storage_account_access_key: build.template(std.get(block, 'storage_account_access_key', null)),
        storage_account_name: build.template(std.get(block, 'storage_account_name', null)),
        storage_account_share_name: build.template(std.get(block, 'storage_account_share_name', null)),
        tags: build.template(std.get(block, 'tags', null)),
        use_extension_bundle: build.template(std.get(block, 'use_extension_bundle', null)),
        version: build.template(std.get(block, 'version', null)),
        virtual_network_subnet_id: build.template(std.get(block, 'virtual_network_subnet_id', null)),
      }),
      app_service_plan_id: resource.field(self._.blocks, 'app_service_plan_id'),
      app_settings: resource.field(self._.blocks, 'app_settings'),
      bundle_version: resource.field(self._.blocks, 'bundle_version'),
      client_affinity_enabled: resource.field(self._.blocks, 'client_affinity_enabled'),
      client_certificate_mode: resource.field(self._.blocks, 'client_certificate_mode'),
      connection_string: resource.field(self._.blocks, 'connection_string'),
      custom_domain_verification_id: resource.field(self._.blocks, 'custom_domain_verification_id'),
      default_hostname: resource.field(self._.blocks, 'default_hostname'),
      enabled: resource.field(self._.blocks, 'enabled'),
      ftp_publish_basic_authentication_enabled: resource.field(self._.blocks, 'ftp_publish_basic_authentication_enabled'),
      https_only: resource.field(self._.blocks, 'https_only'),
      id: resource.field(self._.blocks, 'id'),
      identity: resource.field(self._.blocks, 'identity'),
      kind: resource.field(self._.blocks, 'kind'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      outbound_ip_addresses: resource.field(self._.blocks, 'outbound_ip_addresses'),
      possible_outbound_ip_addresses: resource.field(self._.blocks, 'possible_outbound_ip_addresses'),
      public_network_access: resource.field(self._.blocks, 'public_network_access'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      scm_publish_basic_authentication_enabled: resource.field(self._.blocks, 'scm_publish_basic_authentication_enabled'),
      site_credential: resource.field(self._.blocks, 'site_credential'),
      storage_account_access_key: resource.field(self._.blocks, 'storage_account_access_key'),
      storage_account_name: resource.field(self._.blocks, 'storage_account_name'),
      storage_account_share_name: resource.field(self._.blocks, 'storage_account_share_name'),
      tags: resource.field(self._.blocks, 'tags'),
      use_extension_bundle: resource.field(self._.blocks, 'use_extension_bundle'),
      version: resource.field(self._.blocks, 'version'),
      virtual_network_subnet_id: resource.field(self._.blocks, 'virtual_network_subnet_id'),
    },
    logic_app_workflow(name, block): {
      local resource = blockType.resource('azurerm_logic_app_workflow', name),
      _: resource._(block, {
        access_endpoint: build.template(std.get(block, 'access_endpoint', null)),
        connector_endpoint_ip_addresses: build.template(std.get(block, 'connector_endpoint_ip_addresses', null)),
        connector_outbound_ip_addresses: build.template(std.get(block, 'connector_outbound_ip_addresses', null)),
        id: build.template(std.get(block, 'id', null)),
        identity: build.template(std.get(block, 'identity', null)),
        location: build.template(std.get(block, 'location', null)),
        logic_app_integration_account_id: build.template(std.get(block, 'logic_app_integration_account_id', null)),
        name: build.template(block.name),
        parameters: build.template(std.get(block, 'parameters', null)),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
        workflow_endpoint_ip_addresses: build.template(std.get(block, 'workflow_endpoint_ip_addresses', null)),
        workflow_outbound_ip_addresses: build.template(std.get(block, 'workflow_outbound_ip_addresses', null)),
        workflow_schema: build.template(std.get(block, 'workflow_schema', null)),
        workflow_version: build.template(std.get(block, 'workflow_version', null)),
      }),
      access_endpoint: resource.field(self._.blocks, 'access_endpoint'),
      connector_endpoint_ip_addresses: resource.field(self._.blocks, 'connector_endpoint_ip_addresses'),
      connector_outbound_ip_addresses: resource.field(self._.blocks, 'connector_outbound_ip_addresses'),
      id: resource.field(self._.blocks, 'id'),
      identity: resource.field(self._.blocks, 'identity'),
      location: resource.field(self._.blocks, 'location'),
      logic_app_integration_account_id: resource.field(self._.blocks, 'logic_app_integration_account_id'),
      name: resource.field(self._.blocks, 'name'),
      parameters: resource.field(self._.blocks, 'parameters'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
      workflow_endpoint_ip_addresses: resource.field(self._.blocks, 'workflow_endpoint_ip_addresses'),
      workflow_outbound_ip_addresses: resource.field(self._.blocks, 'workflow_outbound_ip_addresses'),
      workflow_schema: resource.field(self._.blocks, 'workflow_schema'),
      workflow_version: resource.field(self._.blocks, 'workflow_version'),
    },
    machine_learning_workspace(name, block): {
      local resource = blockType.resource('azurerm_machine_learning_workspace', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        identity: build.template(std.get(block, 'identity', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      identity: resource.field(self._.blocks, 'identity'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    maintenance_configuration(name, block): {
      local resource = blockType.resource('azurerm_maintenance_configuration', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        in_guest_user_patch_mode: build.template(std.get(block, 'in_guest_user_patch_mode', null)),
        install_patches: build.template(std.get(block, 'install_patches', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        properties: build.template(std.get(block, 'properties', null)),
        resource_group_name: build.template(block.resource_group_name),
        scope: build.template(std.get(block, 'scope', null)),
        tags: build.template(std.get(block, 'tags', null)),
        visibility: build.template(std.get(block, 'visibility', null)),
        window: build.template(std.get(block, 'window', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      in_guest_user_patch_mode: resource.field(self._.blocks, 'in_guest_user_patch_mode'),
      install_patches: resource.field(self._.blocks, 'install_patches'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      properties: resource.field(self._.blocks, 'properties'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      scope: resource.field(self._.blocks, 'scope'),
      tags: resource.field(self._.blocks, 'tags'),
      visibility: resource.field(self._.blocks, 'visibility'),
      window: resource.field(self._.blocks, 'window'),
    },
    managed_api(name, block): {
      local resource = blockType.resource('azurerm_managed_api', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        name: build.template(block.name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    managed_application_definition(name, block): {
      local resource = blockType.resource('azurerm_managed_application_definition', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
      }),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
    },
    managed_disk(name, block): {
      local resource = blockType.resource('azurerm_managed_disk', name),
      _: resource._(block, {
        create_option: build.template(std.get(block, 'create_option', null)),
        disk_access_id: build.template(std.get(block, 'disk_access_id', null)),
        disk_encryption_set_id: build.template(std.get(block, 'disk_encryption_set_id', null)),
        disk_iops_read_write: build.template(std.get(block, 'disk_iops_read_write', null)),
        disk_mbps_read_write: build.template(std.get(block, 'disk_mbps_read_write', null)),
        disk_size_gb: build.template(std.get(block, 'disk_size_gb', null)),
        encryption_settings: build.template(std.get(block, 'encryption_settings', null)),
        id: build.template(std.get(block, 'id', null)),
        image_reference_id: build.template(std.get(block, 'image_reference_id', null)),
        name: build.template(block.name),
        network_access_policy: build.template(std.get(block, 'network_access_policy', null)),
        os_type: build.template(std.get(block, 'os_type', null)),
        resource_group_name: build.template(block.resource_group_name),
        source_resource_id: build.template(std.get(block, 'source_resource_id', null)),
        source_uri: build.template(std.get(block, 'source_uri', null)),
        storage_account_id: build.template(std.get(block, 'storage_account_id', null)),
        storage_account_type: build.template(std.get(block, 'storage_account_type', null)),
        tags: build.template(std.get(block, 'tags', null)),
        zones: build.template(std.get(block, 'zones', null)),
      }),
      create_option: resource.field(self._.blocks, 'create_option'),
      disk_access_id: resource.field(self._.blocks, 'disk_access_id'),
      disk_encryption_set_id: resource.field(self._.blocks, 'disk_encryption_set_id'),
      disk_iops_read_write: resource.field(self._.blocks, 'disk_iops_read_write'),
      disk_mbps_read_write: resource.field(self._.blocks, 'disk_mbps_read_write'),
      disk_size_gb: resource.field(self._.blocks, 'disk_size_gb'),
      encryption_settings: resource.field(self._.blocks, 'encryption_settings'),
      id: resource.field(self._.blocks, 'id'),
      image_reference_id: resource.field(self._.blocks, 'image_reference_id'),
      name: resource.field(self._.blocks, 'name'),
      network_access_policy: resource.field(self._.blocks, 'network_access_policy'),
      os_type: resource.field(self._.blocks, 'os_type'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      source_resource_id: resource.field(self._.blocks, 'source_resource_id'),
      source_uri: resource.field(self._.blocks, 'source_uri'),
      storage_account_id: resource.field(self._.blocks, 'storage_account_id'),
      storage_account_type: resource.field(self._.blocks, 'storage_account_type'),
      tags: resource.field(self._.blocks, 'tags'),
      zones: resource.field(self._.blocks, 'zones'),
    },
    management_group(name, block): {
      local resource = blockType.resource('azurerm_management_group', name),
      _: resource._(block, {
        all_management_group_ids: build.template(std.get(block, 'all_management_group_ids', null)),
        all_subscription_ids: build.template(std.get(block, 'all_subscription_ids', null)),
        display_name: build.template(std.get(block, 'display_name', null)),
        id: build.template(std.get(block, 'id', null)),
        management_group_ids: build.template(std.get(block, 'management_group_ids', null)),
        name: build.template(std.get(block, 'name', null)),
        parent_management_group_id: build.template(std.get(block, 'parent_management_group_id', null)),
        subscription_ids: build.template(std.get(block, 'subscription_ids', null)),
        tenant_scoped_id: build.template(std.get(block, 'tenant_scoped_id', null)),
      }),
      all_management_group_ids: resource.field(self._.blocks, 'all_management_group_ids'),
      all_subscription_ids: resource.field(self._.blocks, 'all_subscription_ids'),
      display_name: resource.field(self._.blocks, 'display_name'),
      id: resource.field(self._.blocks, 'id'),
      management_group_ids: resource.field(self._.blocks, 'management_group_ids'),
      name: resource.field(self._.blocks, 'name'),
      parent_management_group_id: resource.field(self._.blocks, 'parent_management_group_id'),
      subscription_ids: resource.field(self._.blocks, 'subscription_ids'),
      tenant_scoped_id: resource.field(self._.blocks, 'tenant_scoped_id'),
    },
    management_group_template_deployment(name, block): {
      local resource = blockType.resource('azurerm_management_group_template_deployment', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        management_group_id: build.template(block.management_group_id),
        name: build.template(block.name),
        output_content: build.template(std.get(block, 'output_content', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      management_group_id: resource.field(self._.blocks, 'management_group_id'),
      name: resource.field(self._.blocks, 'name'),
      output_content: resource.field(self._.blocks, 'output_content'),
    },
    maps_account(name, block): {
      local resource = blockType.resource('azurerm_maps_account', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        primary_access_key: build.template(std.get(block, 'primary_access_key', null)),
        resource_group_name: build.template(block.resource_group_name),
        secondary_access_key: build.template(std.get(block, 'secondary_access_key', null)),
        sku_name: build.template(std.get(block, 'sku_name', null)),
        tags: build.template(std.get(block, 'tags', null)),
        x_ms_client_id: build.template(std.get(block, 'x_ms_client_id', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      primary_access_key: resource.field(self._.blocks, 'primary_access_key'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      secondary_access_key: resource.field(self._.blocks, 'secondary_access_key'),
      sku_name: resource.field(self._.blocks, 'sku_name'),
      tags: resource.field(self._.blocks, 'tags'),
      x_ms_client_id: resource.field(self._.blocks, 'x_ms_client_id'),
    },
    marketplace_agreement(name, block): {
      local resource = blockType.resource('azurerm_marketplace_agreement', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        license_text_link: build.template(std.get(block, 'license_text_link', null)),
        offer: build.template(block.offer),
        plan: build.template(block.plan),
        privacy_policy_link: build.template(std.get(block, 'privacy_policy_link', null)),
        publisher: build.template(block.publisher),
      }),
      id: resource.field(self._.blocks, 'id'),
      license_text_link: resource.field(self._.blocks, 'license_text_link'),
      offer: resource.field(self._.blocks, 'offer'),
      plan: resource.field(self._.blocks, 'plan'),
      privacy_policy_link: resource.field(self._.blocks, 'privacy_policy_link'),
      publisher: resource.field(self._.blocks, 'publisher'),
    },
    mobile_network(name, block): {
      local resource = blockType.resource('azurerm_mobile_network', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        mobile_country_code: build.template(std.get(block, 'mobile_country_code', null)),
        mobile_network_code: build.template(std.get(block, 'mobile_network_code', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        service_key: build.template(std.get(block, 'service_key', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      mobile_country_code: resource.field(self._.blocks, 'mobile_country_code'),
      mobile_network_code: resource.field(self._.blocks, 'mobile_network_code'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      service_key: resource.field(self._.blocks, 'service_key'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    mobile_network_attached_data_network(name, block): {
      local resource = blockType.resource('azurerm_mobile_network_attached_data_network', name),
      _: resource._(block, {
        dns_addresses: build.template(std.get(block, 'dns_addresses', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        mobile_network_data_network_name: build.template(block.mobile_network_data_network_name),
        mobile_network_packet_core_data_plane_id: build.template(block.mobile_network_packet_core_data_plane_id),
        network_address_port_translation: build.template(std.get(block, 'network_address_port_translation', null)),
        tags: build.template(std.get(block, 'tags', null)),
        user_equipment_address_pool_prefixes: build.template(std.get(block, 'user_equipment_address_pool_prefixes', null)),
        user_equipment_static_address_pool_prefixes: build.template(std.get(block, 'user_equipment_static_address_pool_prefixes', null)),
        user_plane_access_ipv4_address: build.template(std.get(block, 'user_plane_access_ipv4_address', null)),
        user_plane_access_ipv4_gateway: build.template(std.get(block, 'user_plane_access_ipv4_gateway', null)),
        user_plane_access_ipv4_subnet: build.template(std.get(block, 'user_plane_access_ipv4_subnet', null)),
        user_plane_access_name: build.template(std.get(block, 'user_plane_access_name', null)),
      }),
      dns_addresses: resource.field(self._.blocks, 'dns_addresses'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      mobile_network_data_network_name: resource.field(self._.blocks, 'mobile_network_data_network_name'),
      mobile_network_packet_core_data_plane_id: resource.field(self._.blocks, 'mobile_network_packet_core_data_plane_id'),
      network_address_port_translation: resource.field(self._.blocks, 'network_address_port_translation'),
      tags: resource.field(self._.blocks, 'tags'),
      user_equipment_address_pool_prefixes: resource.field(self._.blocks, 'user_equipment_address_pool_prefixes'),
      user_equipment_static_address_pool_prefixes: resource.field(self._.blocks, 'user_equipment_static_address_pool_prefixes'),
      user_plane_access_ipv4_address: resource.field(self._.blocks, 'user_plane_access_ipv4_address'),
      user_plane_access_ipv4_gateway: resource.field(self._.blocks, 'user_plane_access_ipv4_gateway'),
      user_plane_access_ipv4_subnet: resource.field(self._.blocks, 'user_plane_access_ipv4_subnet'),
      user_plane_access_name: resource.field(self._.blocks, 'user_plane_access_name'),
    },
    mobile_network_data_network(name, block): {
      local resource = blockType.resource('azurerm_mobile_network_data_network', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        mobile_network_id: build.template(block.mobile_network_id),
        name: build.template(block.name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      description: resource.field(self._.blocks, 'description'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      mobile_network_id: resource.field(self._.blocks, 'mobile_network_id'),
      name: resource.field(self._.blocks, 'name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    mobile_network_packet_core_control_plane(name, block): {
      local resource = blockType.resource('azurerm_mobile_network_packet_core_control_plane', name),
      _: resource._(block, {
        control_plane_access_ipv4_address: build.template(std.get(block, 'control_plane_access_ipv4_address', null)),
        control_plane_access_ipv4_gateway: build.template(std.get(block, 'control_plane_access_ipv4_gateway', null)),
        control_plane_access_ipv4_subnet: build.template(std.get(block, 'control_plane_access_ipv4_subnet', null)),
        control_plane_access_name: build.template(std.get(block, 'control_plane_access_name', null)),
        core_network_technology: build.template(std.get(block, 'core_network_technology', null)),
        id: build.template(std.get(block, 'id', null)),
        identity: build.template(std.get(block, 'identity', null)),
        interoperability_settings_json: build.template(std.get(block, 'interoperability_settings_json', null)),
        local_diagnostics_access: build.template(std.get(block, 'local_diagnostics_access', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        platform: build.template(std.get(block, 'platform', null)),
        resource_group_name: build.template(block.resource_group_name),
        site_ids: build.template(std.get(block, 'site_ids', null)),
        sku: build.template(std.get(block, 'sku', null)),
        software_version: build.template(std.get(block, 'software_version', null)),
        tags: build.template(std.get(block, 'tags', null)),
        user_equipment_mtu_in_bytes: build.template(std.get(block, 'user_equipment_mtu_in_bytes', null)),
      }),
      control_plane_access_ipv4_address: resource.field(self._.blocks, 'control_plane_access_ipv4_address'),
      control_plane_access_ipv4_gateway: resource.field(self._.blocks, 'control_plane_access_ipv4_gateway'),
      control_plane_access_ipv4_subnet: resource.field(self._.blocks, 'control_plane_access_ipv4_subnet'),
      control_plane_access_name: resource.field(self._.blocks, 'control_plane_access_name'),
      core_network_technology: resource.field(self._.blocks, 'core_network_technology'),
      id: resource.field(self._.blocks, 'id'),
      identity: resource.field(self._.blocks, 'identity'),
      interoperability_settings_json: resource.field(self._.blocks, 'interoperability_settings_json'),
      local_diagnostics_access: resource.field(self._.blocks, 'local_diagnostics_access'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      platform: resource.field(self._.blocks, 'platform'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      site_ids: resource.field(self._.blocks, 'site_ids'),
      sku: resource.field(self._.blocks, 'sku'),
      software_version: resource.field(self._.blocks, 'software_version'),
      tags: resource.field(self._.blocks, 'tags'),
      user_equipment_mtu_in_bytes: resource.field(self._.blocks, 'user_equipment_mtu_in_bytes'),
    },
    mobile_network_packet_core_data_plane(name, block): {
      local resource = blockType.resource('azurerm_mobile_network_packet_core_data_plane', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        mobile_network_packet_core_control_plane_id: build.template(block.mobile_network_packet_core_control_plane_id),
        name: build.template(block.name),
        tags: build.template(std.get(block, 'tags', null)),
        user_plane_access_ipv4_address: build.template(std.get(block, 'user_plane_access_ipv4_address', null)),
        user_plane_access_ipv4_gateway: build.template(std.get(block, 'user_plane_access_ipv4_gateway', null)),
        user_plane_access_ipv4_subnet: build.template(std.get(block, 'user_plane_access_ipv4_subnet', null)),
        user_plane_access_name: build.template(std.get(block, 'user_plane_access_name', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      mobile_network_packet_core_control_plane_id: resource.field(self._.blocks, 'mobile_network_packet_core_control_plane_id'),
      name: resource.field(self._.blocks, 'name'),
      tags: resource.field(self._.blocks, 'tags'),
      user_plane_access_ipv4_address: resource.field(self._.blocks, 'user_plane_access_ipv4_address'),
      user_plane_access_ipv4_gateway: resource.field(self._.blocks, 'user_plane_access_ipv4_gateway'),
      user_plane_access_ipv4_subnet: resource.field(self._.blocks, 'user_plane_access_ipv4_subnet'),
      user_plane_access_name: resource.field(self._.blocks, 'user_plane_access_name'),
    },
    mobile_network_service(name, block): {
      local resource = blockType.resource('azurerm_mobile_network_service', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        mobile_network_id: build.template(block.mobile_network_id),
        name: build.template(block.name),
        pcc_rule: build.template(std.get(block, 'pcc_rule', null)),
        service_precedence: build.template(std.get(block, 'service_precedence', null)),
        service_qos_policy: build.template(std.get(block, 'service_qos_policy', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      mobile_network_id: resource.field(self._.blocks, 'mobile_network_id'),
      name: resource.field(self._.blocks, 'name'),
      pcc_rule: resource.field(self._.blocks, 'pcc_rule'),
      service_precedence: resource.field(self._.blocks, 'service_precedence'),
      service_qos_policy: resource.field(self._.blocks, 'service_qos_policy'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    mobile_network_sim(name, block): {
      local resource = blockType.resource('azurerm_mobile_network_sim', name),
      _: resource._(block, {
        device_type: build.template(std.get(block, 'device_type', null)),
        id: build.template(std.get(block, 'id', null)),
        integrated_circuit_card_identifier: build.template(std.get(block, 'integrated_circuit_card_identifier', null)),
        international_mobile_subscriber_identity: build.template(std.get(block, 'international_mobile_subscriber_identity', null)),
        mobile_network_sim_group_id: build.template(block.mobile_network_sim_group_id),
        name: build.template(block.name),
        sim_policy_id: build.template(std.get(block, 'sim_policy_id', null)),
        sim_state: build.template(std.get(block, 'sim_state', null)),
        static_ip_configuration: build.template(std.get(block, 'static_ip_configuration', null)),
        vendor_key_fingerprint: build.template(std.get(block, 'vendor_key_fingerprint', null)),
        vendor_name: build.template(std.get(block, 'vendor_name', null)),
      }),
      device_type: resource.field(self._.blocks, 'device_type'),
      id: resource.field(self._.blocks, 'id'),
      integrated_circuit_card_identifier: resource.field(self._.blocks, 'integrated_circuit_card_identifier'),
      international_mobile_subscriber_identity: resource.field(self._.blocks, 'international_mobile_subscriber_identity'),
      mobile_network_sim_group_id: resource.field(self._.blocks, 'mobile_network_sim_group_id'),
      name: resource.field(self._.blocks, 'name'),
      sim_policy_id: resource.field(self._.blocks, 'sim_policy_id'),
      sim_state: resource.field(self._.blocks, 'sim_state'),
      static_ip_configuration: resource.field(self._.blocks, 'static_ip_configuration'),
      vendor_key_fingerprint: resource.field(self._.blocks, 'vendor_key_fingerprint'),
      vendor_name: resource.field(self._.blocks, 'vendor_name'),
    },
    mobile_network_sim_group(name, block): {
      local resource = blockType.resource('azurerm_mobile_network_sim_group', name),
      _: resource._(block, {
        encryption_key_url: build.template(std.get(block, 'encryption_key_url', null)),
        id: build.template(std.get(block, 'id', null)),
        identity: build.template(std.get(block, 'identity', null)),
        location: build.template(std.get(block, 'location', null)),
        mobile_network_id: build.template(block.mobile_network_id),
        name: build.template(block.name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      encryption_key_url: resource.field(self._.blocks, 'encryption_key_url'),
      id: resource.field(self._.blocks, 'id'),
      identity: resource.field(self._.blocks, 'identity'),
      location: resource.field(self._.blocks, 'location'),
      mobile_network_id: resource.field(self._.blocks, 'mobile_network_id'),
      name: resource.field(self._.blocks, 'name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    mobile_network_sim_policy(name, block): {
      local resource = blockType.resource('azurerm_mobile_network_sim_policy', name),
      _: resource._(block, {
        default_slice_id: build.template(std.get(block, 'default_slice_id', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        mobile_network_id: build.template(block.mobile_network_id),
        name: build.template(block.name),
        rat_frequency_selection_priority_index: build.template(std.get(block, 'rat_frequency_selection_priority_index', null)),
        registration_timer_in_seconds: build.template(std.get(block, 'registration_timer_in_seconds', null)),
        slice: build.template(std.get(block, 'slice', null)),
        tags: build.template(std.get(block, 'tags', null)),
        user_equipment_aggregate_maximum_bit_rate: build.template(std.get(block, 'user_equipment_aggregate_maximum_bit_rate', null)),
      }),
      default_slice_id: resource.field(self._.blocks, 'default_slice_id'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      mobile_network_id: resource.field(self._.blocks, 'mobile_network_id'),
      name: resource.field(self._.blocks, 'name'),
      rat_frequency_selection_priority_index: resource.field(self._.blocks, 'rat_frequency_selection_priority_index'),
      registration_timer_in_seconds: resource.field(self._.blocks, 'registration_timer_in_seconds'),
      slice: resource.field(self._.blocks, 'slice'),
      tags: resource.field(self._.blocks, 'tags'),
      user_equipment_aggregate_maximum_bit_rate: resource.field(self._.blocks, 'user_equipment_aggregate_maximum_bit_rate'),
    },
    mobile_network_site(name, block): {
      local resource = blockType.resource('azurerm_mobile_network_site', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        mobile_network_id: build.template(block.mobile_network_id),
        name: build.template(block.name),
        network_function_ids: build.template(std.get(block, 'network_function_ids', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      mobile_network_id: resource.field(self._.blocks, 'mobile_network_id'),
      name: resource.field(self._.blocks, 'name'),
      network_function_ids: resource.field(self._.blocks, 'network_function_ids'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    mobile_network_slice(name, block): {
      local resource = blockType.resource('azurerm_mobile_network_slice', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        mobile_network_id: build.template(block.mobile_network_id),
        name: build.template(block.name),
        single_network_slice_selection_assistance_information: build.template(std.get(block, 'single_network_slice_selection_assistance_information', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      description: resource.field(self._.blocks, 'description'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      mobile_network_id: resource.field(self._.blocks, 'mobile_network_id'),
      name: resource.field(self._.blocks, 'name'),
      single_network_slice_selection_assistance_information: resource.field(self._.blocks, 'single_network_slice_selection_assistance_information'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    monitor_action_group(name, block): {
      local resource = blockType.resource('azurerm_monitor_action_group', name),
      _: resource._(block, {
        arm_role_receiver: build.template(std.get(block, 'arm_role_receiver', null)),
        automation_runbook_receiver: build.template(std.get(block, 'automation_runbook_receiver', null)),
        azure_app_push_receiver: build.template(std.get(block, 'azure_app_push_receiver', null)),
        azure_function_receiver: build.template(std.get(block, 'azure_function_receiver', null)),
        email_receiver: build.template(std.get(block, 'email_receiver', null)),
        enabled: build.template(std.get(block, 'enabled', null)),
        event_hub_receiver: build.template(std.get(block, 'event_hub_receiver', null)),
        id: build.template(std.get(block, 'id', null)),
        itsm_receiver: build.template(std.get(block, 'itsm_receiver', null)),
        logic_app_receiver: build.template(std.get(block, 'logic_app_receiver', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        short_name: build.template(std.get(block, 'short_name', null)),
        sms_receiver: build.template(std.get(block, 'sms_receiver', null)),
        voice_receiver: build.template(std.get(block, 'voice_receiver', null)),
        webhook_receiver: build.template(std.get(block, 'webhook_receiver', null)),
      }),
      arm_role_receiver: resource.field(self._.blocks, 'arm_role_receiver'),
      automation_runbook_receiver: resource.field(self._.blocks, 'automation_runbook_receiver'),
      azure_app_push_receiver: resource.field(self._.blocks, 'azure_app_push_receiver'),
      azure_function_receiver: resource.field(self._.blocks, 'azure_function_receiver'),
      email_receiver: resource.field(self._.blocks, 'email_receiver'),
      enabled: resource.field(self._.blocks, 'enabled'),
      event_hub_receiver: resource.field(self._.blocks, 'event_hub_receiver'),
      id: resource.field(self._.blocks, 'id'),
      itsm_receiver: resource.field(self._.blocks, 'itsm_receiver'),
      logic_app_receiver: resource.field(self._.blocks, 'logic_app_receiver'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      short_name: resource.field(self._.blocks, 'short_name'),
      sms_receiver: resource.field(self._.blocks, 'sms_receiver'),
      voice_receiver: resource.field(self._.blocks, 'voice_receiver'),
      webhook_receiver: resource.field(self._.blocks, 'webhook_receiver'),
    },
    monitor_data_collection_endpoint(name, block): {
      local resource = blockType.resource('azurerm_monitor_data_collection_endpoint', name),
      _: resource._(block, {
        configuration_access_endpoint: build.template(std.get(block, 'configuration_access_endpoint', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        immutable_id: build.template(std.get(block, 'immutable_id', null)),
        kind: build.template(std.get(block, 'kind', null)),
        location: build.template(std.get(block, 'location', null)),
        logs_ingestion_endpoint: build.template(std.get(block, 'logs_ingestion_endpoint', null)),
        name: build.template(block.name),
        public_network_access_enabled: build.template(std.get(block, 'public_network_access_enabled', null)),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      configuration_access_endpoint: resource.field(self._.blocks, 'configuration_access_endpoint'),
      description: resource.field(self._.blocks, 'description'),
      id: resource.field(self._.blocks, 'id'),
      immutable_id: resource.field(self._.blocks, 'immutable_id'),
      kind: resource.field(self._.blocks, 'kind'),
      location: resource.field(self._.blocks, 'location'),
      logs_ingestion_endpoint: resource.field(self._.blocks, 'logs_ingestion_endpoint'),
      name: resource.field(self._.blocks, 'name'),
      public_network_access_enabled: resource.field(self._.blocks, 'public_network_access_enabled'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    monitor_data_collection_rule(name, block): {
      local resource = blockType.resource('azurerm_monitor_data_collection_rule', name),
      _: resource._(block, {
        data_collection_endpoint_id: build.template(std.get(block, 'data_collection_endpoint_id', null)),
        data_flow: build.template(std.get(block, 'data_flow', null)),
        data_sources: build.template(std.get(block, 'data_sources', null)),
        description: build.template(std.get(block, 'description', null)),
        destinations: build.template(std.get(block, 'destinations', null)),
        id: build.template(std.get(block, 'id', null)),
        identity: build.template(std.get(block, 'identity', null)),
        immutable_id: build.template(std.get(block, 'immutable_id', null)),
        kind: build.template(std.get(block, 'kind', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        stream_declaration: build.template(std.get(block, 'stream_declaration', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      data_collection_endpoint_id: resource.field(self._.blocks, 'data_collection_endpoint_id'),
      data_flow: resource.field(self._.blocks, 'data_flow'),
      data_sources: resource.field(self._.blocks, 'data_sources'),
      description: resource.field(self._.blocks, 'description'),
      destinations: resource.field(self._.blocks, 'destinations'),
      id: resource.field(self._.blocks, 'id'),
      identity: resource.field(self._.blocks, 'identity'),
      immutable_id: resource.field(self._.blocks, 'immutable_id'),
      kind: resource.field(self._.blocks, 'kind'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      stream_declaration: resource.field(self._.blocks, 'stream_declaration'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    monitor_diagnostic_categories(name, block): {
      local resource = blockType.resource('azurerm_monitor_diagnostic_categories', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        log_category_groups: build.template(std.get(block, 'log_category_groups', null)),
        log_category_types: build.template(std.get(block, 'log_category_types', null)),
        metrics: build.template(std.get(block, 'metrics', null)),
        resource_id: build.template(block.resource_id),
      }),
      id: resource.field(self._.blocks, 'id'),
      log_category_groups: resource.field(self._.blocks, 'log_category_groups'),
      log_category_types: resource.field(self._.blocks, 'log_category_types'),
      metrics: resource.field(self._.blocks, 'metrics'),
      resource_id: resource.field(self._.blocks, 'resource_id'),
    },
    monitor_scheduled_query_rules_alert(name, block): {
      local resource = blockType.resource('azurerm_monitor_scheduled_query_rules_alert', name),
      _: resource._(block, {
        action: build.template(std.get(block, 'action', null)),
        authorized_resource_ids: build.template(std.get(block, 'authorized_resource_ids', null)),
        data_source_id: build.template(std.get(block, 'data_source_id', null)),
        description: build.template(std.get(block, 'description', null)),
        enabled: build.template(std.get(block, 'enabled', null)),
        frequency: build.template(std.get(block, 'frequency', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        query: build.template(std.get(block, 'query', null)),
        query_type: build.template(std.get(block, 'query_type', null)),
        resource_group_name: build.template(block.resource_group_name),
        severity: build.template(std.get(block, 'severity', null)),
        tags: build.template(std.get(block, 'tags', null)),
        throttling: build.template(std.get(block, 'throttling', null)),
        time_window: build.template(std.get(block, 'time_window', null)),
        trigger: build.template(std.get(block, 'trigger', null)),
      }),
      action: resource.field(self._.blocks, 'action'),
      authorized_resource_ids: resource.field(self._.blocks, 'authorized_resource_ids'),
      data_source_id: resource.field(self._.blocks, 'data_source_id'),
      description: resource.field(self._.blocks, 'description'),
      enabled: resource.field(self._.blocks, 'enabled'),
      frequency: resource.field(self._.blocks, 'frequency'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      query: resource.field(self._.blocks, 'query'),
      query_type: resource.field(self._.blocks, 'query_type'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      severity: resource.field(self._.blocks, 'severity'),
      tags: resource.field(self._.blocks, 'tags'),
      throttling: resource.field(self._.blocks, 'throttling'),
      time_window: resource.field(self._.blocks, 'time_window'),
      trigger: resource.field(self._.blocks, 'trigger'),
    },
    monitor_scheduled_query_rules_log(name, block): {
      local resource = blockType.resource('azurerm_monitor_scheduled_query_rules_log', name),
      _: resource._(block, {
        authorized_resource_ids: build.template(std.get(block, 'authorized_resource_ids', null)),
        criteria: build.template(std.get(block, 'criteria', null)),
        data_source_id: build.template(std.get(block, 'data_source_id', null)),
        description: build.template(std.get(block, 'description', null)),
        enabled: build.template(std.get(block, 'enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      authorized_resource_ids: resource.field(self._.blocks, 'authorized_resource_ids'),
      criteria: resource.field(self._.blocks, 'criteria'),
      data_source_id: resource.field(self._.blocks, 'data_source_id'),
      description: resource.field(self._.blocks, 'description'),
      enabled: resource.field(self._.blocks, 'enabled'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    monitor_workspace(name, block): {
      local resource = blockType.resource('azurerm_monitor_workspace', name),
      _: resource._(block, {
        default_data_collection_endpoint_id: build.template(std.get(block, 'default_data_collection_endpoint_id', null)),
        default_data_collection_rule_id: build.template(std.get(block, 'default_data_collection_rule_id', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        public_network_access_enabled: build.template(std.get(block, 'public_network_access_enabled', null)),
        query_endpoint: build.template(std.get(block, 'query_endpoint', null)),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      default_data_collection_endpoint_id: resource.field(self._.blocks, 'default_data_collection_endpoint_id'),
      default_data_collection_rule_id: resource.field(self._.blocks, 'default_data_collection_rule_id'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      public_network_access_enabled: resource.field(self._.blocks, 'public_network_access_enabled'),
      query_endpoint: resource.field(self._.blocks, 'query_endpoint'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    mssql_database(name, block): {
      local resource = blockType.resource('azurerm_mssql_database', name),
      _: resource._(block, {
        collation: build.template(std.get(block, 'collation', null)),
        elastic_pool_id: build.template(std.get(block, 'elastic_pool_id', null)),
        enclave_type: build.template(std.get(block, 'enclave_type', null)),
        id: build.template(std.get(block, 'id', null)),
        identity: build.template(std.get(block, 'identity', null)),
        license_type: build.template(std.get(block, 'license_type', null)),
        max_size_gb: build.template(std.get(block, 'max_size_gb', null)),
        name: build.template(block.name),
        read_replica_count: build.template(std.get(block, 'read_replica_count', null)),
        read_scale: build.template(std.get(block, 'read_scale', null)),
        server_id: build.template(block.server_id),
        sku_name: build.template(std.get(block, 'sku_name', null)),
        storage_account_type: build.template(std.get(block, 'storage_account_type', null)),
        tags: build.template(std.get(block, 'tags', null)),
        transparent_data_encryption_enabled: build.template(std.get(block, 'transparent_data_encryption_enabled', null)),
        transparent_data_encryption_key_automatic_rotation_enabled: build.template(std.get(block, 'transparent_data_encryption_key_automatic_rotation_enabled', null)),
        transparent_data_encryption_key_vault_key_id: build.template(std.get(block, 'transparent_data_encryption_key_vault_key_id', null)),
        zone_redundant: build.template(std.get(block, 'zone_redundant', null)),
      }),
      collation: resource.field(self._.blocks, 'collation'),
      elastic_pool_id: resource.field(self._.blocks, 'elastic_pool_id'),
      enclave_type: resource.field(self._.blocks, 'enclave_type'),
      id: resource.field(self._.blocks, 'id'),
      identity: resource.field(self._.blocks, 'identity'),
      license_type: resource.field(self._.blocks, 'license_type'),
      max_size_gb: resource.field(self._.blocks, 'max_size_gb'),
      name: resource.field(self._.blocks, 'name'),
      read_replica_count: resource.field(self._.blocks, 'read_replica_count'),
      read_scale: resource.field(self._.blocks, 'read_scale'),
      server_id: resource.field(self._.blocks, 'server_id'),
      sku_name: resource.field(self._.blocks, 'sku_name'),
      storage_account_type: resource.field(self._.blocks, 'storage_account_type'),
      tags: resource.field(self._.blocks, 'tags'),
      transparent_data_encryption_enabled: resource.field(self._.blocks, 'transparent_data_encryption_enabled'),
      transparent_data_encryption_key_automatic_rotation_enabled: resource.field(self._.blocks, 'transparent_data_encryption_key_automatic_rotation_enabled'),
      transparent_data_encryption_key_vault_key_id: resource.field(self._.blocks, 'transparent_data_encryption_key_vault_key_id'),
      zone_redundant: resource.field(self._.blocks, 'zone_redundant'),
    },
    mssql_elasticpool(name, block): {
      local resource = blockType.resource('azurerm_mssql_elasticpool', name),
      _: resource._(block, {
        enclave_type: build.template(std.get(block, 'enclave_type', null)),
        id: build.template(std.get(block, 'id', null)),
        license_type: build.template(std.get(block, 'license_type', null)),
        location: build.template(std.get(block, 'location', null)),
        max_size_bytes: build.template(std.get(block, 'max_size_bytes', null)),
        max_size_gb: build.template(std.get(block, 'max_size_gb', null)),
        name: build.template(block.name),
        per_db_max_capacity: build.template(std.get(block, 'per_db_max_capacity', null)),
        per_db_min_capacity: build.template(std.get(block, 'per_db_min_capacity', null)),
        resource_group_name: build.template(block.resource_group_name),
        server_name: build.template(block.server_name),
        sku: build.template(std.get(block, 'sku', null)),
        tags: build.template(std.get(block, 'tags', null)),
        zone_redundant: build.template(std.get(block, 'zone_redundant', null)),
      }),
      enclave_type: resource.field(self._.blocks, 'enclave_type'),
      id: resource.field(self._.blocks, 'id'),
      license_type: resource.field(self._.blocks, 'license_type'),
      location: resource.field(self._.blocks, 'location'),
      max_size_bytes: resource.field(self._.blocks, 'max_size_bytes'),
      max_size_gb: resource.field(self._.blocks, 'max_size_gb'),
      name: resource.field(self._.blocks, 'name'),
      per_db_max_capacity: resource.field(self._.blocks, 'per_db_max_capacity'),
      per_db_min_capacity: resource.field(self._.blocks, 'per_db_min_capacity'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      server_name: resource.field(self._.blocks, 'server_name'),
      sku: resource.field(self._.blocks, 'sku'),
      tags: resource.field(self._.blocks, 'tags'),
      zone_redundant: resource.field(self._.blocks, 'zone_redundant'),
    },
    mssql_managed_database(name, block): {
      local resource = blockType.resource('azurerm_mssql_managed_database', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        long_term_retention_policy: build.template(std.get(block, 'long_term_retention_policy', null)),
        managed_instance_id: build.template(block.managed_instance_id),
        managed_instance_name: build.template(std.get(block, 'managed_instance_name', null)),
        name: build.template(block.name),
        point_in_time_restore: build.template(std.get(block, 'point_in_time_restore', null)),
        resource_group_name: build.template(std.get(block, 'resource_group_name', null)),
        short_term_retention_days: build.template(std.get(block, 'short_term_retention_days', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      long_term_retention_policy: resource.field(self._.blocks, 'long_term_retention_policy'),
      managed_instance_id: resource.field(self._.blocks, 'managed_instance_id'),
      managed_instance_name: resource.field(self._.blocks, 'managed_instance_name'),
      name: resource.field(self._.blocks, 'name'),
      point_in_time_restore: resource.field(self._.blocks, 'point_in_time_restore'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      short_term_retention_days: resource.field(self._.blocks, 'short_term_retention_days'),
    },
    mssql_managed_instance(name, block): {
      local resource = blockType.resource('azurerm_mssql_managed_instance', name),
      _: resource._(block, {
        administrator_login: build.template(std.get(block, 'administrator_login', null)),
        collation: build.template(std.get(block, 'collation', null)),
        customer_managed_key_id: build.template(std.get(block, 'customer_managed_key_id', null)),
        dns_zone: build.template(std.get(block, 'dns_zone', null)),
        dns_zone_partner_id: build.template(std.get(block, 'dns_zone_partner_id', null)),
        fqdn: build.template(std.get(block, 'fqdn', null)),
        id: build.template(std.get(block, 'id', null)),
        identity: build.template(std.get(block, 'identity', null)),
        license_type: build.template(std.get(block, 'license_type', null)),
        location: build.template(std.get(block, 'location', null)),
        minimum_tls_version: build.template(std.get(block, 'minimum_tls_version', null)),
        name: build.template(block.name),
        proxy_override: build.template(std.get(block, 'proxy_override', null)),
        public_data_endpoint_enabled: build.template(std.get(block, 'public_data_endpoint_enabled', null)),
        resource_group_name: build.template(block.resource_group_name),
        sku_name: build.template(std.get(block, 'sku_name', null)),
        storage_account_type: build.template(std.get(block, 'storage_account_type', null)),
        storage_size_in_gb: build.template(std.get(block, 'storage_size_in_gb', null)),
        subnet_id: build.template(std.get(block, 'subnet_id', null)),
        tags: build.template(std.get(block, 'tags', null)),
        timezone_id: build.template(std.get(block, 'timezone_id', null)),
        vcores: build.template(std.get(block, 'vcores', null)),
      }),
      administrator_login: resource.field(self._.blocks, 'administrator_login'),
      collation: resource.field(self._.blocks, 'collation'),
      customer_managed_key_id: resource.field(self._.blocks, 'customer_managed_key_id'),
      dns_zone: resource.field(self._.blocks, 'dns_zone'),
      dns_zone_partner_id: resource.field(self._.blocks, 'dns_zone_partner_id'),
      fqdn: resource.field(self._.blocks, 'fqdn'),
      id: resource.field(self._.blocks, 'id'),
      identity: resource.field(self._.blocks, 'identity'),
      license_type: resource.field(self._.blocks, 'license_type'),
      location: resource.field(self._.blocks, 'location'),
      minimum_tls_version: resource.field(self._.blocks, 'minimum_tls_version'),
      name: resource.field(self._.blocks, 'name'),
      proxy_override: resource.field(self._.blocks, 'proxy_override'),
      public_data_endpoint_enabled: resource.field(self._.blocks, 'public_data_endpoint_enabled'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      sku_name: resource.field(self._.blocks, 'sku_name'),
      storage_account_type: resource.field(self._.blocks, 'storage_account_type'),
      storage_size_in_gb: resource.field(self._.blocks, 'storage_size_in_gb'),
      subnet_id: resource.field(self._.blocks, 'subnet_id'),
      tags: resource.field(self._.blocks, 'tags'),
      timezone_id: resource.field(self._.blocks, 'timezone_id'),
      vcores: resource.field(self._.blocks, 'vcores'),
    },
    mssql_server(name, block): {
      local resource = blockType.resource('azurerm_mssql_server', name),
      _: resource._(block, {
        administrator_login: build.template(std.get(block, 'administrator_login', null)),
        fully_qualified_domain_name: build.template(std.get(block, 'fully_qualified_domain_name', null)),
        id: build.template(std.get(block, 'id', null)),
        identity: build.template(std.get(block, 'identity', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        restorable_dropped_database_ids: build.template(std.get(block, 'restorable_dropped_database_ids', null)),
        tags: build.template(std.get(block, 'tags', null)),
        transparent_data_encryption_key_vault_key_id: build.template(std.get(block, 'transparent_data_encryption_key_vault_key_id', null)),
        version: build.template(std.get(block, 'version', null)),
      }),
      administrator_login: resource.field(self._.blocks, 'administrator_login'),
      fully_qualified_domain_name: resource.field(self._.blocks, 'fully_qualified_domain_name'),
      id: resource.field(self._.blocks, 'id'),
      identity: resource.field(self._.blocks, 'identity'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      restorable_dropped_database_ids: resource.field(self._.blocks, 'restorable_dropped_database_ids'),
      tags: resource.field(self._.blocks, 'tags'),
      transparent_data_encryption_key_vault_key_id: resource.field(self._.blocks, 'transparent_data_encryption_key_vault_key_id'),
      version: resource.field(self._.blocks, 'version'),
    },
    mysql_flexible_server(name, block): {
      local resource = blockType.resource('azurerm_mysql_flexible_server', name),
      _: resource._(block, {
        administrator_login: build.template(std.get(block, 'administrator_login', null)),
        backup_retention_days: build.template(std.get(block, 'backup_retention_days', null)),
        delegated_subnet_id: build.template(std.get(block, 'delegated_subnet_id', null)),
        fqdn: build.template(std.get(block, 'fqdn', null)),
        geo_redundant_backup_enabled: build.template(std.get(block, 'geo_redundant_backup_enabled', null)),
        high_availability: build.template(std.get(block, 'high_availability', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        maintenance_window: build.template(std.get(block, 'maintenance_window', null)),
        name: build.template(block.name),
        private_dns_zone_id: build.template(std.get(block, 'private_dns_zone_id', null)),
        public_network_access_enabled: build.template(std.get(block, 'public_network_access_enabled', null)),
        replica_capacity: build.template(std.get(block, 'replica_capacity', null)),
        replication_role: build.template(std.get(block, 'replication_role', null)),
        resource_group_name: build.template(block.resource_group_name),
        restore_point_in_time: build.template(std.get(block, 'restore_point_in_time', null)),
        sku_name: build.template(std.get(block, 'sku_name', null)),
        storage: build.template(std.get(block, 'storage', null)),
        tags: build.template(std.get(block, 'tags', null)),
        version: build.template(std.get(block, 'version', null)),
        zone: build.template(std.get(block, 'zone', null)),
      }),
      administrator_login: resource.field(self._.blocks, 'administrator_login'),
      backup_retention_days: resource.field(self._.blocks, 'backup_retention_days'),
      delegated_subnet_id: resource.field(self._.blocks, 'delegated_subnet_id'),
      fqdn: resource.field(self._.blocks, 'fqdn'),
      geo_redundant_backup_enabled: resource.field(self._.blocks, 'geo_redundant_backup_enabled'),
      high_availability: resource.field(self._.blocks, 'high_availability'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      maintenance_window: resource.field(self._.blocks, 'maintenance_window'),
      name: resource.field(self._.blocks, 'name'),
      private_dns_zone_id: resource.field(self._.blocks, 'private_dns_zone_id'),
      public_network_access_enabled: resource.field(self._.blocks, 'public_network_access_enabled'),
      replica_capacity: resource.field(self._.blocks, 'replica_capacity'),
      replication_role: resource.field(self._.blocks, 'replication_role'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      restore_point_in_time: resource.field(self._.blocks, 'restore_point_in_time'),
      sku_name: resource.field(self._.blocks, 'sku_name'),
      storage: resource.field(self._.blocks, 'storage'),
      tags: resource.field(self._.blocks, 'tags'),
      version: resource.field(self._.blocks, 'version'),
      zone: resource.field(self._.blocks, 'zone'),
    },
    nat_gateway(name, block): {
      local resource = blockType.resource('azurerm_nat_gateway', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        idle_timeout_in_minutes: build.template(std.get(block, 'idle_timeout_in_minutes', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        public_ip_address_ids: build.template(std.get(block, 'public_ip_address_ids', null)),
        public_ip_prefix_ids: build.template(std.get(block, 'public_ip_prefix_ids', null)),
        resource_group_name: build.template(block.resource_group_name),
        resource_guid: build.template(std.get(block, 'resource_guid', null)),
        sku_name: build.template(std.get(block, 'sku_name', null)),
        tags: build.template(std.get(block, 'tags', null)),
        zones: build.template(std.get(block, 'zones', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      idle_timeout_in_minutes: resource.field(self._.blocks, 'idle_timeout_in_minutes'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      public_ip_address_ids: resource.field(self._.blocks, 'public_ip_address_ids'),
      public_ip_prefix_ids: resource.field(self._.blocks, 'public_ip_prefix_ids'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      resource_guid: resource.field(self._.blocks, 'resource_guid'),
      sku_name: resource.field(self._.blocks, 'sku_name'),
      tags: resource.field(self._.blocks, 'tags'),
      zones: resource.field(self._.blocks, 'zones'),
    },
    netapp_account(name, block): {
      local resource = blockType.resource('azurerm_netapp_account', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    netapp_account_encryption(name, block): {
      local resource = blockType.resource('azurerm_netapp_account_encryption', name),
      _: resource._(block, {
        encryption_key: build.template(std.get(block, 'encryption_key', null)),
        id: build.template(std.get(block, 'id', null)),
        netapp_account_id: build.template(block.netapp_account_id),
        system_assigned_identity_principal_id: build.template(std.get(block, 'system_assigned_identity_principal_id', null)),
        user_assigned_identity_id: build.template(std.get(block, 'user_assigned_identity_id', null)),
      }),
      encryption_key: resource.field(self._.blocks, 'encryption_key'),
      id: resource.field(self._.blocks, 'id'),
      netapp_account_id: resource.field(self._.blocks, 'netapp_account_id'),
      system_assigned_identity_principal_id: resource.field(self._.blocks, 'system_assigned_identity_principal_id'),
      user_assigned_identity_id: resource.field(self._.blocks, 'user_assigned_identity_id'),
    },
    netapp_backup_policy(name, block): {
      local resource = blockType.resource('azurerm_netapp_backup_policy', name),
      _: resource._(block, {
        account_name: build.template(block.account_name),
        daily_backups_to_keep: build.template(std.get(block, 'daily_backups_to_keep', null)),
        enabled: build.template(std.get(block, 'enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        monthly_backups_to_keep: build.template(std.get(block, 'monthly_backups_to_keep', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
        weekly_backups_to_keep: build.template(std.get(block, 'weekly_backups_to_keep', null)),
      }),
      account_name: resource.field(self._.blocks, 'account_name'),
      daily_backups_to_keep: resource.field(self._.blocks, 'daily_backups_to_keep'),
      enabled: resource.field(self._.blocks, 'enabled'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      monthly_backups_to_keep: resource.field(self._.blocks, 'monthly_backups_to_keep'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
      weekly_backups_to_keep: resource.field(self._.blocks, 'weekly_backups_to_keep'),
    },
    netapp_backup_vault(name, block): {
      local resource = blockType.resource('azurerm_netapp_backup_vault', name),
      _: resource._(block, {
        account_name: build.template(block.account_name),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      account_name: resource.field(self._.blocks, 'account_name'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    netapp_pool(name, block): {
      local resource = blockType.resource('azurerm_netapp_pool', name),
      _: resource._(block, {
        account_name: build.template(block.account_name),
        encryption_type: build.template(std.get(block, 'encryption_type', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        service_level: build.template(std.get(block, 'service_level', null)),
        size_in_tb: build.template(std.get(block, 'size_in_tb', null)),
      }),
      account_name: resource.field(self._.blocks, 'account_name'),
      encryption_type: resource.field(self._.blocks, 'encryption_type'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      service_level: resource.field(self._.blocks, 'service_level'),
      size_in_tb: resource.field(self._.blocks, 'size_in_tb'),
    },
    netapp_snapshot(name, block): {
      local resource = blockType.resource('azurerm_netapp_snapshot', name),
      _: resource._(block, {
        account_name: build.template(block.account_name),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        pool_name: build.template(block.pool_name),
        resource_group_name: build.template(block.resource_group_name),
        volume_name: build.template(block.volume_name),
      }),
      account_name: resource.field(self._.blocks, 'account_name'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      pool_name: resource.field(self._.blocks, 'pool_name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      volume_name: resource.field(self._.blocks, 'volume_name'),
    },
    netapp_snapshot_policy(name, block): {
      local resource = blockType.resource('azurerm_netapp_snapshot_policy', name),
      _: resource._(block, {
        account_name: build.template(block.account_name),
        daily_schedule: build.template(std.get(block, 'daily_schedule', null)),
        enabled: build.template(std.get(block, 'enabled', null)),
        hourly_schedule: build.template(std.get(block, 'hourly_schedule', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        monthly_schedule: build.template(std.get(block, 'monthly_schedule', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
        weekly_schedule: build.template(std.get(block, 'weekly_schedule', null)),
      }),
      account_name: resource.field(self._.blocks, 'account_name'),
      daily_schedule: resource.field(self._.blocks, 'daily_schedule'),
      enabled: resource.field(self._.blocks, 'enabled'),
      hourly_schedule: resource.field(self._.blocks, 'hourly_schedule'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      monthly_schedule: resource.field(self._.blocks, 'monthly_schedule'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
      weekly_schedule: resource.field(self._.blocks, 'weekly_schedule'),
    },
    netapp_volume(name, block): {
      local resource = blockType.resource('azurerm_netapp_volume', name),
      _: resource._(block, {
        account_name: build.template(block.account_name),
        data_protection_backup_policy: build.template(std.get(block, 'data_protection_backup_policy', null)),
        data_protection_replication: build.template(std.get(block, 'data_protection_replication', null)),
        encryption_key_source: build.template(std.get(block, 'encryption_key_source', null)),
        id: build.template(std.get(block, 'id', null)),
        key_vault_private_endpoint_id: build.template(std.get(block, 'key_vault_private_endpoint_id', null)),
        location: build.template(std.get(block, 'location', null)),
        mount_ip_addresses: build.template(std.get(block, 'mount_ip_addresses', null)),
        name: build.template(block.name),
        network_features: build.template(std.get(block, 'network_features', null)),
        pool_name: build.template(block.pool_name),
        protocols: build.template(std.get(block, 'protocols', null)),
        resource_group_name: build.template(block.resource_group_name),
        security_style: build.template(std.get(block, 'security_style', null)),
        service_level: build.template(std.get(block, 'service_level', null)),
        smb_access_based_enumeration_enabled: build.template(std.get(block, 'smb_access_based_enumeration_enabled', null)),
        smb_non_browsable_enabled: build.template(std.get(block, 'smb_non_browsable_enabled', null)),
        storage_quota_in_gb: build.template(std.get(block, 'storage_quota_in_gb', null)),
        subnet_id: build.template(std.get(block, 'subnet_id', null)),
        volume_path: build.template(std.get(block, 'volume_path', null)),
        zone: build.template(std.get(block, 'zone', null)),
      }),
      account_name: resource.field(self._.blocks, 'account_name'),
      data_protection_backup_policy: resource.field(self._.blocks, 'data_protection_backup_policy'),
      data_protection_replication: resource.field(self._.blocks, 'data_protection_replication'),
      encryption_key_source: resource.field(self._.blocks, 'encryption_key_source'),
      id: resource.field(self._.blocks, 'id'),
      key_vault_private_endpoint_id: resource.field(self._.blocks, 'key_vault_private_endpoint_id'),
      location: resource.field(self._.blocks, 'location'),
      mount_ip_addresses: resource.field(self._.blocks, 'mount_ip_addresses'),
      name: resource.field(self._.blocks, 'name'),
      network_features: resource.field(self._.blocks, 'network_features'),
      pool_name: resource.field(self._.blocks, 'pool_name'),
      protocols: resource.field(self._.blocks, 'protocols'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      security_style: resource.field(self._.blocks, 'security_style'),
      service_level: resource.field(self._.blocks, 'service_level'),
      smb_access_based_enumeration_enabled: resource.field(self._.blocks, 'smb_access_based_enumeration_enabled'),
      smb_non_browsable_enabled: resource.field(self._.blocks, 'smb_non_browsable_enabled'),
      storage_quota_in_gb: resource.field(self._.blocks, 'storage_quota_in_gb'),
      subnet_id: resource.field(self._.blocks, 'subnet_id'),
      volume_path: resource.field(self._.blocks, 'volume_path'),
      zone: resource.field(self._.blocks, 'zone'),
    },
    netapp_volume_group_oracle(name, block): {
      local resource = blockType.resource('azurerm_netapp_volume_group_oracle', name),
      _: resource._(block, {
        account_name: build.template(block.account_name),
        application_identifier: build.template(std.get(block, 'application_identifier', null)),
        group_description: build.template(std.get(block, 'group_description', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        volume: build.template(std.get(block, 'volume', null)),
      }),
      account_name: resource.field(self._.blocks, 'account_name'),
      application_identifier: resource.field(self._.blocks, 'application_identifier'),
      group_description: resource.field(self._.blocks, 'group_description'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      volume: resource.field(self._.blocks, 'volume'),
    },
    netapp_volume_group_sap_hana(name, block): {
      local resource = blockType.resource('azurerm_netapp_volume_group_sap_hana', name),
      _: resource._(block, {
        account_name: build.template(block.account_name),
        application_identifier: build.template(std.get(block, 'application_identifier', null)),
        group_description: build.template(std.get(block, 'group_description', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        volume: build.template(std.get(block, 'volume', null)),
      }),
      account_name: resource.field(self._.blocks, 'account_name'),
      application_identifier: resource.field(self._.blocks, 'application_identifier'),
      group_description: resource.field(self._.blocks, 'group_description'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      volume: resource.field(self._.blocks, 'volume'),
    },
    netapp_volume_quota_rule(name, block): {
      local resource = blockType.resource('azurerm_netapp_volume_quota_rule', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        quota_size_in_kib: build.template(std.get(block, 'quota_size_in_kib', null)),
        quota_target: build.template(std.get(block, 'quota_target', null)),
        quota_type: build.template(std.get(block, 'quota_type', null)),
        volume_id: build.template(block.volume_id),
      }),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      quota_size_in_kib: resource.field(self._.blocks, 'quota_size_in_kib'),
      quota_target: resource.field(self._.blocks, 'quota_target'),
      quota_type: resource.field(self._.blocks, 'quota_type'),
      volume_id: resource.field(self._.blocks, 'volume_id'),
    },
    network_ddos_protection_plan(name, block): {
      local resource = blockType.resource('azurerm_network_ddos_protection_plan', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
        virtual_network_ids: build.template(std.get(block, 'virtual_network_ids', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
      virtual_network_ids: resource.field(self._.blocks, 'virtual_network_ids'),
    },
    network_interface(name, block): {
      local resource = blockType.resource('azurerm_network_interface', name),
      _: resource._(block, {
        accelerated_networking_enabled: build.template(std.get(block, 'accelerated_networking_enabled', null)),
        applied_dns_servers: build.template(std.get(block, 'applied_dns_servers', null)),
        dns_servers: build.template(std.get(block, 'dns_servers', null)),
        id: build.template(std.get(block, 'id', null)),
        internal_dns_name_label: build.template(std.get(block, 'internal_dns_name_label', null)),
        ip_configuration: build.template(std.get(block, 'ip_configuration', null)),
        ip_forwarding_enabled: build.template(std.get(block, 'ip_forwarding_enabled', null)),
        location: build.template(std.get(block, 'location', null)),
        mac_address: build.template(std.get(block, 'mac_address', null)),
        name: build.template(block.name),
        network_security_group_id: build.template(std.get(block, 'network_security_group_id', null)),
        private_ip_address: build.template(std.get(block, 'private_ip_address', null)),
        private_ip_addresses: build.template(std.get(block, 'private_ip_addresses', null)),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
        virtual_machine_id: build.template(std.get(block, 'virtual_machine_id', null)),
      }),
      accelerated_networking_enabled: resource.field(self._.blocks, 'accelerated_networking_enabled'),
      applied_dns_servers: resource.field(self._.blocks, 'applied_dns_servers'),
      dns_servers: resource.field(self._.blocks, 'dns_servers'),
      id: resource.field(self._.blocks, 'id'),
      internal_dns_name_label: resource.field(self._.blocks, 'internal_dns_name_label'),
      ip_configuration: resource.field(self._.blocks, 'ip_configuration'),
      ip_forwarding_enabled: resource.field(self._.blocks, 'ip_forwarding_enabled'),
      location: resource.field(self._.blocks, 'location'),
      mac_address: resource.field(self._.blocks, 'mac_address'),
      name: resource.field(self._.blocks, 'name'),
      network_security_group_id: resource.field(self._.blocks, 'network_security_group_id'),
      private_ip_address: resource.field(self._.blocks, 'private_ip_address'),
      private_ip_addresses: resource.field(self._.blocks, 'private_ip_addresses'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
      virtual_machine_id: resource.field(self._.blocks, 'virtual_machine_id'),
    },
    network_manager(name, block): {
      local resource = blockType.resource('azurerm_network_manager', name),
      _: resource._(block, {
        cross_tenant_scopes: build.template(std.get(block, 'cross_tenant_scopes', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        scope: build.template(std.get(block, 'scope', null)),
        scope_accesses: build.template(std.get(block, 'scope_accesses', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      cross_tenant_scopes: resource.field(self._.blocks, 'cross_tenant_scopes'),
      description: resource.field(self._.blocks, 'description'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      scope: resource.field(self._.blocks, 'scope'),
      scope_accesses: resource.field(self._.blocks, 'scope_accesses'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    network_manager_connectivity_configuration(name, block): {
      local resource = blockType.resource('azurerm_network_manager_connectivity_configuration', name),
      _: resource._(block, {
        applies_to_group: build.template(std.get(block, 'applies_to_group', null)),
        connectivity_topology: build.template(std.get(block, 'connectivity_topology', null)),
        delete_existing_peering_enabled: build.template(std.get(block, 'delete_existing_peering_enabled', null)),
        description: build.template(std.get(block, 'description', null)),
        global_mesh_enabled: build.template(std.get(block, 'global_mesh_enabled', null)),
        hub: build.template(std.get(block, 'hub', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        network_manager_id: build.template(block.network_manager_id),
      }),
      applies_to_group: resource.field(self._.blocks, 'applies_to_group'),
      connectivity_topology: resource.field(self._.blocks, 'connectivity_topology'),
      delete_existing_peering_enabled: resource.field(self._.blocks, 'delete_existing_peering_enabled'),
      description: resource.field(self._.blocks, 'description'),
      global_mesh_enabled: resource.field(self._.blocks, 'global_mesh_enabled'),
      hub: resource.field(self._.blocks, 'hub'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      network_manager_id: resource.field(self._.blocks, 'network_manager_id'),
    },
    network_manager_network_group(name, block): {
      local resource = blockType.resource('azurerm_network_manager_network_group', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        network_manager_id: build.template(block.network_manager_id),
      }),
      description: resource.field(self._.blocks, 'description'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      network_manager_id: resource.field(self._.blocks, 'network_manager_id'),
    },
    network_security_group(name, block): {
      local resource = blockType.resource('azurerm_network_security_group', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        security_rule: build.template(std.get(block, 'security_rule', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      security_rule: resource.field(self._.blocks, 'security_rule'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    network_service_tags(name, block): {
      local resource = blockType.resource('azurerm_network_service_tags', name),
      _: resource._(block, {
        address_prefixes: build.template(std.get(block, 'address_prefixes', null)),
        id: build.template(std.get(block, 'id', null)),
        ipv4_cidrs: build.template(std.get(block, 'ipv4_cidrs', null)),
        ipv6_cidrs: build.template(std.get(block, 'ipv6_cidrs', null)),
        location: build.template(block.location),
        location_filter: build.template(std.get(block, 'location_filter', null)),
        name: build.template(std.get(block, 'name', null)),
        service: build.template(block.service),
      }),
      address_prefixes: resource.field(self._.blocks, 'address_prefixes'),
      id: resource.field(self._.blocks, 'id'),
      ipv4_cidrs: resource.field(self._.blocks, 'ipv4_cidrs'),
      ipv6_cidrs: resource.field(self._.blocks, 'ipv6_cidrs'),
      location: resource.field(self._.blocks, 'location'),
      location_filter: resource.field(self._.blocks, 'location_filter'),
      name: resource.field(self._.blocks, 'name'),
      service: resource.field(self._.blocks, 'service'),
    },
    network_watcher(name, block): {
      local resource = blockType.resource('azurerm_network_watcher', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    nginx_certificate(name, block): {
      local resource = blockType.resource('azurerm_nginx_certificate', name),
      _: resource._(block, {
        certificate_virtual_path: build.template(std.get(block, 'certificate_virtual_path', null)),
        error_code: build.template(std.get(block, 'error_code', null)),
        error_message: build.template(std.get(block, 'error_message', null)),
        id: build.template(std.get(block, 'id', null)),
        key_vault_secret_creation_date: build.template(std.get(block, 'key_vault_secret_creation_date', null)),
        key_vault_secret_id: build.template(std.get(block, 'key_vault_secret_id', null)),
        key_vault_secret_version: build.template(std.get(block, 'key_vault_secret_version', null)),
        key_virtual_path: build.template(std.get(block, 'key_virtual_path', null)),
        name: build.template(block.name),
        nginx_deployment_id: build.template(block.nginx_deployment_id),
        sha1_thumbprint: build.template(std.get(block, 'sha1_thumbprint', null)),
      }),
      certificate_virtual_path: resource.field(self._.blocks, 'certificate_virtual_path'),
      error_code: resource.field(self._.blocks, 'error_code'),
      error_message: resource.field(self._.blocks, 'error_message'),
      id: resource.field(self._.blocks, 'id'),
      key_vault_secret_creation_date: resource.field(self._.blocks, 'key_vault_secret_creation_date'),
      key_vault_secret_id: resource.field(self._.blocks, 'key_vault_secret_id'),
      key_vault_secret_version: resource.field(self._.blocks, 'key_vault_secret_version'),
      key_virtual_path: resource.field(self._.blocks, 'key_virtual_path'),
      name: resource.field(self._.blocks, 'name'),
      nginx_deployment_id: resource.field(self._.blocks, 'nginx_deployment_id'),
      sha1_thumbprint: resource.field(self._.blocks, 'sha1_thumbprint'),
    },
    nginx_configuration(name, block): {
      local resource = blockType.resource('azurerm_nginx_configuration', name),
      _: resource._(block, {
        config_file: build.template(std.get(block, 'config_file', null)),
        id: build.template(std.get(block, 'id', null)),
        nginx_deployment_id: build.template(block.nginx_deployment_id),
        package_data: build.template(std.get(block, 'package_data', null)),
        protected_file: build.template(std.get(block, 'protected_file', null)),
        root_file: build.template(std.get(block, 'root_file', null)),
      }),
      config_file: resource.field(self._.blocks, 'config_file'),
      id: resource.field(self._.blocks, 'id'),
      nginx_deployment_id: resource.field(self._.blocks, 'nginx_deployment_id'),
      package_data: resource.field(self._.blocks, 'package_data'),
      protected_file: resource.field(self._.blocks, 'protected_file'),
      root_file: resource.field(self._.blocks, 'root_file'),
    },
    nginx_deployment(name, block): {
      local resource = blockType.resource('azurerm_nginx_deployment', name),
      _: resource._(block, {
        auto_scale_profile: build.template(std.get(block, 'auto_scale_profile', null)),
        automatic_upgrade_channel: build.template(std.get(block, 'automatic_upgrade_channel', null)),
        capacity: build.template(std.get(block, 'capacity', null)),
        dataplane_api_endpoint: build.template(std.get(block, 'dataplane_api_endpoint', null)),
        diagnose_support_enabled: build.template(std.get(block, 'diagnose_support_enabled', null)),
        email: build.template(std.get(block, 'email', null)),
        frontend_private: build.template(std.get(block, 'frontend_private', null)),
        frontend_public: build.template(std.get(block, 'frontend_public', null)),
        id: build.template(std.get(block, 'id', null)),
        identity: build.template(std.get(block, 'identity', null)),
        ip_address: build.template(std.get(block, 'ip_address', null)),
        location: build.template(std.get(block, 'location', null)),
        logging_storage_account: build.template(std.get(block, 'logging_storage_account', null)),
        managed_resource_group: build.template(std.get(block, 'managed_resource_group', null)),
        name: build.template(block.name),
        network_interface: build.template(std.get(block, 'network_interface', null)),
        nginx_version: build.template(std.get(block, 'nginx_version', null)),
        resource_group_name: build.template(block.resource_group_name),
        sku: build.template(std.get(block, 'sku', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      auto_scale_profile: resource.field(self._.blocks, 'auto_scale_profile'),
      automatic_upgrade_channel: resource.field(self._.blocks, 'automatic_upgrade_channel'),
      capacity: resource.field(self._.blocks, 'capacity'),
      dataplane_api_endpoint: resource.field(self._.blocks, 'dataplane_api_endpoint'),
      diagnose_support_enabled: resource.field(self._.blocks, 'diagnose_support_enabled'),
      email: resource.field(self._.blocks, 'email'),
      frontend_private: resource.field(self._.blocks, 'frontend_private'),
      frontend_public: resource.field(self._.blocks, 'frontend_public'),
      id: resource.field(self._.blocks, 'id'),
      identity: resource.field(self._.blocks, 'identity'),
      ip_address: resource.field(self._.blocks, 'ip_address'),
      location: resource.field(self._.blocks, 'location'),
      logging_storage_account: resource.field(self._.blocks, 'logging_storage_account'),
      managed_resource_group: resource.field(self._.blocks, 'managed_resource_group'),
      name: resource.field(self._.blocks, 'name'),
      network_interface: resource.field(self._.blocks, 'network_interface'),
      nginx_version: resource.field(self._.blocks, 'nginx_version'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      sku: resource.field(self._.blocks, 'sku'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    notification_hub(name, block): {
      local resource = blockType.resource('azurerm_notification_hub', name),
      _: resource._(block, {
        apns_credential: build.template(std.get(block, 'apns_credential', null)),
        gcm_credential: build.template(std.get(block, 'gcm_credential', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        namespace_name: build.template(block.namespace_name),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      apns_credential: resource.field(self._.blocks, 'apns_credential'),
      gcm_credential: resource.field(self._.blocks, 'gcm_credential'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      namespace_name: resource.field(self._.blocks, 'namespace_name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    notification_hub_namespace(name, block): {
      local resource = blockType.resource('azurerm_notification_hub_namespace', name),
      _: resource._(block, {
        enabled: build.template(std.get(block, 'enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        namespace_type: build.template(std.get(block, 'namespace_type', null)),
        resource_group_name: build.template(block.resource_group_name),
        servicebus_endpoint: build.template(std.get(block, 'servicebus_endpoint', null)),
        sku: build.template(std.get(block, 'sku', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      enabled: resource.field(self._.blocks, 'enabled'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      namespace_type: resource.field(self._.blocks, 'namespace_type'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      servicebus_endpoint: resource.field(self._.blocks, 'servicebus_endpoint'),
      sku: resource.field(self._.blocks, 'sku'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    oracle_adbs_character_sets(name, block): {
      local resource = blockType.resource('azurerm_oracle_adbs_character_sets', name),
      _: resource._(block, {
        character_sets: build.template(std.get(block, 'character_sets', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
      }),
      character_sets: resource.field(self._.blocks, 'character_sets'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
    },
    oracle_adbs_national_character_sets(name, block): {
      local resource = blockType.resource('azurerm_oracle_adbs_national_character_sets', name),
      _: resource._(block, {
        character_sets: build.template(std.get(block, 'character_sets', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
      }),
      character_sets: resource.field(self._.blocks, 'character_sets'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
    },
    oracle_autonomous_database(name, block): {
      local resource = blockType.resource('azurerm_oracle_autonomous_database', name),
      _: resource._(block, {
        actual_used_data_storage_size_in_tbs: build.template(std.get(block, 'actual_used_data_storage_size_in_tbs', null)),
        allocated_storage_size_in_tbs: build.template(std.get(block, 'allocated_storage_size_in_tbs', null)),
        allowed_ips: build.template(std.get(block, 'allowed_ips', null)),
        auto_scaling_enabled: build.template(std.get(block, 'auto_scaling_enabled', null)),
        auto_scaling_for_storage_enabled: build.template(std.get(block, 'auto_scaling_for_storage_enabled', null)),
        autonomous_database_id: build.template(std.get(block, 'autonomous_database_id', null)),
        available_upgrade_versions: build.template(std.get(block, 'available_upgrade_versions', null)),
        backup_retention_period_in_days: build.template(std.get(block, 'backup_retention_period_in_days', null)),
        character_set: build.template(std.get(block, 'character_set', null)),
        compute_count: build.template(std.get(block, 'compute_count', null)),
        cpu_core_count: build.template(std.get(block, 'cpu_core_count', null)),
        data_storage_size_in_gbs: build.template(std.get(block, 'data_storage_size_in_gbs', null)),
        data_storage_size_in_tbs: build.template(std.get(block, 'data_storage_size_in_tbs', null)),
        db_node_storage_size_in_gbs: build.template(std.get(block, 'db_node_storage_size_in_gbs', null)),
        db_version: build.template(std.get(block, 'db_version', null)),
        display_name: build.template(std.get(block, 'display_name', null)),
        failed_data_recovery_in_seconds: build.template(std.get(block, 'failed_data_recovery_in_seconds', null)),
        id: build.template(std.get(block, 'id', null)),
        in_memory_area_in_gbs: build.template(std.get(block, 'in_memory_area_in_gbs', null)),
        lifecycle_details: build.template(std.get(block, 'lifecycle_details', null)),
        local_adg_auto_failover_max_data_loss_limit: build.template(std.get(block, 'local_adg_auto_failover_max_data_loss_limit', null)),
        local_data_guard_enabled: build.template(std.get(block, 'local_data_guard_enabled', null)),
        location: build.template(std.get(block, 'location', null)),
        memory_per_oracle_compute_unit_in_gbs: build.template(std.get(block, 'memory_per_oracle_compute_unit_in_gbs', null)),
        mtls_connection_required: build.template(std.get(block, 'mtls_connection_required', null)),
        name: build.template(block.name),
        national_character_set: build.template(std.get(block, 'national_character_set', null)),
        next_long_term_backup_time_stamp: build.template(std.get(block, 'next_long_term_backup_time_stamp', null)),
        oci_url: build.template(std.get(block, 'oci_url', null)),
        ocid: build.template(std.get(block, 'ocid', null)),
        peer_db_id: build.template(std.get(block, 'peer_db_id', null)),
        peer_db_ids: build.template(std.get(block, 'peer_db_ids', null)),
        preview: build.template(std.get(block, 'preview', null)),
        preview_version_with_service_terms_accepted: build.template(std.get(block, 'preview_version_with_service_terms_accepted', null)),
        private_endpoint: build.template(std.get(block, 'private_endpoint', null)),
        private_endpoint_ip: build.template(std.get(block, 'private_endpoint_ip', null)),
        private_endpoint_label: build.template(std.get(block, 'private_endpoint_label', null)),
        provisionable_cpus: build.template(std.get(block, 'provisionable_cpus', null)),
        remote_data_guard_enabled: build.template(std.get(block, 'remote_data_guard_enabled', null)),
        resource_group_name: build.template(block.resource_group_name),
        service_console_url: build.template(std.get(block, 'service_console_url', null)),
        sql_web_developer_url: build.template(std.get(block, 'sql_web_developer_url', null)),
        subnet_id: build.template(std.get(block, 'subnet_id', null)),
        supported_regions_to_clone_to: build.template(std.get(block, 'supported_regions_to_clone_to', null)),
        tags: build.template(std.get(block, 'tags', null)),
        time_created: build.template(std.get(block, 'time_created', null)),
        time_data_guard_role_changed: build.template(std.get(block, 'time_data_guard_role_changed', null)),
        time_deletion_of_free_autonomous_database: build.template(std.get(block, 'time_deletion_of_free_autonomous_database', null)),
        time_local_data_guard_enabled_on: build.template(std.get(block, 'time_local_data_guard_enabled_on', null)),
        time_maintenance_begin: build.template(std.get(block, 'time_maintenance_begin', null)),
        time_maintenance_end: build.template(std.get(block, 'time_maintenance_end', null)),
        time_of_last_failover: build.template(std.get(block, 'time_of_last_failover', null)),
        time_of_last_refresh: build.template(std.get(block, 'time_of_last_refresh', null)),
        time_of_last_refresh_point: build.template(std.get(block, 'time_of_last_refresh_point', null)),
        time_of_last_switchover: build.template(std.get(block, 'time_of_last_switchover', null)),
        time_reclamation_of_free_autonomous_database: build.template(std.get(block, 'time_reclamation_of_free_autonomous_database', null)),
        used_data_storage_size_in_gbs: build.template(std.get(block, 'used_data_storage_size_in_gbs', null)),
        used_data_storage_size_in_tbs: build.template(std.get(block, 'used_data_storage_size_in_tbs', null)),
        virtual_network_id: build.template(std.get(block, 'virtual_network_id', null)),
      }),
      actual_used_data_storage_size_in_tbs: resource.field(self._.blocks, 'actual_used_data_storage_size_in_tbs'),
      allocated_storage_size_in_tbs: resource.field(self._.blocks, 'allocated_storage_size_in_tbs'),
      allowed_ips: resource.field(self._.blocks, 'allowed_ips'),
      auto_scaling_enabled: resource.field(self._.blocks, 'auto_scaling_enabled'),
      auto_scaling_for_storage_enabled: resource.field(self._.blocks, 'auto_scaling_for_storage_enabled'),
      autonomous_database_id: resource.field(self._.blocks, 'autonomous_database_id'),
      available_upgrade_versions: resource.field(self._.blocks, 'available_upgrade_versions'),
      backup_retention_period_in_days: resource.field(self._.blocks, 'backup_retention_period_in_days'),
      character_set: resource.field(self._.blocks, 'character_set'),
      compute_count: resource.field(self._.blocks, 'compute_count'),
      cpu_core_count: resource.field(self._.blocks, 'cpu_core_count'),
      data_storage_size_in_gbs: resource.field(self._.blocks, 'data_storage_size_in_gbs'),
      data_storage_size_in_tbs: resource.field(self._.blocks, 'data_storage_size_in_tbs'),
      db_node_storage_size_in_gbs: resource.field(self._.blocks, 'db_node_storage_size_in_gbs'),
      db_version: resource.field(self._.blocks, 'db_version'),
      display_name: resource.field(self._.blocks, 'display_name'),
      failed_data_recovery_in_seconds: resource.field(self._.blocks, 'failed_data_recovery_in_seconds'),
      id: resource.field(self._.blocks, 'id'),
      in_memory_area_in_gbs: resource.field(self._.blocks, 'in_memory_area_in_gbs'),
      lifecycle_details: resource.field(self._.blocks, 'lifecycle_details'),
      local_adg_auto_failover_max_data_loss_limit: resource.field(self._.blocks, 'local_adg_auto_failover_max_data_loss_limit'),
      local_data_guard_enabled: resource.field(self._.blocks, 'local_data_guard_enabled'),
      location: resource.field(self._.blocks, 'location'),
      memory_per_oracle_compute_unit_in_gbs: resource.field(self._.blocks, 'memory_per_oracle_compute_unit_in_gbs'),
      mtls_connection_required: resource.field(self._.blocks, 'mtls_connection_required'),
      name: resource.field(self._.blocks, 'name'),
      national_character_set: resource.field(self._.blocks, 'national_character_set'),
      next_long_term_backup_time_stamp: resource.field(self._.blocks, 'next_long_term_backup_time_stamp'),
      oci_url: resource.field(self._.blocks, 'oci_url'),
      ocid: resource.field(self._.blocks, 'ocid'),
      peer_db_id: resource.field(self._.blocks, 'peer_db_id'),
      peer_db_ids: resource.field(self._.blocks, 'peer_db_ids'),
      preview: resource.field(self._.blocks, 'preview'),
      preview_version_with_service_terms_accepted: resource.field(self._.blocks, 'preview_version_with_service_terms_accepted'),
      private_endpoint: resource.field(self._.blocks, 'private_endpoint'),
      private_endpoint_ip: resource.field(self._.blocks, 'private_endpoint_ip'),
      private_endpoint_label: resource.field(self._.blocks, 'private_endpoint_label'),
      provisionable_cpus: resource.field(self._.blocks, 'provisionable_cpus'),
      remote_data_guard_enabled: resource.field(self._.blocks, 'remote_data_guard_enabled'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      service_console_url: resource.field(self._.blocks, 'service_console_url'),
      sql_web_developer_url: resource.field(self._.blocks, 'sql_web_developer_url'),
      subnet_id: resource.field(self._.blocks, 'subnet_id'),
      supported_regions_to_clone_to: resource.field(self._.blocks, 'supported_regions_to_clone_to'),
      tags: resource.field(self._.blocks, 'tags'),
      time_created: resource.field(self._.blocks, 'time_created'),
      time_data_guard_role_changed: resource.field(self._.blocks, 'time_data_guard_role_changed'),
      time_deletion_of_free_autonomous_database: resource.field(self._.blocks, 'time_deletion_of_free_autonomous_database'),
      time_local_data_guard_enabled_on: resource.field(self._.blocks, 'time_local_data_guard_enabled_on'),
      time_maintenance_begin: resource.field(self._.blocks, 'time_maintenance_begin'),
      time_maintenance_end: resource.field(self._.blocks, 'time_maintenance_end'),
      time_of_last_failover: resource.field(self._.blocks, 'time_of_last_failover'),
      time_of_last_refresh: resource.field(self._.blocks, 'time_of_last_refresh'),
      time_of_last_refresh_point: resource.field(self._.blocks, 'time_of_last_refresh_point'),
      time_of_last_switchover: resource.field(self._.blocks, 'time_of_last_switchover'),
      time_reclamation_of_free_autonomous_database: resource.field(self._.blocks, 'time_reclamation_of_free_autonomous_database'),
      used_data_storage_size_in_gbs: resource.field(self._.blocks, 'used_data_storage_size_in_gbs'),
      used_data_storage_size_in_tbs: resource.field(self._.blocks, 'used_data_storage_size_in_tbs'),
      virtual_network_id: resource.field(self._.blocks, 'virtual_network_id'),
    },
    oracle_cloud_vm_cluster(name, block): {
      local resource = blockType.resource('azurerm_oracle_cloud_vm_cluster', name),
      _: resource._(block, {
        backup_subnet_cidr: build.template(std.get(block, 'backup_subnet_cidr', null)),
        cloud_exadata_infrastructure_id: build.template(std.get(block, 'cloud_exadata_infrastructure_id', null)),
        cluster_name: build.template(std.get(block, 'cluster_name', null)),
        compartment_id: build.template(std.get(block, 'compartment_id', null)),
        compute_nodes: build.template(std.get(block, 'compute_nodes', null)),
        cpu_core_count: build.template(std.get(block, 'cpu_core_count', null)),
        data_collection_options: build.template(std.get(block, 'data_collection_options', null)),
        data_storage_percentage: build.template(std.get(block, 'data_storage_percentage', null)),
        data_storage_size_in_tbs: build.template(std.get(block, 'data_storage_size_in_tbs', null)),
        db_node_storage_size_in_gbs: build.template(std.get(block, 'db_node_storage_size_in_gbs', null)),
        db_servers: build.template(std.get(block, 'db_servers', null)),
        disk_redundancy: build.template(std.get(block, 'disk_redundancy', null)),
        display_name: build.template(std.get(block, 'display_name', null)),
        domain: build.template(std.get(block, 'domain', null)),
        gi_version: build.template(std.get(block, 'gi_version', null)),
        hostname: build.template(std.get(block, 'hostname', null)),
        hostname_actual: build.template(std.get(block, 'hostname_actual', null)),
        id: build.template(std.get(block, 'id', null)),
        iorm_config_cache: build.template(std.get(block, 'iorm_config_cache', null)),
        last_update_history_entry_id: build.template(std.get(block, 'last_update_history_entry_id', null)),
        license_model: build.template(std.get(block, 'license_model', null)),
        lifecycle_details: build.template(std.get(block, 'lifecycle_details', null)),
        lifecycle_state: build.template(std.get(block, 'lifecycle_state', null)),
        listener_port: build.template(std.get(block, 'listener_port', null)),
        local_backup_enabled: build.template(std.get(block, 'local_backup_enabled', null)),
        location: build.template(std.get(block, 'location', null)),
        memory_size_in_gbs: build.template(std.get(block, 'memory_size_in_gbs', null)),
        name: build.template(block.name),
        node_count: build.template(std.get(block, 'node_count', null)),
        nsg_url: build.template(std.get(block, 'nsg_url', null)),
        oci_url: build.template(std.get(block, 'oci_url', null)),
        ocid: build.template(std.get(block, 'ocid', null)),
        ocpu_count: build.template(std.get(block, 'ocpu_count', null)),
        resource_group_name: build.template(block.resource_group_name),
        scan_dns_name: build.template(std.get(block, 'scan_dns_name', null)),
        scan_dns_record_id: build.template(std.get(block, 'scan_dns_record_id', null)),
        scan_ip_ids: build.template(std.get(block, 'scan_ip_ids', null)),
        scan_listener_port_tcp: build.template(std.get(block, 'scan_listener_port_tcp', null)),
        scan_listener_port_tcp_ssl: build.template(std.get(block, 'scan_listener_port_tcp_ssl', null)),
        shape: build.template(std.get(block, 'shape', null)),
        sparse_diskgroup_enabled: build.template(std.get(block, 'sparse_diskgroup_enabled', null)),
        ssh_public_keys: build.template(std.get(block, 'ssh_public_keys', null)),
        storage_size_in_gbs: build.template(std.get(block, 'storage_size_in_gbs', null)),
        subnet_id: build.template(std.get(block, 'subnet_id', null)),
        subnet_ocid: build.template(std.get(block, 'subnet_ocid', null)),
        system_version: build.template(std.get(block, 'system_version', null)),
        tags: build.template(std.get(block, 'tags', null)),
        time_created: build.template(std.get(block, 'time_created', null)),
        time_zone: build.template(std.get(block, 'time_zone', null)),
        vip_ods: build.template(std.get(block, 'vip_ods', null)),
        virtual_network_id: build.template(std.get(block, 'virtual_network_id', null)),
        zone_id: build.template(std.get(block, 'zone_id', null)),
      }),
      backup_subnet_cidr: resource.field(self._.blocks, 'backup_subnet_cidr'),
      cloud_exadata_infrastructure_id: resource.field(self._.blocks, 'cloud_exadata_infrastructure_id'),
      cluster_name: resource.field(self._.blocks, 'cluster_name'),
      compartment_id: resource.field(self._.blocks, 'compartment_id'),
      compute_nodes: resource.field(self._.blocks, 'compute_nodes'),
      cpu_core_count: resource.field(self._.blocks, 'cpu_core_count'),
      data_collection_options: resource.field(self._.blocks, 'data_collection_options'),
      data_storage_percentage: resource.field(self._.blocks, 'data_storage_percentage'),
      data_storage_size_in_tbs: resource.field(self._.blocks, 'data_storage_size_in_tbs'),
      db_node_storage_size_in_gbs: resource.field(self._.blocks, 'db_node_storage_size_in_gbs'),
      db_servers: resource.field(self._.blocks, 'db_servers'),
      disk_redundancy: resource.field(self._.blocks, 'disk_redundancy'),
      display_name: resource.field(self._.blocks, 'display_name'),
      domain: resource.field(self._.blocks, 'domain'),
      gi_version: resource.field(self._.blocks, 'gi_version'),
      hostname: resource.field(self._.blocks, 'hostname'),
      hostname_actual: resource.field(self._.blocks, 'hostname_actual'),
      id: resource.field(self._.blocks, 'id'),
      iorm_config_cache: resource.field(self._.blocks, 'iorm_config_cache'),
      last_update_history_entry_id: resource.field(self._.blocks, 'last_update_history_entry_id'),
      license_model: resource.field(self._.blocks, 'license_model'),
      lifecycle_details: resource.field(self._.blocks, 'lifecycle_details'),
      lifecycle_state: resource.field(self._.blocks, 'lifecycle_state'),
      listener_port: resource.field(self._.blocks, 'listener_port'),
      local_backup_enabled: resource.field(self._.blocks, 'local_backup_enabled'),
      location: resource.field(self._.blocks, 'location'),
      memory_size_in_gbs: resource.field(self._.blocks, 'memory_size_in_gbs'),
      name: resource.field(self._.blocks, 'name'),
      node_count: resource.field(self._.blocks, 'node_count'),
      nsg_url: resource.field(self._.blocks, 'nsg_url'),
      oci_url: resource.field(self._.blocks, 'oci_url'),
      ocid: resource.field(self._.blocks, 'ocid'),
      ocpu_count: resource.field(self._.blocks, 'ocpu_count'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      scan_dns_name: resource.field(self._.blocks, 'scan_dns_name'),
      scan_dns_record_id: resource.field(self._.blocks, 'scan_dns_record_id'),
      scan_ip_ids: resource.field(self._.blocks, 'scan_ip_ids'),
      scan_listener_port_tcp: resource.field(self._.blocks, 'scan_listener_port_tcp'),
      scan_listener_port_tcp_ssl: resource.field(self._.blocks, 'scan_listener_port_tcp_ssl'),
      shape: resource.field(self._.blocks, 'shape'),
      sparse_diskgroup_enabled: resource.field(self._.blocks, 'sparse_diskgroup_enabled'),
      ssh_public_keys: resource.field(self._.blocks, 'ssh_public_keys'),
      storage_size_in_gbs: resource.field(self._.blocks, 'storage_size_in_gbs'),
      subnet_id: resource.field(self._.blocks, 'subnet_id'),
      subnet_ocid: resource.field(self._.blocks, 'subnet_ocid'),
      system_version: resource.field(self._.blocks, 'system_version'),
      tags: resource.field(self._.blocks, 'tags'),
      time_created: resource.field(self._.blocks, 'time_created'),
      time_zone: resource.field(self._.blocks, 'time_zone'),
      vip_ods: resource.field(self._.blocks, 'vip_ods'),
      virtual_network_id: resource.field(self._.blocks, 'virtual_network_id'),
      zone_id: resource.field(self._.blocks, 'zone_id'),
    },
    oracle_db_nodes(name, block): {
      local resource = blockType.resource('azurerm_oracle_db_nodes', name),
      _: resource._(block, {
        cloud_vm_cluster_id: build.template(block.cloud_vm_cluster_id),
        db_nodes: build.template(std.get(block, 'db_nodes', null)),
        id: build.template(std.get(block, 'id', null)),
      }),
      cloud_vm_cluster_id: resource.field(self._.blocks, 'cloud_vm_cluster_id'),
      db_nodes: resource.field(self._.blocks, 'db_nodes'),
      id: resource.field(self._.blocks, 'id'),
    },
    oracle_db_servers(name, block): {
      local resource = blockType.resource('azurerm_oracle_db_servers', name),
      _: resource._(block, {
        cloud_exadata_infrastructure_name: build.template(block.cloud_exadata_infrastructure_name),
        db_servers: build.template(std.get(block, 'db_servers', null)),
        id: build.template(std.get(block, 'id', null)),
        resource_group_name: build.template(block.resource_group_name),
      }),
      cloud_exadata_infrastructure_name: resource.field(self._.blocks, 'cloud_exadata_infrastructure_name'),
      db_servers: resource.field(self._.blocks, 'db_servers'),
      id: resource.field(self._.blocks, 'id'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
    },
    oracle_db_system_shapes(name, block): {
      local resource = blockType.resource('azurerm_oracle_db_system_shapes', name),
      _: resource._(block, {
        db_system_shapes: build.template(std.get(block, 'db_system_shapes', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
      }),
      db_system_shapes: resource.field(self._.blocks, 'db_system_shapes'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
    },
    oracle_exadata_infrastructure(name, block): {
      local resource = blockType.resource('azurerm_oracle_exadata_infrastructure', name),
      _: resource._(block, {
        activated_storage_count: build.template(std.get(block, 'activated_storage_count', null)),
        additional_storage_count: build.template(std.get(block, 'additional_storage_count', null)),
        available_storage_size_in_gbs: build.template(std.get(block, 'available_storage_size_in_gbs', null)),
        compute_count: build.template(std.get(block, 'compute_count', null)),
        cpu_count: build.template(std.get(block, 'cpu_count', null)),
        customer_contacts: build.template(std.get(block, 'customer_contacts', null)),
        data_storage_size_in_tbs: build.template(std.get(block, 'data_storage_size_in_tbs', null)),
        db_node_storage_size_in_gbs: build.template(std.get(block, 'db_node_storage_size_in_gbs', null)),
        db_server_version: build.template(std.get(block, 'db_server_version', null)),
        display_name: build.template(std.get(block, 'display_name', null)),
        estimated_patching_time: build.template(std.get(block, 'estimated_patching_time', null)),
        id: build.template(std.get(block, 'id', null)),
        last_maintenance_run_id: build.template(std.get(block, 'last_maintenance_run_id', null)),
        lifecycle_details: build.template(std.get(block, 'lifecycle_details', null)),
        lifecycle_state: build.template(std.get(block, 'lifecycle_state', null)),
        location: build.template(std.get(block, 'location', null)),
        maintenance_window: build.template(std.get(block, 'maintenance_window', null)),
        max_cpu_count: build.template(std.get(block, 'max_cpu_count', null)),
        max_data_storage_in_tbs: build.template(std.get(block, 'max_data_storage_in_tbs', null)),
        max_db_node_storage_size_in_gbs: build.template(std.get(block, 'max_db_node_storage_size_in_gbs', null)),
        max_memory_in_gbs: build.template(std.get(block, 'max_memory_in_gbs', null)),
        memory_size_in_gbs: build.template(std.get(block, 'memory_size_in_gbs', null)),
        monthly_db_server_version: build.template(std.get(block, 'monthly_db_server_version', null)),
        monthly_storage_server_version: build.template(std.get(block, 'monthly_storage_server_version', null)),
        name: build.template(block.name),
        next_maintenance_run_id: build.template(std.get(block, 'next_maintenance_run_id', null)),
        oci_url: build.template(std.get(block, 'oci_url', null)),
        ocid: build.template(std.get(block, 'ocid', null)),
        resource_group_name: build.template(block.resource_group_name),
        shape: build.template(std.get(block, 'shape', null)),
        storage_count: build.template(std.get(block, 'storage_count', null)),
        storage_server_version: build.template(std.get(block, 'storage_server_version', null)),
        tags: build.template(std.get(block, 'tags', null)),
        time_created: build.template(std.get(block, 'time_created', null)),
        total_storage_size_in_gbs: build.template(std.get(block, 'total_storage_size_in_gbs', null)),
        zones: build.template(std.get(block, 'zones', null)),
      }),
      activated_storage_count: resource.field(self._.blocks, 'activated_storage_count'),
      additional_storage_count: resource.field(self._.blocks, 'additional_storage_count'),
      available_storage_size_in_gbs: resource.field(self._.blocks, 'available_storage_size_in_gbs'),
      compute_count: resource.field(self._.blocks, 'compute_count'),
      cpu_count: resource.field(self._.blocks, 'cpu_count'),
      customer_contacts: resource.field(self._.blocks, 'customer_contacts'),
      data_storage_size_in_tbs: resource.field(self._.blocks, 'data_storage_size_in_tbs'),
      db_node_storage_size_in_gbs: resource.field(self._.blocks, 'db_node_storage_size_in_gbs'),
      db_server_version: resource.field(self._.blocks, 'db_server_version'),
      display_name: resource.field(self._.blocks, 'display_name'),
      estimated_patching_time: resource.field(self._.blocks, 'estimated_patching_time'),
      id: resource.field(self._.blocks, 'id'),
      last_maintenance_run_id: resource.field(self._.blocks, 'last_maintenance_run_id'),
      lifecycle_details: resource.field(self._.blocks, 'lifecycle_details'),
      lifecycle_state: resource.field(self._.blocks, 'lifecycle_state'),
      location: resource.field(self._.blocks, 'location'),
      maintenance_window: resource.field(self._.blocks, 'maintenance_window'),
      max_cpu_count: resource.field(self._.blocks, 'max_cpu_count'),
      max_data_storage_in_tbs: resource.field(self._.blocks, 'max_data_storage_in_tbs'),
      max_db_node_storage_size_in_gbs: resource.field(self._.blocks, 'max_db_node_storage_size_in_gbs'),
      max_memory_in_gbs: resource.field(self._.blocks, 'max_memory_in_gbs'),
      memory_size_in_gbs: resource.field(self._.blocks, 'memory_size_in_gbs'),
      monthly_db_server_version: resource.field(self._.blocks, 'monthly_db_server_version'),
      monthly_storage_server_version: resource.field(self._.blocks, 'monthly_storage_server_version'),
      name: resource.field(self._.blocks, 'name'),
      next_maintenance_run_id: resource.field(self._.blocks, 'next_maintenance_run_id'),
      oci_url: resource.field(self._.blocks, 'oci_url'),
      ocid: resource.field(self._.blocks, 'ocid'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      shape: resource.field(self._.blocks, 'shape'),
      storage_count: resource.field(self._.blocks, 'storage_count'),
      storage_server_version: resource.field(self._.blocks, 'storage_server_version'),
      tags: resource.field(self._.blocks, 'tags'),
      time_created: resource.field(self._.blocks, 'time_created'),
      total_storage_size_in_gbs: resource.field(self._.blocks, 'total_storage_size_in_gbs'),
      zones: resource.field(self._.blocks, 'zones'),
    },
    oracle_gi_versions(name, block): {
      local resource = blockType.resource('azurerm_oracle_gi_versions', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        versions: build.template(std.get(block, 'versions', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      versions: resource.field(self._.blocks, 'versions'),
    },
    orchestrated_virtual_machine_scale_set(name, block): {
      local resource = blockType.resource('azurerm_orchestrated_virtual_machine_scale_set', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        identity: build.template(std.get(block, 'identity', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        network_interface: build.template(std.get(block, 'network_interface', null)),
        resource_group_name: build.template(block.resource_group_name),
      }),
      id: resource.field(self._.blocks, 'id'),
      identity: resource.field(self._.blocks, 'identity'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      network_interface: resource.field(self._.blocks, 'network_interface'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
    },
    palo_alto_local_rulestack(name, block): {
      local resource = blockType.resource('azurerm_palo_alto_local_rulestack', name),
      _: resource._(block, {
        anti_spyware_profile: build.template(std.get(block, 'anti_spyware_profile', null)),
        anti_virus_profile: build.template(std.get(block, 'anti_virus_profile', null)),
        description: build.template(std.get(block, 'description', null)),
        dns_subscription: build.template(std.get(block, 'dns_subscription', null)),
        file_blocking_profile: build.template(std.get(block, 'file_blocking_profile', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        outbound_trust_certificate: build.template(std.get(block, 'outbound_trust_certificate', null)),
        outbound_untrust_certificate: build.template(std.get(block, 'outbound_untrust_certificate', null)),
        resource_group_name: build.template(block.resource_group_name),
        url_filtering_profile: build.template(std.get(block, 'url_filtering_profile', null)),
        vulnerability_profile: build.template(std.get(block, 'vulnerability_profile', null)),
      }),
      anti_spyware_profile: resource.field(self._.blocks, 'anti_spyware_profile'),
      anti_virus_profile: resource.field(self._.blocks, 'anti_virus_profile'),
      description: resource.field(self._.blocks, 'description'),
      dns_subscription: resource.field(self._.blocks, 'dns_subscription'),
      file_blocking_profile: resource.field(self._.blocks, 'file_blocking_profile'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      outbound_trust_certificate: resource.field(self._.blocks, 'outbound_trust_certificate'),
      outbound_untrust_certificate: resource.field(self._.blocks, 'outbound_untrust_certificate'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      url_filtering_profile: resource.field(self._.blocks, 'url_filtering_profile'),
      vulnerability_profile: resource.field(self._.blocks, 'vulnerability_profile'),
    },
    platform_image(name, block): {
      local resource = blockType.resource('azurerm_platform_image', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        location: build.template(block.location),
        offer: build.template(block.offer),
        publisher: build.template(block.publisher),
        sku: build.template(block.sku),
        version: build.template(std.get(block, 'version', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      offer: resource.field(self._.blocks, 'offer'),
      publisher: resource.field(self._.blocks, 'publisher'),
      sku: resource.field(self._.blocks, 'sku'),
      version: resource.field(self._.blocks, 'version'),
    },
    policy_assignment(name, block): {
      local resource = blockType.resource('azurerm_policy_assignment', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        display_name: build.template(std.get(block, 'display_name', null)),
        enforce: build.template(std.get(block, 'enforce', null)),
        id: build.template(std.get(block, 'id', null)),
        identity: build.template(std.get(block, 'identity', null)),
        location: build.template(std.get(block, 'location', null)),
        metadata: build.template(std.get(block, 'metadata', null)),
        name: build.template(block.name),
        non_compliance_message: build.template(std.get(block, 'non_compliance_message', null)),
        not_scopes: build.template(std.get(block, 'not_scopes', null)),
        parameters: build.template(std.get(block, 'parameters', null)),
        policy_definition_id: build.template(std.get(block, 'policy_definition_id', null)),
        scope_id: build.template(block.scope_id),
      }),
      description: resource.field(self._.blocks, 'description'),
      display_name: resource.field(self._.blocks, 'display_name'),
      enforce: resource.field(self._.blocks, 'enforce'),
      id: resource.field(self._.blocks, 'id'),
      identity: resource.field(self._.blocks, 'identity'),
      location: resource.field(self._.blocks, 'location'),
      metadata: resource.field(self._.blocks, 'metadata'),
      name: resource.field(self._.blocks, 'name'),
      non_compliance_message: resource.field(self._.blocks, 'non_compliance_message'),
      not_scopes: resource.field(self._.blocks, 'not_scopes'),
      parameters: resource.field(self._.blocks, 'parameters'),
      policy_definition_id: resource.field(self._.blocks, 'policy_definition_id'),
      scope_id: resource.field(self._.blocks, 'scope_id'),
    },
    policy_definition(name, block): {
      local resource = blockType.resource('azurerm_policy_definition', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        display_name: build.template(std.get(block, 'display_name', null)),
        id: build.template(std.get(block, 'id', null)),
        management_group_name: build.template(std.get(block, 'management_group_name', null)),
        metadata: build.template(std.get(block, 'metadata', null)),
        mode: build.template(std.get(block, 'mode', null)),
        name: build.template(std.get(block, 'name', null)),
        parameters: build.template(std.get(block, 'parameters', null)),
        policy_rule: build.template(std.get(block, 'policy_rule', null)),
        policy_type: build.template(std.get(block, 'policy_type', null)),
        role_definition_ids: build.template(std.get(block, 'role_definition_ids', null)),
        type: build.template(std.get(block, 'type', null)),
      }),
      description: resource.field(self._.blocks, 'description'),
      display_name: resource.field(self._.blocks, 'display_name'),
      id: resource.field(self._.blocks, 'id'),
      management_group_name: resource.field(self._.blocks, 'management_group_name'),
      metadata: resource.field(self._.blocks, 'metadata'),
      mode: resource.field(self._.blocks, 'mode'),
      name: resource.field(self._.blocks, 'name'),
      parameters: resource.field(self._.blocks, 'parameters'),
      policy_rule: resource.field(self._.blocks, 'policy_rule'),
      policy_type: resource.field(self._.blocks, 'policy_type'),
      role_definition_ids: resource.field(self._.blocks, 'role_definition_ids'),
      type: resource.field(self._.blocks, 'type'),
    },
    policy_definition_built_in(name, block): {
      local resource = blockType.resource('azurerm_policy_definition_built_in', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        display_name: build.template(std.get(block, 'display_name', null)),
        id: build.template(std.get(block, 'id', null)),
        management_group_name: build.template(std.get(block, 'management_group_name', null)),
        metadata: build.template(std.get(block, 'metadata', null)),
        mode: build.template(std.get(block, 'mode', null)),
        name: build.template(std.get(block, 'name', null)),
        parameters: build.template(std.get(block, 'parameters', null)),
        policy_rule: build.template(std.get(block, 'policy_rule', null)),
        policy_type: build.template(std.get(block, 'policy_type', null)),
        role_definition_ids: build.template(std.get(block, 'role_definition_ids', null)),
        type: build.template(std.get(block, 'type', null)),
      }),
      description: resource.field(self._.blocks, 'description'),
      display_name: resource.field(self._.blocks, 'display_name'),
      id: resource.field(self._.blocks, 'id'),
      management_group_name: resource.field(self._.blocks, 'management_group_name'),
      metadata: resource.field(self._.blocks, 'metadata'),
      mode: resource.field(self._.blocks, 'mode'),
      name: resource.field(self._.blocks, 'name'),
      parameters: resource.field(self._.blocks, 'parameters'),
      policy_rule: resource.field(self._.blocks, 'policy_rule'),
      policy_type: resource.field(self._.blocks, 'policy_type'),
      role_definition_ids: resource.field(self._.blocks, 'role_definition_ids'),
      type: resource.field(self._.blocks, 'type'),
    },
    policy_set_definition(name, block): {
      local resource = blockType.resource('azurerm_policy_set_definition', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        display_name: build.template(std.get(block, 'display_name', null)),
        id: build.template(std.get(block, 'id', null)),
        management_group_name: build.template(std.get(block, 'management_group_name', null)),
        metadata: build.template(std.get(block, 'metadata', null)),
        name: build.template(std.get(block, 'name', null)),
        parameters: build.template(std.get(block, 'parameters', null)),
        policy_definition_group: build.template(std.get(block, 'policy_definition_group', null)),
        policy_definition_reference: build.template(std.get(block, 'policy_definition_reference', null)),
        policy_definitions: build.template(std.get(block, 'policy_definitions', null)),
        policy_type: build.template(std.get(block, 'policy_type', null)),
      }),
      description: resource.field(self._.blocks, 'description'),
      display_name: resource.field(self._.blocks, 'display_name'),
      id: resource.field(self._.blocks, 'id'),
      management_group_name: resource.field(self._.blocks, 'management_group_name'),
      metadata: resource.field(self._.blocks, 'metadata'),
      name: resource.field(self._.blocks, 'name'),
      parameters: resource.field(self._.blocks, 'parameters'),
      policy_definition_group: resource.field(self._.blocks, 'policy_definition_group'),
      policy_definition_reference: resource.field(self._.blocks, 'policy_definition_reference'),
      policy_definitions: resource.field(self._.blocks, 'policy_definitions'),
      policy_type: resource.field(self._.blocks, 'policy_type'),
    },
    policy_virtual_machine_configuration_assignment(name, block): {
      local resource = blockType.resource('azurerm_policy_virtual_machine_configuration_assignment', name),
      _: resource._(block, {
        assignment_hash: build.template(std.get(block, 'assignment_hash', null)),
        compliance_status: build.template(std.get(block, 'compliance_status', null)),
        content_hash: build.template(std.get(block, 'content_hash', null)),
        content_uri: build.template(std.get(block, 'content_uri', null)),
        id: build.template(std.get(block, 'id', null)),
        last_compliance_status_checked: build.template(std.get(block, 'last_compliance_status_checked', null)),
        latest_report_id: build.template(std.get(block, 'latest_report_id', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        virtual_machine_name: build.template(block.virtual_machine_name),
      }),
      assignment_hash: resource.field(self._.blocks, 'assignment_hash'),
      compliance_status: resource.field(self._.blocks, 'compliance_status'),
      content_hash: resource.field(self._.blocks, 'content_hash'),
      content_uri: resource.field(self._.blocks, 'content_uri'),
      id: resource.field(self._.blocks, 'id'),
      last_compliance_status_checked: resource.field(self._.blocks, 'last_compliance_status_checked'),
      latest_report_id: resource.field(self._.blocks, 'latest_report_id'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      virtual_machine_name: resource.field(self._.blocks, 'virtual_machine_name'),
    },
    portal_dashboard(name, block): {
      local resource = blockType.resource('azurerm_portal_dashboard', name),
      _: resource._(block, {
        dashboard_properties: build.template(std.get(block, 'dashboard_properties', null)),
        display_name: build.template(std.get(block, 'display_name', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(std.get(block, 'name', null)),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      dashboard_properties: resource.field(self._.blocks, 'dashboard_properties'),
      display_name: resource.field(self._.blocks, 'display_name'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    postgresql_flexible_server(name, block): {
      local resource = blockType.resource('azurerm_postgresql_flexible_server', name),
      _: resource._(block, {
        administrator_login: build.template(std.get(block, 'administrator_login', null)),
        auto_grow_enabled: build.template(std.get(block, 'auto_grow_enabled', null)),
        backup_retention_days: build.template(std.get(block, 'backup_retention_days', null)),
        delegated_subnet_id: build.template(std.get(block, 'delegated_subnet_id', null)),
        fqdn: build.template(std.get(block, 'fqdn', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        public_network_access_enabled: build.template(std.get(block, 'public_network_access_enabled', null)),
        resource_group_name: build.template(block.resource_group_name),
        sku_name: build.template(std.get(block, 'sku_name', null)),
        storage_mb: build.template(std.get(block, 'storage_mb', null)),
        tags: build.template(std.get(block, 'tags', null)),
        version: build.template(std.get(block, 'version', null)),
      }),
      administrator_login: resource.field(self._.blocks, 'administrator_login'),
      auto_grow_enabled: resource.field(self._.blocks, 'auto_grow_enabled'),
      backup_retention_days: resource.field(self._.blocks, 'backup_retention_days'),
      delegated_subnet_id: resource.field(self._.blocks, 'delegated_subnet_id'),
      fqdn: resource.field(self._.blocks, 'fqdn'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      public_network_access_enabled: resource.field(self._.blocks, 'public_network_access_enabled'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      sku_name: resource.field(self._.blocks, 'sku_name'),
      storage_mb: resource.field(self._.blocks, 'storage_mb'),
      tags: resource.field(self._.blocks, 'tags'),
      version: resource.field(self._.blocks, 'version'),
    },
    postgresql_server(name, block): {
      local resource = blockType.resource('azurerm_postgresql_server', name),
      _: resource._(block, {
        administrator_login: build.template(std.get(block, 'administrator_login', null)),
        fqdn: build.template(std.get(block, 'fqdn', null)),
        id: build.template(std.get(block, 'id', null)),
        identity: build.template(std.get(block, 'identity', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        sku_name: build.template(std.get(block, 'sku_name', null)),
        tags: build.template(std.get(block, 'tags', null)),
        version: build.template(std.get(block, 'version', null)),
      }),
      administrator_login: resource.field(self._.blocks, 'administrator_login'),
      fqdn: resource.field(self._.blocks, 'fqdn'),
      id: resource.field(self._.blocks, 'id'),
      identity: resource.field(self._.blocks, 'identity'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      sku_name: resource.field(self._.blocks, 'sku_name'),
      tags: resource.field(self._.blocks, 'tags'),
      version: resource.field(self._.blocks, 'version'),
    },
    private_dns_a_record(name, block): {
      local resource = blockType.resource('azurerm_private_dns_a_record', name),
      _: resource._(block, {
        fqdn: build.template(std.get(block, 'fqdn', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        records: build.template(std.get(block, 'records', null)),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
        ttl: build.template(std.get(block, 'ttl', null)),
        zone_name: build.template(block.zone_name),
      }),
      fqdn: resource.field(self._.blocks, 'fqdn'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      records: resource.field(self._.blocks, 'records'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
      ttl: resource.field(self._.blocks, 'ttl'),
      zone_name: resource.field(self._.blocks, 'zone_name'),
    },
    private_dns_aaaa_record(name, block): {
      local resource = blockType.resource('azurerm_private_dns_aaaa_record', name),
      _: resource._(block, {
        fqdn: build.template(std.get(block, 'fqdn', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        records: build.template(std.get(block, 'records', null)),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
        ttl: build.template(std.get(block, 'ttl', null)),
        zone_name: build.template(block.zone_name),
      }),
      fqdn: resource.field(self._.blocks, 'fqdn'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      records: resource.field(self._.blocks, 'records'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
      ttl: resource.field(self._.blocks, 'ttl'),
      zone_name: resource.field(self._.blocks, 'zone_name'),
    },
    private_dns_cname_record(name, block): {
      local resource = blockType.resource('azurerm_private_dns_cname_record', name),
      _: resource._(block, {
        fqdn: build.template(std.get(block, 'fqdn', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        record: build.template(std.get(block, 'record', null)),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
        target_resource_id: build.template(std.get(block, 'target_resource_id', null)),
        ttl: build.template(std.get(block, 'ttl', null)),
        zone_name: build.template(block.zone_name),
      }),
      fqdn: resource.field(self._.blocks, 'fqdn'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      record: resource.field(self._.blocks, 'record'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
      target_resource_id: resource.field(self._.blocks, 'target_resource_id'),
      ttl: resource.field(self._.blocks, 'ttl'),
      zone_name: resource.field(self._.blocks, 'zone_name'),
    },
    private_dns_mx_record(name, block): {
      local resource = blockType.resource('azurerm_private_dns_mx_record', name),
      _: resource._(block, {
        fqdn: build.template(std.get(block, 'fqdn', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        record: build.template(std.get(block, 'record', null)),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
        ttl: build.template(std.get(block, 'ttl', null)),
        zone_name: build.template(block.zone_name),
      }),
      fqdn: resource.field(self._.blocks, 'fqdn'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      record: resource.field(self._.blocks, 'record'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
      ttl: resource.field(self._.blocks, 'ttl'),
      zone_name: resource.field(self._.blocks, 'zone_name'),
    },
    private_dns_ptr_record(name, block): {
      local resource = blockType.resource('azurerm_private_dns_ptr_record', name),
      _: resource._(block, {
        fqdn: build.template(std.get(block, 'fqdn', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        records: build.template(std.get(block, 'records', null)),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
        ttl: build.template(std.get(block, 'ttl', null)),
        zone_name: build.template(block.zone_name),
      }),
      fqdn: resource.field(self._.blocks, 'fqdn'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      records: resource.field(self._.blocks, 'records'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
      ttl: resource.field(self._.blocks, 'ttl'),
      zone_name: resource.field(self._.blocks, 'zone_name'),
    },
    private_dns_resolver(name, block): {
      local resource = blockType.resource('azurerm_private_dns_resolver', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
        virtual_network_id: build.template(std.get(block, 'virtual_network_id', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
      virtual_network_id: resource.field(self._.blocks, 'virtual_network_id'),
    },
    private_dns_resolver_dns_forwarding_ruleset(name, block): {
      local resource = blockType.resource('azurerm_private_dns_resolver_dns_forwarding_ruleset', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        private_dns_resolver_outbound_endpoint_ids: build.template(std.get(block, 'private_dns_resolver_outbound_endpoint_ids', null)),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      private_dns_resolver_outbound_endpoint_ids: resource.field(self._.blocks, 'private_dns_resolver_outbound_endpoint_ids'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    private_dns_resolver_forwarding_rule(name, block): {
      local resource = blockType.resource('azurerm_private_dns_resolver_forwarding_rule', name),
      _: resource._(block, {
        dns_forwarding_ruleset_id: build.template(block.dns_forwarding_ruleset_id),
        domain_name: build.template(std.get(block, 'domain_name', null)),
        enabled: build.template(std.get(block, 'enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        metadata: build.template(std.get(block, 'metadata', null)),
        name: build.template(block.name),
        target_dns_servers: build.template(std.get(block, 'target_dns_servers', null)),
      }),
      dns_forwarding_ruleset_id: resource.field(self._.blocks, 'dns_forwarding_ruleset_id'),
      domain_name: resource.field(self._.blocks, 'domain_name'),
      enabled: resource.field(self._.blocks, 'enabled'),
      id: resource.field(self._.blocks, 'id'),
      metadata: resource.field(self._.blocks, 'metadata'),
      name: resource.field(self._.blocks, 'name'),
      target_dns_servers: resource.field(self._.blocks, 'target_dns_servers'),
    },
    private_dns_resolver_inbound_endpoint(name, block): {
      local resource = blockType.resource('azurerm_private_dns_resolver_inbound_endpoint', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        ip_configurations: build.template(std.get(block, 'ip_configurations', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        private_dns_resolver_id: build.template(block.private_dns_resolver_id),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      ip_configurations: resource.field(self._.blocks, 'ip_configurations'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      private_dns_resolver_id: resource.field(self._.blocks, 'private_dns_resolver_id'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    private_dns_resolver_outbound_endpoint(name, block): {
      local resource = blockType.resource('azurerm_private_dns_resolver_outbound_endpoint', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        private_dns_resolver_id: build.template(block.private_dns_resolver_id),
        subnet_id: build.template(std.get(block, 'subnet_id', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      private_dns_resolver_id: resource.field(self._.blocks, 'private_dns_resolver_id'),
      subnet_id: resource.field(self._.blocks, 'subnet_id'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    private_dns_resolver_virtual_network_link(name, block): {
      local resource = blockType.resource('azurerm_private_dns_resolver_virtual_network_link', name),
      _: resource._(block, {
        dns_forwarding_ruleset_id: build.template(block.dns_forwarding_ruleset_id),
        id: build.template(std.get(block, 'id', null)),
        metadata: build.template(std.get(block, 'metadata', null)),
        name: build.template(block.name),
        virtual_network_id: build.template(std.get(block, 'virtual_network_id', null)),
      }),
      dns_forwarding_ruleset_id: resource.field(self._.blocks, 'dns_forwarding_ruleset_id'),
      id: resource.field(self._.blocks, 'id'),
      metadata: resource.field(self._.blocks, 'metadata'),
      name: resource.field(self._.blocks, 'name'),
      virtual_network_id: resource.field(self._.blocks, 'virtual_network_id'),
    },
    private_dns_soa_record(name, block): {
      local resource = blockType.resource('azurerm_private_dns_soa_record', name),
      _: resource._(block, {
        email: build.template(std.get(block, 'email', null)),
        expire_time: build.template(std.get(block, 'expire_time', null)),
        fqdn: build.template(std.get(block, 'fqdn', null)),
        host_name: build.template(std.get(block, 'host_name', null)),
        id: build.template(std.get(block, 'id', null)),
        minimum_ttl: build.template(std.get(block, 'minimum_ttl', null)),
        name: build.template(std.get(block, 'name', null)),
        refresh_time: build.template(std.get(block, 'refresh_time', null)),
        resource_group_name: build.template(block.resource_group_name),
        retry_time: build.template(std.get(block, 'retry_time', null)),
        serial_number: build.template(std.get(block, 'serial_number', null)),
        tags: build.template(std.get(block, 'tags', null)),
        ttl: build.template(std.get(block, 'ttl', null)),
        zone_name: build.template(block.zone_name),
      }),
      email: resource.field(self._.blocks, 'email'),
      expire_time: resource.field(self._.blocks, 'expire_time'),
      fqdn: resource.field(self._.blocks, 'fqdn'),
      host_name: resource.field(self._.blocks, 'host_name'),
      id: resource.field(self._.blocks, 'id'),
      minimum_ttl: resource.field(self._.blocks, 'minimum_ttl'),
      name: resource.field(self._.blocks, 'name'),
      refresh_time: resource.field(self._.blocks, 'refresh_time'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      retry_time: resource.field(self._.blocks, 'retry_time'),
      serial_number: resource.field(self._.blocks, 'serial_number'),
      tags: resource.field(self._.blocks, 'tags'),
      ttl: resource.field(self._.blocks, 'ttl'),
      zone_name: resource.field(self._.blocks, 'zone_name'),
    },
    private_dns_srv_record(name, block): {
      local resource = blockType.resource('azurerm_private_dns_srv_record', name),
      _: resource._(block, {
        fqdn: build.template(std.get(block, 'fqdn', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        record: build.template(std.get(block, 'record', null)),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
        ttl: build.template(std.get(block, 'ttl', null)),
        zone_name: build.template(block.zone_name),
      }),
      fqdn: resource.field(self._.blocks, 'fqdn'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      record: resource.field(self._.blocks, 'record'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
      ttl: resource.field(self._.blocks, 'ttl'),
      zone_name: resource.field(self._.blocks, 'zone_name'),
    },
    private_dns_txt_record(name, block): {
      local resource = blockType.resource('azurerm_private_dns_txt_record', name),
      _: resource._(block, {
        fqdn: build.template(std.get(block, 'fqdn', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        record: build.template(std.get(block, 'record', null)),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
        ttl: build.template(std.get(block, 'ttl', null)),
        zone_name: build.template(block.zone_name),
      }),
      fqdn: resource.field(self._.blocks, 'fqdn'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      record: resource.field(self._.blocks, 'record'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
      ttl: resource.field(self._.blocks, 'ttl'),
      zone_name: resource.field(self._.blocks, 'zone_name'),
    },
    private_dns_zone(name, block): {
      local resource = blockType.resource('azurerm_private_dns_zone', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        max_number_of_record_sets: build.template(std.get(block, 'max_number_of_record_sets', null)),
        max_number_of_virtual_network_links: build.template(std.get(block, 'max_number_of_virtual_network_links', null)),
        max_number_of_virtual_network_links_with_registration: build.template(std.get(block, 'max_number_of_virtual_network_links_with_registration', null)),
        name: build.template(block.name),
        number_of_record_sets: build.template(std.get(block, 'number_of_record_sets', null)),
        resource_group_name: build.template(std.get(block, 'resource_group_name', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      max_number_of_record_sets: resource.field(self._.blocks, 'max_number_of_record_sets'),
      max_number_of_virtual_network_links: resource.field(self._.blocks, 'max_number_of_virtual_network_links'),
      max_number_of_virtual_network_links_with_registration: resource.field(self._.blocks, 'max_number_of_virtual_network_links_with_registration'),
      name: resource.field(self._.blocks, 'name'),
      number_of_record_sets: resource.field(self._.blocks, 'number_of_record_sets'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    private_dns_zone_virtual_network_link(name, block): {
      local resource = blockType.resource('azurerm_private_dns_zone_virtual_network_link', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        private_dns_zone_name: build.template(block.private_dns_zone_name),
        registration_enabled: build.template(std.get(block, 'registration_enabled', null)),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
        virtual_network_id: build.template(std.get(block, 'virtual_network_id', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      private_dns_zone_name: resource.field(self._.blocks, 'private_dns_zone_name'),
      registration_enabled: resource.field(self._.blocks, 'registration_enabled'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
      virtual_network_id: resource.field(self._.blocks, 'virtual_network_id'),
    },
    private_endpoint_connection(name, block): {
      local resource = blockType.resource('azurerm_private_endpoint_connection', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        network_interface: build.template(std.get(block, 'network_interface', null)),
        private_service_connection: build.template(std.get(block, 'private_service_connection', null)),
        resource_group_name: build.template(block.resource_group_name),
      }),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      network_interface: resource.field(self._.blocks, 'network_interface'),
      private_service_connection: resource.field(self._.blocks, 'private_service_connection'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
    },
    private_link_service(name, block): {
      local resource = blockType.resource('azurerm_private_link_service', name),
      _: resource._(block, {
        alias: build.template(std.get(block, 'alias', null)),
        auto_approval_subscription_ids: build.template(std.get(block, 'auto_approval_subscription_ids', null)),
        enable_proxy_protocol: build.template(std.get(block, 'enable_proxy_protocol', null)),
        id: build.template(std.get(block, 'id', null)),
        load_balancer_frontend_ip_configuration_ids: build.template(std.get(block, 'load_balancer_frontend_ip_configuration_ids', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        nat_ip_configuration: build.template(std.get(block, 'nat_ip_configuration', null)),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
        visibility_subscription_ids: build.template(std.get(block, 'visibility_subscription_ids', null)),
      }),
      alias: resource.field(self._.blocks, 'alias'),
      auto_approval_subscription_ids: resource.field(self._.blocks, 'auto_approval_subscription_ids'),
      enable_proxy_protocol: resource.field(self._.blocks, 'enable_proxy_protocol'),
      id: resource.field(self._.blocks, 'id'),
      load_balancer_frontend_ip_configuration_ids: resource.field(self._.blocks, 'load_balancer_frontend_ip_configuration_ids'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      nat_ip_configuration: resource.field(self._.blocks, 'nat_ip_configuration'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
      visibility_subscription_ids: resource.field(self._.blocks, 'visibility_subscription_ids'),
    },
    private_link_service_endpoint_connections(name, block): {
      local resource = blockType.resource('azurerm_private_link_service_endpoint_connections', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        private_endpoint_connections: build.template(std.get(block, 'private_endpoint_connections', null)),
        resource_group_name: build.template(block.resource_group_name),
        service_id: build.template(block.service_id),
        service_name: build.template(std.get(block, 'service_name', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      private_endpoint_connections: resource.field(self._.blocks, 'private_endpoint_connections'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      service_id: resource.field(self._.blocks, 'service_id'),
      service_name: resource.field(self._.blocks, 'service_name'),
    },
    proximity_placement_group(name, block): {
      local resource = blockType.resource('azurerm_proximity_placement_group', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    public_ip(name, block): {
      local resource = blockType.resource('azurerm_public_ip', name),
      _: resource._(block, {
        allocation_method: build.template(std.get(block, 'allocation_method', null)),
        ddos_protection_mode: build.template(std.get(block, 'ddos_protection_mode', null)),
        ddos_protection_plan_id: build.template(std.get(block, 'ddos_protection_plan_id', null)),
        domain_name_label: build.template(std.get(block, 'domain_name_label', null)),
        fqdn: build.template(std.get(block, 'fqdn', null)),
        id: build.template(std.get(block, 'id', null)),
        idle_timeout_in_minutes: build.template(std.get(block, 'idle_timeout_in_minutes', null)),
        ip_address: build.template(std.get(block, 'ip_address', null)),
        ip_tags: build.template(std.get(block, 'ip_tags', null)),
        ip_version: build.template(std.get(block, 'ip_version', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        reverse_fqdn: build.template(std.get(block, 'reverse_fqdn', null)),
        sku: build.template(std.get(block, 'sku', null)),
        tags: build.template(std.get(block, 'tags', null)),
        zones: build.template(std.get(block, 'zones', null)),
      }),
      allocation_method: resource.field(self._.blocks, 'allocation_method'),
      ddos_protection_mode: resource.field(self._.blocks, 'ddos_protection_mode'),
      ddos_protection_plan_id: resource.field(self._.blocks, 'ddos_protection_plan_id'),
      domain_name_label: resource.field(self._.blocks, 'domain_name_label'),
      fqdn: resource.field(self._.blocks, 'fqdn'),
      id: resource.field(self._.blocks, 'id'),
      idle_timeout_in_minutes: resource.field(self._.blocks, 'idle_timeout_in_minutes'),
      ip_address: resource.field(self._.blocks, 'ip_address'),
      ip_tags: resource.field(self._.blocks, 'ip_tags'),
      ip_version: resource.field(self._.blocks, 'ip_version'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      reverse_fqdn: resource.field(self._.blocks, 'reverse_fqdn'),
      sku: resource.field(self._.blocks, 'sku'),
      tags: resource.field(self._.blocks, 'tags'),
      zones: resource.field(self._.blocks, 'zones'),
    },
    public_ip_prefix(name, block): {
      local resource = blockType.resource('azurerm_public_ip_prefix', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        ip_prefix: build.template(std.get(block, 'ip_prefix', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        prefix_length: build.template(std.get(block, 'prefix_length', null)),
        resource_group_name: build.template(block.resource_group_name),
        sku: build.template(std.get(block, 'sku', null)),
        sku_tier: build.template(std.get(block, 'sku_tier', null)),
        tags: build.template(std.get(block, 'tags', null)),
        zones: build.template(std.get(block, 'zones', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      ip_prefix: resource.field(self._.blocks, 'ip_prefix'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      prefix_length: resource.field(self._.blocks, 'prefix_length'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      sku: resource.field(self._.blocks, 'sku'),
      sku_tier: resource.field(self._.blocks, 'sku_tier'),
      tags: resource.field(self._.blocks, 'tags'),
      zones: resource.field(self._.blocks, 'zones'),
    },
    public_ips(name, block): {
      local resource = blockType.resource('azurerm_public_ips', name),
      _: resource._(block, {
        allocation_type: build.template(std.get(block, 'allocation_type', null)),
        attachment_status: build.template(std.get(block, 'attachment_status', null)),
        id: build.template(std.get(block, 'id', null)),
        name_prefix: build.template(std.get(block, 'name_prefix', null)),
        public_ips: build.template(std.get(block, 'public_ips', null)),
        resource_group_name: build.template(block.resource_group_name),
      }),
      allocation_type: resource.field(self._.blocks, 'allocation_type'),
      attachment_status: resource.field(self._.blocks, 'attachment_status'),
      id: resource.field(self._.blocks, 'id'),
      name_prefix: resource.field(self._.blocks, 'name_prefix'),
      public_ips: resource.field(self._.blocks, 'public_ips'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
    },
    public_maintenance_configurations(name, block): {
      local resource = blockType.resource('azurerm_public_maintenance_configurations', name),
      _: resource._(block, {
        configs: build.template(std.get(block, 'configs', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        recur_every: build.template(std.get(block, 'recur_every', null)),
        scope: build.template(std.get(block, 'scope', null)),
      }),
      configs: resource.field(self._.blocks, 'configs'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      recur_every: resource.field(self._.blocks, 'recur_every'),
      scope: resource.field(self._.blocks, 'scope'),
    },
    recovery_services_vault(name, block): {
      local resource = blockType.resource('azurerm_recovery_services_vault', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        identity: build.template(std.get(block, 'identity', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        sku: build.template(std.get(block, 'sku', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      identity: resource.field(self._.blocks, 'identity'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      sku: resource.field(self._.blocks, 'sku'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    redis_cache(name, block): {
      local resource = blockType.resource('azurerm_redis_cache', name),
      _: resource._(block, {
        access_keys_authentication_enabled: build.template(std.get(block, 'access_keys_authentication_enabled', null)),
        capacity: build.template(std.get(block, 'capacity', null)),
        family: build.template(std.get(block, 'family', null)),
        hostname: build.template(std.get(block, 'hostname', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        minimum_tls_version: build.template(std.get(block, 'minimum_tls_version', null)),
        name: build.template(block.name),
        non_ssl_port_enabled: build.template(std.get(block, 'non_ssl_port_enabled', null)),
        patch_schedule: build.template(std.get(block, 'patch_schedule', null)),
        port: build.template(std.get(block, 'port', null)),
        primary_access_key: build.template(std.get(block, 'primary_access_key', null)),
        primary_connection_string: build.template(std.get(block, 'primary_connection_string', null)),
        private_static_ip_address: build.template(std.get(block, 'private_static_ip_address', null)),
        redis_configuration: build.template(std.get(block, 'redis_configuration', null)),
        resource_group_name: build.template(block.resource_group_name),
        secondary_access_key: build.template(std.get(block, 'secondary_access_key', null)),
        secondary_connection_string: build.template(std.get(block, 'secondary_connection_string', null)),
        shard_count: build.template(std.get(block, 'shard_count', null)),
        sku_name: build.template(std.get(block, 'sku_name', null)),
        ssl_port: build.template(std.get(block, 'ssl_port', null)),
        subnet_id: build.template(std.get(block, 'subnet_id', null)),
        tags: build.template(std.get(block, 'tags', null)),
        zones: build.template(std.get(block, 'zones', null)),
      }),
      access_keys_authentication_enabled: resource.field(self._.blocks, 'access_keys_authentication_enabled'),
      capacity: resource.field(self._.blocks, 'capacity'),
      family: resource.field(self._.blocks, 'family'),
      hostname: resource.field(self._.blocks, 'hostname'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      minimum_tls_version: resource.field(self._.blocks, 'minimum_tls_version'),
      name: resource.field(self._.blocks, 'name'),
      non_ssl_port_enabled: resource.field(self._.blocks, 'non_ssl_port_enabled'),
      patch_schedule: resource.field(self._.blocks, 'patch_schedule'),
      port: resource.field(self._.blocks, 'port'),
      primary_access_key: resource.field(self._.blocks, 'primary_access_key'),
      primary_connection_string: resource.field(self._.blocks, 'primary_connection_string'),
      private_static_ip_address: resource.field(self._.blocks, 'private_static_ip_address'),
      redis_configuration: resource.field(self._.blocks, 'redis_configuration'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      secondary_access_key: resource.field(self._.blocks, 'secondary_access_key'),
      secondary_connection_string: resource.field(self._.blocks, 'secondary_connection_string'),
      shard_count: resource.field(self._.blocks, 'shard_count'),
      sku_name: resource.field(self._.blocks, 'sku_name'),
      ssl_port: resource.field(self._.blocks, 'ssl_port'),
      subnet_id: resource.field(self._.blocks, 'subnet_id'),
      tags: resource.field(self._.blocks, 'tags'),
      zones: resource.field(self._.blocks, 'zones'),
    },
    redis_enterprise_database(name, block): {
      local resource = blockType.resource('azurerm_redis_enterprise_database', name),
      _: resource._(block, {
        cluster_id: build.template(block.cluster_id),
        id: build.template(std.get(block, 'id', null)),
        linked_database_group_nickname: build.template(std.get(block, 'linked_database_group_nickname', null)),
        linked_database_id: build.template(std.get(block, 'linked_database_id', null)),
        name: build.template(block.name),
        primary_access_key: build.template(std.get(block, 'primary_access_key', null)),
        secondary_access_key: build.template(std.get(block, 'secondary_access_key', null)),
      }),
      cluster_id: resource.field(self._.blocks, 'cluster_id'),
      id: resource.field(self._.blocks, 'id'),
      linked_database_group_nickname: resource.field(self._.blocks, 'linked_database_group_nickname'),
      linked_database_id: resource.field(self._.blocks, 'linked_database_id'),
      name: resource.field(self._.blocks, 'name'),
      primary_access_key: resource.field(self._.blocks, 'primary_access_key'),
      secondary_access_key: resource.field(self._.blocks, 'secondary_access_key'),
    },
    resource_group(name, block): {
      local resource = blockType.resource('azurerm_resource_group', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        managed_by: build.template(std.get(block, 'managed_by', null)),
        name: build.template(block.name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      managed_by: resource.field(self._.blocks, 'managed_by'),
      name: resource.field(self._.blocks, 'name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    resource_group_template_deployment(name, block): {
      local resource = blockType.resource('azurerm_resource_group_template_deployment', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        output_content: build.template(std.get(block, 'output_content', null)),
        resource_group_name: build.template(block.resource_group_name),
      }),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      output_content: resource.field(self._.blocks, 'output_content'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
    },
    resources(name, block): {
      local resource = blockType.resource('azurerm_resources', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        required_tags: build.template(std.get(block, 'required_tags', null)),
        resource_group_name: build.template(std.get(block, 'resource_group_name', null)),
        resources: build.template(std.get(block, 'resources', null)),
        type: build.template(std.get(block, 'type', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      required_tags: resource.field(self._.blocks, 'required_tags'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      resources: resource.field(self._.blocks, 'resources'),
      type: resource.field(self._.blocks, 'type'),
    },
    role_definition(name, block): {
      local resource = blockType.resource('azurerm_role_definition', name),
      _: resource._(block, {
        assignable_scopes: build.template(std.get(block, 'assignable_scopes', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        permissions: build.template(std.get(block, 'permissions', null)),
        role_definition_id: build.template(std.get(block, 'role_definition_id', null)),
        scope: build.template(std.get(block, 'scope', null)),
        type: build.template(std.get(block, 'type', null)),
      }),
      assignable_scopes: resource.field(self._.blocks, 'assignable_scopes'),
      description: resource.field(self._.blocks, 'description'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      permissions: resource.field(self._.blocks, 'permissions'),
      role_definition_id: resource.field(self._.blocks, 'role_definition_id'),
      scope: resource.field(self._.blocks, 'scope'),
      type: resource.field(self._.blocks, 'type'),
    },
    role_management_policy(name, block): {
      local resource = blockType.resource('azurerm_role_management_policy', name),
      _: resource._(block, {
        activation_rules: build.template(std.get(block, 'activation_rules', null)),
        active_assignment_rules: build.template(std.get(block, 'active_assignment_rules', null)),
        description: build.template(std.get(block, 'description', null)),
        eligible_assignment_rules: build.template(std.get(block, 'eligible_assignment_rules', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        notification_rules: build.template(std.get(block, 'notification_rules', null)),
        role_definition_id: build.template(block.role_definition_id),
        scope: build.template(block.scope),
      }),
      activation_rules: resource.field(self._.blocks, 'activation_rules'),
      active_assignment_rules: resource.field(self._.blocks, 'active_assignment_rules'),
      description: resource.field(self._.blocks, 'description'),
      eligible_assignment_rules: resource.field(self._.blocks, 'eligible_assignment_rules'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      notification_rules: resource.field(self._.blocks, 'notification_rules'),
      role_definition_id: resource.field(self._.blocks, 'role_definition_id'),
      scope: resource.field(self._.blocks, 'scope'),
    },
    route_filter(name, block): {
      local resource = blockType.resource('azurerm_route_filter', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        rule: build.template(std.get(block, 'rule', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      rule: resource.field(self._.blocks, 'rule'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    route_table(name, block): {
      local resource = blockType.resource('azurerm_route_table', name),
      _: resource._(block, {
        bgp_route_propagation_enabled: build.template(std.get(block, 'bgp_route_propagation_enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        route: build.template(std.get(block, 'route', null)),
        subnets: build.template(std.get(block, 'subnets', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      bgp_route_propagation_enabled: resource.field(self._.blocks, 'bgp_route_propagation_enabled'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      route: resource.field(self._.blocks, 'route'),
      subnets: resource.field(self._.blocks, 'subnets'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    search_service(name, block): {
      local resource = blockType.resource('azurerm_search_service', name),
      _: resource._(block, {
        customer_managed_key_encryption_compliance_status: build.template(std.get(block, 'customer_managed_key_encryption_compliance_status', null)),
        id: build.template(std.get(block, 'id', null)),
        identity: build.template(std.get(block, 'identity', null)),
        name: build.template(block.name),
        partition_count: build.template(std.get(block, 'partition_count', null)),
        primary_key: build.template(std.get(block, 'primary_key', null)),
        public_network_access_enabled: build.template(std.get(block, 'public_network_access_enabled', null)),
        query_keys: build.template(std.get(block, 'query_keys', null)),
        replica_count: build.template(std.get(block, 'replica_count', null)),
        resource_group_name: build.template(block.resource_group_name),
        secondary_key: build.template(std.get(block, 'secondary_key', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      customer_managed_key_encryption_compliance_status: resource.field(self._.blocks, 'customer_managed_key_encryption_compliance_status'),
      id: resource.field(self._.blocks, 'id'),
      identity: resource.field(self._.blocks, 'identity'),
      name: resource.field(self._.blocks, 'name'),
      partition_count: resource.field(self._.blocks, 'partition_count'),
      primary_key: resource.field(self._.blocks, 'primary_key'),
      public_network_access_enabled: resource.field(self._.blocks, 'public_network_access_enabled'),
      query_keys: resource.field(self._.blocks, 'query_keys'),
      replica_count: resource.field(self._.blocks, 'replica_count'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      secondary_key: resource.field(self._.blocks, 'secondary_key'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    sentinel_alert_rule(name, block): {
      local resource = blockType.resource('azurerm_sentinel_alert_rule', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        log_analytics_workspace_id: build.template(block.log_analytics_workspace_id),
        name: build.template(block.name),
      }),
      id: resource.field(self._.blocks, 'id'),
      log_analytics_workspace_id: resource.field(self._.blocks, 'log_analytics_workspace_id'),
      name: resource.field(self._.blocks, 'name'),
    },
    sentinel_alert_rule_anomaly(name, block): {
      local resource = blockType.resource('azurerm_sentinel_alert_rule_anomaly', name),
      _: resource._(block, {
        anomaly_settings_version: build.template(std.get(block, 'anomaly_settings_version', null)),
        anomaly_version: build.template(std.get(block, 'anomaly_version', null)),
        description: build.template(std.get(block, 'description', null)),
        display_name: build.template(std.get(block, 'display_name', null)),
        enabled: build.template(std.get(block, 'enabled', null)),
        frequency: build.template(std.get(block, 'frequency', null)),
        id: build.template(std.get(block, 'id', null)),
        log_analytics_workspace_id: build.template(block.log_analytics_workspace_id),
        mode: build.template(std.get(block, 'mode', null)),
        multi_select_observation: build.template(std.get(block, 'multi_select_observation', null)),
        name: build.template(std.get(block, 'name', null)),
        prioritized_exclude_observation: build.template(std.get(block, 'prioritized_exclude_observation', null)),
        required_data_connector: build.template(std.get(block, 'required_data_connector', null)),
        settings_definition_id: build.template(std.get(block, 'settings_definition_id', null)),
        single_select_observation: build.template(std.get(block, 'single_select_observation', null)),
        tactics: build.template(std.get(block, 'tactics', null)),
        techniques: build.template(std.get(block, 'techniques', null)),
        threshold_observation: build.template(std.get(block, 'threshold_observation', null)),
      }),
      anomaly_settings_version: resource.field(self._.blocks, 'anomaly_settings_version'),
      anomaly_version: resource.field(self._.blocks, 'anomaly_version'),
      description: resource.field(self._.blocks, 'description'),
      display_name: resource.field(self._.blocks, 'display_name'),
      enabled: resource.field(self._.blocks, 'enabled'),
      frequency: resource.field(self._.blocks, 'frequency'),
      id: resource.field(self._.blocks, 'id'),
      log_analytics_workspace_id: resource.field(self._.blocks, 'log_analytics_workspace_id'),
      mode: resource.field(self._.blocks, 'mode'),
      multi_select_observation: resource.field(self._.blocks, 'multi_select_observation'),
      name: resource.field(self._.blocks, 'name'),
      prioritized_exclude_observation: resource.field(self._.blocks, 'prioritized_exclude_observation'),
      required_data_connector: resource.field(self._.blocks, 'required_data_connector'),
      settings_definition_id: resource.field(self._.blocks, 'settings_definition_id'),
      single_select_observation: resource.field(self._.blocks, 'single_select_observation'),
      tactics: resource.field(self._.blocks, 'tactics'),
      techniques: resource.field(self._.blocks, 'techniques'),
      threshold_observation: resource.field(self._.blocks, 'threshold_observation'),
    },
    sentinel_alert_rule_template(name, block): {
      local resource = blockType.resource('azurerm_sentinel_alert_rule_template', name),
      _: resource._(block, {
        display_name: build.template(std.get(block, 'display_name', null)),
        id: build.template(std.get(block, 'id', null)),
        log_analytics_workspace_id: build.template(block.log_analytics_workspace_id),
        name: build.template(std.get(block, 'name', null)),
        nrt_template: build.template(std.get(block, 'nrt_template', null)),
        scheduled_template: build.template(std.get(block, 'scheduled_template', null)),
        security_incident_template: build.template(std.get(block, 'security_incident_template', null)),
      }),
      display_name: resource.field(self._.blocks, 'display_name'),
      id: resource.field(self._.blocks, 'id'),
      log_analytics_workspace_id: resource.field(self._.blocks, 'log_analytics_workspace_id'),
      name: resource.field(self._.blocks, 'name'),
      nrt_template: resource.field(self._.blocks, 'nrt_template'),
      scheduled_template: resource.field(self._.blocks, 'scheduled_template'),
      security_incident_template: resource.field(self._.blocks, 'security_incident_template'),
    },
    service_plan(name, block): {
      local resource = blockType.resource('azurerm_service_plan', name),
      _: resource._(block, {
        app_service_environment_id: build.template(std.get(block, 'app_service_environment_id', null)),
        id: build.template(std.get(block, 'id', null)),
        kind: build.template(std.get(block, 'kind', null)),
        location: build.template(std.get(block, 'location', null)),
        maximum_elastic_worker_count: build.template(std.get(block, 'maximum_elastic_worker_count', null)),
        name: build.template(block.name),
        os_type: build.template(std.get(block, 'os_type', null)),
        per_site_scaling_enabled: build.template(std.get(block, 'per_site_scaling_enabled', null)),
        reserved: build.template(std.get(block, 'reserved', null)),
        resource_group_name: build.template(block.resource_group_name),
        sku_name: build.template(std.get(block, 'sku_name', null)),
        tags: build.template(std.get(block, 'tags', null)),
        worker_count: build.template(std.get(block, 'worker_count', null)),
        zone_balancing_enabled: build.template(std.get(block, 'zone_balancing_enabled', null)),
      }),
      app_service_environment_id: resource.field(self._.blocks, 'app_service_environment_id'),
      id: resource.field(self._.blocks, 'id'),
      kind: resource.field(self._.blocks, 'kind'),
      location: resource.field(self._.blocks, 'location'),
      maximum_elastic_worker_count: resource.field(self._.blocks, 'maximum_elastic_worker_count'),
      name: resource.field(self._.blocks, 'name'),
      os_type: resource.field(self._.blocks, 'os_type'),
      per_site_scaling_enabled: resource.field(self._.blocks, 'per_site_scaling_enabled'),
      reserved: resource.field(self._.blocks, 'reserved'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      sku_name: resource.field(self._.blocks, 'sku_name'),
      tags: resource.field(self._.blocks, 'tags'),
      worker_count: resource.field(self._.blocks, 'worker_count'),
      zone_balancing_enabled: resource.field(self._.blocks, 'zone_balancing_enabled'),
    },
    servicebus_namespace(name, block): {
      local resource = blockType.resource('azurerm_servicebus_namespace', name),
      _: resource._(block, {
        capacity: build.template(std.get(block, 'capacity', null)),
        default_primary_connection_string: build.template(std.get(block, 'default_primary_connection_string', null)),
        default_primary_key: build.template(std.get(block, 'default_primary_key', null)),
        default_secondary_connection_string: build.template(std.get(block, 'default_secondary_connection_string', null)),
        default_secondary_key: build.template(std.get(block, 'default_secondary_key', null)),
        endpoint: build.template(std.get(block, 'endpoint', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        premium_messaging_partitions: build.template(std.get(block, 'premium_messaging_partitions', null)),
        resource_group_name: build.template(block.resource_group_name),
        sku: build.template(std.get(block, 'sku', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      capacity: resource.field(self._.blocks, 'capacity'),
      default_primary_connection_string: resource.field(self._.blocks, 'default_primary_connection_string'),
      default_primary_key: resource.field(self._.blocks, 'default_primary_key'),
      default_secondary_connection_string: resource.field(self._.blocks, 'default_secondary_connection_string'),
      default_secondary_key: resource.field(self._.blocks, 'default_secondary_key'),
      endpoint: resource.field(self._.blocks, 'endpoint'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      premium_messaging_partitions: resource.field(self._.blocks, 'premium_messaging_partitions'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      sku: resource.field(self._.blocks, 'sku'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    servicebus_namespace_authorization_rule(name, block): {
      local resource = blockType.resource('azurerm_servicebus_namespace_authorization_rule', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        namespace_id: build.template(std.get(block, 'namespace_id', null)),
        namespace_name: build.template(std.get(block, 'namespace_name', null)),
        primary_connection_string: build.template(std.get(block, 'primary_connection_string', null)),
        primary_connection_string_alias: build.template(std.get(block, 'primary_connection_string_alias', null)),
        primary_key: build.template(std.get(block, 'primary_key', null)),
        resource_group_name: build.template(std.get(block, 'resource_group_name', null)),
        secondary_connection_string: build.template(std.get(block, 'secondary_connection_string', null)),
        secondary_connection_string_alias: build.template(std.get(block, 'secondary_connection_string_alias', null)),
        secondary_key: build.template(std.get(block, 'secondary_key', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      namespace_id: resource.field(self._.blocks, 'namespace_id'),
      namespace_name: resource.field(self._.blocks, 'namespace_name'),
      primary_connection_string: resource.field(self._.blocks, 'primary_connection_string'),
      primary_connection_string_alias: resource.field(self._.blocks, 'primary_connection_string_alias'),
      primary_key: resource.field(self._.blocks, 'primary_key'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      secondary_connection_string: resource.field(self._.blocks, 'secondary_connection_string'),
      secondary_connection_string_alias: resource.field(self._.blocks, 'secondary_connection_string_alias'),
      secondary_key: resource.field(self._.blocks, 'secondary_key'),
    },
    servicebus_namespace_disaster_recovery_config(name, block): {
      local resource = blockType.resource('azurerm_servicebus_namespace_disaster_recovery_config', name),
      _: resource._(block, {
        alias_authorization_rule_id: build.template(std.get(block, 'alias_authorization_rule_id', null)),
        default_primary_key: build.template(std.get(block, 'default_primary_key', null)),
        default_secondary_key: build.template(std.get(block, 'default_secondary_key', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        namespace_id: build.template(std.get(block, 'namespace_id', null)),
        namespace_name: build.template(std.get(block, 'namespace_name', null)),
        partner_namespace_id: build.template(std.get(block, 'partner_namespace_id', null)),
        primary_connection_string_alias: build.template(std.get(block, 'primary_connection_string_alias', null)),
        resource_group_name: build.template(std.get(block, 'resource_group_name', null)),
        secondary_connection_string_alias: build.template(std.get(block, 'secondary_connection_string_alias', null)),
      }),
      alias_authorization_rule_id: resource.field(self._.blocks, 'alias_authorization_rule_id'),
      default_primary_key: resource.field(self._.blocks, 'default_primary_key'),
      default_secondary_key: resource.field(self._.blocks, 'default_secondary_key'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      namespace_id: resource.field(self._.blocks, 'namespace_id'),
      namespace_name: resource.field(self._.blocks, 'namespace_name'),
      partner_namespace_id: resource.field(self._.blocks, 'partner_namespace_id'),
      primary_connection_string_alias: resource.field(self._.blocks, 'primary_connection_string_alias'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      secondary_connection_string_alias: resource.field(self._.blocks, 'secondary_connection_string_alias'),
    },
    servicebus_queue(name, block): {
      local resource = blockType.resource('azurerm_servicebus_queue', name),
      _: resource._(block, {
        auto_delete_on_idle: build.template(std.get(block, 'auto_delete_on_idle', null)),
        batched_operations_enabled: build.template(std.get(block, 'batched_operations_enabled', null)),
        dead_lettering_on_message_expiration: build.template(std.get(block, 'dead_lettering_on_message_expiration', null)),
        default_message_ttl: build.template(std.get(block, 'default_message_ttl', null)),
        duplicate_detection_history_time_window: build.template(std.get(block, 'duplicate_detection_history_time_window', null)),
        enable_batched_operations: build.template(std.get(block, 'enable_batched_operations', null)),
        enable_express: build.template(std.get(block, 'enable_express', null)),
        enable_partitioning: build.template(std.get(block, 'enable_partitioning', null)),
        express_enabled: build.template(std.get(block, 'express_enabled', null)),
        forward_dead_lettered_messages_to: build.template(std.get(block, 'forward_dead_lettered_messages_to', null)),
        forward_to: build.template(std.get(block, 'forward_to', null)),
        id: build.template(std.get(block, 'id', null)),
        lock_duration: build.template(std.get(block, 'lock_duration', null)),
        max_delivery_count: build.template(std.get(block, 'max_delivery_count', null)),
        max_size_in_megabytes: build.template(std.get(block, 'max_size_in_megabytes', null)),
        name: build.template(block.name),
        namespace_id: build.template(std.get(block, 'namespace_id', null)),
        namespace_name: build.template(std.get(block, 'namespace_name', null)),
        partitioning_enabled: build.template(std.get(block, 'partitioning_enabled', null)),
        requires_duplicate_detection: build.template(std.get(block, 'requires_duplicate_detection', null)),
        requires_session: build.template(std.get(block, 'requires_session', null)),
        resource_group_name: build.template(std.get(block, 'resource_group_name', null)),
        status: build.template(std.get(block, 'status', null)),
      }),
      auto_delete_on_idle: resource.field(self._.blocks, 'auto_delete_on_idle'),
      batched_operations_enabled: resource.field(self._.blocks, 'batched_operations_enabled'),
      dead_lettering_on_message_expiration: resource.field(self._.blocks, 'dead_lettering_on_message_expiration'),
      default_message_ttl: resource.field(self._.blocks, 'default_message_ttl'),
      duplicate_detection_history_time_window: resource.field(self._.blocks, 'duplicate_detection_history_time_window'),
      enable_batched_operations: resource.field(self._.blocks, 'enable_batched_operations'),
      enable_express: resource.field(self._.blocks, 'enable_express'),
      enable_partitioning: resource.field(self._.blocks, 'enable_partitioning'),
      express_enabled: resource.field(self._.blocks, 'express_enabled'),
      forward_dead_lettered_messages_to: resource.field(self._.blocks, 'forward_dead_lettered_messages_to'),
      forward_to: resource.field(self._.blocks, 'forward_to'),
      id: resource.field(self._.blocks, 'id'),
      lock_duration: resource.field(self._.blocks, 'lock_duration'),
      max_delivery_count: resource.field(self._.blocks, 'max_delivery_count'),
      max_size_in_megabytes: resource.field(self._.blocks, 'max_size_in_megabytes'),
      name: resource.field(self._.blocks, 'name'),
      namespace_id: resource.field(self._.blocks, 'namespace_id'),
      namespace_name: resource.field(self._.blocks, 'namespace_name'),
      partitioning_enabled: resource.field(self._.blocks, 'partitioning_enabled'),
      requires_duplicate_detection: resource.field(self._.blocks, 'requires_duplicate_detection'),
      requires_session: resource.field(self._.blocks, 'requires_session'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      status: resource.field(self._.blocks, 'status'),
    },
    servicebus_queue_authorization_rule(name, block): {
      local resource = blockType.resource('azurerm_servicebus_queue_authorization_rule', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        listen: build.template(std.get(block, 'listen', null)),
        manage: build.template(std.get(block, 'manage', null)),
        name: build.template(block.name),
        namespace_name: build.template(std.get(block, 'namespace_name', null)),
        primary_connection_string: build.template(std.get(block, 'primary_connection_string', null)),
        primary_connection_string_alias: build.template(std.get(block, 'primary_connection_string_alias', null)),
        primary_key: build.template(std.get(block, 'primary_key', null)),
        queue_id: build.template(std.get(block, 'queue_id', null)),
        queue_name: build.template(std.get(block, 'queue_name', null)),
        resource_group_name: build.template(std.get(block, 'resource_group_name', null)),
        secondary_connection_string: build.template(std.get(block, 'secondary_connection_string', null)),
        secondary_connection_string_alias: build.template(std.get(block, 'secondary_connection_string_alias', null)),
        secondary_key: build.template(std.get(block, 'secondary_key', null)),
        send: build.template(std.get(block, 'send', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      listen: resource.field(self._.blocks, 'listen'),
      manage: resource.field(self._.blocks, 'manage'),
      name: resource.field(self._.blocks, 'name'),
      namespace_name: resource.field(self._.blocks, 'namespace_name'),
      primary_connection_string: resource.field(self._.blocks, 'primary_connection_string'),
      primary_connection_string_alias: resource.field(self._.blocks, 'primary_connection_string_alias'),
      primary_key: resource.field(self._.blocks, 'primary_key'),
      queue_id: resource.field(self._.blocks, 'queue_id'),
      queue_name: resource.field(self._.blocks, 'queue_name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      secondary_connection_string: resource.field(self._.blocks, 'secondary_connection_string'),
      secondary_connection_string_alias: resource.field(self._.blocks, 'secondary_connection_string_alias'),
      secondary_key: resource.field(self._.blocks, 'secondary_key'),
      send: resource.field(self._.blocks, 'send'),
    },
    servicebus_subscription(name, block): {
      local resource = blockType.resource('azurerm_servicebus_subscription', name),
      _: resource._(block, {
        auto_delete_on_idle: build.template(std.get(block, 'auto_delete_on_idle', null)),
        batched_operations_enabled: build.template(std.get(block, 'batched_operations_enabled', null)),
        dead_lettering_on_filter_evaluation_error: build.template(std.get(block, 'dead_lettering_on_filter_evaluation_error', null)),
        dead_lettering_on_message_expiration: build.template(std.get(block, 'dead_lettering_on_message_expiration', null)),
        default_message_ttl: build.template(std.get(block, 'default_message_ttl', null)),
        enable_batched_operations: build.template(std.get(block, 'enable_batched_operations', null)),
        forward_dead_lettered_messages_to: build.template(std.get(block, 'forward_dead_lettered_messages_to', null)),
        forward_to: build.template(std.get(block, 'forward_to', null)),
        id: build.template(std.get(block, 'id', null)),
        lock_duration: build.template(std.get(block, 'lock_duration', null)),
        max_delivery_count: build.template(std.get(block, 'max_delivery_count', null)),
        name: build.template(block.name),
        namespace_name: build.template(std.get(block, 'namespace_name', null)),
        requires_session: build.template(std.get(block, 'requires_session', null)),
        resource_group_name: build.template(std.get(block, 'resource_group_name', null)),
        topic_id: build.template(std.get(block, 'topic_id', null)),
        topic_name: build.template(std.get(block, 'topic_name', null)),
      }),
      auto_delete_on_idle: resource.field(self._.blocks, 'auto_delete_on_idle'),
      batched_operations_enabled: resource.field(self._.blocks, 'batched_operations_enabled'),
      dead_lettering_on_filter_evaluation_error: resource.field(self._.blocks, 'dead_lettering_on_filter_evaluation_error'),
      dead_lettering_on_message_expiration: resource.field(self._.blocks, 'dead_lettering_on_message_expiration'),
      default_message_ttl: resource.field(self._.blocks, 'default_message_ttl'),
      enable_batched_operations: resource.field(self._.blocks, 'enable_batched_operations'),
      forward_dead_lettered_messages_to: resource.field(self._.blocks, 'forward_dead_lettered_messages_to'),
      forward_to: resource.field(self._.blocks, 'forward_to'),
      id: resource.field(self._.blocks, 'id'),
      lock_duration: resource.field(self._.blocks, 'lock_duration'),
      max_delivery_count: resource.field(self._.blocks, 'max_delivery_count'),
      name: resource.field(self._.blocks, 'name'),
      namespace_name: resource.field(self._.blocks, 'namespace_name'),
      requires_session: resource.field(self._.blocks, 'requires_session'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      topic_id: resource.field(self._.blocks, 'topic_id'),
      topic_name: resource.field(self._.blocks, 'topic_name'),
    },
    servicebus_topic(name, block): {
      local resource = blockType.resource('azurerm_servicebus_topic', name),
      _: resource._(block, {
        auto_delete_on_idle: build.template(std.get(block, 'auto_delete_on_idle', null)),
        default_message_ttl: build.template(std.get(block, 'default_message_ttl', null)),
        duplicate_detection_history_time_window: build.template(std.get(block, 'duplicate_detection_history_time_window', null)),
        enable_batched_operations: build.template(std.get(block, 'enable_batched_operations', null)),
        enable_express: build.template(std.get(block, 'enable_express', null)),
        enable_partitioning: build.template(std.get(block, 'enable_partitioning', null)),
        id: build.template(std.get(block, 'id', null)),
        max_size_in_megabytes: build.template(std.get(block, 'max_size_in_megabytes', null)),
        name: build.template(block.name),
        namespace_id: build.template(std.get(block, 'namespace_id', null)),
        namespace_name: build.template(std.get(block, 'namespace_name', null)),
        requires_duplicate_detection: build.template(std.get(block, 'requires_duplicate_detection', null)),
        resource_group_name: build.template(std.get(block, 'resource_group_name', null)),
        status: build.template(std.get(block, 'status', null)),
        support_ordering: build.template(std.get(block, 'support_ordering', null)),
      }),
      auto_delete_on_idle: resource.field(self._.blocks, 'auto_delete_on_idle'),
      default_message_ttl: resource.field(self._.blocks, 'default_message_ttl'),
      duplicate_detection_history_time_window: resource.field(self._.blocks, 'duplicate_detection_history_time_window'),
      enable_batched_operations: resource.field(self._.blocks, 'enable_batched_operations'),
      enable_express: resource.field(self._.blocks, 'enable_express'),
      enable_partitioning: resource.field(self._.blocks, 'enable_partitioning'),
      id: resource.field(self._.blocks, 'id'),
      max_size_in_megabytes: resource.field(self._.blocks, 'max_size_in_megabytes'),
      name: resource.field(self._.blocks, 'name'),
      namespace_id: resource.field(self._.blocks, 'namespace_id'),
      namespace_name: resource.field(self._.blocks, 'namespace_name'),
      requires_duplicate_detection: resource.field(self._.blocks, 'requires_duplicate_detection'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      status: resource.field(self._.blocks, 'status'),
      support_ordering: resource.field(self._.blocks, 'support_ordering'),
    },
    servicebus_topic_authorization_rule(name, block): {
      local resource = blockType.resource('azurerm_servicebus_topic_authorization_rule', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        listen: build.template(std.get(block, 'listen', null)),
        manage: build.template(std.get(block, 'manage', null)),
        name: build.template(block.name),
        namespace_name: build.template(std.get(block, 'namespace_name', null)),
        primary_connection_string: build.template(std.get(block, 'primary_connection_string', null)),
        primary_connection_string_alias: build.template(std.get(block, 'primary_connection_string_alias', null)),
        primary_key: build.template(std.get(block, 'primary_key', null)),
        queue_name: build.template(std.get(block, 'queue_name', null)),
        resource_group_name: build.template(std.get(block, 'resource_group_name', null)),
        secondary_connection_string: build.template(std.get(block, 'secondary_connection_string', null)),
        secondary_connection_string_alias: build.template(std.get(block, 'secondary_connection_string_alias', null)),
        secondary_key: build.template(std.get(block, 'secondary_key', null)),
        send: build.template(std.get(block, 'send', null)),
        topic_id: build.template(std.get(block, 'topic_id', null)),
        topic_name: build.template(std.get(block, 'topic_name', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      listen: resource.field(self._.blocks, 'listen'),
      manage: resource.field(self._.blocks, 'manage'),
      name: resource.field(self._.blocks, 'name'),
      namespace_name: resource.field(self._.blocks, 'namespace_name'),
      primary_connection_string: resource.field(self._.blocks, 'primary_connection_string'),
      primary_connection_string_alias: resource.field(self._.blocks, 'primary_connection_string_alias'),
      primary_key: resource.field(self._.blocks, 'primary_key'),
      queue_name: resource.field(self._.blocks, 'queue_name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      secondary_connection_string: resource.field(self._.blocks, 'secondary_connection_string'),
      secondary_connection_string_alias: resource.field(self._.blocks, 'secondary_connection_string_alias'),
      secondary_key: resource.field(self._.blocks, 'secondary_key'),
      send: resource.field(self._.blocks, 'send'),
      topic_id: resource.field(self._.blocks, 'topic_id'),
      topic_name: resource.field(self._.blocks, 'topic_name'),
    },
    shared_image(name, block): {
      local resource = blockType.resource('azurerm_shared_image', name),
      _: resource._(block, {
        accelerated_network_support_enabled: build.template(std.get(block, 'accelerated_network_support_enabled', null)),
        architecture: build.template(std.get(block, 'architecture', null)),
        confidential_vm_enabled: build.template(std.get(block, 'confidential_vm_enabled', null)),
        confidential_vm_supported: build.template(std.get(block, 'confidential_vm_supported', null)),
        description: build.template(std.get(block, 'description', null)),
        eula: build.template(std.get(block, 'eula', null)),
        gallery_name: build.template(block.gallery_name),
        hibernation_enabled: build.template(std.get(block, 'hibernation_enabled', null)),
        hyper_v_generation: build.template(std.get(block, 'hyper_v_generation', null)),
        id: build.template(std.get(block, 'id', null)),
        identifier: build.template(std.get(block, 'identifier', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        os_type: build.template(std.get(block, 'os_type', null)),
        privacy_statement_uri: build.template(std.get(block, 'privacy_statement_uri', null)),
        purchase_plan: build.template(std.get(block, 'purchase_plan', null)),
        release_note_uri: build.template(std.get(block, 'release_note_uri', null)),
        resource_group_name: build.template(block.resource_group_name),
        specialized: build.template(std.get(block, 'specialized', null)),
        tags: build.template(std.get(block, 'tags', null)),
        trusted_launch_enabled: build.template(std.get(block, 'trusted_launch_enabled', null)),
        trusted_launch_supported: build.template(std.get(block, 'trusted_launch_supported', null)),
      }),
      accelerated_network_support_enabled: resource.field(self._.blocks, 'accelerated_network_support_enabled'),
      architecture: resource.field(self._.blocks, 'architecture'),
      confidential_vm_enabled: resource.field(self._.blocks, 'confidential_vm_enabled'),
      confidential_vm_supported: resource.field(self._.blocks, 'confidential_vm_supported'),
      description: resource.field(self._.blocks, 'description'),
      eula: resource.field(self._.blocks, 'eula'),
      gallery_name: resource.field(self._.blocks, 'gallery_name'),
      hibernation_enabled: resource.field(self._.blocks, 'hibernation_enabled'),
      hyper_v_generation: resource.field(self._.blocks, 'hyper_v_generation'),
      id: resource.field(self._.blocks, 'id'),
      identifier: resource.field(self._.blocks, 'identifier'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      os_type: resource.field(self._.blocks, 'os_type'),
      privacy_statement_uri: resource.field(self._.blocks, 'privacy_statement_uri'),
      purchase_plan: resource.field(self._.blocks, 'purchase_plan'),
      release_note_uri: resource.field(self._.blocks, 'release_note_uri'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      specialized: resource.field(self._.blocks, 'specialized'),
      tags: resource.field(self._.blocks, 'tags'),
      trusted_launch_enabled: resource.field(self._.blocks, 'trusted_launch_enabled'),
      trusted_launch_supported: resource.field(self._.blocks, 'trusted_launch_supported'),
    },
    shared_image_gallery(name, block): {
      local resource = blockType.resource('azurerm_shared_image_gallery', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        image_names: build.template(std.get(block, 'image_names', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
        unique_name: build.template(std.get(block, 'unique_name', null)),
      }),
      description: resource.field(self._.blocks, 'description'),
      id: resource.field(self._.blocks, 'id'),
      image_names: resource.field(self._.blocks, 'image_names'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
      unique_name: resource.field(self._.blocks, 'unique_name'),
    },
    shared_image_version(name, block): {
      local resource = blockType.resource('azurerm_shared_image_version', name),
      _: resource._(block, {
        exclude_from_latest: build.template(std.get(block, 'exclude_from_latest', null)),
        gallery_name: build.template(block.gallery_name),
        id: build.template(std.get(block, 'id', null)),
        image_name: build.template(block.image_name),
        location: build.template(std.get(block, 'location', null)),
        managed_image_id: build.template(std.get(block, 'managed_image_id', null)),
        name: build.template(block.name),
        os_disk_image_size_gb: build.template(std.get(block, 'os_disk_image_size_gb', null)),
        os_disk_snapshot_id: build.template(std.get(block, 'os_disk_snapshot_id', null)),
        resource_group_name: build.template(block.resource_group_name),
        sort_versions_by_semver: build.template(std.get(block, 'sort_versions_by_semver', null)),
        tags: build.template(std.get(block, 'tags', null)),
        target_region: build.template(std.get(block, 'target_region', null)),
      }),
      exclude_from_latest: resource.field(self._.blocks, 'exclude_from_latest'),
      gallery_name: resource.field(self._.blocks, 'gallery_name'),
      id: resource.field(self._.blocks, 'id'),
      image_name: resource.field(self._.blocks, 'image_name'),
      location: resource.field(self._.blocks, 'location'),
      managed_image_id: resource.field(self._.blocks, 'managed_image_id'),
      name: resource.field(self._.blocks, 'name'),
      os_disk_image_size_gb: resource.field(self._.blocks, 'os_disk_image_size_gb'),
      os_disk_snapshot_id: resource.field(self._.blocks, 'os_disk_snapshot_id'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      sort_versions_by_semver: resource.field(self._.blocks, 'sort_versions_by_semver'),
      tags: resource.field(self._.blocks, 'tags'),
      target_region: resource.field(self._.blocks, 'target_region'),
    },
    shared_image_versions(name, block): {
      local resource = blockType.resource('azurerm_shared_image_versions', name),
      _: resource._(block, {
        gallery_name: build.template(block.gallery_name),
        id: build.template(std.get(block, 'id', null)),
        image_name: build.template(block.image_name),
        images: build.template(std.get(block, 'images', null)),
        resource_group_name: build.template(block.resource_group_name),
        tags_filter: build.template(std.get(block, 'tags_filter', null)),
      }),
      gallery_name: resource.field(self._.blocks, 'gallery_name'),
      id: resource.field(self._.blocks, 'id'),
      image_name: resource.field(self._.blocks, 'image_name'),
      images: resource.field(self._.blocks, 'images'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags_filter: resource.field(self._.blocks, 'tags_filter'),
    },
    signalr_service(name, block): {
      local resource = blockType.resource('azurerm_signalr_service', name),
      _: resource._(block, {
        aad_auth_enabled: build.template(std.get(block, 'aad_auth_enabled', null)),
        hostname: build.template(std.get(block, 'hostname', null)),
        id: build.template(std.get(block, 'id', null)),
        ip_address: build.template(std.get(block, 'ip_address', null)),
        local_auth_enabled: build.template(std.get(block, 'local_auth_enabled', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        primary_access_key: build.template(std.get(block, 'primary_access_key', null)),
        primary_connection_string: build.template(std.get(block, 'primary_connection_string', null)),
        public_network_access_enabled: build.template(std.get(block, 'public_network_access_enabled', null)),
        public_port: build.template(std.get(block, 'public_port', null)),
        resource_group_name: build.template(block.resource_group_name),
        secondary_access_key: build.template(std.get(block, 'secondary_access_key', null)),
        secondary_connection_string: build.template(std.get(block, 'secondary_connection_string', null)),
        server_port: build.template(std.get(block, 'server_port', null)),
        serverless_connection_timeout_in_seconds: build.template(std.get(block, 'serverless_connection_timeout_in_seconds', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tls_client_cert_enabled: build.template(std.get(block, 'tls_client_cert_enabled', null)),
      }),
      aad_auth_enabled: resource.field(self._.blocks, 'aad_auth_enabled'),
      hostname: resource.field(self._.blocks, 'hostname'),
      id: resource.field(self._.blocks, 'id'),
      ip_address: resource.field(self._.blocks, 'ip_address'),
      local_auth_enabled: resource.field(self._.blocks, 'local_auth_enabled'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      primary_access_key: resource.field(self._.blocks, 'primary_access_key'),
      primary_connection_string: resource.field(self._.blocks, 'primary_connection_string'),
      public_network_access_enabled: resource.field(self._.blocks, 'public_network_access_enabled'),
      public_port: resource.field(self._.blocks, 'public_port'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      secondary_access_key: resource.field(self._.blocks, 'secondary_access_key'),
      secondary_connection_string: resource.field(self._.blocks, 'secondary_connection_string'),
      server_port: resource.field(self._.blocks, 'server_port'),
      serverless_connection_timeout_in_seconds: resource.field(self._.blocks, 'serverless_connection_timeout_in_seconds'),
      tags: resource.field(self._.blocks, 'tags'),
      tls_client_cert_enabled: resource.field(self._.blocks, 'tls_client_cert_enabled'),
    },
    site_recovery_fabric(name, block): {
      local resource = blockType.resource('azurerm_site_recovery_fabric', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        recovery_vault_name: build.template(block.recovery_vault_name),
        resource_group_name: build.template(block.resource_group_name),
      }),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      recovery_vault_name: resource.field(self._.blocks, 'recovery_vault_name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
    },
    site_recovery_protection_container(name, block): {
      local resource = blockType.resource('azurerm_site_recovery_protection_container', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        recovery_fabric_name: build.template(block.recovery_fabric_name),
        recovery_vault_name: build.template(block.recovery_vault_name),
        resource_group_name: build.template(block.resource_group_name),
      }),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      recovery_fabric_name: resource.field(self._.blocks, 'recovery_fabric_name'),
      recovery_vault_name: resource.field(self._.blocks, 'recovery_vault_name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
    },
    site_recovery_replication_policy(name, block): {
      local resource = blockType.resource('azurerm_site_recovery_replication_policy', name),
      _: resource._(block, {
        application_consistent_snapshot_frequency_in_minutes: build.template(std.get(block, 'application_consistent_snapshot_frequency_in_minutes', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        recovery_point_retention_in_minutes: build.template(std.get(block, 'recovery_point_retention_in_minutes', null)),
        recovery_vault_name: build.template(block.recovery_vault_name),
        resource_group_name: build.template(block.resource_group_name),
      }),
      application_consistent_snapshot_frequency_in_minutes: resource.field(self._.blocks, 'application_consistent_snapshot_frequency_in_minutes'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      recovery_point_retention_in_minutes: resource.field(self._.blocks, 'recovery_point_retention_in_minutes'),
      recovery_vault_name: resource.field(self._.blocks, 'recovery_vault_name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
    },
    site_recovery_replication_recovery_plan(name, block): {
      local resource = blockType.resource('azurerm_site_recovery_replication_recovery_plan', name),
      _: resource._(block, {
        azure_to_azure_settings: build.template(std.get(block, 'azure_to_azure_settings', null)),
        failover_deployment_model: build.template(std.get(block, 'failover_deployment_model', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        recovery_group: build.template(std.get(block, 'recovery_group', null)),
        recovery_vault_id: build.template(block.recovery_vault_id),
        source_recovery_fabric_id: build.template(std.get(block, 'source_recovery_fabric_id', null)),
        target_recovery_fabric_id: build.template(std.get(block, 'target_recovery_fabric_id', null)),
      }),
      azure_to_azure_settings: resource.field(self._.blocks, 'azure_to_azure_settings'),
      failover_deployment_model: resource.field(self._.blocks, 'failover_deployment_model'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      recovery_group: resource.field(self._.blocks, 'recovery_group'),
      recovery_vault_id: resource.field(self._.blocks, 'recovery_vault_id'),
      source_recovery_fabric_id: resource.field(self._.blocks, 'source_recovery_fabric_id'),
      target_recovery_fabric_id: resource.field(self._.blocks, 'target_recovery_fabric_id'),
    },
    snapshot(name, block): {
      local resource = blockType.resource('azurerm_snapshot', name),
      _: resource._(block, {
        creation_option: build.template(std.get(block, 'creation_option', null)),
        disk_size_gb: build.template(std.get(block, 'disk_size_gb', null)),
        encryption_settings: build.template(std.get(block, 'encryption_settings', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        os_type: build.template(std.get(block, 'os_type', null)),
        resource_group_name: build.template(block.resource_group_name),
        source_resource_id: build.template(std.get(block, 'source_resource_id', null)),
        source_uri: build.template(std.get(block, 'source_uri', null)),
        storage_account_id: build.template(std.get(block, 'storage_account_id', null)),
        time_created: build.template(std.get(block, 'time_created', null)),
        trusted_launch_enabled: build.template(std.get(block, 'trusted_launch_enabled', null)),
      }),
      creation_option: resource.field(self._.blocks, 'creation_option'),
      disk_size_gb: resource.field(self._.blocks, 'disk_size_gb'),
      encryption_settings: resource.field(self._.blocks, 'encryption_settings'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      os_type: resource.field(self._.blocks, 'os_type'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      source_resource_id: resource.field(self._.blocks, 'source_resource_id'),
      source_uri: resource.field(self._.blocks, 'source_uri'),
      storage_account_id: resource.field(self._.blocks, 'storage_account_id'),
      time_created: resource.field(self._.blocks, 'time_created'),
      trusted_launch_enabled: resource.field(self._.blocks, 'trusted_launch_enabled'),
    },
    source_control_token(name, block): {
      local resource = blockType.resource('azurerm_source_control_token', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        token: build.template(std.get(block, 'token', null)),
        token_secret: build.template(std.get(block, 'token_secret', null)),
        type: build.template(block.type),
      }),
      id: resource.field(self._.blocks, 'id'),
      token: resource.field(self._.blocks, 'token'),
      token_secret: resource.field(self._.blocks, 'token_secret'),
      type: resource.field(self._.blocks, 'type'),
    },
    spatial_anchors_account(name, block): {
      local resource = blockType.resource('azurerm_spatial_anchors_account', name),
      _: resource._(block, {
        account_domain: build.template(std.get(block, 'account_domain', null)),
        account_id: build.template(std.get(block, 'account_id', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      account_domain: resource.field(self._.blocks, 'account_domain'),
      account_id: resource.field(self._.blocks, 'account_id'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    spring_cloud_app(name, block): {
      local resource = blockType.resource('azurerm_spring_cloud_app', name),
      _: resource._(block, {
        fqdn: build.template(std.get(block, 'fqdn', null)),
        https_only: build.template(std.get(block, 'https_only', null)),
        id: build.template(std.get(block, 'id', null)),
        identity: build.template(std.get(block, 'identity', null)),
        is_public: build.template(std.get(block, 'is_public', null)),
        name: build.template(block.name),
        persistent_disk: build.template(std.get(block, 'persistent_disk', null)),
        resource_group_name: build.template(block.resource_group_name),
        service_name: build.template(block.service_name),
        tls_enabled: build.template(std.get(block, 'tls_enabled', null)),
        url: build.template(std.get(block, 'url', null)),
      }),
      fqdn: resource.field(self._.blocks, 'fqdn'),
      https_only: resource.field(self._.blocks, 'https_only'),
      id: resource.field(self._.blocks, 'id'),
      identity: resource.field(self._.blocks, 'identity'),
      is_public: resource.field(self._.blocks, 'is_public'),
      name: resource.field(self._.blocks, 'name'),
      persistent_disk: resource.field(self._.blocks, 'persistent_disk'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      service_name: resource.field(self._.blocks, 'service_name'),
      tls_enabled: resource.field(self._.blocks, 'tls_enabled'),
      url: resource.field(self._.blocks, 'url'),
    },
    spring_cloud_service(name, block): {
      local resource = blockType.resource('azurerm_spring_cloud_service', name),
      _: resource._(block, {
        config_server_git_setting: build.template(std.get(block, 'config_server_git_setting', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        outbound_public_ip_addresses: build.template(std.get(block, 'outbound_public_ip_addresses', null)),
        required_network_traffic_rules: build.template(std.get(block, 'required_network_traffic_rules', null)),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      config_server_git_setting: resource.field(self._.blocks, 'config_server_git_setting'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      outbound_public_ip_addresses: resource.field(self._.blocks, 'outbound_public_ip_addresses'),
      required_network_traffic_rules: resource.field(self._.blocks, 'required_network_traffic_rules'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    ssh_public_key(name, block): {
      local resource = blockType.resource('azurerm_ssh_public_key', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        public_key: build.template(std.get(block, 'public_key', null)),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      public_key: resource.field(self._.blocks, 'public_key'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    stack_hci_cluster(name, block): {
      local resource = blockType.resource('azurerm_stack_hci_cluster', name),
      _: resource._(block, {
        automanage_configuration_id: build.template(std.get(block, 'automanage_configuration_id', null)),
        client_id: build.template(std.get(block, 'client_id', null)),
        cloud_id: build.template(std.get(block, 'cloud_id', null)),
        id: build.template(std.get(block, 'id', null)),
        identity: build.template(std.get(block, 'identity', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        resource_provider_object_id: build.template(std.get(block, 'resource_provider_object_id', null)),
        service_endpoint: build.template(std.get(block, 'service_endpoint', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tenant_id: build.template(std.get(block, 'tenant_id', null)),
      }),
      automanage_configuration_id: resource.field(self._.blocks, 'automanage_configuration_id'),
      client_id: resource.field(self._.blocks, 'client_id'),
      cloud_id: resource.field(self._.blocks, 'cloud_id'),
      id: resource.field(self._.blocks, 'id'),
      identity: resource.field(self._.blocks, 'identity'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      resource_provider_object_id: resource.field(self._.blocks, 'resource_provider_object_id'),
      service_endpoint: resource.field(self._.blocks, 'service_endpoint'),
      tags: resource.field(self._.blocks, 'tags'),
      tenant_id: resource.field(self._.blocks, 'tenant_id'),
    },
    stack_hci_storage_path(name, block): {
      local resource = blockType.resource('azurerm_stack_hci_storage_path', name),
      _: resource._(block, {
        custom_location_id: build.template(std.get(block, 'custom_location_id', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        path: build.template(std.get(block, 'path', null)),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      custom_location_id: resource.field(self._.blocks, 'custom_location_id'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      path: resource.field(self._.blocks, 'path'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    static_web_app(name, block): {
      local resource = blockType.resource('azurerm_static_web_app', name),
      _: resource._(block, {
        api_key: build.template(std.get(block, 'api_key', null)),
        app_settings: build.template(std.get(block, 'app_settings', null)),
        basic_auth: build.template(std.get(block, 'basic_auth', null)),
        configuration_file_changes_enabled: build.template(std.get(block, 'configuration_file_changes_enabled', null)),
        default_host_name: build.template(std.get(block, 'default_host_name', null)),
        id: build.template(std.get(block, 'id', null)),
        identity: build.template(std.get(block, 'identity', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        preview_environments_enabled: build.template(std.get(block, 'preview_environments_enabled', null)),
        public_network_access_enabled: build.template(std.get(block, 'public_network_access_enabled', null)),
        repository_branch: build.template(std.get(block, 'repository_branch', null)),
        repository_url: build.template(std.get(block, 'repository_url', null)),
        resource_group_name: build.template(block.resource_group_name),
        sku_size: build.template(std.get(block, 'sku_size', null)),
        sku_tier: build.template(std.get(block, 'sku_tier', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      api_key: resource.field(self._.blocks, 'api_key'),
      app_settings: resource.field(self._.blocks, 'app_settings'),
      basic_auth: resource.field(self._.blocks, 'basic_auth'),
      configuration_file_changes_enabled: resource.field(self._.blocks, 'configuration_file_changes_enabled'),
      default_host_name: resource.field(self._.blocks, 'default_host_name'),
      id: resource.field(self._.blocks, 'id'),
      identity: resource.field(self._.blocks, 'identity'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      preview_environments_enabled: resource.field(self._.blocks, 'preview_environments_enabled'),
      public_network_access_enabled: resource.field(self._.blocks, 'public_network_access_enabled'),
      repository_branch: resource.field(self._.blocks, 'repository_branch'),
      repository_url: resource.field(self._.blocks, 'repository_url'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      sku_size: resource.field(self._.blocks, 'sku_size'),
      sku_tier: resource.field(self._.blocks, 'sku_tier'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    storage_account(name, block): {
      local resource = blockType.resource('azurerm_storage_account', name),
      _: resource._(block, {
        access_tier: build.template(std.get(block, 'access_tier', null)),
        account_kind: build.template(std.get(block, 'account_kind', null)),
        account_replication_type: build.template(std.get(block, 'account_replication_type', null)),
        account_tier: build.template(std.get(block, 'account_tier', null)),
        allow_nested_items_to_be_public: build.template(std.get(block, 'allow_nested_items_to_be_public', null)),
        azure_files_authentication: build.template(std.get(block, 'azure_files_authentication', null)),
        custom_domain: build.template(std.get(block, 'custom_domain', null)),
        dns_endpoint_type: build.template(std.get(block, 'dns_endpoint_type', null)),
        https_traffic_only_enabled: build.template(std.get(block, 'https_traffic_only_enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        identity: build.template(std.get(block, 'identity', null)),
        infrastructure_encryption_enabled: build.template(std.get(block, 'infrastructure_encryption_enabled', null)),
        is_hns_enabled: build.template(std.get(block, 'is_hns_enabled', null)),
        location: build.template(std.get(block, 'location', null)),
        min_tls_version: build.template(std.get(block, 'min_tls_version', null)),
        name: build.template(block.name),
        nfsv3_enabled: build.template(std.get(block, 'nfsv3_enabled', null)),
        primary_access_key: build.template(std.get(block, 'primary_access_key', null)),
        primary_blob_connection_string: build.template(std.get(block, 'primary_blob_connection_string', null)),
        primary_blob_endpoint: build.template(std.get(block, 'primary_blob_endpoint', null)),
        primary_blob_host: build.template(std.get(block, 'primary_blob_host', null)),
        primary_blob_internet_endpoint: build.template(std.get(block, 'primary_blob_internet_endpoint', null)),
        primary_blob_internet_host: build.template(std.get(block, 'primary_blob_internet_host', null)),
        primary_blob_microsoft_endpoint: build.template(std.get(block, 'primary_blob_microsoft_endpoint', null)),
        primary_blob_microsoft_host: build.template(std.get(block, 'primary_blob_microsoft_host', null)),
        primary_connection_string: build.template(std.get(block, 'primary_connection_string', null)),
        primary_dfs_endpoint: build.template(std.get(block, 'primary_dfs_endpoint', null)),
        primary_dfs_host: build.template(std.get(block, 'primary_dfs_host', null)),
        primary_dfs_internet_endpoint: build.template(std.get(block, 'primary_dfs_internet_endpoint', null)),
        primary_dfs_internet_host: build.template(std.get(block, 'primary_dfs_internet_host', null)),
        primary_dfs_microsoft_endpoint: build.template(std.get(block, 'primary_dfs_microsoft_endpoint', null)),
        primary_dfs_microsoft_host: build.template(std.get(block, 'primary_dfs_microsoft_host', null)),
        primary_file_endpoint: build.template(std.get(block, 'primary_file_endpoint', null)),
        primary_file_host: build.template(std.get(block, 'primary_file_host', null)),
        primary_file_internet_endpoint: build.template(std.get(block, 'primary_file_internet_endpoint', null)),
        primary_file_internet_host: build.template(std.get(block, 'primary_file_internet_host', null)),
        primary_file_microsoft_endpoint: build.template(std.get(block, 'primary_file_microsoft_endpoint', null)),
        primary_file_microsoft_host: build.template(std.get(block, 'primary_file_microsoft_host', null)),
        primary_location: build.template(std.get(block, 'primary_location', null)),
        primary_queue_endpoint: build.template(std.get(block, 'primary_queue_endpoint', null)),
        primary_queue_host: build.template(std.get(block, 'primary_queue_host', null)),
        primary_queue_microsoft_endpoint: build.template(std.get(block, 'primary_queue_microsoft_endpoint', null)),
        primary_queue_microsoft_host: build.template(std.get(block, 'primary_queue_microsoft_host', null)),
        primary_table_endpoint: build.template(std.get(block, 'primary_table_endpoint', null)),
        primary_table_host: build.template(std.get(block, 'primary_table_host', null)),
        primary_table_microsoft_endpoint: build.template(std.get(block, 'primary_table_microsoft_endpoint', null)),
        primary_table_microsoft_host: build.template(std.get(block, 'primary_table_microsoft_host', null)),
        primary_web_endpoint: build.template(std.get(block, 'primary_web_endpoint', null)),
        primary_web_host: build.template(std.get(block, 'primary_web_host', null)),
        primary_web_internet_endpoint: build.template(std.get(block, 'primary_web_internet_endpoint', null)),
        primary_web_internet_host: build.template(std.get(block, 'primary_web_internet_host', null)),
        primary_web_microsoft_endpoint: build.template(std.get(block, 'primary_web_microsoft_endpoint', null)),
        primary_web_microsoft_host: build.template(std.get(block, 'primary_web_microsoft_host', null)),
        queue_encryption_key_type: build.template(std.get(block, 'queue_encryption_key_type', null)),
        resource_group_name: build.template(block.resource_group_name),
        secondary_access_key: build.template(std.get(block, 'secondary_access_key', null)),
        secondary_blob_connection_string: build.template(std.get(block, 'secondary_blob_connection_string', null)),
        secondary_blob_endpoint: build.template(std.get(block, 'secondary_blob_endpoint', null)),
        secondary_blob_host: build.template(std.get(block, 'secondary_blob_host', null)),
        secondary_blob_internet_endpoint: build.template(std.get(block, 'secondary_blob_internet_endpoint', null)),
        secondary_blob_internet_host: build.template(std.get(block, 'secondary_blob_internet_host', null)),
        secondary_blob_microsoft_endpoint: build.template(std.get(block, 'secondary_blob_microsoft_endpoint', null)),
        secondary_blob_microsoft_host: build.template(std.get(block, 'secondary_blob_microsoft_host', null)),
        secondary_connection_string: build.template(std.get(block, 'secondary_connection_string', null)),
        secondary_dfs_endpoint: build.template(std.get(block, 'secondary_dfs_endpoint', null)),
        secondary_dfs_host: build.template(std.get(block, 'secondary_dfs_host', null)),
        secondary_dfs_internet_endpoint: build.template(std.get(block, 'secondary_dfs_internet_endpoint', null)),
        secondary_dfs_internet_host: build.template(std.get(block, 'secondary_dfs_internet_host', null)),
        secondary_dfs_microsoft_endpoint: build.template(std.get(block, 'secondary_dfs_microsoft_endpoint', null)),
        secondary_dfs_microsoft_host: build.template(std.get(block, 'secondary_dfs_microsoft_host', null)),
        secondary_file_endpoint: build.template(std.get(block, 'secondary_file_endpoint', null)),
        secondary_file_host: build.template(std.get(block, 'secondary_file_host', null)),
        secondary_file_internet_endpoint: build.template(std.get(block, 'secondary_file_internet_endpoint', null)),
        secondary_file_internet_host: build.template(std.get(block, 'secondary_file_internet_host', null)),
        secondary_file_microsoft_endpoint: build.template(std.get(block, 'secondary_file_microsoft_endpoint', null)),
        secondary_file_microsoft_host: build.template(std.get(block, 'secondary_file_microsoft_host', null)),
        secondary_location: build.template(std.get(block, 'secondary_location', null)),
        secondary_queue_endpoint: build.template(std.get(block, 'secondary_queue_endpoint', null)),
        secondary_queue_host: build.template(std.get(block, 'secondary_queue_host', null)),
        secondary_queue_microsoft_endpoint: build.template(std.get(block, 'secondary_queue_microsoft_endpoint', null)),
        secondary_queue_microsoft_host: build.template(std.get(block, 'secondary_queue_microsoft_host', null)),
        secondary_table_endpoint: build.template(std.get(block, 'secondary_table_endpoint', null)),
        secondary_table_host: build.template(std.get(block, 'secondary_table_host', null)),
        secondary_table_microsoft_endpoint: build.template(std.get(block, 'secondary_table_microsoft_endpoint', null)),
        secondary_table_microsoft_host: build.template(std.get(block, 'secondary_table_microsoft_host', null)),
        secondary_web_endpoint: build.template(std.get(block, 'secondary_web_endpoint', null)),
        secondary_web_host: build.template(std.get(block, 'secondary_web_host', null)),
        secondary_web_internet_endpoint: build.template(std.get(block, 'secondary_web_internet_endpoint', null)),
        secondary_web_internet_host: build.template(std.get(block, 'secondary_web_internet_host', null)),
        secondary_web_microsoft_endpoint: build.template(std.get(block, 'secondary_web_microsoft_endpoint', null)),
        secondary_web_microsoft_host: build.template(std.get(block, 'secondary_web_microsoft_host', null)),
        table_encryption_key_type: build.template(std.get(block, 'table_encryption_key_type', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      access_tier: resource.field(self._.blocks, 'access_tier'),
      account_kind: resource.field(self._.blocks, 'account_kind'),
      account_replication_type: resource.field(self._.blocks, 'account_replication_type'),
      account_tier: resource.field(self._.blocks, 'account_tier'),
      allow_nested_items_to_be_public: resource.field(self._.blocks, 'allow_nested_items_to_be_public'),
      azure_files_authentication: resource.field(self._.blocks, 'azure_files_authentication'),
      custom_domain: resource.field(self._.blocks, 'custom_domain'),
      dns_endpoint_type: resource.field(self._.blocks, 'dns_endpoint_type'),
      https_traffic_only_enabled: resource.field(self._.blocks, 'https_traffic_only_enabled'),
      id: resource.field(self._.blocks, 'id'),
      identity: resource.field(self._.blocks, 'identity'),
      infrastructure_encryption_enabled: resource.field(self._.blocks, 'infrastructure_encryption_enabled'),
      is_hns_enabled: resource.field(self._.blocks, 'is_hns_enabled'),
      location: resource.field(self._.blocks, 'location'),
      min_tls_version: resource.field(self._.blocks, 'min_tls_version'),
      name: resource.field(self._.blocks, 'name'),
      nfsv3_enabled: resource.field(self._.blocks, 'nfsv3_enabled'),
      primary_access_key: resource.field(self._.blocks, 'primary_access_key'),
      primary_blob_connection_string: resource.field(self._.blocks, 'primary_blob_connection_string'),
      primary_blob_endpoint: resource.field(self._.blocks, 'primary_blob_endpoint'),
      primary_blob_host: resource.field(self._.blocks, 'primary_blob_host'),
      primary_blob_internet_endpoint: resource.field(self._.blocks, 'primary_blob_internet_endpoint'),
      primary_blob_internet_host: resource.field(self._.blocks, 'primary_blob_internet_host'),
      primary_blob_microsoft_endpoint: resource.field(self._.blocks, 'primary_blob_microsoft_endpoint'),
      primary_blob_microsoft_host: resource.field(self._.blocks, 'primary_blob_microsoft_host'),
      primary_connection_string: resource.field(self._.blocks, 'primary_connection_string'),
      primary_dfs_endpoint: resource.field(self._.blocks, 'primary_dfs_endpoint'),
      primary_dfs_host: resource.field(self._.blocks, 'primary_dfs_host'),
      primary_dfs_internet_endpoint: resource.field(self._.blocks, 'primary_dfs_internet_endpoint'),
      primary_dfs_internet_host: resource.field(self._.blocks, 'primary_dfs_internet_host'),
      primary_dfs_microsoft_endpoint: resource.field(self._.blocks, 'primary_dfs_microsoft_endpoint'),
      primary_dfs_microsoft_host: resource.field(self._.blocks, 'primary_dfs_microsoft_host'),
      primary_file_endpoint: resource.field(self._.blocks, 'primary_file_endpoint'),
      primary_file_host: resource.field(self._.blocks, 'primary_file_host'),
      primary_file_internet_endpoint: resource.field(self._.blocks, 'primary_file_internet_endpoint'),
      primary_file_internet_host: resource.field(self._.blocks, 'primary_file_internet_host'),
      primary_file_microsoft_endpoint: resource.field(self._.blocks, 'primary_file_microsoft_endpoint'),
      primary_file_microsoft_host: resource.field(self._.blocks, 'primary_file_microsoft_host'),
      primary_location: resource.field(self._.blocks, 'primary_location'),
      primary_queue_endpoint: resource.field(self._.blocks, 'primary_queue_endpoint'),
      primary_queue_host: resource.field(self._.blocks, 'primary_queue_host'),
      primary_queue_microsoft_endpoint: resource.field(self._.blocks, 'primary_queue_microsoft_endpoint'),
      primary_queue_microsoft_host: resource.field(self._.blocks, 'primary_queue_microsoft_host'),
      primary_table_endpoint: resource.field(self._.blocks, 'primary_table_endpoint'),
      primary_table_host: resource.field(self._.blocks, 'primary_table_host'),
      primary_table_microsoft_endpoint: resource.field(self._.blocks, 'primary_table_microsoft_endpoint'),
      primary_table_microsoft_host: resource.field(self._.blocks, 'primary_table_microsoft_host'),
      primary_web_endpoint: resource.field(self._.blocks, 'primary_web_endpoint'),
      primary_web_host: resource.field(self._.blocks, 'primary_web_host'),
      primary_web_internet_endpoint: resource.field(self._.blocks, 'primary_web_internet_endpoint'),
      primary_web_internet_host: resource.field(self._.blocks, 'primary_web_internet_host'),
      primary_web_microsoft_endpoint: resource.field(self._.blocks, 'primary_web_microsoft_endpoint'),
      primary_web_microsoft_host: resource.field(self._.blocks, 'primary_web_microsoft_host'),
      queue_encryption_key_type: resource.field(self._.blocks, 'queue_encryption_key_type'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      secondary_access_key: resource.field(self._.blocks, 'secondary_access_key'),
      secondary_blob_connection_string: resource.field(self._.blocks, 'secondary_blob_connection_string'),
      secondary_blob_endpoint: resource.field(self._.blocks, 'secondary_blob_endpoint'),
      secondary_blob_host: resource.field(self._.blocks, 'secondary_blob_host'),
      secondary_blob_internet_endpoint: resource.field(self._.blocks, 'secondary_blob_internet_endpoint'),
      secondary_blob_internet_host: resource.field(self._.blocks, 'secondary_blob_internet_host'),
      secondary_blob_microsoft_endpoint: resource.field(self._.blocks, 'secondary_blob_microsoft_endpoint'),
      secondary_blob_microsoft_host: resource.field(self._.blocks, 'secondary_blob_microsoft_host'),
      secondary_connection_string: resource.field(self._.blocks, 'secondary_connection_string'),
      secondary_dfs_endpoint: resource.field(self._.blocks, 'secondary_dfs_endpoint'),
      secondary_dfs_host: resource.field(self._.blocks, 'secondary_dfs_host'),
      secondary_dfs_internet_endpoint: resource.field(self._.blocks, 'secondary_dfs_internet_endpoint'),
      secondary_dfs_internet_host: resource.field(self._.blocks, 'secondary_dfs_internet_host'),
      secondary_dfs_microsoft_endpoint: resource.field(self._.blocks, 'secondary_dfs_microsoft_endpoint'),
      secondary_dfs_microsoft_host: resource.field(self._.blocks, 'secondary_dfs_microsoft_host'),
      secondary_file_endpoint: resource.field(self._.blocks, 'secondary_file_endpoint'),
      secondary_file_host: resource.field(self._.blocks, 'secondary_file_host'),
      secondary_file_internet_endpoint: resource.field(self._.blocks, 'secondary_file_internet_endpoint'),
      secondary_file_internet_host: resource.field(self._.blocks, 'secondary_file_internet_host'),
      secondary_file_microsoft_endpoint: resource.field(self._.blocks, 'secondary_file_microsoft_endpoint'),
      secondary_file_microsoft_host: resource.field(self._.blocks, 'secondary_file_microsoft_host'),
      secondary_location: resource.field(self._.blocks, 'secondary_location'),
      secondary_queue_endpoint: resource.field(self._.blocks, 'secondary_queue_endpoint'),
      secondary_queue_host: resource.field(self._.blocks, 'secondary_queue_host'),
      secondary_queue_microsoft_endpoint: resource.field(self._.blocks, 'secondary_queue_microsoft_endpoint'),
      secondary_queue_microsoft_host: resource.field(self._.blocks, 'secondary_queue_microsoft_host'),
      secondary_table_endpoint: resource.field(self._.blocks, 'secondary_table_endpoint'),
      secondary_table_host: resource.field(self._.blocks, 'secondary_table_host'),
      secondary_table_microsoft_endpoint: resource.field(self._.blocks, 'secondary_table_microsoft_endpoint'),
      secondary_table_microsoft_host: resource.field(self._.blocks, 'secondary_table_microsoft_host'),
      secondary_web_endpoint: resource.field(self._.blocks, 'secondary_web_endpoint'),
      secondary_web_host: resource.field(self._.blocks, 'secondary_web_host'),
      secondary_web_internet_endpoint: resource.field(self._.blocks, 'secondary_web_internet_endpoint'),
      secondary_web_internet_host: resource.field(self._.blocks, 'secondary_web_internet_host'),
      secondary_web_microsoft_endpoint: resource.field(self._.blocks, 'secondary_web_microsoft_endpoint'),
      secondary_web_microsoft_host: resource.field(self._.blocks, 'secondary_web_microsoft_host'),
      table_encryption_key_type: resource.field(self._.blocks, 'table_encryption_key_type'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    storage_account_blob_container_sas(name, block): {
      local resource = blockType.resource('azurerm_storage_account_blob_container_sas', name),
      _: resource._(block, {
        cache_control: build.template(std.get(block, 'cache_control', null)),
        connection_string: build.template(block.connection_string),
        container_name: build.template(block.container_name),
        content_disposition: build.template(std.get(block, 'content_disposition', null)),
        content_encoding: build.template(std.get(block, 'content_encoding', null)),
        content_language: build.template(std.get(block, 'content_language', null)),
        content_type: build.template(std.get(block, 'content_type', null)),
        expiry: build.template(block.expiry),
        https_only: build.template(std.get(block, 'https_only', null)),
        id: build.template(std.get(block, 'id', null)),
        ip_address: build.template(std.get(block, 'ip_address', null)),
        sas: build.template(std.get(block, 'sas', null)),
        start: build.template(block.start),
      }),
      cache_control: resource.field(self._.blocks, 'cache_control'),
      connection_string: resource.field(self._.blocks, 'connection_string'),
      container_name: resource.field(self._.blocks, 'container_name'),
      content_disposition: resource.field(self._.blocks, 'content_disposition'),
      content_encoding: resource.field(self._.blocks, 'content_encoding'),
      content_language: resource.field(self._.blocks, 'content_language'),
      content_type: resource.field(self._.blocks, 'content_type'),
      expiry: resource.field(self._.blocks, 'expiry'),
      https_only: resource.field(self._.blocks, 'https_only'),
      id: resource.field(self._.blocks, 'id'),
      ip_address: resource.field(self._.blocks, 'ip_address'),
      sas: resource.field(self._.blocks, 'sas'),
      start: resource.field(self._.blocks, 'start'),
    },
    storage_account_sas(name, block): {
      local resource = blockType.resource('azurerm_storage_account_sas', name),
      _: resource._(block, {
        connection_string: build.template(block.connection_string),
        expiry: build.template(block.expiry),
        https_only: build.template(std.get(block, 'https_only', null)),
        id: build.template(std.get(block, 'id', null)),
        ip_addresses: build.template(std.get(block, 'ip_addresses', null)),
        sas: build.template(std.get(block, 'sas', null)),
        signed_version: build.template(std.get(block, 'signed_version', null)),
        start: build.template(block.start),
      }),
      connection_string: resource.field(self._.blocks, 'connection_string'),
      expiry: resource.field(self._.blocks, 'expiry'),
      https_only: resource.field(self._.blocks, 'https_only'),
      id: resource.field(self._.blocks, 'id'),
      ip_addresses: resource.field(self._.blocks, 'ip_addresses'),
      sas: resource.field(self._.blocks, 'sas'),
      signed_version: resource.field(self._.blocks, 'signed_version'),
      start: resource.field(self._.blocks, 'start'),
    },
    storage_blob(name, block): {
      local resource = blockType.resource('azurerm_storage_blob', name),
      _: resource._(block, {
        access_tier: build.template(std.get(block, 'access_tier', null)),
        content_md5: build.template(std.get(block, 'content_md5', null)),
        content_type: build.template(std.get(block, 'content_type', null)),
        encryption_scope: build.template(std.get(block, 'encryption_scope', null)),
        id: build.template(std.get(block, 'id', null)),
        metadata: build.template(std.get(block, 'metadata', null)),
        name: build.template(block.name),
        storage_account_name: build.template(block.storage_account_name),
        storage_container_name: build.template(block.storage_container_name),
        type: build.template(std.get(block, 'type', null)),
        url: build.template(std.get(block, 'url', null)),
      }),
      access_tier: resource.field(self._.blocks, 'access_tier'),
      content_md5: resource.field(self._.blocks, 'content_md5'),
      content_type: resource.field(self._.blocks, 'content_type'),
      encryption_scope: resource.field(self._.blocks, 'encryption_scope'),
      id: resource.field(self._.blocks, 'id'),
      metadata: resource.field(self._.blocks, 'metadata'),
      name: resource.field(self._.blocks, 'name'),
      storage_account_name: resource.field(self._.blocks, 'storage_account_name'),
      storage_container_name: resource.field(self._.blocks, 'storage_container_name'),
      type: resource.field(self._.blocks, 'type'),
      url: resource.field(self._.blocks, 'url'),
    },
    storage_container(name, block): {
      local resource = blockType.resource('azurerm_storage_container', name),
      _: resource._(block, {
        container_access_type: build.template(std.get(block, 'container_access_type', null)),
        default_encryption_scope: build.template(std.get(block, 'default_encryption_scope', null)),
        encryption_scope_override_enabled: build.template(std.get(block, 'encryption_scope_override_enabled', null)),
        has_immutability_policy: build.template(std.get(block, 'has_immutability_policy', null)),
        has_legal_hold: build.template(std.get(block, 'has_legal_hold', null)),
        id: build.template(std.get(block, 'id', null)),
        metadata: build.template(std.get(block, 'metadata', null)),
        name: build.template(block.name),
        resource_manager_id: build.template(std.get(block, 'resource_manager_id', null)),
        storage_account_id: build.template(std.get(block, 'storage_account_id', null)),
        storage_account_name: build.template(std.get(block, 'storage_account_name', null)),
      }),
      container_access_type: resource.field(self._.blocks, 'container_access_type'),
      default_encryption_scope: resource.field(self._.blocks, 'default_encryption_scope'),
      encryption_scope_override_enabled: resource.field(self._.blocks, 'encryption_scope_override_enabled'),
      has_immutability_policy: resource.field(self._.blocks, 'has_immutability_policy'),
      has_legal_hold: resource.field(self._.blocks, 'has_legal_hold'),
      id: resource.field(self._.blocks, 'id'),
      metadata: resource.field(self._.blocks, 'metadata'),
      name: resource.field(self._.blocks, 'name'),
      resource_manager_id: resource.field(self._.blocks, 'resource_manager_id'),
      storage_account_id: resource.field(self._.blocks, 'storage_account_id'),
      storage_account_name: resource.field(self._.blocks, 'storage_account_name'),
    },
    storage_containers(name, block): {
      local resource = blockType.resource('azurerm_storage_containers', name),
      _: resource._(block, {
        containers: build.template(std.get(block, 'containers', null)),
        id: build.template(std.get(block, 'id', null)),
        name_prefix: build.template(std.get(block, 'name_prefix', null)),
        storage_account_id: build.template(block.storage_account_id),
      }),
      containers: resource.field(self._.blocks, 'containers'),
      id: resource.field(self._.blocks, 'id'),
      name_prefix: resource.field(self._.blocks, 'name_prefix'),
      storage_account_id: resource.field(self._.blocks, 'storage_account_id'),
    },
    storage_encryption_scope(name, block): {
      local resource = blockType.resource('azurerm_storage_encryption_scope', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        key_vault_key_id: build.template(std.get(block, 'key_vault_key_id', null)),
        name: build.template(block.name),
        source: build.template(std.get(block, 'source', null)),
        storage_account_id: build.template(block.storage_account_id),
      }),
      id: resource.field(self._.blocks, 'id'),
      key_vault_key_id: resource.field(self._.blocks, 'key_vault_key_id'),
      name: resource.field(self._.blocks, 'name'),
      source: resource.field(self._.blocks, 'source'),
      storage_account_id: resource.field(self._.blocks, 'storage_account_id'),
    },
    storage_management_policy(name, block): {
      local resource = blockType.resource('azurerm_storage_management_policy', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        rule: build.template(std.get(block, 'rule', null)),
        storage_account_id: build.template(block.storage_account_id),
      }),
      id: resource.field(self._.blocks, 'id'),
      rule: resource.field(self._.blocks, 'rule'),
      storage_account_id: resource.field(self._.blocks, 'storage_account_id'),
    },
    storage_queue(name, block): {
      local resource = blockType.resource('azurerm_storage_queue', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        metadata: build.template(std.get(block, 'metadata', null)),
        name: build.template(block.name),
        resource_manager_id: build.template(std.get(block, 'resource_manager_id', null)),
        storage_account_name: build.template(block.storage_account_name),
      }),
      id: resource.field(self._.blocks, 'id'),
      metadata: resource.field(self._.blocks, 'metadata'),
      name: resource.field(self._.blocks, 'name'),
      resource_manager_id: resource.field(self._.blocks, 'resource_manager_id'),
      storage_account_name: resource.field(self._.blocks, 'storage_account_name'),
    },
    storage_share(name, block): {
      local resource = blockType.resource('azurerm_storage_share', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        metadata: build.template(std.get(block, 'metadata', null)),
        name: build.template(block.name),
        quota: build.template(std.get(block, 'quota', null)),
        resource_manager_id: build.template(std.get(block, 'resource_manager_id', null)),
        storage_account_id: build.template(std.get(block, 'storage_account_id', null)),
        storage_account_name: build.template(std.get(block, 'storage_account_name', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      metadata: resource.field(self._.blocks, 'metadata'),
      name: resource.field(self._.blocks, 'name'),
      quota: resource.field(self._.blocks, 'quota'),
      resource_manager_id: resource.field(self._.blocks, 'resource_manager_id'),
      storage_account_id: resource.field(self._.blocks, 'storage_account_id'),
      storage_account_name: resource.field(self._.blocks, 'storage_account_name'),
    },
    storage_sync(name, block): {
      local resource = blockType.resource('azurerm_storage_sync', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        incoming_traffic_policy: build.template(std.get(block, 'incoming_traffic_policy', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      incoming_traffic_policy: resource.field(self._.blocks, 'incoming_traffic_policy'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    storage_sync_group(name, block): {
      local resource = blockType.resource('azurerm_storage_sync_group', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        storage_sync_id: build.template(block.storage_sync_id),
      }),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      storage_sync_id: resource.field(self._.blocks, 'storage_sync_id'),
    },
    storage_table(name, block): {
      local resource = blockType.resource('azurerm_storage_table', name),
      _: resource._(block, {
        acl: build.template(std.get(block, 'acl', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        resource_manager_id: build.template(std.get(block, 'resource_manager_id', null)),
        storage_account_name: build.template(block.storage_account_name),
      }),
      acl: resource.field(self._.blocks, 'acl'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      resource_manager_id: resource.field(self._.blocks, 'resource_manager_id'),
      storage_account_name: resource.field(self._.blocks, 'storage_account_name'),
    },
    storage_table_entities(name, block): {
      local resource = blockType.resource('azurerm_storage_table_entities', name),
      _: resource._(block, {
        filter: build.template(block.filter),
        id: build.template(std.get(block, 'id', null)),
        items: build.template(std.get(block, 'items', null)),
        select: build.template(std.get(block, 'select', null)),
        storage_table_id: build.template(block.storage_table_id),
      }),
      filter: resource.field(self._.blocks, 'filter'),
      id: resource.field(self._.blocks, 'id'),
      items: resource.field(self._.blocks, 'items'),
      select: resource.field(self._.blocks, 'select'),
      storage_table_id: resource.field(self._.blocks, 'storage_table_id'),
    },
    storage_table_entity(name, block): {
      local resource = blockType.resource('azurerm_storage_table_entity', name),
      _: resource._(block, {
        entity: build.template(std.get(block, 'entity', null)),
        id: build.template(std.get(block, 'id', null)),
        partition_key: build.template(block.partition_key),
        row_key: build.template(block.row_key),
        storage_table_id: build.template(block.storage_table_id),
      }),
      entity: resource.field(self._.blocks, 'entity'),
      id: resource.field(self._.blocks, 'id'),
      partition_key: resource.field(self._.blocks, 'partition_key'),
      row_key: resource.field(self._.blocks, 'row_key'),
      storage_table_id: resource.field(self._.blocks, 'storage_table_id'),
    },
    stream_analytics_job(name, block): {
      local resource = blockType.resource('azurerm_stream_analytics_job', name),
      _: resource._(block, {
        compatibility_level: build.template(std.get(block, 'compatibility_level', null)),
        data_locale: build.template(std.get(block, 'data_locale', null)),
        events_late_arrival_max_delay_in_seconds: build.template(std.get(block, 'events_late_arrival_max_delay_in_seconds', null)),
        events_out_of_order_max_delay_in_seconds: build.template(std.get(block, 'events_out_of_order_max_delay_in_seconds', null)),
        events_out_of_order_policy: build.template(std.get(block, 'events_out_of_order_policy', null)),
        id: build.template(std.get(block, 'id', null)),
        identity: build.template(std.get(block, 'identity', null)),
        job_id: build.template(std.get(block, 'job_id', null)),
        last_output_time: build.template(std.get(block, 'last_output_time', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        output_error_policy: build.template(std.get(block, 'output_error_policy', null)),
        resource_group_name: build.template(block.resource_group_name),
        sku_name: build.template(std.get(block, 'sku_name', null)),
        start_mode: build.template(std.get(block, 'start_mode', null)),
        start_time: build.template(std.get(block, 'start_time', null)),
        streaming_units: build.template(std.get(block, 'streaming_units', null)),
        transformation_query: build.template(std.get(block, 'transformation_query', null)),
      }),
      compatibility_level: resource.field(self._.blocks, 'compatibility_level'),
      data_locale: resource.field(self._.blocks, 'data_locale'),
      events_late_arrival_max_delay_in_seconds: resource.field(self._.blocks, 'events_late_arrival_max_delay_in_seconds'),
      events_out_of_order_max_delay_in_seconds: resource.field(self._.blocks, 'events_out_of_order_max_delay_in_seconds'),
      events_out_of_order_policy: resource.field(self._.blocks, 'events_out_of_order_policy'),
      id: resource.field(self._.blocks, 'id'),
      identity: resource.field(self._.blocks, 'identity'),
      job_id: resource.field(self._.blocks, 'job_id'),
      last_output_time: resource.field(self._.blocks, 'last_output_time'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      output_error_policy: resource.field(self._.blocks, 'output_error_policy'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      sku_name: resource.field(self._.blocks, 'sku_name'),
      start_mode: resource.field(self._.blocks, 'start_mode'),
      start_time: resource.field(self._.blocks, 'start_time'),
      streaming_units: resource.field(self._.blocks, 'streaming_units'),
      transformation_query: resource.field(self._.blocks, 'transformation_query'),
    },
    subnet(name, block): {
      local resource = blockType.resource('azurerm_subnet', name),
      _: resource._(block, {
        address_prefix: build.template(std.get(block, 'address_prefix', null)),
        address_prefixes: build.template(std.get(block, 'address_prefixes', null)),
        default_outbound_access_enabled: build.template(std.get(block, 'default_outbound_access_enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        network_security_group_id: build.template(std.get(block, 'network_security_group_id', null)),
        private_endpoint_network_policies: build.template(std.get(block, 'private_endpoint_network_policies', null)),
        private_link_service_network_policies_enabled: build.template(std.get(block, 'private_link_service_network_policies_enabled', null)),
        resource_group_name: build.template(block.resource_group_name),
        route_table_id: build.template(std.get(block, 'route_table_id', null)),
        service_endpoints: build.template(std.get(block, 'service_endpoints', null)),
        virtual_network_name: build.template(block.virtual_network_name),
      }),
      address_prefix: resource.field(self._.blocks, 'address_prefix'),
      address_prefixes: resource.field(self._.blocks, 'address_prefixes'),
      default_outbound_access_enabled: resource.field(self._.blocks, 'default_outbound_access_enabled'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      network_security_group_id: resource.field(self._.blocks, 'network_security_group_id'),
      private_endpoint_network_policies: resource.field(self._.blocks, 'private_endpoint_network_policies'),
      private_link_service_network_policies_enabled: resource.field(self._.blocks, 'private_link_service_network_policies_enabled'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      route_table_id: resource.field(self._.blocks, 'route_table_id'),
      service_endpoints: resource.field(self._.blocks, 'service_endpoints'),
      virtual_network_name: resource.field(self._.blocks, 'virtual_network_name'),
    },
    subscription(name, block): {
      local resource = blockType.resource('azurerm_subscription', name),
      _: resource._(block, {
        display_name: build.template(std.get(block, 'display_name', null)),
        id: build.template(std.get(block, 'id', null)),
        location_placement_id: build.template(std.get(block, 'location_placement_id', null)),
        quota_id: build.template(std.get(block, 'quota_id', null)),
        spending_limit: build.template(std.get(block, 'spending_limit', null)),
        state: build.template(std.get(block, 'state', null)),
        subscription_id: build.template(std.get(block, 'subscription_id', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tenant_id: build.template(std.get(block, 'tenant_id', null)),
      }),
      display_name: resource.field(self._.blocks, 'display_name'),
      id: resource.field(self._.blocks, 'id'),
      location_placement_id: resource.field(self._.blocks, 'location_placement_id'),
      quota_id: resource.field(self._.blocks, 'quota_id'),
      spending_limit: resource.field(self._.blocks, 'spending_limit'),
      state: resource.field(self._.blocks, 'state'),
      subscription_id: resource.field(self._.blocks, 'subscription_id'),
      tags: resource.field(self._.blocks, 'tags'),
      tenant_id: resource.field(self._.blocks, 'tenant_id'),
    },
    subscription_template_deployment(name, block): {
      local resource = blockType.resource('azurerm_subscription_template_deployment', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        output_content: build.template(std.get(block, 'output_content', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      output_content: resource.field(self._.blocks, 'output_content'),
    },
    subscriptions(name, block): {
      local resource = blockType.resource('azurerm_subscriptions', name),
      _: resource._(block, {
        display_name_contains: build.template(std.get(block, 'display_name_contains', null)),
        display_name_prefix: build.template(std.get(block, 'display_name_prefix', null)),
        id: build.template(std.get(block, 'id', null)),
        subscriptions: build.template(std.get(block, 'subscriptions', null)),
      }),
      display_name_contains: resource.field(self._.blocks, 'display_name_contains'),
      display_name_prefix: resource.field(self._.blocks, 'display_name_prefix'),
      id: resource.field(self._.blocks, 'id'),
      subscriptions: resource.field(self._.blocks, 'subscriptions'),
    },
    synapse_workspace(name, block): {
      local resource = blockType.resource('azurerm_synapse_workspace', name),
      _: resource._(block, {
        connectivity_endpoints: build.template(std.get(block, 'connectivity_endpoints', null)),
        id: build.template(std.get(block, 'id', null)),
        identity: build.template(std.get(block, 'identity', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      connectivity_endpoints: resource.field(self._.blocks, 'connectivity_endpoints'),
      id: resource.field(self._.blocks, 'id'),
      identity: resource.field(self._.blocks, 'identity'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    system_center_virtual_machine_manager_inventory_items(name, block): {
      local resource = blockType.resource('azurerm_system_center_virtual_machine_manager_inventory_items', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        inventory_items: build.template(std.get(block, 'inventory_items', null)),
        inventory_type: build.template(block.inventory_type),
        system_center_virtual_machine_manager_server_id: build.template(block.system_center_virtual_machine_manager_server_id),
      }),
      id: resource.field(self._.blocks, 'id'),
      inventory_items: resource.field(self._.blocks, 'inventory_items'),
      inventory_type: resource.field(self._.blocks, 'inventory_type'),
      system_center_virtual_machine_manager_server_id: resource.field(self._.blocks, 'system_center_virtual_machine_manager_server_id'),
    },
    template_spec_version(name, block): {
      local resource = blockType.resource('azurerm_template_spec_version', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
        template_body: build.template(std.get(block, 'template_body', null)),
        version: build.template(block.version),
      }),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
      template_body: resource.field(self._.blocks, 'template_body'),
      version: resource.field(self._.blocks, 'version'),
    },
    tenant_template_deployment(name, block): {
      local resource = blockType.resource('azurerm_tenant_template_deployment', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        output_content: build.template(std.get(block, 'output_content', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      output_content: resource.field(self._.blocks, 'output_content'),
    },
    traffic_manager_geographical_location(name, block): {
      local resource = blockType.resource('azurerm_traffic_manager_geographical_location', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
      }),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
    },
    traffic_manager_profile(name, block): {
      local resource = blockType.resource('azurerm_traffic_manager_profile', name),
      _: resource._(block, {
        dns_config: build.template(std.get(block, 'dns_config', null)),
        fqdn: build.template(std.get(block, 'fqdn', null)),
        id: build.template(std.get(block, 'id', null)),
        monitor_config: build.template(std.get(block, 'monitor_config', null)),
        name: build.template(block.name),
        profile_status: build.template(std.get(block, 'profile_status', null)),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
        traffic_routing_method: build.template(std.get(block, 'traffic_routing_method', null)),
        traffic_view_enabled: build.template(std.get(block, 'traffic_view_enabled', null)),
      }),
      dns_config: resource.field(self._.blocks, 'dns_config'),
      fqdn: resource.field(self._.blocks, 'fqdn'),
      id: resource.field(self._.blocks, 'id'),
      monitor_config: resource.field(self._.blocks, 'monitor_config'),
      name: resource.field(self._.blocks, 'name'),
      profile_status: resource.field(self._.blocks, 'profile_status'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
      traffic_routing_method: resource.field(self._.blocks, 'traffic_routing_method'),
      traffic_view_enabled: resource.field(self._.blocks, 'traffic_view_enabled'),
    },
    user_assigned_identity(name, block): {
      local resource = blockType.resource('azurerm_user_assigned_identity', name),
      _: resource._(block, {
        client_id: build.template(std.get(block, 'client_id', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        principal_id: build.template(std.get(block, 'principal_id', null)),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
        tenant_id: build.template(std.get(block, 'tenant_id', null)),
      }),
      client_id: resource.field(self._.blocks, 'client_id'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      principal_id: resource.field(self._.blocks, 'principal_id'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
      tenant_id: resource.field(self._.blocks, 'tenant_id'),
    },
    virtual_desktop_application_group(name, block): {
      local resource = blockType.resource('azurerm_virtual_desktop_application_group', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        friendly_name: build.template(std.get(block, 'friendly_name', null)),
        host_pool_id: build.template(std.get(block, 'host_pool_id', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
        type: build.template(std.get(block, 'type', null)),
        workspace_id: build.template(std.get(block, 'workspace_id', null)),
      }),
      description: resource.field(self._.blocks, 'description'),
      friendly_name: resource.field(self._.blocks, 'friendly_name'),
      host_pool_id: resource.field(self._.blocks, 'host_pool_id'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
      type: resource.field(self._.blocks, 'type'),
      workspace_id: resource.field(self._.blocks, 'workspace_id'),
    },
    virtual_desktop_host_pool(name, block): {
      local resource = blockType.resource('azurerm_virtual_desktop_host_pool', name),
      _: resource._(block, {
        custom_rdp_properties: build.template(std.get(block, 'custom_rdp_properties', null)),
        description: build.template(std.get(block, 'description', null)),
        friendly_name: build.template(std.get(block, 'friendly_name', null)),
        id: build.template(std.get(block, 'id', null)),
        load_balancer_type: build.template(std.get(block, 'load_balancer_type', null)),
        location: build.template(std.get(block, 'location', null)),
        maximum_sessions_allowed: build.template(std.get(block, 'maximum_sessions_allowed', null)),
        name: build.template(block.name),
        personal_desktop_assignment_type: build.template(std.get(block, 'personal_desktop_assignment_type', null)),
        preferred_app_group_type: build.template(std.get(block, 'preferred_app_group_type', null)),
        resource_group_name: build.template(block.resource_group_name),
        scheduled_agent_updates: build.template(std.get(block, 'scheduled_agent_updates', null)),
        start_vm_on_connect: build.template(std.get(block, 'start_vm_on_connect', null)),
        tags: build.template(std.get(block, 'tags', null)),
        type: build.template(std.get(block, 'type', null)),
        validate_environment: build.template(std.get(block, 'validate_environment', null)),
      }),
      custom_rdp_properties: resource.field(self._.blocks, 'custom_rdp_properties'),
      description: resource.field(self._.blocks, 'description'),
      friendly_name: resource.field(self._.blocks, 'friendly_name'),
      id: resource.field(self._.blocks, 'id'),
      load_balancer_type: resource.field(self._.blocks, 'load_balancer_type'),
      location: resource.field(self._.blocks, 'location'),
      maximum_sessions_allowed: resource.field(self._.blocks, 'maximum_sessions_allowed'),
      name: resource.field(self._.blocks, 'name'),
      personal_desktop_assignment_type: resource.field(self._.blocks, 'personal_desktop_assignment_type'),
      preferred_app_group_type: resource.field(self._.blocks, 'preferred_app_group_type'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      scheduled_agent_updates: resource.field(self._.blocks, 'scheduled_agent_updates'),
      start_vm_on_connect: resource.field(self._.blocks, 'start_vm_on_connect'),
      tags: resource.field(self._.blocks, 'tags'),
      type: resource.field(self._.blocks, 'type'),
      validate_environment: resource.field(self._.blocks, 'validate_environment'),
    },
    virtual_desktop_workspace(name, block): {
      local resource = blockType.resource('azurerm_virtual_desktop_workspace', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        friendly_name: build.template(std.get(block, 'friendly_name', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        public_network_access_enabled: build.template(std.get(block, 'public_network_access_enabled', null)),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      description: resource.field(self._.blocks, 'description'),
      friendly_name: resource.field(self._.blocks, 'friendly_name'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      public_network_access_enabled: resource.field(self._.blocks, 'public_network_access_enabled'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    virtual_hub(name, block): {
      local resource = blockType.resource('azurerm_virtual_hub', name),
      _: resource._(block, {
        address_prefix: build.template(std.get(block, 'address_prefix', null)),
        default_route_table_id: build.template(std.get(block, 'default_route_table_id', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
        virtual_router_asn: build.template(std.get(block, 'virtual_router_asn', null)),
        virtual_router_ips: build.template(std.get(block, 'virtual_router_ips', null)),
        virtual_wan_id: build.template(std.get(block, 'virtual_wan_id', null)),
      }),
      address_prefix: resource.field(self._.blocks, 'address_prefix'),
      default_route_table_id: resource.field(self._.blocks, 'default_route_table_id'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
      virtual_router_asn: resource.field(self._.blocks, 'virtual_router_asn'),
      virtual_router_ips: resource.field(self._.blocks, 'virtual_router_ips'),
      virtual_wan_id: resource.field(self._.blocks, 'virtual_wan_id'),
    },
    virtual_hub_connection(name, block): {
      local resource = blockType.resource('azurerm_virtual_hub_connection', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        internet_security_enabled: build.template(std.get(block, 'internet_security_enabled', null)),
        name: build.template(block.name),
        remote_virtual_network_id: build.template(std.get(block, 'remote_virtual_network_id', null)),
        resource_group_name: build.template(block.resource_group_name),
        routing: build.template(std.get(block, 'routing', null)),
        virtual_hub_id: build.template(std.get(block, 'virtual_hub_id', null)),
        virtual_hub_name: build.template(block.virtual_hub_name),
      }),
      id: resource.field(self._.blocks, 'id'),
      internet_security_enabled: resource.field(self._.blocks, 'internet_security_enabled'),
      name: resource.field(self._.blocks, 'name'),
      remote_virtual_network_id: resource.field(self._.blocks, 'remote_virtual_network_id'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      routing: resource.field(self._.blocks, 'routing'),
      virtual_hub_id: resource.field(self._.blocks, 'virtual_hub_id'),
      virtual_hub_name: resource.field(self._.blocks, 'virtual_hub_name'),
    },
    virtual_hub_route_table(name, block): {
      local resource = blockType.resource('azurerm_virtual_hub_route_table', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        labels: build.template(std.get(block, 'labels', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        route: build.template(std.get(block, 'route', null)),
        virtual_hub_id: build.template(std.get(block, 'virtual_hub_id', null)),
        virtual_hub_name: build.template(block.virtual_hub_name),
      }),
      id: resource.field(self._.blocks, 'id'),
      labels: resource.field(self._.blocks, 'labels'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      route: resource.field(self._.blocks, 'route'),
      virtual_hub_id: resource.field(self._.blocks, 'virtual_hub_id'),
      virtual_hub_name: resource.field(self._.blocks, 'virtual_hub_name'),
    },
    virtual_machine(name, block): {
      local resource = blockType.resource('azurerm_virtual_machine', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        identity: build.template(std.get(block, 'identity', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        power_state: build.template(std.get(block, 'power_state', null)),
        private_ip_address: build.template(std.get(block, 'private_ip_address', null)),
        private_ip_addresses: build.template(std.get(block, 'private_ip_addresses', null)),
        public_ip_address: build.template(std.get(block, 'public_ip_address', null)),
        public_ip_addresses: build.template(std.get(block, 'public_ip_addresses', null)),
        resource_group_name: build.template(block.resource_group_name),
      }),
      id: resource.field(self._.blocks, 'id'),
      identity: resource.field(self._.blocks, 'identity'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      power_state: resource.field(self._.blocks, 'power_state'),
      private_ip_address: resource.field(self._.blocks, 'private_ip_address'),
      private_ip_addresses: resource.field(self._.blocks, 'private_ip_addresses'),
      public_ip_address: resource.field(self._.blocks, 'public_ip_address'),
      public_ip_addresses: resource.field(self._.blocks, 'public_ip_addresses'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
    },
    virtual_machine_scale_set(name, block): {
      local resource = blockType.resource('azurerm_virtual_machine_scale_set', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        identity: build.template(std.get(block, 'identity', null)),
        instances: build.template(std.get(block, 'instances', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        network_interface: build.template(std.get(block, 'network_interface', null)),
        resource_group_name: build.template(block.resource_group_name),
      }),
      id: resource.field(self._.blocks, 'id'),
      identity: resource.field(self._.blocks, 'identity'),
      instances: resource.field(self._.blocks, 'instances'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      network_interface: resource.field(self._.blocks, 'network_interface'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
    },
    virtual_network(name, block): {
      local resource = blockType.resource('azurerm_virtual_network', name),
      _: resource._(block, {
        address_space: build.template(std.get(block, 'address_space', null)),
        dns_servers: build.template(std.get(block, 'dns_servers', null)),
        guid: build.template(std.get(block, 'guid', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        subnets: build.template(std.get(block, 'subnets', null)),
        tags: build.template(std.get(block, 'tags', null)),
        vnet_peerings: build.template(std.get(block, 'vnet_peerings', null)),
        vnet_peerings_addresses: build.template(std.get(block, 'vnet_peerings_addresses', null)),
      }),
      address_space: resource.field(self._.blocks, 'address_space'),
      dns_servers: resource.field(self._.blocks, 'dns_servers'),
      guid: resource.field(self._.blocks, 'guid'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      subnets: resource.field(self._.blocks, 'subnets'),
      tags: resource.field(self._.blocks, 'tags'),
      vnet_peerings: resource.field(self._.blocks, 'vnet_peerings'),
      vnet_peerings_addresses: resource.field(self._.blocks, 'vnet_peerings_addresses'),
    },
    virtual_network_gateway(name, block): {
      local resource = blockType.resource('azurerm_virtual_network_gateway', name),
      _: resource._(block, {
        active_active: build.template(std.get(block, 'active_active', null)),
        bgp_settings: build.template(std.get(block, 'bgp_settings', null)),
        custom_route: build.template(std.get(block, 'custom_route', null)),
        default_local_network_gateway_id: build.template(std.get(block, 'default_local_network_gateway_id', null)),
        enable_bgp: build.template(std.get(block, 'enable_bgp', null)),
        generation: build.template(std.get(block, 'generation', null)),
        id: build.template(std.get(block, 'id', null)),
        ip_configuration: build.template(std.get(block, 'ip_configuration', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        private_ip_address_enabled: build.template(std.get(block, 'private_ip_address_enabled', null)),
        resource_group_name: build.template(block.resource_group_name),
        sku: build.template(std.get(block, 'sku', null)),
        tags: build.template(std.get(block, 'tags', null)),
        type: build.template(std.get(block, 'type', null)),
        vpn_client_configuration: build.template(std.get(block, 'vpn_client_configuration', null)),
        vpn_type: build.template(std.get(block, 'vpn_type', null)),
      }),
      active_active: resource.field(self._.blocks, 'active_active'),
      bgp_settings: resource.field(self._.blocks, 'bgp_settings'),
      custom_route: resource.field(self._.blocks, 'custom_route'),
      default_local_network_gateway_id: resource.field(self._.blocks, 'default_local_network_gateway_id'),
      enable_bgp: resource.field(self._.blocks, 'enable_bgp'),
      generation: resource.field(self._.blocks, 'generation'),
      id: resource.field(self._.blocks, 'id'),
      ip_configuration: resource.field(self._.blocks, 'ip_configuration'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      private_ip_address_enabled: resource.field(self._.blocks, 'private_ip_address_enabled'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      sku: resource.field(self._.blocks, 'sku'),
      tags: resource.field(self._.blocks, 'tags'),
      type: resource.field(self._.blocks, 'type'),
      vpn_client_configuration: resource.field(self._.blocks, 'vpn_client_configuration'),
      vpn_type: resource.field(self._.blocks, 'vpn_type'),
    },
    virtual_network_gateway_connection(name, block): {
      local resource = blockType.resource('azurerm_virtual_network_gateway_connection', name),
      _: resource._(block, {
        authorization_key: build.template(std.get(block, 'authorization_key', null)),
        connection_protocol: build.template(std.get(block, 'connection_protocol', null)),
        dpd_timeout_seconds: build.template(std.get(block, 'dpd_timeout_seconds', null)),
        egress_bytes_transferred: build.template(std.get(block, 'egress_bytes_transferred', null)),
        enable_bgp: build.template(std.get(block, 'enable_bgp', null)),
        express_route_circuit_id: build.template(std.get(block, 'express_route_circuit_id', null)),
        express_route_gateway_bypass: build.template(std.get(block, 'express_route_gateway_bypass', null)),
        id: build.template(std.get(block, 'id', null)),
        ingress_bytes_transferred: build.template(std.get(block, 'ingress_bytes_transferred', null)),
        ipsec_policy: build.template(std.get(block, 'ipsec_policy', null)),
        local_azure_ip_address_enabled: build.template(std.get(block, 'local_azure_ip_address_enabled', null)),
        local_network_gateway_id: build.template(std.get(block, 'local_network_gateway_id', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        peer_virtual_network_gateway_id: build.template(std.get(block, 'peer_virtual_network_gateway_id', null)),
        private_link_fast_path_enabled: build.template(std.get(block, 'private_link_fast_path_enabled', null)),
        resource_group_name: build.template(block.resource_group_name),
        resource_guid: build.template(std.get(block, 'resource_guid', null)),
        routing_weight: build.template(std.get(block, 'routing_weight', null)),
        shared_key: build.template(std.get(block, 'shared_key', null)),
        tags: build.template(std.get(block, 'tags', null)),
        traffic_selector_policy: build.template(std.get(block, 'traffic_selector_policy', null)),
        type: build.template(std.get(block, 'type', null)),
        use_policy_based_traffic_selectors: build.template(std.get(block, 'use_policy_based_traffic_selectors', null)),
        virtual_network_gateway_id: build.template(std.get(block, 'virtual_network_gateway_id', null)),
      }),
      authorization_key: resource.field(self._.blocks, 'authorization_key'),
      connection_protocol: resource.field(self._.blocks, 'connection_protocol'),
      dpd_timeout_seconds: resource.field(self._.blocks, 'dpd_timeout_seconds'),
      egress_bytes_transferred: resource.field(self._.blocks, 'egress_bytes_transferred'),
      enable_bgp: resource.field(self._.blocks, 'enable_bgp'),
      express_route_circuit_id: resource.field(self._.blocks, 'express_route_circuit_id'),
      express_route_gateway_bypass: resource.field(self._.blocks, 'express_route_gateway_bypass'),
      id: resource.field(self._.blocks, 'id'),
      ingress_bytes_transferred: resource.field(self._.blocks, 'ingress_bytes_transferred'),
      ipsec_policy: resource.field(self._.blocks, 'ipsec_policy'),
      local_azure_ip_address_enabled: resource.field(self._.blocks, 'local_azure_ip_address_enabled'),
      local_network_gateway_id: resource.field(self._.blocks, 'local_network_gateway_id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      peer_virtual_network_gateway_id: resource.field(self._.blocks, 'peer_virtual_network_gateway_id'),
      private_link_fast_path_enabled: resource.field(self._.blocks, 'private_link_fast_path_enabled'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      resource_guid: resource.field(self._.blocks, 'resource_guid'),
      routing_weight: resource.field(self._.blocks, 'routing_weight'),
      shared_key: resource.field(self._.blocks, 'shared_key'),
      tags: resource.field(self._.blocks, 'tags'),
      traffic_selector_policy: resource.field(self._.blocks, 'traffic_selector_policy'),
      type: resource.field(self._.blocks, 'type'),
      use_policy_based_traffic_selectors: resource.field(self._.blocks, 'use_policy_based_traffic_selectors'),
      virtual_network_gateway_id: resource.field(self._.blocks, 'virtual_network_gateway_id'),
    },
    virtual_network_peering(name, block): {
      local resource = blockType.resource('azurerm_virtual_network_peering', name),
      _: resource._(block, {
        allow_forwarded_traffic: build.template(std.get(block, 'allow_forwarded_traffic', null)),
        allow_gateway_transit: build.template(std.get(block, 'allow_gateway_transit', null)),
        allow_virtual_network_access: build.template(std.get(block, 'allow_virtual_network_access', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        only_ipv6_peering_enabled: build.template(std.get(block, 'only_ipv6_peering_enabled', null)),
        peer_complete_virtual_networks_enabled: build.template(std.get(block, 'peer_complete_virtual_networks_enabled', null)),
        remote_virtual_network_id: build.template(std.get(block, 'remote_virtual_network_id', null)),
        use_remote_gateways: build.template(std.get(block, 'use_remote_gateways', null)),
        virtual_network_id: build.template(block.virtual_network_id),
      }),
      allow_forwarded_traffic: resource.field(self._.blocks, 'allow_forwarded_traffic'),
      allow_gateway_transit: resource.field(self._.blocks, 'allow_gateway_transit'),
      allow_virtual_network_access: resource.field(self._.blocks, 'allow_virtual_network_access'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      only_ipv6_peering_enabled: resource.field(self._.blocks, 'only_ipv6_peering_enabled'),
      peer_complete_virtual_networks_enabled: resource.field(self._.blocks, 'peer_complete_virtual_networks_enabled'),
      remote_virtual_network_id: resource.field(self._.blocks, 'remote_virtual_network_id'),
      use_remote_gateways: resource.field(self._.blocks, 'use_remote_gateways'),
      virtual_network_id: resource.field(self._.blocks, 'virtual_network_id'),
    },
    virtual_wan(name, block): {
      local resource = blockType.resource('azurerm_virtual_wan', name),
      _: resource._(block, {
        allow_branch_to_branch_traffic: build.template(std.get(block, 'allow_branch_to_branch_traffic', null)),
        disable_vpn_encryption: build.template(std.get(block, 'disable_vpn_encryption', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        office365_local_breakout_category: build.template(std.get(block, 'office365_local_breakout_category', null)),
        resource_group_name: build.template(block.resource_group_name),
        sku: build.template(std.get(block, 'sku', null)),
        tags: build.template(std.get(block, 'tags', null)),
        virtual_hub_ids: build.template(std.get(block, 'virtual_hub_ids', null)),
        vpn_site_ids: build.template(std.get(block, 'vpn_site_ids', null)),
      }),
      allow_branch_to_branch_traffic: resource.field(self._.blocks, 'allow_branch_to_branch_traffic'),
      disable_vpn_encryption: resource.field(self._.blocks, 'disable_vpn_encryption'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      office365_local_breakout_category: resource.field(self._.blocks, 'office365_local_breakout_category'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      sku: resource.field(self._.blocks, 'sku'),
      tags: resource.field(self._.blocks, 'tags'),
      virtual_hub_ids: resource.field(self._.blocks, 'virtual_hub_ids'),
      vpn_site_ids: resource.field(self._.blocks, 'vpn_site_ids'),
    },
    vmware_private_cloud(name, block): {
      local resource = blockType.resource('azurerm_vmware_private_cloud', name),
      _: resource._(block, {
        circuit: build.template(std.get(block, 'circuit', null)),
        hcx_cloud_manager_endpoint: build.template(std.get(block, 'hcx_cloud_manager_endpoint', null)),
        id: build.template(std.get(block, 'id', null)),
        internet_connection_enabled: build.template(std.get(block, 'internet_connection_enabled', null)),
        location: build.template(std.get(block, 'location', null)),
        management_cluster: build.template(std.get(block, 'management_cluster', null)),
        management_subnet_cidr: build.template(std.get(block, 'management_subnet_cidr', null)),
        name: build.template(block.name),
        network_subnet_cidr: build.template(std.get(block, 'network_subnet_cidr', null)),
        nsxt_certificate_thumbprint: build.template(std.get(block, 'nsxt_certificate_thumbprint', null)),
        nsxt_manager_endpoint: build.template(std.get(block, 'nsxt_manager_endpoint', null)),
        provisioning_subnet_cidr: build.template(std.get(block, 'provisioning_subnet_cidr', null)),
        resource_group_name: build.template(block.resource_group_name),
        sku_name: build.template(std.get(block, 'sku_name', null)),
        tags: build.template(std.get(block, 'tags', null)),
        vcenter_certificate_thumbprint: build.template(std.get(block, 'vcenter_certificate_thumbprint', null)),
        vcsa_endpoint: build.template(std.get(block, 'vcsa_endpoint', null)),
        vmotion_subnet_cidr: build.template(std.get(block, 'vmotion_subnet_cidr', null)),
      }),
      circuit: resource.field(self._.blocks, 'circuit'),
      hcx_cloud_manager_endpoint: resource.field(self._.blocks, 'hcx_cloud_manager_endpoint'),
      id: resource.field(self._.blocks, 'id'),
      internet_connection_enabled: resource.field(self._.blocks, 'internet_connection_enabled'),
      location: resource.field(self._.blocks, 'location'),
      management_cluster: resource.field(self._.blocks, 'management_cluster'),
      management_subnet_cidr: resource.field(self._.blocks, 'management_subnet_cidr'),
      name: resource.field(self._.blocks, 'name'),
      network_subnet_cidr: resource.field(self._.blocks, 'network_subnet_cidr'),
      nsxt_certificate_thumbprint: resource.field(self._.blocks, 'nsxt_certificate_thumbprint'),
      nsxt_manager_endpoint: resource.field(self._.blocks, 'nsxt_manager_endpoint'),
      provisioning_subnet_cidr: resource.field(self._.blocks, 'provisioning_subnet_cidr'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      sku_name: resource.field(self._.blocks, 'sku_name'),
      tags: resource.field(self._.blocks, 'tags'),
      vcenter_certificate_thumbprint: resource.field(self._.blocks, 'vcenter_certificate_thumbprint'),
      vcsa_endpoint: resource.field(self._.blocks, 'vcsa_endpoint'),
      vmotion_subnet_cidr: resource.field(self._.blocks, 'vmotion_subnet_cidr'),
    },
    vpn_gateway(name, block): {
      local resource = blockType.resource('azurerm_vpn_gateway', name),
      _: resource._(block, {
        bgp_settings: build.template(std.get(block, 'bgp_settings', null)),
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        scale_unit: build.template(std.get(block, 'scale_unit', null)),
        tags: build.template(std.get(block, 'tags', null)),
        virtual_hub_id: build.template(std.get(block, 'virtual_hub_id', null)),
      }),
      bgp_settings: resource.field(self._.blocks, 'bgp_settings'),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      scale_unit: resource.field(self._.blocks, 'scale_unit'),
      tags: resource.field(self._.blocks, 'tags'),
      virtual_hub_id: resource.field(self._.blocks, 'virtual_hub_id'),
    },
    vpn_server_configuration(name, block): {
      local resource = blockType.resource('azurerm_vpn_server_configuration', name),
      _: resource._(block, {
        azure_active_directory_authentication: build.template(std.get(block, 'azure_active_directory_authentication', null)),
        client_revoked_certificate: build.template(std.get(block, 'client_revoked_certificate', null)),
        client_root_certificate: build.template(std.get(block, 'client_root_certificate', null)),
        id: build.template(std.get(block, 'id', null)),
        ipsec_policy: build.template(std.get(block, 'ipsec_policy', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        radius: build.template(std.get(block, 'radius', null)),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
        vpn_authentication_types: build.template(std.get(block, 'vpn_authentication_types', null)),
        vpn_protocols: build.template(std.get(block, 'vpn_protocols', null)),
      }),
      azure_active_directory_authentication: resource.field(self._.blocks, 'azure_active_directory_authentication'),
      client_revoked_certificate: resource.field(self._.blocks, 'client_revoked_certificate'),
      client_root_certificate: resource.field(self._.blocks, 'client_root_certificate'),
      id: resource.field(self._.blocks, 'id'),
      ipsec_policy: resource.field(self._.blocks, 'ipsec_policy'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      radius: resource.field(self._.blocks, 'radius'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
      vpn_authentication_types: resource.field(self._.blocks, 'vpn_authentication_types'),
      vpn_protocols: resource.field(self._.blocks, 'vpn_protocols'),
    },
    web_application_firewall_policy(name, block): {
      local resource = blockType.resource('azurerm_web_application_firewall_policy', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        resource_group_name: build.template(block.resource_group_name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    web_pubsub(name, block): {
      local resource = blockType.resource('azurerm_web_pubsub', name),
      _: resource._(block, {
        aad_auth_enabled: build.template(std.get(block, 'aad_auth_enabled', null)),
        capacity: build.template(std.get(block, 'capacity', null)),
        external_ip: build.template(std.get(block, 'external_ip', null)),
        hostname: build.template(std.get(block, 'hostname', null)),
        id: build.template(std.get(block, 'id', null)),
        local_auth_enabled: build.template(std.get(block, 'local_auth_enabled', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        primary_access_key: build.template(std.get(block, 'primary_access_key', null)),
        primary_connection_string: build.template(std.get(block, 'primary_connection_string', null)),
        public_network_access_enabled: build.template(std.get(block, 'public_network_access_enabled', null)),
        public_port: build.template(std.get(block, 'public_port', null)),
        resource_group_name: build.template(block.resource_group_name),
        secondary_access_key: build.template(std.get(block, 'secondary_access_key', null)),
        secondary_connection_string: build.template(std.get(block, 'secondary_connection_string', null)),
        server_port: build.template(std.get(block, 'server_port', null)),
        sku: build.template(std.get(block, 'sku', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tls_client_cert_enabled: build.template(std.get(block, 'tls_client_cert_enabled', null)),
        version: build.template(std.get(block, 'version', null)),
      }),
      aad_auth_enabled: resource.field(self._.blocks, 'aad_auth_enabled'),
      capacity: resource.field(self._.blocks, 'capacity'),
      external_ip: resource.field(self._.blocks, 'external_ip'),
      hostname: resource.field(self._.blocks, 'hostname'),
      id: resource.field(self._.blocks, 'id'),
      local_auth_enabled: resource.field(self._.blocks, 'local_auth_enabled'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      primary_access_key: resource.field(self._.blocks, 'primary_access_key'),
      primary_connection_string: resource.field(self._.blocks, 'primary_connection_string'),
      public_network_access_enabled: resource.field(self._.blocks, 'public_network_access_enabled'),
      public_port: resource.field(self._.blocks, 'public_port'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      secondary_access_key: resource.field(self._.blocks, 'secondary_access_key'),
      secondary_connection_string: resource.field(self._.blocks, 'secondary_connection_string'),
      server_port: resource.field(self._.blocks, 'server_port'),
      sku: resource.field(self._.blocks, 'sku'),
      tags: resource.field(self._.blocks, 'tags'),
      tls_client_cert_enabled: resource.field(self._.blocks, 'tls_client_cert_enabled'),
      version: resource.field(self._.blocks, 'version'),
    },
    web_pubsub_private_link_resource(name, block): {
      local resource = blockType.resource('azurerm_web_pubsub_private_link_resource', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        shared_private_link_resource_types: build.template(std.get(block, 'shared_private_link_resource_types', null)),
        web_pubsub_id: build.template(block.web_pubsub_id),
      }),
      id: resource.field(self._.blocks, 'id'),
      shared_private_link_resource_types: resource.field(self._.blocks, 'shared_private_link_resource_types'),
      web_pubsub_id: resource.field(self._.blocks, 'web_pubsub_id'),
    },
    windows_function_app(name, block): {
      local resource = blockType.resource('azurerm_windows_function_app', name),
      _: resource._(block, {
        app_settings: build.template(std.get(block, 'app_settings', null)),
        auth_settings: build.template(std.get(block, 'auth_settings', null)),
        auth_settings_v2: build.template(std.get(block, 'auth_settings_v2', null)),
        backup: build.template(std.get(block, 'backup', null)),
        builtin_logging_enabled: build.template(std.get(block, 'builtin_logging_enabled', null)),
        client_certificate_enabled: build.template(std.get(block, 'client_certificate_enabled', null)),
        client_certificate_exclusion_paths: build.template(std.get(block, 'client_certificate_exclusion_paths', null)),
        client_certificate_mode: build.template(std.get(block, 'client_certificate_mode', null)),
        connection_string: build.template(std.get(block, 'connection_string', null)),
        content_share_force_disabled: build.template(std.get(block, 'content_share_force_disabled', null)),
        custom_domain_verification_id: build.template(std.get(block, 'custom_domain_verification_id', null)),
        daily_memory_time_quota: build.template(std.get(block, 'daily_memory_time_quota', null)),
        default_hostname: build.template(std.get(block, 'default_hostname', null)),
        enabled: build.template(std.get(block, 'enabled', null)),
        ftp_publish_basic_authentication_enabled: build.template(std.get(block, 'ftp_publish_basic_authentication_enabled', null)),
        functions_extension_version: build.template(std.get(block, 'functions_extension_version', null)),
        hosting_environment_id: build.template(std.get(block, 'hosting_environment_id', null)),
        https_only: build.template(std.get(block, 'https_only', null)),
        id: build.template(std.get(block, 'id', null)),
        identity: build.template(std.get(block, 'identity', null)),
        kind: build.template(std.get(block, 'kind', null)),
        location: build.template(std.get(block, 'location', null)),
        name: build.template(block.name),
        outbound_ip_address_list: build.template(std.get(block, 'outbound_ip_address_list', null)),
        outbound_ip_addresses: build.template(std.get(block, 'outbound_ip_addresses', null)),
        possible_outbound_ip_address_list: build.template(std.get(block, 'possible_outbound_ip_address_list', null)),
        possible_outbound_ip_addresses: build.template(std.get(block, 'possible_outbound_ip_addresses', null)),
        public_network_access_enabled: build.template(std.get(block, 'public_network_access_enabled', null)),
        resource_group_name: build.template(block.resource_group_name),
        service_plan_id: build.template(std.get(block, 'service_plan_id', null)),
        site_config: build.template(std.get(block, 'site_config', null)),
        site_credential: build.template(std.get(block, 'site_credential', null)),
        sticky_settings: build.template(std.get(block, 'sticky_settings', null)),
        storage_account_access_key: build.template(std.get(block, 'storage_account_access_key', null)),
        storage_account_name: build.template(std.get(block, 'storage_account_name', null)),
        storage_key_vault_secret_id: build.template(std.get(block, 'storage_key_vault_secret_id', null)),
        storage_uses_managed_identity: build.template(std.get(block, 'storage_uses_managed_identity', null)),
        tags: build.template(std.get(block, 'tags', null)),
        virtual_network_subnet_id: build.template(std.get(block, 'virtual_network_subnet_id', null)),
        webdeploy_publish_basic_authentication_enabled: build.template(std.get(block, 'webdeploy_publish_basic_authentication_enabled', null)),
      }),
      app_settings: resource.field(self._.blocks, 'app_settings'),
      auth_settings: resource.field(self._.blocks, 'auth_settings'),
      auth_settings_v2: resource.field(self._.blocks, 'auth_settings_v2'),
      backup: resource.field(self._.blocks, 'backup'),
      builtin_logging_enabled: resource.field(self._.blocks, 'builtin_logging_enabled'),
      client_certificate_enabled: resource.field(self._.blocks, 'client_certificate_enabled'),
      client_certificate_exclusion_paths: resource.field(self._.blocks, 'client_certificate_exclusion_paths'),
      client_certificate_mode: resource.field(self._.blocks, 'client_certificate_mode'),
      connection_string: resource.field(self._.blocks, 'connection_string'),
      content_share_force_disabled: resource.field(self._.blocks, 'content_share_force_disabled'),
      custom_domain_verification_id: resource.field(self._.blocks, 'custom_domain_verification_id'),
      daily_memory_time_quota: resource.field(self._.blocks, 'daily_memory_time_quota'),
      default_hostname: resource.field(self._.blocks, 'default_hostname'),
      enabled: resource.field(self._.blocks, 'enabled'),
      ftp_publish_basic_authentication_enabled: resource.field(self._.blocks, 'ftp_publish_basic_authentication_enabled'),
      functions_extension_version: resource.field(self._.blocks, 'functions_extension_version'),
      hosting_environment_id: resource.field(self._.blocks, 'hosting_environment_id'),
      https_only: resource.field(self._.blocks, 'https_only'),
      id: resource.field(self._.blocks, 'id'),
      identity: resource.field(self._.blocks, 'identity'),
      kind: resource.field(self._.blocks, 'kind'),
      location: resource.field(self._.blocks, 'location'),
      name: resource.field(self._.blocks, 'name'),
      outbound_ip_address_list: resource.field(self._.blocks, 'outbound_ip_address_list'),
      outbound_ip_addresses: resource.field(self._.blocks, 'outbound_ip_addresses'),
      possible_outbound_ip_address_list: resource.field(self._.blocks, 'possible_outbound_ip_address_list'),
      possible_outbound_ip_addresses: resource.field(self._.blocks, 'possible_outbound_ip_addresses'),
      public_network_access_enabled: resource.field(self._.blocks, 'public_network_access_enabled'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      service_plan_id: resource.field(self._.blocks, 'service_plan_id'),
      site_config: resource.field(self._.blocks, 'site_config'),
      site_credential: resource.field(self._.blocks, 'site_credential'),
      sticky_settings: resource.field(self._.blocks, 'sticky_settings'),
      storage_account_access_key: resource.field(self._.blocks, 'storage_account_access_key'),
      storage_account_name: resource.field(self._.blocks, 'storage_account_name'),
      storage_key_vault_secret_id: resource.field(self._.blocks, 'storage_key_vault_secret_id'),
      storage_uses_managed_identity: resource.field(self._.blocks, 'storage_uses_managed_identity'),
      tags: resource.field(self._.blocks, 'tags'),
      virtual_network_subnet_id: resource.field(self._.blocks, 'virtual_network_subnet_id'),
      webdeploy_publish_basic_authentication_enabled: resource.field(self._.blocks, 'webdeploy_publish_basic_authentication_enabled'),
    },
    windows_web_app(name, block): {
      local resource = blockType.resource('azurerm_windows_web_app', name),
      _: resource._(block, {
        app_settings: build.template(std.get(block, 'app_settings', null)),
        auth_settings: build.template(std.get(block, 'auth_settings', null)),
        auth_settings_v2: build.template(std.get(block, 'auth_settings_v2', null)),
        backup: build.template(std.get(block, 'backup', null)),
        client_affinity_enabled: build.template(std.get(block, 'client_affinity_enabled', null)),
        client_certificate_enabled: build.template(std.get(block, 'client_certificate_enabled', null)),
        client_certificate_exclusion_paths: build.template(std.get(block, 'client_certificate_exclusion_paths', null)),
        client_certificate_mode: build.template(std.get(block, 'client_certificate_mode', null)),
        connection_string: build.template(std.get(block, 'connection_string', null)),
        custom_domain_verification_id: build.template(std.get(block, 'custom_domain_verification_id', null)),
        default_hostname: build.template(std.get(block, 'default_hostname', null)),
        enabled: build.template(std.get(block, 'enabled', null)),
        ftp_publish_basic_authentication_enabled: build.template(std.get(block, 'ftp_publish_basic_authentication_enabled', null)),
        hosting_environment_id: build.template(std.get(block, 'hosting_environment_id', null)),
        https_only: build.template(std.get(block, 'https_only', null)),
        id: build.template(std.get(block, 'id', null)),
        identity: build.template(std.get(block, 'identity', null)),
        kind: build.template(std.get(block, 'kind', null)),
        location: build.template(std.get(block, 'location', null)),
        logs: build.template(std.get(block, 'logs', null)),
        name: build.template(block.name),
        outbound_ip_address_list: build.template(std.get(block, 'outbound_ip_address_list', null)),
        outbound_ip_addresses: build.template(std.get(block, 'outbound_ip_addresses', null)),
        possible_outbound_ip_address_list: build.template(std.get(block, 'possible_outbound_ip_address_list', null)),
        possible_outbound_ip_addresses: build.template(std.get(block, 'possible_outbound_ip_addresses', null)),
        public_network_access_enabled: build.template(std.get(block, 'public_network_access_enabled', null)),
        resource_group_name: build.template(block.resource_group_name),
        service_plan_id: build.template(std.get(block, 'service_plan_id', null)),
        site_config: build.template(std.get(block, 'site_config', null)),
        site_credential: build.template(std.get(block, 'site_credential', null)),
        sticky_settings: build.template(std.get(block, 'sticky_settings', null)),
        storage_account: build.template(std.get(block, 'storage_account', null)),
        tags: build.template(std.get(block, 'tags', null)),
        virtual_network_subnet_id: build.template(std.get(block, 'virtual_network_subnet_id', null)),
        webdeploy_publish_basic_authentication_enabled: build.template(std.get(block, 'webdeploy_publish_basic_authentication_enabled', null)),
      }),
      app_settings: resource.field(self._.blocks, 'app_settings'),
      auth_settings: resource.field(self._.blocks, 'auth_settings'),
      auth_settings_v2: resource.field(self._.blocks, 'auth_settings_v2'),
      backup: resource.field(self._.blocks, 'backup'),
      client_affinity_enabled: resource.field(self._.blocks, 'client_affinity_enabled'),
      client_certificate_enabled: resource.field(self._.blocks, 'client_certificate_enabled'),
      client_certificate_exclusion_paths: resource.field(self._.blocks, 'client_certificate_exclusion_paths'),
      client_certificate_mode: resource.field(self._.blocks, 'client_certificate_mode'),
      connection_string: resource.field(self._.blocks, 'connection_string'),
      custom_domain_verification_id: resource.field(self._.blocks, 'custom_domain_verification_id'),
      default_hostname: resource.field(self._.blocks, 'default_hostname'),
      enabled: resource.field(self._.blocks, 'enabled'),
      ftp_publish_basic_authentication_enabled: resource.field(self._.blocks, 'ftp_publish_basic_authentication_enabled'),
      hosting_environment_id: resource.field(self._.blocks, 'hosting_environment_id'),
      https_only: resource.field(self._.blocks, 'https_only'),
      id: resource.field(self._.blocks, 'id'),
      identity: resource.field(self._.blocks, 'identity'),
      kind: resource.field(self._.blocks, 'kind'),
      location: resource.field(self._.blocks, 'location'),
      logs: resource.field(self._.blocks, 'logs'),
      name: resource.field(self._.blocks, 'name'),
      outbound_ip_address_list: resource.field(self._.blocks, 'outbound_ip_address_list'),
      outbound_ip_addresses: resource.field(self._.blocks, 'outbound_ip_addresses'),
      possible_outbound_ip_address_list: resource.field(self._.blocks, 'possible_outbound_ip_address_list'),
      possible_outbound_ip_addresses: resource.field(self._.blocks, 'possible_outbound_ip_addresses'),
      public_network_access_enabled: resource.field(self._.blocks, 'public_network_access_enabled'),
      resource_group_name: resource.field(self._.blocks, 'resource_group_name'),
      service_plan_id: resource.field(self._.blocks, 'service_plan_id'),
      site_config: resource.field(self._.blocks, 'site_config'),
      site_credential: resource.field(self._.blocks, 'site_credential'),
      sticky_settings: resource.field(self._.blocks, 'sticky_settings'),
      storage_account: resource.field(self._.blocks, 'storage_account'),
      tags: resource.field(self._.blocks, 'tags'),
      virtual_network_subnet_id: resource.field(self._.blocks, 'virtual_network_subnet_id'),
      webdeploy_publish_basic_authentication_enabled: resource.field(self._.blocks, 'webdeploy_publish_basic_authentication_enabled'),
    },
  },
  func: {
    normalise_resource_id(id): provider.func('normalise_resource_id', [id]),
    parse_resource_id(id): provider.func('parse_resource_id', [id]),
  },
};

local providerWithConfiguration = provider(null) + {
  withConfiguration(alias, block): provider(std.prune({
    alias: alias,
    ado_pipeline_service_connection_id: build.template(std.get(block, 'ado_pipeline_service_connection_id', null)),
    auxiliary_tenant_ids: build.template(std.get(block, 'auxiliary_tenant_ids', null)),
    client_certificate: build.template(std.get(block, 'client_certificate', null)),
    client_certificate_password: build.template(std.get(block, 'client_certificate_password', null)),
    client_certificate_path: build.template(std.get(block, 'client_certificate_path', null)),
    client_id: build.template(std.get(block, 'client_id', null)),
    client_id_file_path: build.template(std.get(block, 'client_id_file_path', null)),
    client_secret: build.template(std.get(block, 'client_secret', null)),
    client_secret_file_path: build.template(std.get(block, 'client_secret_file_path', null)),
    disable_correlation_request_id: build.template(std.get(block, 'disable_correlation_request_id', null)),
    disable_terraform_partner_id: build.template(std.get(block, 'disable_terraform_partner_id', null)),
    environment: build.template(std.get(block, 'environment', null)),
    metadata_host: build.template(std.get(block, 'metadata_host', null)),
    msi_endpoint: build.template(std.get(block, 'msi_endpoint', null)),
    oidc_request_token: build.template(std.get(block, 'oidc_request_token', null)),
    oidc_request_url: build.template(std.get(block, 'oidc_request_url', null)),
    oidc_token: build.template(std.get(block, 'oidc_token', null)),
    oidc_token_file_path: build.template(std.get(block, 'oidc_token_file_path', null)),
    partner_id: build.template(std.get(block, 'partner_id', null)),
    resource_provider_registrations: build.template(std.get(block, 'resource_provider_registrations', null)),
    resource_providers_to_register: build.template(std.get(block, 'resource_providers_to_register', null)),
    skip_provider_registration: build.template(std.get(block, 'skip_provider_registration', null)),
    storage_use_azuread: build.template(std.get(block, 'storage_use_azuread', null)),
    subscription_id: build.template(std.get(block, 'subscription_id', null)),
    tenant_id: build.template(std.get(block, 'tenant_id', null)),
    use_aks_workload_identity: build.template(std.get(block, 'use_aks_workload_identity', null)),
    use_cli: build.template(std.get(block, 'use_cli', null)),
    use_msi: build.template(std.get(block, 'use_msi', null)),
    use_oidc: build.template(std.get(block, 'use_oidc', null)),
  })),
};

providerWithConfiguration
