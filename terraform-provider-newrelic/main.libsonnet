local build = {
  expression(val):
    if std.type(val) == 'object' then
      if std.objectHas(val, '_')
      then
        if std.objectHas(val._, 'ref')
        then val._.ref
        else '"%s"' % [val._.str]
      else '{%s}' % [std.join(',', std.map(function(key) '%s:%s' % [self.expression(key), self.expression(val[key])], std.objectFields(val)))]
    else if std.type(val) == 'array' then '[%s]' % [std.join(',', std.map(function(element) self.expression(element), val))]
    else if std.type(val) == 'string' then '"%s"' % [val]
    else '"%s"' % [val],
  template(val):
    if std.type(val) == 'object' then
      if std.objectHas(val, '_')
      then
        if std.objectHas(val._, 'ref')
        then std.strReplace(self.string(val), '\n', '\\n')
        else val._.str
      else std.mapWithKey(function(key, value) self.template(value), val)
    else if std.type(val) == 'array' then std.map(function(element) self.template(element), val)
    else if std.type(val) == 'string' then std.strReplace(self.string(val), '\n', '\\n')
    else val,
  string(val):
    if std.type(val) == 'object' then
      if std.objectHas(val, '_')
      then
        if std.objectHas(val._, 'ref')
        then '${%s}' % [val._.ref]
        else val._.str
      else '${%s}' % [self.expression(val)]
    else if std.type(val) == 'array' then '${%s}' % [self.expression(val)]
    else if std.type(val) == 'string' then val
    else val,
  blocks(val):
    if std.type(val) == 'object'
    then
      if std.objectHas(val, '_')
      then
        if std.objectHas(val._, 'blocks')
        then val._.blocks
        else
          if std.objectHas(val._, 'block')
          then { [val._.ref]: val._.block }
          else {}
      else std.foldl(function(acc, val) std.mergePatch(acc, val), std.map(function(key) build.blocks(val[key]), std.objectFields(val)), {})
    else if std.type(val) == 'array'
    then std.foldl(function(acc, val) std.mergePatch(acc, val), std.map(function(element) build.blocks(element), val), {})
    else {},
};

local providerTemplate(provider, requirements, rawConfiguration, configuration) = {
  local providerRequirements = {
    ['terraform.required_providers.%s' % [provider]]: requirements,
  },
  local providerAlias = if configuration == null then null else std.get(configuration, 'alias', null),
  local providerConfiguration =
    if configuration == null then { _: { refBlock: {}, blocks: [] } } else {
      _: {
        local _ = self,
        ref: '%s.%s' % [provider, configuration.alias],
        refBlock: {
          provider: _.ref,
        },
        block: {
          provider: {
            [provider]: std.prune(configuration),
          },
        },
        blocks: build.blocks(rawConfiguration) + {
          [_.ref]: _.block,
        },
      },
    },
  blockType(blockType): {
    local blockTypePath = if blockType == 'resource' then [] else ['data'],
    resource(type, name): {
      local resourceType = std.substr(type, std.length(provider) + 1, std.length(type)),
      local resourcePath = blockTypePath + [type, name],
      _(rawBlock, block): {
        local _ = self,
        local metaBlock = {
          depends_on: build.template(std.get(rawBlock, 'depends_on', null)),
          count: build.template(std.get(rawBlock, 'count', null)),
          for_each: build.template(std.get(rawBlock, 'for_each', null)),
        },
        type: if std.objectHas(rawBlock, 'for_each') then 'map' else if std.objectHas(rawBlock, 'count') then 'list' else 'object',
        provider: provider,
        providerAlias: providerAlias,
        resourceType: resourceType,
        name: name,
        ref: std.join('.', resourcePath),
        block: {
          [blockType]: {
            [type]: {
              [name]: std.prune(providerConfiguration._.refBlock + metaBlock + block),
            },
          },
        },
        blocks: build.blocks([providerConfiguration] + [rawBlock]) + providerRequirements + {
          [_.ref]: _.block,
        },
      },
      field(blocks, fieldName): {
        local fieldPath = resourcePath + [fieldName],
        _: {
          ref: std.join('.', fieldPath),
          blocks: blocks,
        },
      },
    },
  },
  func(name, parameters=[]): {
    local parameterString = std.join(', ', [build.expression(parameter) for parameter in parameters]),
    _: {
      ref: 'provider::%s::%s(%s)' % [provider, name, parameterString],
      blocks: build.blocks([providerConfiguration] + [parameters]) + providerRequirements,
    },
  },
};

local provider(rawConfiguration, configuration) = {
  local requirements = {
    source: 'registry.terraform.io/newrelic/newrelic',
    version: '3.60.2',
  },
  local provider = providerTemplate('newrelic', requirements, rawConfiguration, configuration),
  resource: {
    local blockType = provider.blockType('resource'),
    account_management(name, block): {
      local resource = blockType.resource('newrelic_account_management', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        region: build.template(block.region),
      }),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      region: resource.field(self._.blocks, 'region'),
    },
    alert_channel(name, block): {
      local resource = blockType.resource('newrelic_alert_channel', name),
      _: resource._(block, {
        account_id: build.template(std.get(block, 'account_id', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        type: build.template(block.type),
      }),
      account_id: resource.field(self._.blocks, 'account_id'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      type: resource.field(self._.blocks, 'type'),
    },
    alert_condition(name, block): {
      local resource = blockType.resource('newrelic_alert_condition', name),
      _: resource._(block, {
        condition_scope: build.template(std.get(block, 'condition_scope', null)),
        enabled: build.template(std.get(block, 'enabled', null)),
        entities: build.template(block.entities),
        entity_guid: build.template(std.get(block, 'entity_guid', null)),
        gc_metric: build.template(std.get(block, 'gc_metric', null)),
        id: build.template(std.get(block, 'id', null)),
        metric: build.template(block.metric),
        name: build.template(block.name),
        policy_id: build.template(block.policy_id),
        runbook_url: build.template(std.get(block, 'runbook_url', null)),
        type: build.template(block.type),
        user_defined_metric: build.template(std.get(block, 'user_defined_metric', null)),
        user_defined_value_function: build.template(std.get(block, 'user_defined_value_function', null)),
        violation_close_timer: build.template(std.get(block, 'violation_close_timer', null)),
      }),
      condition_scope: resource.field(self._.blocks, 'condition_scope'),
      enabled: resource.field(self._.blocks, 'enabled'),
      entities: resource.field(self._.blocks, 'entities'),
      entity_guid: resource.field(self._.blocks, 'entity_guid'),
      gc_metric: resource.field(self._.blocks, 'gc_metric'),
      id: resource.field(self._.blocks, 'id'),
      metric: resource.field(self._.blocks, 'metric'),
      name: resource.field(self._.blocks, 'name'),
      policy_id: resource.field(self._.blocks, 'policy_id'),
      runbook_url: resource.field(self._.blocks, 'runbook_url'),
      type: resource.field(self._.blocks, 'type'),
      user_defined_metric: resource.field(self._.blocks, 'user_defined_metric'),
      user_defined_value_function: resource.field(self._.blocks, 'user_defined_value_function'),
      violation_close_timer: resource.field(self._.blocks, 'violation_close_timer'),
    },
    alert_muting_rule(name, block): {
      local resource = blockType.resource('newrelic_alert_muting_rule', name),
      _: resource._(block, {
        account_id: build.template(std.get(block, 'account_id', null)),
        action_on_muting_rule_window_ended: build.template(std.get(block, 'action_on_muting_rule_window_ended', null)),
        description: build.template(std.get(block, 'description', null)),
        enabled: build.template(block.enabled),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
      }),
      account_id: resource.field(self._.blocks, 'account_id'),
      action_on_muting_rule_window_ended: resource.field(self._.blocks, 'action_on_muting_rule_window_ended'),
      description: resource.field(self._.blocks, 'description'),
      enabled: resource.field(self._.blocks, 'enabled'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
    },
    alert_policy(name, block): {
      local resource = blockType.resource('newrelic_alert_policy', name),
      _: resource._(block, {
        account_id: build.template(std.get(block, 'account_id', null)),
        channel_ids: build.template(std.get(block, 'channel_ids', null)),
        id: build.template(std.get(block, 'id', null)),
        incident_preference: build.template(std.get(block, 'incident_preference', null)),
        name: build.template(block.name),
      }),
      account_id: resource.field(self._.blocks, 'account_id'),
      channel_ids: resource.field(self._.blocks, 'channel_ids'),
      id: resource.field(self._.blocks, 'id'),
      incident_preference: resource.field(self._.blocks, 'incident_preference'),
      name: resource.field(self._.blocks, 'name'),
    },
    alert_policy_channel(name, block): {
      local resource = blockType.resource('newrelic_alert_policy_channel', name),
      _: resource._(block, {
        account_id: build.template(std.get(block, 'account_id', null)),
        channel_ids: build.template(block.channel_ids),
        id: build.template(std.get(block, 'id', null)),
        policy_id: build.template(block.policy_id),
      }),
      account_id: resource.field(self._.blocks, 'account_id'),
      channel_ids: resource.field(self._.blocks, 'channel_ids'),
      id: resource.field(self._.blocks, 'id'),
      policy_id: resource.field(self._.blocks, 'policy_id'),
    },
    api_access_key(name, block): {
      local resource = blockType.resource('newrelic_api_access_key', name),
      _: resource._(block, {
        account_id: build.template(block.account_id),
        id: build.template(std.get(block, 'id', null)),
        ingest_type: build.template(std.get(block, 'ingest_type', null)),
        key: build.template(std.get(block, 'key', null)),
        key_type: build.template(block.key_type),
        name: build.template(std.get(block, 'name', null)),
        notes: build.template(std.get(block, 'notes', null)),
        user_id: build.template(std.get(block, 'user_id', null)),
      }),
      account_id: resource.field(self._.blocks, 'account_id'),
      id: resource.field(self._.blocks, 'id'),
      ingest_type: resource.field(self._.blocks, 'ingest_type'),
      key: resource.field(self._.blocks, 'key'),
      key_type: resource.field(self._.blocks, 'key_type'),
      name: resource.field(self._.blocks, 'name'),
      notes: resource.field(self._.blocks, 'notes'),
      user_id: resource.field(self._.blocks, 'user_id'),
    },
    application_settings(name, block): {
      local resource = blockType.resource('newrelic_application_settings', name),
      _: resource._(block, {
        app_apdex_threshold: build.template(std.get(block, 'app_apdex_threshold', null)),
        enable_real_user_monitoring: build.template(std.get(block, 'enable_real_user_monitoring', null)),
        enable_slow_sql: build.template(std.get(block, 'enable_slow_sql', null)),
        enable_thread_profiler: build.template(std.get(block, 'enable_thread_profiler', null)),
        end_user_apdex_threshold: build.template(std.get(block, 'end_user_apdex_threshold', null)),
        guid: build.template(std.get(block, 'guid', null)),
        id: build.template(std.get(block, 'id', null)),
        is_imported: build.template(std.get(block, 'is_imported', null)),
        name: build.template(std.get(block, 'name', null)),
        tracer_type: build.template(std.get(block, 'tracer_type', null)),
        use_server_side_config: build.template(std.get(block, 'use_server_side_config', null)),
      }),
      app_apdex_threshold: resource.field(self._.blocks, 'app_apdex_threshold'),
      enable_real_user_monitoring: resource.field(self._.blocks, 'enable_real_user_monitoring'),
      enable_slow_sql: resource.field(self._.blocks, 'enable_slow_sql'),
      enable_thread_profiler: resource.field(self._.blocks, 'enable_thread_profiler'),
      end_user_apdex_threshold: resource.field(self._.blocks, 'end_user_apdex_threshold'),
      guid: resource.field(self._.blocks, 'guid'),
      id: resource.field(self._.blocks, 'id'),
      is_imported: resource.field(self._.blocks, 'is_imported'),
      name: resource.field(self._.blocks, 'name'),
      tracer_type: resource.field(self._.blocks, 'tracer_type'),
      use_server_side_config: resource.field(self._.blocks, 'use_server_side_config'),
    },
    browser_application(name, block): {
      local resource = blockType.resource('newrelic_browser_application', name),
      _: resource._(block, {
        account_id: build.template(std.get(block, 'account_id', null)),
        application_id: build.template(std.get(block, 'application_id', null)),
        cookies_enabled: build.template(std.get(block, 'cookies_enabled', null)),
        distributed_tracing_enabled: build.template(std.get(block, 'distributed_tracing_enabled', null)),
        guid: build.template(std.get(block, 'guid', null)),
        id: build.template(std.get(block, 'id', null)),
        js_config: build.template(std.get(block, 'js_config', null)),
        loader_type: build.template(std.get(block, 'loader_type', null)),
        name: build.template(block.name),
      }),
      account_id: resource.field(self._.blocks, 'account_id'),
      application_id: resource.field(self._.blocks, 'application_id'),
      cookies_enabled: resource.field(self._.blocks, 'cookies_enabled'),
      distributed_tracing_enabled: resource.field(self._.blocks, 'distributed_tracing_enabled'),
      guid: resource.field(self._.blocks, 'guid'),
      id: resource.field(self._.blocks, 'id'),
      js_config: resource.field(self._.blocks, 'js_config'),
      loader_type: resource.field(self._.blocks, 'loader_type'),
      name: resource.field(self._.blocks, 'name'),
    },
    cloud_aws_govcloud_integrations(name, block): {
      local resource = blockType.resource('newrelic_cloud_aws_govcloud_integrations', name),
      _: resource._(block, {
        account_id: build.template(std.get(block, 'account_id', null)),
        id: build.template(std.get(block, 'id', null)),
        linked_account_id: build.template(block.linked_account_id),
      }),
      account_id: resource.field(self._.blocks, 'account_id'),
      id: resource.field(self._.blocks, 'id'),
      linked_account_id: resource.field(self._.blocks, 'linked_account_id'),
    },
    cloud_aws_govcloud_link_account(name, block): {
      local resource = blockType.resource('newrelic_cloud_aws_govcloud_link_account', name),
      _: resource._(block, {
        account_id: build.template(std.get(block, 'account_id', null)),
        arn: build.template(block.arn),
        id: build.template(std.get(block, 'id', null)),
        metric_collection_mode: build.template(std.get(block, 'metric_collection_mode', null)),
        name: build.template(block.name),
      }),
      account_id: resource.field(self._.blocks, 'account_id'),
      arn: resource.field(self._.blocks, 'arn'),
      id: resource.field(self._.blocks, 'id'),
      metric_collection_mode: resource.field(self._.blocks, 'metric_collection_mode'),
      name: resource.field(self._.blocks, 'name'),
    },
    cloud_aws_integrations(name, block): {
      local resource = blockType.resource('newrelic_cloud_aws_integrations', name),
      _: resource._(block, {
        account_id: build.template(std.get(block, 'account_id', null)),
        id: build.template(std.get(block, 'id', null)),
        linked_account_id: build.template(block.linked_account_id),
      }),
      account_id: resource.field(self._.blocks, 'account_id'),
      id: resource.field(self._.blocks, 'id'),
      linked_account_id: resource.field(self._.blocks, 'linked_account_id'),
    },
    cloud_aws_link_account(name, block): {
      local resource = blockType.resource('newrelic_cloud_aws_link_account', name),
      _: resource._(block, {
        account_id: build.template(std.get(block, 'account_id', null)),
        arn: build.template(block.arn),
        id: build.template(std.get(block, 'id', null)),
        metric_collection_mode: build.template(std.get(block, 'metric_collection_mode', null)),
        name: build.template(block.name),
      }),
      account_id: resource.field(self._.blocks, 'account_id'),
      arn: resource.field(self._.blocks, 'arn'),
      id: resource.field(self._.blocks, 'id'),
      metric_collection_mode: resource.field(self._.blocks, 'metric_collection_mode'),
      name: resource.field(self._.blocks, 'name'),
    },
    cloud_azure_integrations(name, block): {
      local resource = blockType.resource('newrelic_cloud_azure_integrations', name),
      _: resource._(block, {
        account_id: build.template(std.get(block, 'account_id', null)),
        id: build.template(std.get(block, 'id', null)),
        linked_account_id: build.template(block.linked_account_id),
      }),
      account_id: resource.field(self._.blocks, 'account_id'),
      id: resource.field(self._.blocks, 'id'),
      linked_account_id: resource.field(self._.blocks, 'linked_account_id'),
    },
    cloud_azure_link_account(name, block): {
      local resource = blockType.resource('newrelic_cloud_azure_link_account', name),
      _: resource._(block, {
        account_id: build.template(std.get(block, 'account_id', null)),
        application_id: build.template(block.application_id),
        client_secret: build.template(block.client_secret),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        subscription_id: build.template(block.subscription_id),
        tenant_id: build.template(block.tenant_id),
      }),
      account_id: resource.field(self._.blocks, 'account_id'),
      application_id: resource.field(self._.blocks, 'application_id'),
      client_secret: resource.field(self._.blocks, 'client_secret'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      subscription_id: resource.field(self._.blocks, 'subscription_id'),
      tenant_id: resource.field(self._.blocks, 'tenant_id'),
    },
    cloud_gcp_integrations(name, block): {
      local resource = blockType.resource('newrelic_cloud_gcp_integrations', name),
      _: resource._(block, {
        account_id: build.template(std.get(block, 'account_id', null)),
        id: build.template(std.get(block, 'id', null)),
        linked_account_id: build.template(block.linked_account_id),
      }),
      account_id: resource.field(self._.blocks, 'account_id'),
      id: resource.field(self._.blocks, 'id'),
      linked_account_id: resource.field(self._.blocks, 'linked_account_id'),
    },
    cloud_gcp_link_account(name, block): {
      local resource = blockType.resource('newrelic_cloud_gcp_link_account', name),
      _: resource._(block, {
        account_id: build.template(std.get(block, 'account_id', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        project_id: build.template(block.project_id),
      }),
      account_id: resource.field(self._.blocks, 'account_id'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      project_id: resource.field(self._.blocks, 'project_id'),
    },
    data_partition_rule(name, block): {
      local resource = blockType.resource('newrelic_data_partition_rule', name),
      _: resource._(block, {
        account_id: build.template(std.get(block, 'account_id', null)),
        deleted: build.template(std.get(block, 'deleted', null)),
        description: build.template(std.get(block, 'description', null)),
        enabled: build.template(block.enabled),
        id: build.template(std.get(block, 'id', null)),
        nrql: build.template(block.nrql),
        retention_policy: build.template(block.retention_policy),
        target_data_partition: build.template(block.target_data_partition),
      }),
      account_id: resource.field(self._.blocks, 'account_id'),
      deleted: resource.field(self._.blocks, 'deleted'),
      description: resource.field(self._.blocks, 'description'),
      enabled: resource.field(self._.blocks, 'enabled'),
      id: resource.field(self._.blocks, 'id'),
      nrql: resource.field(self._.blocks, 'nrql'),
      retention_policy: resource.field(self._.blocks, 'retention_policy'),
      target_data_partition: resource.field(self._.blocks, 'target_data_partition'),
    },
    entity_tags(name, block): {
      local resource = blockType.resource('newrelic_entity_tags', name),
      _: resource._(block, {
        guid: build.template(block.guid),
        id: build.template(std.get(block, 'id', null)),
      }),
      guid: resource.field(self._.blocks, 'guid'),
      id: resource.field(self._.blocks, 'id'),
    },
    events_to_metrics_rule(name, block): {
      local resource = blockType.resource('newrelic_events_to_metrics_rule', name),
      _: resource._(block, {
        account_id: build.template(std.get(block, 'account_id', null)),
        description: build.template(std.get(block, 'description', null)),
        enabled: build.template(std.get(block, 'enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        nrql: build.template(block.nrql),
        rule_id: build.template(std.get(block, 'rule_id', null)),
      }),
      account_id: resource.field(self._.blocks, 'account_id'),
      description: resource.field(self._.blocks, 'description'),
      enabled: resource.field(self._.blocks, 'enabled'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      nrql: resource.field(self._.blocks, 'nrql'),
      rule_id: resource.field(self._.blocks, 'rule_id'),
    },
    group(name, block): {
      local resource = blockType.resource('newrelic_group', name),
      _: resource._(block, {
        authentication_domain_id: build.template(block.authentication_domain_id),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        user_ids: build.template(std.get(block, 'user_ids', null)),
      }),
      authentication_domain_id: resource.field(self._.blocks, 'authentication_domain_id'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      user_ids: resource.field(self._.blocks, 'user_ids'),
    },
    infra_alert_condition(name, block): {
      local resource = blockType.resource('newrelic_infra_alert_condition', name),
      _: resource._(block, {
        comparison: build.template(std.get(block, 'comparison', null)),
        created_at: build.template(std.get(block, 'created_at', null)),
        description: build.template(std.get(block, 'description', null)),
        enabled: build.template(std.get(block, 'enabled', null)),
        entity_guid: build.template(std.get(block, 'entity_guid', null)),
        event: build.template(std.get(block, 'event', null)),
        id: build.template(std.get(block, 'id', null)),
        integration_provider: build.template(std.get(block, 'integration_provider', null)),
        name: build.template(block.name),
        policy_id: build.template(block.policy_id),
        process_where: build.template(std.get(block, 'process_where', null)),
        runbook_url: build.template(std.get(block, 'runbook_url', null)),
        select: build.template(std.get(block, 'select', null)),
        type: build.template(block.type),
        updated_at: build.template(std.get(block, 'updated_at', null)),
        violation_close_timer: build.template(std.get(block, 'violation_close_timer', null)),
        where: build.template(std.get(block, 'where', null)),
      }),
      comparison: resource.field(self._.blocks, 'comparison'),
      created_at: resource.field(self._.blocks, 'created_at'),
      description: resource.field(self._.blocks, 'description'),
      enabled: resource.field(self._.blocks, 'enabled'),
      entity_guid: resource.field(self._.blocks, 'entity_guid'),
      event: resource.field(self._.blocks, 'event'),
      id: resource.field(self._.blocks, 'id'),
      integration_provider: resource.field(self._.blocks, 'integration_provider'),
      name: resource.field(self._.blocks, 'name'),
      policy_id: resource.field(self._.blocks, 'policy_id'),
      process_where: resource.field(self._.blocks, 'process_where'),
      runbook_url: resource.field(self._.blocks, 'runbook_url'),
      select: resource.field(self._.blocks, 'select'),
      type: resource.field(self._.blocks, 'type'),
      updated_at: resource.field(self._.blocks, 'updated_at'),
      violation_close_timer: resource.field(self._.blocks, 'violation_close_timer'),
      where: resource.field(self._.blocks, 'where'),
    },
    insights_event(name, block): {
      local resource = blockType.resource('newrelic_insights_event', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
    },
    key_transaction(name, block): {
      local resource = blockType.resource('newrelic_key_transaction', name),
      _: resource._(block, {
        apdex_index: build.template(block.apdex_index),
        application_guid: build.template(block.application_guid),
        browser_apdex_target: build.template(block.browser_apdex_target),
        domain: build.template(std.get(block, 'domain', null)),
        id: build.template(std.get(block, 'id', null)),
        metric_name: build.template(block.metric_name),
        name: build.template(block.name),
        type: build.template(std.get(block, 'type', null)),
      }),
      apdex_index: resource.field(self._.blocks, 'apdex_index'),
      application_guid: resource.field(self._.blocks, 'application_guid'),
      browser_apdex_target: resource.field(self._.blocks, 'browser_apdex_target'),
      domain: resource.field(self._.blocks, 'domain'),
      id: resource.field(self._.blocks, 'id'),
      metric_name: resource.field(self._.blocks, 'metric_name'),
      name: resource.field(self._.blocks, 'name'),
      type: resource.field(self._.blocks, 'type'),
    },
    log_parsing_rule(name, block): {
      local resource = blockType.resource('newrelic_log_parsing_rule', name),
      _: resource._(block, {
        account_id: build.template(std.get(block, 'account_id', null)),
        attribute: build.template(std.get(block, 'attribute', null)),
        deleted: build.template(std.get(block, 'deleted', null)),
        enabled: build.template(block.enabled),
        grok: build.template(block.grok),
        id: build.template(std.get(block, 'id', null)),
        lucene: build.template(block.lucene),
        matched: build.template(std.get(block, 'matched', null)),
        name: build.template(block.name),
        nrql: build.template(block.nrql),
      }),
      account_id: resource.field(self._.blocks, 'account_id'),
      attribute: resource.field(self._.blocks, 'attribute'),
      deleted: resource.field(self._.blocks, 'deleted'),
      enabled: resource.field(self._.blocks, 'enabled'),
      grok: resource.field(self._.blocks, 'grok'),
      id: resource.field(self._.blocks, 'id'),
      lucene: resource.field(self._.blocks, 'lucene'),
      matched: resource.field(self._.blocks, 'matched'),
      name: resource.field(self._.blocks, 'name'),
      nrql: resource.field(self._.blocks, 'nrql'),
    },
    monitor_downtime(name, block): {
      local resource = blockType.resource('newrelic_monitor_downtime', name),
      _: resource._(block, {
        account_id: build.template(std.get(block, 'account_id', null)),
        end_time: build.template(block.end_time),
        id: build.template(std.get(block, 'id', null)),
        maintenance_days: build.template(std.get(block, 'maintenance_days', null)),
        mode: build.template(block.mode),
        monitor_guids: build.template(std.get(block, 'monitor_guids', null)),
        name: build.template(block.name),
        start_time: build.template(block.start_time),
        time_zone: build.template(block.time_zone),
      }),
      account_id: resource.field(self._.blocks, 'account_id'),
      end_time: resource.field(self._.blocks, 'end_time'),
      id: resource.field(self._.blocks, 'id'),
      maintenance_days: resource.field(self._.blocks, 'maintenance_days'),
      mode: resource.field(self._.blocks, 'mode'),
      monitor_guids: resource.field(self._.blocks, 'monitor_guids'),
      name: resource.field(self._.blocks, 'name'),
      start_time: resource.field(self._.blocks, 'start_time'),
      time_zone: resource.field(self._.blocks, 'time_zone'),
    },
    notification_channel(name, block): {
      local resource = blockType.resource('newrelic_notification_channel', name),
      _: resource._(block, {
        account_id: build.template(std.get(block, 'account_id', null)),
        active: build.template(std.get(block, 'active', null)),
        destination_id: build.template(block.destination_id),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        product: build.template(block.product),
        status: build.template(std.get(block, 'status', null)),
        type: build.template(block.type),
      }),
      account_id: resource.field(self._.blocks, 'account_id'),
      active: resource.field(self._.blocks, 'active'),
      destination_id: resource.field(self._.blocks, 'destination_id'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      product: resource.field(self._.blocks, 'product'),
      status: resource.field(self._.blocks, 'status'),
      type: resource.field(self._.blocks, 'type'),
    },
    notification_destination(name, block): {
      local resource = blockType.resource('newrelic_notification_destination', name),
      _: resource._(block, {
        account_id: build.template(std.get(block, 'account_id', null)),
        active: build.template(std.get(block, 'active', null)),
        guid: build.template(std.get(block, 'guid', null)),
        id: build.template(std.get(block, 'id', null)),
        last_sent: build.template(std.get(block, 'last_sent', null)),
        name: build.template(block.name),
        status: build.template(std.get(block, 'status', null)),
        type: build.template(block.type),
      }),
      account_id: resource.field(self._.blocks, 'account_id'),
      active: resource.field(self._.blocks, 'active'),
      guid: resource.field(self._.blocks, 'guid'),
      id: resource.field(self._.blocks, 'id'),
      last_sent: resource.field(self._.blocks, 'last_sent'),
      name: resource.field(self._.blocks, 'name'),
      status: resource.field(self._.blocks, 'status'),
      type: resource.field(self._.blocks, 'type'),
    },
    nrql_alert_condition(name, block): {
      local resource = blockType.resource('newrelic_nrql_alert_condition', name),
      _: resource._(block, {
        account_id: build.template(std.get(block, 'account_id', null)),
        aggregation_delay: build.template(std.get(block, 'aggregation_delay', null)),
        aggregation_method: build.template(std.get(block, 'aggregation_method', null)),
        aggregation_timer: build.template(std.get(block, 'aggregation_timer', null)),
        aggregation_window: build.template(std.get(block, 'aggregation_window', null)),
        baseline_direction: build.template(std.get(block, 'baseline_direction', null)),
        close_violations_on_expiration: build.template(std.get(block, 'close_violations_on_expiration', null)),
        description: build.template(std.get(block, 'description', null)),
        enabled: build.template(std.get(block, 'enabled', null)),
        entity_guid: build.template(std.get(block, 'entity_guid', null)),
        evaluation_delay: build.template(std.get(block, 'evaluation_delay', null)),
        expiration_duration: build.template(std.get(block, 'expiration_duration', null)),
        fill_option: build.template(std.get(block, 'fill_option', null)),
        fill_value: build.template(std.get(block, 'fill_value', null)),
        id: build.template(std.get(block, 'id', null)),
        ignore_on_expected_termination: build.template(std.get(block, 'ignore_on_expected_termination', null)),
        name: build.template(block.name),
        open_violation_on_expiration: build.template(std.get(block, 'open_violation_on_expiration', null)),
        policy_id: build.template(block.policy_id),
        runbook_url: build.template(std.get(block, 'runbook_url', null)),
        slide_by: build.template(std.get(block, 'slide_by', null)),
        title_template: build.template(std.get(block, 'title_template', null)),
        type: build.template(std.get(block, 'type', null)),
        violation_time_limit: build.template(std.get(block, 'violation_time_limit', null)),
        violation_time_limit_seconds: build.template(std.get(block, 'violation_time_limit_seconds', null)),
      }),
      account_id: resource.field(self._.blocks, 'account_id'),
      aggregation_delay: resource.field(self._.blocks, 'aggregation_delay'),
      aggregation_method: resource.field(self._.blocks, 'aggregation_method'),
      aggregation_timer: resource.field(self._.blocks, 'aggregation_timer'),
      aggregation_window: resource.field(self._.blocks, 'aggregation_window'),
      baseline_direction: resource.field(self._.blocks, 'baseline_direction'),
      close_violations_on_expiration: resource.field(self._.blocks, 'close_violations_on_expiration'),
      description: resource.field(self._.blocks, 'description'),
      enabled: resource.field(self._.blocks, 'enabled'),
      entity_guid: resource.field(self._.blocks, 'entity_guid'),
      evaluation_delay: resource.field(self._.blocks, 'evaluation_delay'),
      expiration_duration: resource.field(self._.blocks, 'expiration_duration'),
      fill_option: resource.field(self._.blocks, 'fill_option'),
      fill_value: resource.field(self._.blocks, 'fill_value'),
      id: resource.field(self._.blocks, 'id'),
      ignore_on_expected_termination: resource.field(self._.blocks, 'ignore_on_expected_termination'),
      name: resource.field(self._.blocks, 'name'),
      open_violation_on_expiration: resource.field(self._.blocks, 'open_violation_on_expiration'),
      policy_id: resource.field(self._.blocks, 'policy_id'),
      runbook_url: resource.field(self._.blocks, 'runbook_url'),
      slide_by: resource.field(self._.blocks, 'slide_by'),
      title_template: resource.field(self._.blocks, 'title_template'),
      type: resource.field(self._.blocks, 'type'),
      violation_time_limit: resource.field(self._.blocks, 'violation_time_limit'),
      violation_time_limit_seconds: resource.field(self._.blocks, 'violation_time_limit_seconds'),
    },
    nrql_drop_rule(name, block): {
      local resource = blockType.resource('newrelic_nrql_drop_rule', name),
      _: resource._(block, {
        account_id: build.template(std.get(block, 'account_id', null)),
        action: build.template(block.action),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        nrql: build.template(block.nrql),
        rule_id: build.template(std.get(block, 'rule_id', null)),
      }),
      account_id: resource.field(self._.blocks, 'account_id'),
      action: resource.field(self._.blocks, 'action'),
      description: resource.field(self._.blocks, 'description'),
      id: resource.field(self._.blocks, 'id'),
      nrql: resource.field(self._.blocks, 'nrql'),
      rule_id: resource.field(self._.blocks, 'rule_id'),
    },
    obfuscation_expression(name, block): {
      local resource = blockType.resource('newrelic_obfuscation_expression', name),
      _: resource._(block, {
        account_id: build.template(std.get(block, 'account_id', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        regex: build.template(block.regex),
      }),
      account_id: resource.field(self._.blocks, 'account_id'),
      description: resource.field(self._.blocks, 'description'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      regex: resource.field(self._.blocks, 'regex'),
    },
    obfuscation_rule(name, block): {
      local resource = blockType.resource('newrelic_obfuscation_rule', name),
      _: resource._(block, {
        account_id: build.template(std.get(block, 'account_id', null)),
        description: build.template(std.get(block, 'description', null)),
        enabled: build.template(block.enabled),
        filter: build.template(block.filter),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
      }),
      account_id: resource.field(self._.blocks, 'account_id'),
      description: resource.field(self._.blocks, 'description'),
      enabled: resource.field(self._.blocks, 'enabled'),
      filter: resource.field(self._.blocks, 'filter'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
    },
    one_dashboard(name, block): {
      local resource = blockType.resource('newrelic_one_dashboard', name),
      _: resource._(block, {
        account_id: build.template(std.get(block, 'account_id', null)),
        description: build.template(std.get(block, 'description', null)),
        guid: build.template(std.get(block, 'guid', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        permalink: build.template(std.get(block, 'permalink', null)),
        permissions: build.template(std.get(block, 'permissions', null)),
      }),
      account_id: resource.field(self._.blocks, 'account_id'),
      description: resource.field(self._.blocks, 'description'),
      guid: resource.field(self._.blocks, 'guid'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      permalink: resource.field(self._.blocks, 'permalink'),
      permissions: resource.field(self._.blocks, 'permissions'),
    },
    one_dashboard_json(name, block): {
      local resource = blockType.resource('newrelic_one_dashboard_json', name),
      _: resource._(block, {
        account_id: build.template(std.get(block, 'account_id', null)),
        guid: build.template(std.get(block, 'guid', null)),
        id: build.template(std.get(block, 'id', null)),
        json: build.template(block.json),
        permalink: build.template(std.get(block, 'permalink', null)),
        updated_at: build.template(std.get(block, 'updated_at', null)),
      }),
      account_id: resource.field(self._.blocks, 'account_id'),
      guid: resource.field(self._.blocks, 'guid'),
      id: resource.field(self._.blocks, 'id'),
      json: resource.field(self._.blocks, 'json'),
      permalink: resource.field(self._.blocks, 'permalink'),
      updated_at: resource.field(self._.blocks, 'updated_at'),
    },
    one_dashboard_raw(name, block): {
      local resource = blockType.resource('newrelic_one_dashboard_raw', name),
      _: resource._(block, {
        account_id: build.template(std.get(block, 'account_id', null)),
        description: build.template(std.get(block, 'description', null)),
        guid: build.template(std.get(block, 'guid', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        permalink: build.template(std.get(block, 'permalink', null)),
        permissions: build.template(std.get(block, 'permissions', null)),
      }),
      account_id: resource.field(self._.blocks, 'account_id'),
      description: resource.field(self._.blocks, 'description'),
      guid: resource.field(self._.blocks, 'guid'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      permalink: resource.field(self._.blocks, 'permalink'),
      permissions: resource.field(self._.blocks, 'permissions'),
    },
    service_level(name, block): {
      local resource = blockType.resource('newrelic_service_level', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        guid: build.template(block.guid),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        sli_guid: build.template(std.get(block, 'sli_guid', null)),
        sli_id: build.template(std.get(block, 'sli_id', null)),
      }),
      description: resource.field(self._.blocks, 'description'),
      guid: resource.field(self._.blocks, 'guid'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      sli_guid: resource.field(self._.blocks, 'sli_guid'),
      sli_id: resource.field(self._.blocks, 'sli_id'),
    },
    synthetics_alert_condition(name, block): {
      local resource = blockType.resource('newrelic_synthetics_alert_condition', name),
      _: resource._(block, {
        enabled: build.template(std.get(block, 'enabled', null)),
        entity_guid: build.template(std.get(block, 'entity_guid', null)),
        id: build.template(std.get(block, 'id', null)),
        monitor_id: build.template(block.monitor_id),
        name: build.template(block.name),
        policy_id: build.template(block.policy_id),
        runbook_url: build.template(std.get(block, 'runbook_url', null)),
      }),
      enabled: resource.field(self._.blocks, 'enabled'),
      entity_guid: resource.field(self._.blocks, 'entity_guid'),
      id: resource.field(self._.blocks, 'id'),
      monitor_id: resource.field(self._.blocks, 'monitor_id'),
      name: resource.field(self._.blocks, 'name'),
      policy_id: resource.field(self._.blocks, 'policy_id'),
      runbook_url: resource.field(self._.blocks, 'runbook_url'),
    },
    synthetics_broken_links_monitor(name, block): {
      local resource = blockType.resource('newrelic_synthetics_broken_links_monitor', name),
      _: resource._(block, {
        account_id: build.template(std.get(block, 'account_id', null)),
        guid: build.template(std.get(block, 'guid', null)),
        id: build.template(std.get(block, 'id', null)),
        locations_private: build.template(std.get(block, 'locations_private', null)),
        locations_public: build.template(std.get(block, 'locations_public', null)),
        monitor_id: build.template(std.get(block, 'monitor_id', null)),
        name: build.template(block.name),
        period: build.template(block.period),
        period_in_minutes: build.template(std.get(block, 'period_in_minutes', null)),
        runtime_type: build.template(std.get(block, 'runtime_type', null)),
        runtime_type_version: build.template(std.get(block, 'runtime_type_version', null)),
        status: build.template(block.status),
        uri: build.template(block.uri),
        use_unsupported_legacy_runtime: build.template(std.get(block, 'use_unsupported_legacy_runtime', null)),
      }),
      account_id: resource.field(self._.blocks, 'account_id'),
      guid: resource.field(self._.blocks, 'guid'),
      id: resource.field(self._.blocks, 'id'),
      locations_private: resource.field(self._.blocks, 'locations_private'),
      locations_public: resource.field(self._.blocks, 'locations_public'),
      monitor_id: resource.field(self._.blocks, 'monitor_id'),
      name: resource.field(self._.blocks, 'name'),
      period: resource.field(self._.blocks, 'period'),
      period_in_minutes: resource.field(self._.blocks, 'period_in_minutes'),
      runtime_type: resource.field(self._.blocks, 'runtime_type'),
      runtime_type_version: resource.field(self._.blocks, 'runtime_type_version'),
      status: resource.field(self._.blocks, 'status'),
      uri: resource.field(self._.blocks, 'uri'),
      use_unsupported_legacy_runtime: resource.field(self._.blocks, 'use_unsupported_legacy_runtime'),
    },
    synthetics_cert_check_monitor(name, block): {
      local resource = blockType.resource('newrelic_synthetics_cert_check_monitor', name),
      _: resource._(block, {
        account_id: build.template(std.get(block, 'account_id', null)),
        certificate_expiration: build.template(block.certificate_expiration),
        domain: build.template(block.domain),
        id: build.template(std.get(block, 'id', null)),
        locations_private: build.template(std.get(block, 'locations_private', null)),
        locations_public: build.template(std.get(block, 'locations_public', null)),
        monitor_id: build.template(std.get(block, 'monitor_id', null)),
        name: build.template(block.name),
        period: build.template(block.period),
        period_in_minutes: build.template(std.get(block, 'period_in_minutes', null)),
        runtime_type: build.template(std.get(block, 'runtime_type', null)),
        runtime_type_version: build.template(std.get(block, 'runtime_type_version', null)),
        status: build.template(block.status),
        use_unsupported_legacy_runtime: build.template(std.get(block, 'use_unsupported_legacy_runtime', null)),
      }),
      account_id: resource.field(self._.blocks, 'account_id'),
      certificate_expiration: resource.field(self._.blocks, 'certificate_expiration'),
      domain: resource.field(self._.blocks, 'domain'),
      id: resource.field(self._.blocks, 'id'),
      locations_private: resource.field(self._.blocks, 'locations_private'),
      locations_public: resource.field(self._.blocks, 'locations_public'),
      monitor_id: resource.field(self._.blocks, 'monitor_id'),
      name: resource.field(self._.blocks, 'name'),
      period: resource.field(self._.blocks, 'period'),
      period_in_minutes: resource.field(self._.blocks, 'period_in_minutes'),
      runtime_type: resource.field(self._.blocks, 'runtime_type'),
      runtime_type_version: resource.field(self._.blocks, 'runtime_type_version'),
      status: resource.field(self._.blocks, 'status'),
      use_unsupported_legacy_runtime: resource.field(self._.blocks, 'use_unsupported_legacy_runtime'),
    },
    synthetics_monitor(name, block): {
      local resource = blockType.resource('newrelic_synthetics_monitor', name),
      _: resource._(block, {
        account_id: build.template(std.get(block, 'account_id', null)),
        browsers: build.template(std.get(block, 'browsers', null)),
        bypass_head_request: build.template(std.get(block, 'bypass_head_request', null)),
        device_orientation: build.template(std.get(block, 'device_orientation', null)),
        device_type: build.template(std.get(block, 'device_type', null)),
        devices: build.template(std.get(block, 'devices', null)),
        enable_screenshot_on_failure_and_script: build.template(std.get(block, 'enable_screenshot_on_failure_and_script', null)),
        id: build.template(std.get(block, 'id', null)),
        locations_private: build.template(std.get(block, 'locations_private', null)),
        locations_public: build.template(std.get(block, 'locations_public', null)),
        monitor_id: build.template(std.get(block, 'monitor_id', null)),
        name: build.template(block.name),
        period: build.template(std.get(block, 'period', null)),
        period_in_minutes: build.template(std.get(block, 'period_in_minutes', null)),
        runtime_type: build.template(std.get(block, 'runtime_type', null)),
        runtime_type_version: build.template(std.get(block, 'runtime_type_version', null)),
        script_language: build.template(std.get(block, 'script_language', null)),
        status: build.template(block.status),
        treat_redirect_as_failure: build.template(std.get(block, 'treat_redirect_as_failure', null)),
        type: build.template(block.type),
        uri: build.template(std.get(block, 'uri', null)),
        use_unsupported_legacy_runtime: build.template(std.get(block, 'use_unsupported_legacy_runtime', null)),
        validation_string: build.template(std.get(block, 'validation_string', null)),
        verify_ssl: build.template(std.get(block, 'verify_ssl', null)),
      }),
      account_id: resource.field(self._.blocks, 'account_id'),
      browsers: resource.field(self._.blocks, 'browsers'),
      bypass_head_request: resource.field(self._.blocks, 'bypass_head_request'),
      device_orientation: resource.field(self._.blocks, 'device_orientation'),
      device_type: resource.field(self._.blocks, 'device_type'),
      devices: resource.field(self._.blocks, 'devices'),
      enable_screenshot_on_failure_and_script: resource.field(self._.blocks, 'enable_screenshot_on_failure_and_script'),
      id: resource.field(self._.blocks, 'id'),
      locations_private: resource.field(self._.blocks, 'locations_private'),
      locations_public: resource.field(self._.blocks, 'locations_public'),
      monitor_id: resource.field(self._.blocks, 'monitor_id'),
      name: resource.field(self._.blocks, 'name'),
      period: resource.field(self._.blocks, 'period'),
      period_in_minutes: resource.field(self._.blocks, 'period_in_minutes'),
      runtime_type: resource.field(self._.blocks, 'runtime_type'),
      runtime_type_version: resource.field(self._.blocks, 'runtime_type_version'),
      script_language: resource.field(self._.blocks, 'script_language'),
      status: resource.field(self._.blocks, 'status'),
      treat_redirect_as_failure: resource.field(self._.blocks, 'treat_redirect_as_failure'),
      type: resource.field(self._.blocks, 'type'),
      uri: resource.field(self._.blocks, 'uri'),
      use_unsupported_legacy_runtime: resource.field(self._.blocks, 'use_unsupported_legacy_runtime'),
      validation_string: resource.field(self._.blocks, 'validation_string'),
      verify_ssl: resource.field(self._.blocks, 'verify_ssl'),
    },
    synthetics_multilocation_alert_condition(name, block): {
      local resource = blockType.resource('newrelic_synthetics_multilocation_alert_condition', name),
      _: resource._(block, {
        enabled: build.template(std.get(block, 'enabled', null)),
        entities: build.template(block.entities),
        entity_guid: build.template(std.get(block, 'entity_guid', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        policy_id: build.template(block.policy_id),
        runbook_url: build.template(std.get(block, 'runbook_url', null)),
        violation_time_limit_seconds: build.template(std.get(block, 'violation_time_limit_seconds', null)),
      }),
      enabled: resource.field(self._.blocks, 'enabled'),
      entities: resource.field(self._.blocks, 'entities'),
      entity_guid: resource.field(self._.blocks, 'entity_guid'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      policy_id: resource.field(self._.blocks, 'policy_id'),
      runbook_url: resource.field(self._.blocks, 'runbook_url'),
      violation_time_limit_seconds: resource.field(self._.blocks, 'violation_time_limit_seconds'),
    },
    synthetics_private_location(name, block): {
      local resource = blockType.resource('newrelic_synthetics_private_location', name),
      _: resource._(block, {
        account_id: build.template(std.get(block, 'account_id', null)),
        description: build.template(block.description),
        domain_id: build.template(std.get(block, 'domain_id', null)),
        guid: build.template(std.get(block, 'guid', null)),
        id: build.template(std.get(block, 'id', null)),
        key: build.template(std.get(block, 'key', null)),
        location_id: build.template(std.get(block, 'location_id', null)),
        name: build.template(block.name),
        verified_script_execution: build.template(std.get(block, 'verified_script_execution', null)),
      }),
      account_id: resource.field(self._.blocks, 'account_id'),
      description: resource.field(self._.blocks, 'description'),
      domain_id: resource.field(self._.blocks, 'domain_id'),
      guid: resource.field(self._.blocks, 'guid'),
      id: resource.field(self._.blocks, 'id'),
      key: resource.field(self._.blocks, 'key'),
      location_id: resource.field(self._.blocks, 'location_id'),
      name: resource.field(self._.blocks, 'name'),
      verified_script_execution: resource.field(self._.blocks, 'verified_script_execution'),
    },
    synthetics_script_monitor(name, block): {
      local resource = blockType.resource('newrelic_synthetics_script_monitor', name),
      _: resource._(block, {
        account_id: build.template(std.get(block, 'account_id', null)),
        browsers: build.template(std.get(block, 'browsers', null)),
        device_orientation: build.template(std.get(block, 'device_orientation', null)),
        device_type: build.template(std.get(block, 'device_type', null)),
        devices: build.template(std.get(block, 'devices', null)),
        enable_screenshot_on_failure_and_script: build.template(std.get(block, 'enable_screenshot_on_failure_and_script', null)),
        guid: build.template(std.get(block, 'guid', null)),
        id: build.template(std.get(block, 'id', null)),
        locations_public: build.template(std.get(block, 'locations_public', null)),
        monitor_id: build.template(std.get(block, 'monitor_id', null)),
        name: build.template(block.name),
        period: build.template(block.period),
        period_in_minutes: build.template(std.get(block, 'period_in_minutes', null)),
        runtime_type: build.template(std.get(block, 'runtime_type', null)),
        runtime_type_version: build.template(std.get(block, 'runtime_type_version', null)),
        script: build.template(std.get(block, 'script', null)),
        script_language: build.template(std.get(block, 'script_language', null)),
        status: build.template(block.status),
        type: build.template(block.type),
        use_unsupported_legacy_runtime: build.template(std.get(block, 'use_unsupported_legacy_runtime', null)),
      }),
      account_id: resource.field(self._.blocks, 'account_id'),
      browsers: resource.field(self._.blocks, 'browsers'),
      device_orientation: resource.field(self._.blocks, 'device_orientation'),
      device_type: resource.field(self._.blocks, 'device_type'),
      devices: resource.field(self._.blocks, 'devices'),
      enable_screenshot_on_failure_and_script: resource.field(self._.blocks, 'enable_screenshot_on_failure_and_script'),
      guid: resource.field(self._.blocks, 'guid'),
      id: resource.field(self._.blocks, 'id'),
      locations_public: resource.field(self._.blocks, 'locations_public'),
      monitor_id: resource.field(self._.blocks, 'monitor_id'),
      name: resource.field(self._.blocks, 'name'),
      period: resource.field(self._.blocks, 'period'),
      period_in_minutes: resource.field(self._.blocks, 'period_in_minutes'),
      runtime_type: resource.field(self._.blocks, 'runtime_type'),
      runtime_type_version: resource.field(self._.blocks, 'runtime_type_version'),
      script: resource.field(self._.blocks, 'script'),
      script_language: resource.field(self._.blocks, 'script_language'),
      status: resource.field(self._.blocks, 'status'),
      type: resource.field(self._.blocks, 'type'),
      use_unsupported_legacy_runtime: resource.field(self._.blocks, 'use_unsupported_legacy_runtime'),
    },
    synthetics_secure_credential(name, block): {
      local resource = blockType.resource('newrelic_synthetics_secure_credential', name),
      _: resource._(block, {
        account_id: build.template(std.get(block, 'account_id', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        key: build.template(block.key),
        last_updated: build.template(std.get(block, 'last_updated', null)),
        value: build.template(block.value),
      }),
      account_id: resource.field(self._.blocks, 'account_id'),
      description: resource.field(self._.blocks, 'description'),
      id: resource.field(self._.blocks, 'id'),
      key: resource.field(self._.blocks, 'key'),
      last_updated: resource.field(self._.blocks, 'last_updated'),
      value: resource.field(self._.blocks, 'value'),
    },
    synthetics_step_monitor(name, block): {
      local resource = blockType.resource('newrelic_synthetics_step_monitor', name),
      _: resource._(block, {
        account_id: build.template(std.get(block, 'account_id', null)),
        browsers: build.template(std.get(block, 'browsers', null)),
        devices: build.template(std.get(block, 'devices', null)),
        enable_screenshot_on_failure_and_script: build.template(std.get(block, 'enable_screenshot_on_failure_and_script', null)),
        guid: build.template(std.get(block, 'guid', null)),
        id: build.template(std.get(block, 'id', null)),
        locations_public: build.template(std.get(block, 'locations_public', null)),
        monitor_id: build.template(std.get(block, 'monitor_id', null)),
        name: build.template(block.name),
        period: build.template(block.period),
        period_in_minutes: build.template(std.get(block, 'period_in_minutes', null)),
        runtime_type: build.template(std.get(block, 'runtime_type', null)),
        runtime_type_version: build.template(std.get(block, 'runtime_type_version', null)),
        status: build.template(block.status),
        use_unsupported_legacy_runtime: build.template(std.get(block, 'use_unsupported_legacy_runtime', null)),
      }),
      account_id: resource.field(self._.blocks, 'account_id'),
      browsers: resource.field(self._.blocks, 'browsers'),
      devices: resource.field(self._.blocks, 'devices'),
      enable_screenshot_on_failure_and_script: resource.field(self._.blocks, 'enable_screenshot_on_failure_and_script'),
      guid: resource.field(self._.blocks, 'guid'),
      id: resource.field(self._.blocks, 'id'),
      locations_public: resource.field(self._.blocks, 'locations_public'),
      monitor_id: resource.field(self._.blocks, 'monitor_id'),
      name: resource.field(self._.blocks, 'name'),
      period: resource.field(self._.blocks, 'period'),
      period_in_minutes: resource.field(self._.blocks, 'period_in_minutes'),
      runtime_type: resource.field(self._.blocks, 'runtime_type'),
      runtime_type_version: resource.field(self._.blocks, 'runtime_type_version'),
      status: resource.field(self._.blocks, 'status'),
      use_unsupported_legacy_runtime: resource.field(self._.blocks, 'use_unsupported_legacy_runtime'),
    },
    user(name, block): {
      local resource = blockType.resource('newrelic_user', name),
      _: resource._(block, {
        authentication_domain_id: build.template(block.authentication_domain_id),
        email_id: build.template(block.email_id),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        user_type: build.template(std.get(block, 'user_type', null)),
      }),
      authentication_domain_id: resource.field(self._.blocks, 'authentication_domain_id'),
      email_id: resource.field(self._.blocks, 'email_id'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      user_type: resource.field(self._.blocks, 'user_type'),
    },
    workflow(name, block): {
      local resource = blockType.resource('newrelic_workflow', name),
      _: resource._(block, {
        account_id: build.template(std.get(block, 'account_id', null)),
        destinations_enabled: build.template(std.get(block, 'destinations_enabled', null)),
        enabled: build.template(std.get(block, 'enabled', null)),
        enrichments_enabled: build.template(std.get(block, 'enrichments_enabled', null)),
        guid: build.template(std.get(block, 'guid', null)),
        id: build.template(std.get(block, 'id', null)),
        last_run: build.template(std.get(block, 'last_run', null)),
        muting_rules_handling: build.template(block.muting_rules_handling),
        name: build.template(block.name),
        workflow_id: build.template(std.get(block, 'workflow_id', null)),
      }),
      account_id: resource.field(self._.blocks, 'account_id'),
      destinations_enabled: resource.field(self._.blocks, 'destinations_enabled'),
      enabled: resource.field(self._.blocks, 'enabled'),
      enrichments_enabled: resource.field(self._.blocks, 'enrichments_enabled'),
      guid: resource.field(self._.blocks, 'guid'),
      id: resource.field(self._.blocks, 'id'),
      last_run: resource.field(self._.blocks, 'last_run'),
      muting_rules_handling: resource.field(self._.blocks, 'muting_rules_handling'),
      name: resource.field(self._.blocks, 'name'),
      workflow_id: resource.field(self._.blocks, 'workflow_id'),
    },
    workload(name, block): {
      local resource = blockType.resource('newrelic_workload', name),
      _: resource._(block, {
        account_id: build.template(std.get(block, 'account_id', null)),
        composite_entity_search_query: build.template(std.get(block, 'composite_entity_search_query', null)),
        description: build.template(std.get(block, 'description', null)),
        entity_guids: build.template(std.get(block, 'entity_guids', null)),
        guid: build.template(std.get(block, 'guid', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        permalink: build.template(std.get(block, 'permalink', null)),
        scope_account_ids: build.template(std.get(block, 'scope_account_ids', null)),
        workload_id: build.template(std.get(block, 'workload_id', null)),
      }),
      account_id: resource.field(self._.blocks, 'account_id'),
      composite_entity_search_query: resource.field(self._.blocks, 'composite_entity_search_query'),
      description: resource.field(self._.blocks, 'description'),
      entity_guids: resource.field(self._.blocks, 'entity_guids'),
      guid: resource.field(self._.blocks, 'guid'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      permalink: resource.field(self._.blocks, 'permalink'),
      scope_account_ids: resource.field(self._.blocks, 'scope_account_ids'),
      workload_id: resource.field(self._.blocks, 'workload_id'),
    },
  },
  data: {
    local blockType = provider.blockType('data'),
    account(name, block): {
      local resource = blockType.resource('newrelic_account', name),
      _: resource._(block, {
        account_id: build.template(std.get(block, 'account_id', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        scope: build.template(std.get(block, 'scope', null)),
      }),
      account_id: resource.field(self._.blocks, 'account_id'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      scope: resource.field(self._.blocks, 'scope'),
    },
    alert_channel(name, block): {
      local resource = blockType.resource('newrelic_alert_channel', name),
      _: resource._(block, {
        account_id: build.template(std.get(block, 'account_id', null)),
        config: build.template(std.get(block, 'config', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        policy_ids: build.template(std.get(block, 'policy_ids', null)),
        type: build.template(std.get(block, 'type', null)),
      }),
      account_id: resource.field(self._.blocks, 'account_id'),
      config: resource.field(self._.blocks, 'config'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      policy_ids: resource.field(self._.blocks, 'policy_ids'),
      type: resource.field(self._.blocks, 'type'),
    },
    alert_policy(name, block): {
      local resource = blockType.resource('newrelic_alert_policy', name),
      _: resource._(block, {
        account_id: build.template(std.get(block, 'account_id', null)),
        created_at: build.template(std.get(block, 'created_at', null)),
        id: build.template(std.get(block, 'id', null)),
        incident_preference: build.template(std.get(block, 'incident_preference', null)),
        name: build.template(block.name),
        updated_at: build.template(std.get(block, 'updated_at', null)),
      }),
      account_id: resource.field(self._.blocks, 'account_id'),
      created_at: resource.field(self._.blocks, 'created_at'),
      id: resource.field(self._.blocks, 'id'),
      incident_preference: resource.field(self._.blocks, 'incident_preference'),
      name: resource.field(self._.blocks, 'name'),
      updated_at: resource.field(self._.blocks, 'updated_at'),
    },
    application(name, block): {
      local resource = blockType.resource('newrelic_application', name),
      _: resource._(block, {
        host_ids: build.template(std.get(block, 'host_ids', null)),
        id: build.template(std.get(block, 'id', null)),
        instance_ids: build.template(std.get(block, 'instance_ids', null)),
        name: build.template(block.name),
      }),
      host_ids: resource.field(self._.blocks, 'host_ids'),
      id: resource.field(self._.blocks, 'id'),
      instance_ids: resource.field(self._.blocks, 'instance_ids'),
      name: resource.field(self._.blocks, 'name'),
    },
    authentication_domain(name, block): {
      local resource = blockType.resource('newrelic_authentication_domain', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
      }),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
    },
    cloud_account(name, block): {
      local resource = blockType.resource('newrelic_cloud_account', name),
      _: resource._(block, {
        account_id: build.template(std.get(block, 'account_id', null)),
        cloud_provider: build.template(block.cloud_provider),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
      }),
      account_id: resource.field(self._.blocks, 'account_id'),
      cloud_provider: resource.field(self._.blocks, 'cloud_provider'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
    },
    entity(name, block): {
      local resource = blockType.resource('newrelic_entity', name),
      _: resource._(block, {
        account_id: build.template(std.get(block, 'account_id', null)),
        application_id: build.template(std.get(block, 'application_id', null)),
        domain: build.template(std.get(block, 'domain', null)),
        entity_tags: build.template(std.get(block, 'entity_tags', null)),
        guid: build.template(std.get(block, 'guid', null)),
        id: build.template(std.get(block, 'id', null)),
        ignore_case: build.template(std.get(block, 'ignore_case', null)),
        ignore_not_found: build.template(std.get(block, 'ignore_not_found', null)),
        name: build.template(block.name),
        serving_apm_application_id: build.template(std.get(block, 'serving_apm_application_id', null)),
        type: build.template(std.get(block, 'type', null)),
      }),
      account_id: resource.field(self._.blocks, 'account_id'),
      application_id: resource.field(self._.blocks, 'application_id'),
      domain: resource.field(self._.blocks, 'domain'),
      entity_tags: resource.field(self._.blocks, 'entity_tags'),
      guid: resource.field(self._.blocks, 'guid'),
      id: resource.field(self._.blocks, 'id'),
      ignore_case: resource.field(self._.blocks, 'ignore_case'),
      ignore_not_found: resource.field(self._.blocks, 'ignore_not_found'),
      name: resource.field(self._.blocks, 'name'),
      serving_apm_application_id: resource.field(self._.blocks, 'serving_apm_application_id'),
      type: resource.field(self._.blocks, 'type'),
    },
    group(name, block): {
      local resource = blockType.resource('newrelic_group', name),
      _: resource._(block, {
        authentication_domain_id: build.template(block.authentication_domain_id),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        user_ids: build.template(std.get(block, 'user_ids', null)),
      }),
      authentication_domain_id: resource.field(self._.blocks, 'authentication_domain_id'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      user_ids: resource.field(self._.blocks, 'user_ids'),
    },
    key_transaction(name, block): {
      local resource = blockType.resource('newrelic_key_transaction', name),
      _: resource._(block, {
        account_id: build.template(std.get(block, 'account_id', null)),
        domain: build.template(std.get(block, 'domain', null)),
        guid: build.template(std.get(block, 'guid', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        type: build.template(std.get(block, 'type', null)),
      }),
      account_id: resource.field(self._.blocks, 'account_id'),
      domain: resource.field(self._.blocks, 'domain'),
      guid: resource.field(self._.blocks, 'guid'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      type: resource.field(self._.blocks, 'type'),
    },
    notification_destination(name, block): {
      local resource = blockType.resource('newrelic_notification_destination', name),
      _: resource._(block, {
        account_id: build.template(std.get(block, 'account_id', null)),
        active: build.template(std.get(block, 'active', null)),
        guid: build.template(std.get(block, 'guid', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        property: build.template(std.get(block, 'property', null)),
        status: build.template(std.get(block, 'status', null)),
        type: build.template(std.get(block, 'type', null)),
      }),
      account_id: resource.field(self._.blocks, 'account_id'),
      active: resource.field(self._.blocks, 'active'),
      guid: resource.field(self._.blocks, 'guid'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      property: resource.field(self._.blocks, 'property'),
      status: resource.field(self._.blocks, 'status'),
      type: resource.field(self._.blocks, 'type'),
    },
    obfuscation_expression(name, block): {
      local resource = blockType.resource('newrelic_obfuscation_expression', name),
      _: resource._(block, {
        account_id: build.template(std.get(block, 'account_id', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
      }),
      account_id: resource.field(self._.blocks, 'account_id'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
    },
    service_level_alert_helper(name, block): {
      local resource = blockType.resource('newrelic_service_level_alert_helper', name),
      _: resource._(block, {
        alert_type: build.template(block.alert_type),
        custom_evaluation_period: build.template(std.get(block, 'custom_evaluation_period', null)),
        custom_tolerated_budget_consumption: build.template(std.get(block, 'custom_tolerated_budget_consumption', null)),
        evaluation_period: build.template(std.get(block, 'evaluation_period', null)),
        id: build.template(std.get(block, 'id', null)),
        is_bad_events: build.template(std.get(block, 'is_bad_events', null)),
        nrql: build.template(std.get(block, 'nrql', null)),
        sli_guid: build.template(block.sli_guid),
        slo_period: build.template(block.slo_period),
        slo_target: build.template(block.slo_target),
        threshold: build.template(std.get(block, 'threshold', null)),
        tolerated_budget_consumption: build.template(std.get(block, 'tolerated_budget_consumption', null)),
      }),
      alert_type: resource.field(self._.blocks, 'alert_type'),
      custom_evaluation_period: resource.field(self._.blocks, 'custom_evaluation_period'),
      custom_tolerated_budget_consumption: resource.field(self._.blocks, 'custom_tolerated_budget_consumption'),
      evaluation_period: resource.field(self._.blocks, 'evaluation_period'),
      id: resource.field(self._.blocks, 'id'),
      is_bad_events: resource.field(self._.blocks, 'is_bad_events'),
      nrql: resource.field(self._.blocks, 'nrql'),
      sli_guid: resource.field(self._.blocks, 'sli_guid'),
      slo_period: resource.field(self._.blocks, 'slo_period'),
      slo_target: resource.field(self._.blocks, 'slo_target'),
      threshold: resource.field(self._.blocks, 'threshold'),
      tolerated_budget_consumption: resource.field(self._.blocks, 'tolerated_budget_consumption'),
    },
    synthetics_private_location(name, block): {
      local resource = blockType.resource('newrelic_synthetics_private_location', name),
      _: resource._(block, {
        account_id: build.template(std.get(block, 'account_id', null)),
        id: build.template(std.get(block, 'id', null)),
        key: build.template(std.get(block, 'key', null)),
        name: build.template(block.name),
      }),
      account_id: resource.field(self._.blocks, 'account_id'),
      id: resource.field(self._.blocks, 'id'),
      key: resource.field(self._.blocks, 'key'),
      name: resource.field(self._.blocks, 'name'),
    },
    synthetics_secure_credential(name, block): {
      local resource = blockType.resource('newrelic_synthetics_secure_credential', name),
      _: resource._(block, {
        account_id: build.template(std.get(block, 'account_id', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        key: build.template(block.key),
        last_updated: build.template(std.get(block, 'last_updated', null)),
      }),
      account_id: resource.field(self._.blocks, 'account_id'),
      description: resource.field(self._.blocks, 'description'),
      id: resource.field(self._.blocks, 'id'),
      key: resource.field(self._.blocks, 'key'),
      last_updated: resource.field(self._.blocks, 'last_updated'),
    },
    test_grok_pattern(name, block): {
      local resource = blockType.resource('newrelic_test_grok_pattern', name),
      _: resource._(block, {
        account_id: build.template(std.get(block, 'account_id', null)),
        grok: build.template(block.grok),
        id: build.template(std.get(block, 'id', null)),
        log_lines: build.template(block.log_lines),
        test_grok: build.template(std.get(block, 'test_grok', null)),
      }),
      account_id: resource.field(self._.blocks, 'account_id'),
      grok: resource.field(self._.blocks, 'grok'),
      id: resource.field(self._.blocks, 'id'),
      log_lines: resource.field(self._.blocks, 'log_lines'),
      test_grok: resource.field(self._.blocks, 'test_grok'),
    },
    user(name, block): {
      local resource = blockType.resource('newrelic_user', name),
      _: resource._(block, {
        authentication_domain_id: build.template(block.authentication_domain_id),
        email_id: build.template(std.get(block, 'email_id', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
      }),
      authentication_domain_id: resource.field(self._.blocks, 'authentication_domain_id'),
      email_id: resource.field(self._.blocks, 'email_id'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
    },
  },
};

local providerWithConfiguration = provider(null, null) + {
  withConfiguration(alias, block): provider(block, {
    alias: alias,
    account_id: build.template(block.account_id),
    admin_api_key: build.template(std.get(block, 'admin_api_key', null)),
    api_key: build.template(block.api_key),
    api_url: build.template(std.get(block, 'api_url', null)),
    cacert_file: build.template(std.get(block, 'cacert_file', null)),
    infrastructure_api_url: build.template(std.get(block, 'infrastructure_api_url', null)),
    insecure_skip_verify: build.template(std.get(block, 'insecure_skip_verify', null)),
    insights_insert_key: build.template(std.get(block, 'insights_insert_key', null)),
    insights_insert_url: build.template(std.get(block, 'insights_insert_url', null)),
    insights_query_url: build.template(std.get(block, 'insights_query_url', null)),
    nerdgraph_api_url: build.template(std.get(block, 'nerdgraph_api_url', null)),
    region: build.template(std.get(block, 'region', null)),
    synthetics_api_url: build.template(std.get(block, 'synthetics_api_url', null)),
  }),
};

providerWithConfiguration
