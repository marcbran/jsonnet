local build = {
  expression(val):
    if std.type(val) == 'object' then
      if std.objectHas(val, '_') then
        if std.objectHas(val._, 'ref')
        then val._.ref
        else '"%s"' % [val._.str]
      else '{%s}' % [std.join(',', std.map(function(key) '%s:%s' % [self.expression(key), self.expression(val[key])], std.objectFields(val)))]
    else if std.type(val) == 'array' then '[%s]' % [std.join(',', std.map(function(element) self.expression(element), val))]
    else if std.type(val) == 'string' then '"%s"' % [val]
    else '"%s"' % [val],
  template(val):
    if std.type(val) == 'object' then
      if std.objectHas(val, '_') then
        if std.objectHas(val._, 'ref')
        then std.strReplace(self.string(val), '\n', '\\n')
        else val._.str
      else std.mapWithKey(function(key, value) self.template(value), val)
    else if std.type(val) == 'array' then std.map(function(element) self.template(element), val)
    else if std.type(val) == 'string' then std.strReplace(self.string(val), '\n', '\\n')
    else val,
  string(val):
    if std.type(val) == 'object' then
      if std.objectHas(val, '_') then
        if std.objectHas(val._, 'ref')
        then '${%s}' % [val._.ref]
        else val._.str
      else '${%s}' % [self.expression(val)]
    else if std.type(val) == 'array' then '${%s}' % [self.expression(val)]
    else if std.type(val) == 'string' then val
    else val,
  blocks(val):
    if std.type(val) == 'object' then
      if std.objectHas(val, '_') then
        if std.objectHas(val._, 'blocks')
        then val._.blocks
        else
          if std.objectHas(val._, 'block')
          then { [val._.ref]: val._.block }
          else {}
      else std.foldl(
        function(acc, val) std.mergePatch(acc, val),
        std.map(function(key) build.blocks(val[key]), std.objectFields(val)),
        {}
      )
    else
      if std.type(val) == 'array' then std.foldl(
        function(acc, val) std.mergePatch(acc, val),
        std.map(function(element) build.blocks(element), val),
        {}
      )
      else {},
};
local providerTemplate(provider, requirements, rawConfiguration, configuration) = {
  local providerRequirements = { ['terraform.required_providers.%s' % [provider]]: requirements },
  local providerAlias = if configuration == null then null else std.get(configuration, 'alias', null),
  local providerConfiguration = if configuration == null then { _: { refBlock: {}, blocks: [] } } else {
    _: {
      local _ = self,
      ref: '%s.%s' % [provider, configuration.alias],
      refBlock: {
        provider: _.ref,
      },
      block: {
        provider: {
          provider: std.prune(configuration),
        },
      },
      blocks: build.blocks(rawConfiguration) + {
        [_.ref]: _.block,
      },
    },
  },
  blockType(blockType): {
    local blockTypePath = if blockType == 'resource' then [] else ['data'],
    resource(type, name): {
      local resourceType = std.substr(type, std.length(provider) + 1, std.length(type)),
      local resourcePath = blockTypePath + [type, name],
      _(rawBlock, block): {
        local _ = self,
        local metaBlock = {
          depends_on: build.template(std.get(rawBlock, 'depends_on', null)),
          count: build.template(std.get(rawBlock, 'count', null)),
          for_each: build.template(std.get(rawBlock, 'for_each', null)),
        },
        type: if std.objectHas(rawBlock, 'for_each') then 'map' else if std.objectHas(rawBlock, 'count') then 'list' else 'object',
        provider: provider,
        providerAlias: providerAlias,
        resourceType: resourceType,
        name: name,
        ref: std.join('.', resourcePath),
        block: {
          [blockType]: {
            [type]: {
              [name]: std.prune(providerConfiguration._.refBlock + metaBlock + block),
            },
          },
        },
        blocks: build.blocks([providerConfiguration] + [rawBlock]) + providerRequirements + { [_.ref]: _.block },
      },
      field(blocks, fieldName): {
        local fieldPath = resourcePath + [fieldName],
        _: {
          ref: std.join('.', fieldPath),
          blocks: blocks,
        },
      },
    },
  },
  func(name, parameters=[]): {
    local parameterString = std.join(', ', [build.expression(parameter) for parameter in parameters]),
    _: {
      ref: 'provider::%s::%s(%s)' % [provider, name, parameterString],
      blocks: build.blocks([providerConfiguration] + [parameters]) + providerRequirements,
    },
  },
};
local provider(rawConfiguration, configuration) = {
  local requirements = {
    source: 'registry.terraform.io/logzio/logzio',
    version: '1.21.0',
  },
  local provider = providerTemplate('logzio', requirements, rawConfiguration, configuration),
  resource: {
    local blockType = provider.blockType('resource'),
    alert_v2(name, block): {
      local resource = blockType.resource('logzio_alert_v2', name),
      _: resource._(block, {
        alert_notification_endpoints: build.template(std.get(block, 'alert_notification_endpoints', null)),
        correlation_operator: build.template(std.get(block, 'correlation_operator', null)),
        created_at: build.template(std.get(block, 'created_at', null)),
        created_by: build.template(std.get(block, 'created_by', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        is_enabled: build.template(std.get(block, 'is_enabled', null)),
        joins: build.template(std.get(block, 'joins', null)),
        notification_emails: build.template(std.get(block, 'notification_emails', null)),
        output_type: build.template(std.get(block, 'output_type', null)),
        schedule_cron_expression: build.template(std.get(block, 'schedule_cron_expression', null)),
        schedule_timezone: build.template(std.get(block, 'schedule_timezone', null)),
        search_timeframe_minutes: build.template(block.search_timeframe_minutes),
        suppress_notifications_minutes: build.template(std.get(block, 'suppress_notifications_minutes', null)),
        tags: build.template(std.get(block, 'tags', null)),
        title: build.template(block.title),
        updated_at: build.template(std.get(block, 'updated_at', null)),
        updated_by: build.template(std.get(block, 'updated_by', null)),
      }),
      alert_notification_endpoints: resource.field(self._.blocks, 'alert_notification_endpoints'),
      correlation_operator: resource.field(self._.blocks, 'correlation_operator'),
      created_at: resource.field(self._.blocks, 'created_at'),
      created_by: resource.field(self._.blocks, 'created_by'),
      description: resource.field(self._.blocks, 'description'),
      id: resource.field(self._.blocks, 'id'),
      is_enabled: resource.field(self._.blocks, 'is_enabled'),
      joins: resource.field(self._.blocks, 'joins'),
      notification_emails: resource.field(self._.blocks, 'notification_emails'),
      output_type: resource.field(self._.blocks, 'output_type'),
      schedule_cron_expression: resource.field(self._.blocks, 'schedule_cron_expression'),
      schedule_timezone: resource.field(self._.blocks, 'schedule_timezone'),
      search_timeframe_minutes: resource.field(self._.blocks, 'search_timeframe_minutes'),
      suppress_notifications_minutes: resource.field(self._.blocks, 'suppress_notifications_minutes'),
      tags: resource.field(self._.blocks, 'tags'),
      title: resource.field(self._.blocks, 'title'),
      updated_at: resource.field(self._.blocks, 'updated_at'),
      updated_by: resource.field(self._.blocks, 'updated_by'),
    },
    archive_logs(name, block): {
      local resource = blockType.resource('logzio_archive_logs', name),
      _: resource._(block, {
        archive_id: build.template(std.get(block, 'archive_id', null)),
        aws_access_key: build.template(std.get(block, 'aws_access_key', null)),
        aws_credentials_type: build.template(std.get(block, 'aws_credentials_type', null)),
        aws_s3_iam_credentials_arn: build.template(std.get(block, 'aws_s3_iam_credentials_arn', null)),
        aws_s3_path: build.template(std.get(block, 'aws_s3_path', null)),
        aws_secret_key: build.template(std.get(block, 'aws_secret_key', null)),
        azure_account_name: build.template(std.get(block, 'azure_account_name', null)),
        azure_blob_path: build.template(std.get(block, 'azure_blob_path', null)),
        azure_client_id: build.template(std.get(block, 'azure_client_id', null)),
        azure_client_secret: build.template(std.get(block, 'azure_client_secret', null)),
        azure_container_name: build.template(std.get(block, 'azure_container_name', null)),
        azure_tenant_id: build.template(std.get(block, 'azure_tenant_id', null)),
        compressed: build.template(std.get(block, 'compressed', null)),
        enabled: build.template(std.get(block, 'enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        storage_type: build.template(block.storage_type),
      }),
      archive_id: resource.field(self._.blocks, 'archive_id'),
      aws_access_key: resource.field(self._.blocks, 'aws_access_key'),
      aws_credentials_type: resource.field(self._.blocks, 'aws_credentials_type'),
      aws_s3_iam_credentials_arn: resource.field(self._.blocks, 'aws_s3_iam_credentials_arn'),
      aws_s3_path: resource.field(self._.blocks, 'aws_s3_path'),
      aws_secret_key: resource.field(self._.blocks, 'aws_secret_key'),
      azure_account_name: resource.field(self._.blocks, 'azure_account_name'),
      azure_blob_path: resource.field(self._.blocks, 'azure_blob_path'),
      azure_client_id: resource.field(self._.blocks, 'azure_client_id'),
      azure_client_secret: resource.field(self._.blocks, 'azure_client_secret'),
      azure_container_name: resource.field(self._.blocks, 'azure_container_name'),
      azure_tenant_id: resource.field(self._.blocks, 'azure_tenant_id'),
      compressed: resource.field(self._.blocks, 'compressed'),
      enabled: resource.field(self._.blocks, 'enabled'),
      id: resource.field(self._.blocks, 'id'),
      storage_type: resource.field(self._.blocks, 'storage_type'),
    },
    authentication_groups(name, block): {
      local resource = blockType.resource('logzio_authentication_groups', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        manage_groups_id: build.template(std.get(block, 'manage_groups_id', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      manage_groups_id: resource.field(self._.blocks, 'manage_groups_id'),
    },
    drop_filter(name, block): {
      local resource = blockType.resource('logzio_drop_filter', name),
      _: resource._(block, {
        active: build.template(std.get(block, 'active', null)),
        drop_filter_id: build.template(std.get(block, 'drop_filter_id', null)),
        gb_threshold: build.template(std.get(block, 'gb_threshold', null)),
        id: build.template(std.get(block, 'id', null)),
        log_type: build.template(std.get(block, 'log_type', null)),
      }),
      active: resource.field(self._.blocks, 'active'),
      drop_filter_id: resource.field(self._.blocks, 'drop_filter_id'),
      gb_threshold: resource.field(self._.blocks, 'gb_threshold'),
      id: resource.field(self._.blocks, 'id'),
      log_type: resource.field(self._.blocks, 'log_type'),
    },
    drop_metrics(name, block): {
      local resource = blockType.resource('logzio_drop_metrics', name),
      _: resource._(block, {
        account_id: build.template(block.account_id),
        active: build.template(std.get(block, 'active', null)),
        created_at: build.template(std.get(block, 'created_at', null)),
        created_by: build.template(std.get(block, 'created_by', null)),
        drop_metric_id: build.template(std.get(block, 'drop_metric_id', null)),
        id: build.template(std.get(block, 'id', null)),
        modified_at: build.template(std.get(block, 'modified_at', null)),
        modified_by: build.template(std.get(block, 'modified_by', null)),
        name: build.template(std.get(block, 'name', null)),
        operator: build.template(std.get(block, 'operator', null)),
      }),
      account_id: resource.field(self._.blocks, 'account_id'),
      active: resource.field(self._.blocks, 'active'),
      created_at: resource.field(self._.blocks, 'created_at'),
      created_by: resource.field(self._.blocks, 'created_by'),
      drop_metric_id: resource.field(self._.blocks, 'drop_metric_id'),
      id: resource.field(self._.blocks, 'id'),
      modified_at: resource.field(self._.blocks, 'modified_at'),
      modified_by: resource.field(self._.blocks, 'modified_by'),
      name: resource.field(self._.blocks, 'name'),
      operator: resource.field(self._.blocks, 'operator'),
    },
    endpoint(name, block): {
      local resource = blockType.resource('logzio_endpoint', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        endpoint_id: build.template(std.get(block, 'endpoint_id', null)),
        endpoint_type: build.template(block.endpoint_type),
        id: build.template(std.get(block, 'id', null)),
        title: build.template(block.title),
      }),
      description: resource.field(self._.blocks, 'description'),
      endpoint_id: resource.field(self._.blocks, 'endpoint_id'),
      endpoint_type: resource.field(self._.blocks, 'endpoint_type'),
      id: resource.field(self._.blocks, 'id'),
      title: resource.field(self._.blocks, 'title'),
    },
    grafana_alert_rule(name, block): {
      local resource = blockType.resource('logzio_grafana_alert_rule', name),
      _: resource._(block, {
        alert_rule_id: build.template(std.get(block, 'alert_rule_id', null)),
        annotations: build.template(std.get(block, 'annotations', null)),
        condition: build.template(block.condition),
        exec_err_state: build.template(std.get(block, 'exec_err_state', null)),
        folder_uid: build.template(block.folder_uid),
        'for': build.template(block['for']),
        id: build.template(std.get(block, 'id', null)),
        is_paused: build.template(std.get(block, 'is_paused', null)),
        labels: build.template(std.get(block, 'labels', null)),
        no_data_state: build.template(std.get(block, 'no_data_state', null)),
        rule_group: build.template(block.rule_group),
        title: build.template(block.title),
        uid: build.template(std.get(block, 'uid', null)),
      }),
      alert_rule_id: resource.field(self._.blocks, 'alert_rule_id'),
      annotations: resource.field(self._.blocks, 'annotations'),
      condition: resource.field(self._.blocks, 'condition'),
      exec_err_state: resource.field(self._.blocks, 'exec_err_state'),
      folder_uid: resource.field(self._.blocks, 'folder_uid'),
      'for': resource.field(self._.blocks, 'for'),
      id: resource.field(self._.blocks, 'id'),
      is_paused: resource.field(self._.blocks, 'is_paused'),
      labels: resource.field(self._.blocks, 'labels'),
      no_data_state: resource.field(self._.blocks, 'no_data_state'),
      rule_group: resource.field(self._.blocks, 'rule_group'),
      title: resource.field(self._.blocks, 'title'),
      uid: resource.field(self._.blocks, 'uid'),
    },
    grafana_contact_point(name, block): {
      local resource = blockType.resource('logzio_grafana_contact_point', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
      }),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
    },
    grafana_dashboard(name, block): {
      local resource = blockType.resource('logzio_grafana_dashboard', name),
      _: resource._(block, {
        dashboard_id: build.template(std.get(block, 'dashboard_id', null)),
        dashboard_json: build.template(block.dashboard_json),
        dashboard_uid: build.template(std.get(block, 'dashboard_uid', null)),
        folder_uid: build.template(block.folder_uid),
        id: build.template(std.get(block, 'id', null)),
        message: build.template(std.get(block, 'message', null)),
        overwrite: build.template(std.get(block, 'overwrite', null)),
        url: build.template(std.get(block, 'url', null)),
        version: build.template(std.get(block, 'version', null)),
      }),
      dashboard_id: resource.field(self._.blocks, 'dashboard_id'),
      dashboard_json: resource.field(self._.blocks, 'dashboard_json'),
      dashboard_uid: resource.field(self._.blocks, 'dashboard_uid'),
      folder_uid: resource.field(self._.blocks, 'folder_uid'),
      id: resource.field(self._.blocks, 'id'),
      message: resource.field(self._.blocks, 'message'),
      overwrite: resource.field(self._.blocks, 'overwrite'),
      url: resource.field(self._.blocks, 'url'),
      version: resource.field(self._.blocks, 'version'),
    },
    grafana_folder(name, block): {
      local resource = blockType.resource('logzio_grafana_folder', name),
      _: resource._(block, {
        folder_id: build.template(std.get(block, 'folder_id', null)),
        id: build.template(std.get(block, 'id', null)),
        title: build.template(block.title),
        uid: build.template(std.get(block, 'uid', null)),
        url: build.template(std.get(block, 'url', null)),
        version: build.template(std.get(block, 'version', null)),
      }),
      folder_id: resource.field(self._.blocks, 'folder_id'),
      id: resource.field(self._.blocks, 'id'),
      title: resource.field(self._.blocks, 'title'),
      uid: resource.field(self._.blocks, 'uid'),
      url: resource.field(self._.blocks, 'url'),
      version: resource.field(self._.blocks, 'version'),
    },
    grafana_notification_policy(name, block): {
      local resource = blockType.resource('logzio_grafana_notification_policy', name),
      _: resource._(block, {
        contact_point: build.template(block.contact_point),
        group_by: build.template(block.group_by),
        group_interval: build.template(std.get(block, 'group_interval', null)),
        group_wait: build.template(std.get(block, 'group_wait', null)),
        id: build.template(std.get(block, 'id', null)),
        repeat_interval: build.template(std.get(block, 'repeat_interval', null)),
      }),
      contact_point: resource.field(self._.blocks, 'contact_point'),
      group_by: resource.field(self._.blocks, 'group_by'),
      group_interval: resource.field(self._.blocks, 'group_interval'),
      group_wait: resource.field(self._.blocks, 'group_wait'),
      id: resource.field(self._.blocks, 'id'),
      repeat_interval: resource.field(self._.blocks, 'repeat_interval'),
    },
    kibana_object(name, block): {
      local resource = blockType.resource('logzio_kibana_object', name),
      _: resource._(block, {
        data: build.template(block.data),
        id: build.template(std.get(block, 'id', null)),
        kibana_version: build.template(block.kibana_version),
      }),
      data: resource.field(self._.blocks, 'data'),
      id: resource.field(self._.blocks, 'id'),
      kibana_version: resource.field(self._.blocks, 'kibana_version'),
    },
    log_shipping_token(name, block): {
      local resource = blockType.resource('logzio_log_shipping_token', name),
      _: resource._(block, {
        created_at: build.template(std.get(block, 'created_at', null)),
        created_by: build.template(std.get(block, 'created_by', null)),
        enabled: build.template(std.get(block, 'enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        token: build.template(std.get(block, 'token', null)),
        token_id: build.template(std.get(block, 'token_id', null)),
        updated_at: build.template(std.get(block, 'updated_at', null)),
        updated_by: build.template(std.get(block, 'updated_by', null)),
      }),
      created_at: resource.field(self._.blocks, 'created_at'),
      created_by: resource.field(self._.blocks, 'created_by'),
      enabled: resource.field(self._.blocks, 'enabled'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      token: resource.field(self._.blocks, 'token'),
      token_id: resource.field(self._.blocks, 'token_id'),
      updated_at: resource.field(self._.blocks, 'updated_at'),
      updated_by: resource.field(self._.blocks, 'updated_by'),
    },
    metrics_account(name, block): {
      local resource = blockType.resource('logzio_metrics_account', name),
      _: resource._(block, {
        account_id: build.template(std.get(block, 'account_id', null)),
        account_name: build.template(std.get(block, 'account_name', null)),
        account_token: build.template(std.get(block, 'account_token', null)),
        authorized_accounts: build.template(std.get(block, 'authorized_accounts', null)),
        email: build.template(block.email),
        id: build.template(std.get(block, 'id', null)),
        plan_uts: build.template(std.get(block, 'plan_uts', null)),
      }),
      account_id: resource.field(self._.blocks, 'account_id'),
      account_name: resource.field(self._.blocks, 'account_name'),
      account_token: resource.field(self._.blocks, 'account_token'),
      authorized_accounts: resource.field(self._.blocks, 'authorized_accounts'),
      email: resource.field(self._.blocks, 'email'),
      id: resource.field(self._.blocks, 'id'),
      plan_uts: resource.field(self._.blocks, 'plan_uts'),
    },
    metrics_rollup_rules(name, block): {
      local resource = blockType.resource('logzio_metrics_rollup_rules', name),
      _: resource._(block, {
        account_id: build.template(block.account_id),
        cluster_id: build.template(std.get(block, 'cluster_id', null)),
        drop_original_metric: build.template(std.get(block, 'drop_original_metric', null)),
        drop_policy_rule_id: build.template(std.get(block, 'drop_policy_rule_id', null)),
        id: build.template(std.get(block, 'id', null)),
        is_deleted: build.template(std.get(block, 'is_deleted', null)),
        labels: build.template(block.labels),
        labels_elimination_method: build.template(block.labels_elimination_method),
        metric_name: build.template(std.get(block, 'metric_name', null)),
        metric_type: build.template(block.metric_type),
        name: build.template(std.get(block, 'name', null)),
        namespaces: build.template(std.get(block, 'namespaces', null)),
        new_metric_name_template: build.template(std.get(block, 'new_metric_name_template', null)),
        rollup_function: build.template(std.get(block, 'rollup_function', null)),
        version: build.template(std.get(block, 'version', null)),
      }),
      account_id: resource.field(self._.blocks, 'account_id'),
      cluster_id: resource.field(self._.blocks, 'cluster_id'),
      drop_original_metric: resource.field(self._.blocks, 'drop_original_metric'),
      drop_policy_rule_id: resource.field(self._.blocks, 'drop_policy_rule_id'),
      id: resource.field(self._.blocks, 'id'),
      is_deleted: resource.field(self._.blocks, 'is_deleted'),
      labels: resource.field(self._.blocks, 'labels'),
      labels_elimination_method: resource.field(self._.blocks, 'labels_elimination_method'),
      metric_name: resource.field(self._.blocks, 'metric_name'),
      metric_type: resource.field(self._.blocks, 'metric_type'),
      name: resource.field(self._.blocks, 'name'),
      namespaces: resource.field(self._.blocks, 'namespaces'),
      new_metric_name_template: resource.field(self._.blocks, 'new_metric_name_template'),
      rollup_function: resource.field(self._.blocks, 'rollup_function'),
      version: resource.field(self._.blocks, 'version'),
    },
    restore_logs(name, block): {
      local resource = blockType.resource('logzio_restore_logs', name),
      _: resource._(block, {
        account_id: build.template(std.get(block, 'account_id', null)),
        account_name: build.template(block.account_name),
        created_at: build.template(std.get(block, 'created_at', null)),
        end_time: build.template(block.end_time),
        expires_at: build.template(std.get(block, 'expires_at', null)),
        finished_at: build.template(std.get(block, 'finished_at', null)),
        id: build.template(std.get(block, 'id', null)),
        restore_operation_id: build.template(std.get(block, 'restore_operation_id', null)),
        restored_volume_gb: build.template(std.get(block, 'restored_volume_gb', null)),
        start_time: build.template(block.start_time),
        started_at: build.template(std.get(block, 'started_at', null)),
        status: build.template(std.get(block, 'status', null)),
        username: build.template(block.username),
      }),
      account_id: resource.field(self._.blocks, 'account_id'),
      account_name: resource.field(self._.blocks, 'account_name'),
      created_at: resource.field(self._.blocks, 'created_at'),
      end_time: resource.field(self._.blocks, 'end_time'),
      expires_at: resource.field(self._.blocks, 'expires_at'),
      finished_at: resource.field(self._.blocks, 'finished_at'),
      id: resource.field(self._.blocks, 'id'),
      restore_operation_id: resource.field(self._.blocks, 'restore_operation_id'),
      restored_volume_gb: resource.field(self._.blocks, 'restored_volume_gb'),
      start_time: resource.field(self._.blocks, 'start_time'),
      started_at: resource.field(self._.blocks, 'started_at'),
      status: resource.field(self._.blocks, 'status'),
      username: resource.field(self._.blocks, 'username'),
    },
    s3_fetcher(name, block): {
      local resource = blockType.resource('logzio_s3_fetcher', name),
      _: resource._(block, {
        active: build.template(block.active),
        add_s3_object_key_as_log_field: build.template(std.get(block, 'add_s3_object_key_as_log_field', null)),
        aws_access_key: build.template(std.get(block, 'aws_access_key', null)),
        aws_arn: build.template(std.get(block, 'aws_arn', null)),
        aws_region: build.template(block.aws_region),
        aws_secret_key: build.template(std.get(block, 'aws_secret_key', null)),
        bucket_name: build.template(block.bucket_name),
        fetcher_id: build.template(std.get(block, 'fetcher_id', null)),
        id: build.template(std.get(block, 'id', null)),
        logs_type: build.template(block.logs_type),
        prefix: build.template(std.get(block, 'prefix', null)),
      }),
      active: resource.field(self._.blocks, 'active'),
      add_s3_object_key_as_log_field: resource.field(self._.blocks, 'add_s3_object_key_as_log_field'),
      aws_access_key: resource.field(self._.blocks, 'aws_access_key'),
      aws_arn: resource.field(self._.blocks, 'aws_arn'),
      aws_region: resource.field(self._.blocks, 'aws_region'),
      aws_secret_key: resource.field(self._.blocks, 'aws_secret_key'),
      bucket_name: resource.field(self._.blocks, 'bucket_name'),
      fetcher_id: resource.field(self._.blocks, 'fetcher_id'),
      id: resource.field(self._.blocks, 'id'),
      logs_type: resource.field(self._.blocks, 'logs_type'),
      prefix: resource.field(self._.blocks, 'prefix'),
    },
    subaccount(name, block): {
      local resource = blockType.resource('logzio_subaccount', name),
      _: resource._(block, {
        accessible: build.template(std.get(block, 'accessible', null)),
        account_id: build.template(std.get(block, 'account_id', null)),
        account_name: build.template(block.account_name),
        account_token: build.template(std.get(block, 'account_token', null)),
        doc_size_setting: build.template(std.get(block, 'doc_size_setting', null)),
        email: build.template(block.email),
        flexible: build.template(std.get(block, 'flexible', null)),
        frequency_minutes: build.template(std.get(block, 'frequency_minutes', null)),
        id: build.template(std.get(block, 'id', null)),
        is_capped: build.template(std.get(block, 'is_capped', null)),
        is_owner: build.template(std.get(block, 'is_owner', null)),
        max_daily_gb: build.template(std.get(block, 'max_daily_gb', null)),
        reserved_daily_gb: build.template(std.get(block, 'reserved_daily_gb', null)),
        retention_days: build.template(block.retention_days),
        searchable: build.template(std.get(block, 'searchable', null)),
        shared_gb: build.template(std.get(block, 'shared_gb', null)),
        sharing_objects_accounts: build.template(std.get(block, 'sharing_objects_accounts', null)),
        snap_search_retention_days: build.template(std.get(block, 'snap_search_retention_days', null)),
        total_time_based_daily_gb: build.template(std.get(block, 'total_time_based_daily_gb', null)),
        utilization_enabled: build.template(std.get(block, 'utilization_enabled', null)),
      }),
      accessible: resource.field(self._.blocks, 'accessible'),
      account_id: resource.field(self._.blocks, 'account_id'),
      account_name: resource.field(self._.blocks, 'account_name'),
      account_token: resource.field(self._.blocks, 'account_token'),
      doc_size_setting: resource.field(self._.blocks, 'doc_size_setting'),
      email: resource.field(self._.blocks, 'email'),
      flexible: resource.field(self._.blocks, 'flexible'),
      frequency_minutes: resource.field(self._.blocks, 'frequency_minutes'),
      id: resource.field(self._.blocks, 'id'),
      is_capped: resource.field(self._.blocks, 'is_capped'),
      is_owner: resource.field(self._.blocks, 'is_owner'),
      max_daily_gb: resource.field(self._.blocks, 'max_daily_gb'),
      reserved_daily_gb: resource.field(self._.blocks, 'reserved_daily_gb'),
      retention_days: resource.field(self._.blocks, 'retention_days'),
      searchable: resource.field(self._.blocks, 'searchable'),
      shared_gb: resource.field(self._.blocks, 'shared_gb'),
      sharing_objects_accounts: resource.field(self._.blocks, 'sharing_objects_accounts'),
      snap_search_retention_days: resource.field(self._.blocks, 'snap_search_retention_days'),
      total_time_based_daily_gb: resource.field(self._.blocks, 'total_time_based_daily_gb'),
      utilization_enabled: resource.field(self._.blocks, 'utilization_enabled'),
    },
    user(name, block): {
      local resource = blockType.resource('logzio_user', name),
      _: resource._(block, {
        account_id: build.template(block.account_id),
        active: build.template(std.get(block, 'active', null)),
        fullname: build.template(block.fullname),
        id: build.template(std.get(block, 'id', null)),
        role: build.template(block.role),
        username: build.template(block.username),
      }),
      account_id: resource.field(self._.blocks, 'account_id'),
      active: resource.field(self._.blocks, 'active'),
      fullname: resource.field(self._.blocks, 'fullname'),
      id: resource.field(self._.blocks, 'id'),
      role: resource.field(self._.blocks, 'role'),
      username: resource.field(self._.blocks, 'username'),
    },
  },
  data: {
    local blockType = provider.blockType('data'),
    alert_v2(name, block): {
      local resource = blockType.resource('logzio_alert_v2', name),
      _: resource._(block, {
        alert_notification_endpoints: build.template(std.get(block, 'alert_notification_endpoints', null)),
        correlation_operator: build.template(std.get(block, 'correlation_operator', null)),
        created_at: build.template(std.get(block, 'created_at', null)),
        created_by: build.template(std.get(block, 'created_by', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        is_enabled: build.template(std.get(block, 'is_enabled', null)),
        joins: build.template(std.get(block, 'joins', null)),
        notification_emails: build.template(std.get(block, 'notification_emails', null)),
        output_type: build.template(std.get(block, 'output_type', null)),
        schedule_cron_expression: build.template(std.get(block, 'schedule_cron_expression', null)),
        schedule_timezone: build.template(std.get(block, 'schedule_timezone', null)),
        search_timeframe_minutes: build.template(std.get(block, 'search_timeframe_minutes', null)),
        sub_components: build.template(std.get(block, 'sub_components', null)),
        suppress_notifications_minutes: build.template(std.get(block, 'suppress_notifications_minutes', null)),
        tags: build.template(std.get(block, 'tags', null)),
        title: build.template(std.get(block, 'title', null)),
        updated_at: build.template(std.get(block, 'updated_at', null)),
        updated_by: build.template(std.get(block, 'updated_by', null)),
      }),
      alert_notification_endpoints: resource.field(self._.blocks, 'alert_notification_endpoints'),
      correlation_operator: resource.field(self._.blocks, 'correlation_operator'),
      created_at: resource.field(self._.blocks, 'created_at'),
      created_by: resource.field(self._.blocks, 'created_by'),
      description: resource.field(self._.blocks, 'description'),
      id: resource.field(self._.blocks, 'id'),
      is_enabled: resource.field(self._.blocks, 'is_enabled'),
      joins: resource.field(self._.blocks, 'joins'),
      notification_emails: resource.field(self._.blocks, 'notification_emails'),
      output_type: resource.field(self._.blocks, 'output_type'),
      schedule_cron_expression: resource.field(self._.blocks, 'schedule_cron_expression'),
      schedule_timezone: resource.field(self._.blocks, 'schedule_timezone'),
      search_timeframe_minutes: resource.field(self._.blocks, 'search_timeframe_minutes'),
      sub_components: resource.field(self._.blocks, 'sub_components'),
      suppress_notifications_minutes: resource.field(self._.blocks, 'suppress_notifications_minutes'),
      tags: resource.field(self._.blocks, 'tags'),
      title: resource.field(self._.blocks, 'title'),
      updated_at: resource.field(self._.blocks, 'updated_at'),
      updated_by: resource.field(self._.blocks, 'updated_by'),
    },
    archive_logs(name, block): {
      local resource = blockType.resource('logzio_archive_logs', name),
      _: resource._(block, {
        archive_id: build.template(std.get(block, 'archive_id', null)),
        aws_access_key: build.template(std.get(block, 'aws_access_key', null)),
        aws_credentials_type: build.template(std.get(block, 'aws_credentials_type', null)),
        aws_s3_iam_credentials_arn: build.template(std.get(block, 'aws_s3_iam_credentials_arn', null)),
        aws_s3_path: build.template(std.get(block, 'aws_s3_path', null)),
        azure_account_name: build.template(std.get(block, 'azure_account_name', null)),
        azure_blob_path: build.template(std.get(block, 'azure_blob_path', null)),
        azure_client_id: build.template(std.get(block, 'azure_client_id', null)),
        azure_container_name: build.template(std.get(block, 'azure_container_name', null)),
        azure_tenant_id: build.template(std.get(block, 'azure_tenant_id', null)),
        compressed: build.template(std.get(block, 'compressed', null)),
        enabled: build.template(std.get(block, 'enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        storage_type: build.template(std.get(block, 'storage_type', null)),
      }),
      archive_id: resource.field(self._.blocks, 'archive_id'),
      aws_access_key: resource.field(self._.blocks, 'aws_access_key'),
      aws_credentials_type: resource.field(self._.blocks, 'aws_credentials_type'),
      aws_s3_iam_credentials_arn: resource.field(self._.blocks, 'aws_s3_iam_credentials_arn'),
      aws_s3_path: resource.field(self._.blocks, 'aws_s3_path'),
      azure_account_name: resource.field(self._.blocks, 'azure_account_name'),
      azure_blob_path: resource.field(self._.blocks, 'azure_blob_path'),
      azure_client_id: resource.field(self._.blocks, 'azure_client_id'),
      azure_container_name: resource.field(self._.blocks, 'azure_container_name'),
      azure_tenant_id: resource.field(self._.blocks, 'azure_tenant_id'),
      compressed: resource.field(self._.blocks, 'compressed'),
      enabled: resource.field(self._.blocks, 'enabled'),
      id: resource.field(self._.blocks, 'id'),
      storage_type: resource.field(self._.blocks, 'storage_type'),
    },
    authentication_groups(name, block): {
      local resource = blockType.resource('logzio_authentication_groups', name),
      _: resource._(block, {
        authentication_group: build.template(std.get(block, 'authentication_group', null)),
        id: build.template(std.get(block, 'id', null)),
      }),
      authentication_group: resource.field(self._.blocks, 'authentication_group'),
      id: resource.field(self._.blocks, 'id'),
    },
    drop_filter(name, block): {
      local resource = blockType.resource('logzio_drop_filter', name),
      _: resource._(block, {
        active: build.template(std.get(block, 'active', null)),
        drop_filter_id: build.template(std.get(block, 'drop_filter_id', null)),
        gb_threshold: build.template(std.get(block, 'gb_threshold', null)),
        id: build.template(std.get(block, 'id', null)),
        log_type: build.template(std.get(block, 'log_type', null)),
      }),
      active: resource.field(self._.blocks, 'active'),
      drop_filter_id: resource.field(self._.blocks, 'drop_filter_id'),
      gb_threshold: resource.field(self._.blocks, 'gb_threshold'),
      id: resource.field(self._.blocks, 'id'),
      log_type: resource.field(self._.blocks, 'log_type'),
    },
    drop_metrics(name, block): {
      local resource = blockType.resource('logzio_drop_metrics', name),
      _: resource._(block, {
        account_id: build.template(std.get(block, 'account_id', null)),
        active: build.template(std.get(block, 'active', null)),
        created_at: build.template(std.get(block, 'created_at', null)),
        created_by: build.template(std.get(block, 'created_by', null)),
        drop_metric_id: build.template(std.get(block, 'drop_metric_id', null)),
        id: build.template(std.get(block, 'id', null)),
        modified_at: build.template(std.get(block, 'modified_at', null)),
        modified_by: build.template(std.get(block, 'modified_by', null)),
        name: build.template(std.get(block, 'name', null)),
        operator: build.template(std.get(block, 'operator', null)),
      }),
      account_id: resource.field(self._.blocks, 'account_id'),
      active: resource.field(self._.blocks, 'active'),
      created_at: resource.field(self._.blocks, 'created_at'),
      created_by: resource.field(self._.blocks, 'created_by'),
      drop_metric_id: resource.field(self._.blocks, 'drop_metric_id'),
      id: resource.field(self._.blocks, 'id'),
      modified_at: resource.field(self._.blocks, 'modified_at'),
      modified_by: resource.field(self._.blocks, 'modified_by'),
      name: resource.field(self._.blocks, 'name'),
      operator: resource.field(self._.blocks, 'operator'),
    },
    endpoint(name, block): {
      local resource = blockType.resource('logzio_endpoint', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        endpoint_type: build.template(std.get(block, 'endpoint_type', null)),
        id: build.template(std.get(block, 'id', null)),
        title: build.template(std.get(block, 'title', null)),
      }),
      description: resource.field(self._.blocks, 'description'),
      endpoint_type: resource.field(self._.blocks, 'endpoint_type'),
      id: resource.field(self._.blocks, 'id'),
      title: resource.field(self._.blocks, 'title'),
    },
    grafana_dashboard(name, block): {
      local resource = blockType.resource('logzio_grafana_dashboard', name),
      _: resource._(block, {
        dashboard_json: build.template(std.get(block, 'dashboard_json', null)),
        dashboard_uid: build.template(block.dashboard_uid),
        folder_uid: build.template(std.get(block, 'folder_uid', null)),
        id: build.template(std.get(block, 'id', null)),
        url: build.template(std.get(block, 'url', null)),
      }),
      dashboard_json: resource.field(self._.blocks, 'dashboard_json'),
      dashboard_uid: resource.field(self._.blocks, 'dashboard_uid'),
      folder_uid: resource.field(self._.blocks, 'folder_uid'),
      id: resource.field(self._.blocks, 'id'),
      url: resource.field(self._.blocks, 'url'),
    },
    grafana_folder(name, block): {
      local resource = blockType.resource('logzio_grafana_folder', name),
      _: resource._(block, {
        folder_id: build.template(std.get(block, 'folder_id', null)),
        id: build.template(std.get(block, 'id', null)),
        title: build.template(block.title),
        uid: build.template(std.get(block, 'uid', null)),
        url: build.template(std.get(block, 'url', null)),
        version: build.template(std.get(block, 'version', null)),
      }),
      folder_id: resource.field(self._.blocks, 'folder_id'),
      id: resource.field(self._.blocks, 'id'),
      title: resource.field(self._.blocks, 'title'),
      uid: resource.field(self._.blocks, 'uid'),
      url: resource.field(self._.blocks, 'url'),
      version: resource.field(self._.blocks, 'version'),
    },
    kibana_object(name, block): {
      local resource = blockType.resource('logzio_kibana_object', name),
      _: resource._(block, {
        data: build.template(std.get(block, 'data', null)),
        id: build.template(std.get(block, 'id', null)),
        kibana_version: build.template(std.get(block, 'kibana_version', null)),
        object_id: build.template(block.object_id),
        object_type: build.template(block.object_type),
      }),
      data: resource.field(self._.blocks, 'data'),
      id: resource.field(self._.blocks, 'id'),
      kibana_version: resource.field(self._.blocks, 'kibana_version'),
      object_id: resource.field(self._.blocks, 'object_id'),
      object_type: resource.field(self._.blocks, 'object_type'),
    },
    log_shipping_token(name, block): {
      local resource = blockType.resource('logzio_log_shipping_token', name),
      _: resource._(block, {
        created_at: build.template(std.get(block, 'created_at', null)),
        created_by: build.template(std.get(block, 'created_by', null)),
        enabled: build.template(std.get(block, 'enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        token: build.template(std.get(block, 'token', null)),
        token_id: build.template(std.get(block, 'token_id', null)),
        updated_at: build.template(std.get(block, 'updated_at', null)),
        updated_by: build.template(std.get(block, 'updated_by', null)),
      }),
      created_at: resource.field(self._.blocks, 'created_at'),
      created_by: resource.field(self._.blocks, 'created_by'),
      enabled: resource.field(self._.blocks, 'enabled'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      token: resource.field(self._.blocks, 'token'),
      token_id: resource.field(self._.blocks, 'token_id'),
      updated_at: resource.field(self._.blocks, 'updated_at'),
      updated_by: resource.field(self._.blocks, 'updated_by'),
    },
    metrics_account(name, block): {
      local resource = blockType.resource('logzio_metrics_account', name),
      _: resource._(block, {
        account_id: build.template(std.get(block, 'account_id', null)),
        account_name: build.template(std.get(block, 'account_name', null)),
        account_token: build.template(std.get(block, 'account_token', null)),
        authorized_accounts: build.template(std.get(block, 'authorized_accounts', null)),
        email: build.template(std.get(block, 'email', null)),
        id: build.template(std.get(block, 'id', null)),
        plan_uts: build.template(std.get(block, 'plan_uts', null)),
      }),
      account_id: resource.field(self._.blocks, 'account_id'),
      account_name: resource.field(self._.blocks, 'account_name'),
      account_token: resource.field(self._.blocks, 'account_token'),
      authorized_accounts: resource.field(self._.blocks, 'authorized_accounts'),
      email: resource.field(self._.blocks, 'email'),
      id: resource.field(self._.blocks, 'id'),
      plan_uts: resource.field(self._.blocks, 'plan_uts'),
    },
    metrics_rollup_rules(name, block): {
      local resource = blockType.resource('logzio_metrics_rollup_rules', name),
      _: resource._(block, {
        account_id: build.template(std.get(block, 'account_id', null)),
        cluster_id: build.template(std.get(block, 'cluster_id', null)),
        drop_original_metric: build.template(std.get(block, 'drop_original_metric', null)),
        drop_policy_rule_id: build.template(std.get(block, 'drop_policy_rule_id', null)),
        filter: build.template(std.get(block, 'filter', null)),
        id: build.template(std.get(block, 'id', null)),
        is_deleted: build.template(std.get(block, 'is_deleted', null)),
        labels: build.template(std.get(block, 'labels', null)),
        labels_elimination_method: build.template(std.get(block, 'labels_elimination_method', null)),
        metric_name: build.template(std.get(block, 'metric_name', null)),
        metric_type: build.template(std.get(block, 'metric_type', null)),
        name: build.template(std.get(block, 'name', null)),
        namespaces: build.template(std.get(block, 'namespaces', null)),
        new_metric_name_template: build.template(std.get(block, 'new_metric_name_template', null)),
        rollup_function: build.template(std.get(block, 'rollup_function', null)),
        version: build.template(std.get(block, 'version', null)),
      }),
      account_id: resource.field(self._.blocks, 'account_id'),
      cluster_id: resource.field(self._.blocks, 'cluster_id'),
      drop_original_metric: resource.field(self._.blocks, 'drop_original_metric'),
      drop_policy_rule_id: resource.field(self._.blocks, 'drop_policy_rule_id'),
      filter: resource.field(self._.blocks, 'filter'),
      id: resource.field(self._.blocks, 'id'),
      is_deleted: resource.field(self._.blocks, 'is_deleted'),
      labels: resource.field(self._.blocks, 'labels'),
      labels_elimination_method: resource.field(self._.blocks, 'labels_elimination_method'),
      metric_name: resource.field(self._.blocks, 'metric_name'),
      metric_type: resource.field(self._.blocks, 'metric_type'),
      name: resource.field(self._.blocks, 'name'),
      namespaces: resource.field(self._.blocks, 'namespaces'),
      new_metric_name_template: resource.field(self._.blocks, 'new_metric_name_template'),
      rollup_function: resource.field(self._.blocks, 'rollup_function'),
      version: resource.field(self._.blocks, 'version'),
    },
    restore_logs(name, block): {
      local resource = blockType.resource('logzio_restore_logs', name),
      _: resource._(block, {
        account_id: build.template(std.get(block, 'account_id', null)),
        account_name: build.template(std.get(block, 'account_name', null)),
        created_at: build.template(std.get(block, 'created_at', null)),
        end_time: build.template(std.get(block, 'end_time', null)),
        expires_at: build.template(std.get(block, 'expires_at', null)),
        finished_at: build.template(std.get(block, 'finished_at', null)),
        id: build.template(std.get(block, 'id', null)),
        restore_operation_id: build.template(std.get(block, 'restore_operation_id', null)),
        restored_volume_gb: build.template(std.get(block, 'restored_volume_gb', null)),
        start_time: build.template(std.get(block, 'start_time', null)),
        started_at: build.template(std.get(block, 'started_at', null)),
        status: build.template(std.get(block, 'status', null)),
      }),
      account_id: resource.field(self._.blocks, 'account_id'),
      account_name: resource.field(self._.blocks, 'account_name'),
      created_at: resource.field(self._.blocks, 'created_at'),
      end_time: resource.field(self._.blocks, 'end_time'),
      expires_at: resource.field(self._.blocks, 'expires_at'),
      finished_at: resource.field(self._.blocks, 'finished_at'),
      id: resource.field(self._.blocks, 'id'),
      restore_operation_id: resource.field(self._.blocks, 'restore_operation_id'),
      restored_volume_gb: resource.field(self._.blocks, 'restored_volume_gb'),
      start_time: resource.field(self._.blocks, 'start_time'),
      started_at: resource.field(self._.blocks, 'started_at'),
      status: resource.field(self._.blocks, 'status'),
    },
    s3_fetcher(name, block): {
      local resource = blockType.resource('logzio_s3_fetcher', name),
      _: resource._(block, {
        active: build.template(std.get(block, 'active', null)),
        add_s3_object_key_as_log_field: build.template(std.get(block, 'add_s3_object_key_as_log_field', null)),
        aws_access_key: build.template(std.get(block, 'aws_access_key', null)),
        aws_arn: build.template(std.get(block, 'aws_arn', null)),
        aws_region: build.template(std.get(block, 'aws_region', null)),
        bucket_name: build.template(std.get(block, 'bucket_name', null)),
        fetcher_id: build.template(block.fetcher_id),
        id: build.template(std.get(block, 'id', null)),
        logs_type: build.template(std.get(block, 'logs_type', null)),
        prefix: build.template(std.get(block, 'prefix', null)),
      }),
      active: resource.field(self._.blocks, 'active'),
      add_s3_object_key_as_log_field: resource.field(self._.blocks, 'add_s3_object_key_as_log_field'),
      aws_access_key: resource.field(self._.blocks, 'aws_access_key'),
      aws_arn: resource.field(self._.blocks, 'aws_arn'),
      aws_region: resource.field(self._.blocks, 'aws_region'),
      bucket_name: resource.field(self._.blocks, 'bucket_name'),
      fetcher_id: resource.field(self._.blocks, 'fetcher_id'),
      id: resource.field(self._.blocks, 'id'),
      logs_type: resource.field(self._.blocks, 'logs_type'),
      prefix: resource.field(self._.blocks, 'prefix'),
    },
    subaccount(name, block): {
      local resource = blockType.resource('logzio_subaccount', name),
      _: resource._(block, {
        accessible: build.template(std.get(block, 'accessible', null)),
        account_id: build.template(std.get(block, 'account_id', null)),
        account_name: build.template(std.get(block, 'account_name', null)),
        account_token: build.template(std.get(block, 'account_token', null)),
        doc_size_setting: build.template(std.get(block, 'doc_size_setting', null)),
        email: build.template(std.get(block, 'email', null)),
        flexible: build.template(std.get(block, 'flexible', null)),
        frequency_minutes: build.template(std.get(block, 'frequency_minutes', null)),
        id: build.template(std.get(block, 'id', null)),
        is_capped: build.template(std.get(block, 'is_capped', null)),
        is_owner: build.template(std.get(block, 'is_owner', null)),
        max_daily_gb: build.template(std.get(block, 'max_daily_gb', null)),
        reserved_daily_gb: build.template(std.get(block, 'reserved_daily_gb', null)),
        retention_days: build.template(std.get(block, 'retention_days', null)),
        searchable: build.template(std.get(block, 'searchable', null)),
        shared_gb: build.template(std.get(block, 'shared_gb', null)),
        sharing_objects_accounts: build.template(std.get(block, 'sharing_objects_accounts', null)),
        snap_search_retention_days: build.template(std.get(block, 'snap_search_retention_days', null)),
        total_time_based_daily_gb: build.template(std.get(block, 'total_time_based_daily_gb', null)),
        utilization_enabled: build.template(std.get(block, 'utilization_enabled', null)),
      }),
      accessible: resource.field(self._.blocks, 'accessible'),
      account_id: resource.field(self._.blocks, 'account_id'),
      account_name: resource.field(self._.blocks, 'account_name'),
      account_token: resource.field(self._.blocks, 'account_token'),
      doc_size_setting: resource.field(self._.blocks, 'doc_size_setting'),
      email: resource.field(self._.blocks, 'email'),
      flexible: resource.field(self._.blocks, 'flexible'),
      frequency_minutes: resource.field(self._.blocks, 'frequency_minutes'),
      id: resource.field(self._.blocks, 'id'),
      is_capped: resource.field(self._.blocks, 'is_capped'),
      is_owner: resource.field(self._.blocks, 'is_owner'),
      max_daily_gb: resource.field(self._.blocks, 'max_daily_gb'),
      reserved_daily_gb: resource.field(self._.blocks, 'reserved_daily_gb'),
      retention_days: resource.field(self._.blocks, 'retention_days'),
      searchable: resource.field(self._.blocks, 'searchable'),
      shared_gb: resource.field(self._.blocks, 'shared_gb'),
      sharing_objects_accounts: resource.field(self._.blocks, 'sharing_objects_accounts'),
      snap_search_retention_days: resource.field(self._.blocks, 'snap_search_retention_days'),
      total_time_based_daily_gb: resource.field(self._.blocks, 'total_time_based_daily_gb'),
      utilization_enabled: resource.field(self._.blocks, 'utilization_enabled'),
    },
    user(name, block): {
      local resource = blockType.resource('logzio_user', name),
      _: resource._(block, {
        account_id: build.template(std.get(block, 'account_id', null)),
        active: build.template(std.get(block, 'active', null)),
        fullname: build.template(std.get(block, 'fullname', null)),
        id: build.template(std.get(block, 'id', null)),
        role: build.template(std.get(block, 'role', null)),
        username: build.template(std.get(block, 'username', null)),
      }),
      account_id: resource.field(self._.blocks, 'account_id'),
      active: resource.field(self._.blocks, 'active'),
      fullname: resource.field(self._.blocks, 'fullname'),
      id: resource.field(self._.blocks, 'id'),
      role: resource.field(self._.blocks, 'role'),
      username: resource.field(self._.blocks, 'username'),
    },
  },
};
local providerWithConfiguration = provider(null, null) + {
  withConfiguration(alias, block): provider(block, {
    alias: alias,
    api_token: build.template(block.api_token),
    custom_api_url: build.template(std.get(block, 'custom_api_url', null)),
    region: build.template(std.get(block, 'region', null)),
  }),
};
providerWithConfiguration
