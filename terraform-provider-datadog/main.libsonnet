local build = {
  expression(val):
    if std.type(val) == 'object' then
      if std.objectHas(val, '_')
      then
        if std.objectHas(val._, 'ref')
        then val._.ref
        else '"%s"' % [val._.str]
      else '{%s}' % [std.join(',', std.map(function(key) '%s:%s' % [self.expression(key), self.expression(val[key])], std.objectFields(val)))]
    else if std.type(val) == 'array' then '[%s]' % [std.join(',', std.map(function(element) self.expression(element), val))]
    else if std.type(val) == 'string' then '"%s"' % [val]
    else '"%s"' % [val],
  template(val):
    if std.type(val) == 'object' then
      if std.objectHas(val, '_')
      then
        if std.objectHas(val._, 'ref')
        then std.strReplace(self.string(val), '\n', '\\n')
        else val._.str
      else std.mapWithKey(function(key, value) self.template(value), val)
    else if std.type(val) == 'array' then std.map(function(element) self.template(element), val)
    else if std.type(val) == 'string' then std.strReplace(self.string(val), '\n', '\\n')
    else val,
  string(val):
    if std.type(val) == 'object' then
      if std.objectHas(val, '_')
      then
        if std.objectHas(val._, 'ref')
        then '${%s}' % [val._.ref]
        else val._.str
      else '${%s}' % [self.expression(val)]
    else if std.type(val) == 'array' then '${%s}' % [self.expression(val)]
    else if std.type(val) == 'string' then val
    else val,
  blocks(val):
    if std.type(val) == 'object'
    then
      if std.objectHas(val, '_')
      then
        if std.objectHas(val._, 'blocks')
        then val._.blocks
        else
          if std.objectHas(val._, 'block')
          then { [val._.ref]: val._.block }
          else {}
      else std.foldl(function(acc, val) std.mergePatch(acc, val), std.map(function(key) build.blocks(val[key]), std.objectFields(val)), {})
    else if std.type(val) == 'array'
    then std.foldl(function(acc, val) std.mergePatch(acc, val), std.map(function(element) build.blocks(element), val), {})
    else {},
};

local providerTemplate(provider, requirements, rawConfiguration, configuration) = {
  local providerRequirements = {
    ['terraform.required_providers.%s' % [provider]]: requirements,
  },
  local providerAlias = if configuration == null then null else std.get(configuration, 'alias', null),
  local providerConfiguration =
    if configuration == null then { _: { refBlock: {}, blocks: [] } } else {
      _: {
        local _ = self,
        ref: '%s.%s' % [provider, configuration.alias],
        refBlock: {
          provider: _.ref,
        },
        block: {
          provider: {
            [provider]: std.prune(configuration),
          },
        },
        blocks: build.blocks(rawConfiguration) + {
          [_.ref]: _.block,
        },
      },
    },
  blockType(blockType): {
    local blockTypePath = if blockType == 'resource' then [] else ['data'],
    resource(type, name): {
      local resourceType = std.substr(type, std.length(provider) + 1, std.length(type)),
      local resourcePath = blockTypePath + [type, name],
      _(rawBlock, block): {
        local _ = self,
        local metaBlock = {
          depends_on: build.template(std.get(rawBlock, 'depends_on', null)),
          count: build.template(std.get(rawBlock, 'count', null)),
          for_each: build.template(std.get(rawBlock, 'for_each', null)),
        },
        type: if std.objectHas(rawBlock, 'for_each') then 'map' else if std.objectHas(rawBlock, 'count') then 'list' else 'object',
        provider: provider,
        providerAlias: providerAlias,
        resourceType: resourceType,
        name: name,
        ref: std.join('.', resourcePath),
        block: {
          [blockType]: {
            [type]: {
              [name]: std.prune(providerConfiguration._.refBlock + metaBlock + block),
            },
          },
        },
        blocks: build.blocks([providerConfiguration] + [rawBlock]) + providerRequirements + {
          [_.ref]: _.block,
        },
      },
      field(blocks, fieldName): {
        local fieldPath = resourcePath + [fieldName],
        _: {
          ref: std.join('.', fieldPath),
          blocks: blocks,
        },
      },
    },
  },
  func(name, parameters=[]): {
    local parameterString = std.join(', ', [build.expression(parameter) for parameter in parameters]),
    _: {
      ref: 'provider::%s::%s(%s)' % [provider, name, parameterString],
      blocks: build.blocks([providerConfiguration] + [parameters]) + providerRequirements,
    },
  },
};

local provider(rawConfiguration, configuration) = {
  local requirements = {
    source: 'registry.terraform.io/datadog/datadog',
    version: '3.58.0',
  },
  local provider = providerTemplate('datadog', requirements, rawConfiguration, configuration),
  resource: {
    local blockType = provider.blockType('resource'),
    action_connection(name, block): {
      local resource = blockType.resource('datadog_action_connection', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
      }),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
    },
    api_key(name, block): {
      local resource = blockType.resource('datadog_api_key', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        key: build.template(std.get(block, 'key', null)),
        name: build.template(block.name),
        remote_config_read_enabled: build.template(std.get(block, 'remote_config_read_enabled', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      key: resource.field(self._.blocks, 'key'),
      name: resource.field(self._.blocks, 'name'),
      remote_config_read_enabled: resource.field(self._.blocks, 'remote_config_read_enabled'),
    },
    apm_retention_filter(name, block): {
      local resource = blockType.resource('datadog_apm_retention_filter', name),
      _: resource._(block, {
        enabled: build.template(block.enabled),
        filter_type: build.template(block.filter_type),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        rate: build.template(block.rate),
      }),
      enabled: resource.field(self._.blocks, 'enabled'),
      filter_type: resource.field(self._.blocks, 'filter_type'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      rate: resource.field(self._.blocks, 'rate'),
    },
    apm_retention_filter_order(name, block): {
      local resource = blockType.resource('datadog_apm_retention_filter_order', name),
      _: resource._(block, {
        filter_ids: build.template(block.filter_ids),
        id: build.template(std.get(block, 'id', null)),
      }),
      filter_ids: resource.field(self._.blocks, 'filter_ids'),
      id: resource.field(self._.blocks, 'id'),
    },
    application_key(name, block): {
      local resource = blockType.resource('datadog_application_key', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        key: build.template(std.get(block, 'key', null)),
        name: build.template(block.name),
        scopes: build.template(std.get(block, 'scopes', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      key: resource.field(self._.blocks, 'key'),
      name: resource.field(self._.blocks, 'name'),
      scopes: resource.field(self._.blocks, 'scopes'),
    },
    appsec_waf_custom_rule(name, block): {
      local resource = blockType.resource('datadog_appsec_waf_custom_rule', name),
      _: resource._(block, {
        blocking: build.template(block.blocking),
        enabled: build.template(block.enabled),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        path_glob: build.template(std.get(block, 'path_glob', null)),
        tags: build.template(block.tags),
      }),
      blocking: resource.field(self._.blocks, 'blocking'),
      enabled: resource.field(self._.blocks, 'enabled'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      path_glob: resource.field(self._.blocks, 'path_glob'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    appsec_waf_exclusion_filter(name, block): {
      local resource = blockType.resource('datadog_appsec_waf_exclusion_filter', name),
      _: resource._(block, {
        description: build.template(block.description),
        enabled: build.template(block.enabled),
        event_query: build.template(std.get(block, 'event_query', null)),
        id: build.template(std.get(block, 'id', null)),
        ip_list: build.template(std.get(block, 'ip_list', null)),
        on_match: build.template(std.get(block, 'on_match', null)),
        parameters: build.template(std.get(block, 'parameters', null)),
        path_glob: build.template(std.get(block, 'path_glob', null)),
      }),
      description: resource.field(self._.blocks, 'description'),
      enabled: resource.field(self._.blocks, 'enabled'),
      event_query: resource.field(self._.blocks, 'event_query'),
      id: resource.field(self._.blocks, 'id'),
      ip_list: resource.field(self._.blocks, 'ip_list'),
      on_match: resource.field(self._.blocks, 'on_match'),
      parameters: resource.field(self._.blocks, 'parameters'),
      path_glob: resource.field(self._.blocks, 'path_glob'),
    },
    authn_mapping(name, block): {
      local resource = blockType.resource('datadog_authn_mapping', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        key: build.template(block.key),
        role: build.template(std.get(block, 'role', null)),
        team: build.template(std.get(block, 'team', null)),
        value: build.template(block.value),
      }),
      id: resource.field(self._.blocks, 'id'),
      key: resource.field(self._.blocks, 'key'),
      role: resource.field(self._.blocks, 'role'),
      team: resource.field(self._.blocks, 'team'),
      value: resource.field(self._.blocks, 'value'),
    },
    child_organization(name, block): {
      local resource = blockType.resource('datadog_child_organization', name),
      _: resource._(block, {
        api_key: build.template(std.get(block, 'api_key', null)),
        application_key: build.template(std.get(block, 'application_key', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        public_id: build.template(std.get(block, 'public_id', null)),
        settings: build.template(std.get(block, 'settings', null)),
        user: build.template(std.get(block, 'user', null)),
      }),
      api_key: resource.field(self._.blocks, 'api_key'),
      application_key: resource.field(self._.blocks, 'application_key'),
      description: resource.field(self._.blocks, 'description'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      public_id: resource.field(self._.blocks, 'public_id'),
      settings: resource.field(self._.blocks, 'settings'),
      user: resource.field(self._.blocks, 'user'),
    },
    cloud_configuration_rule(name, block): {
      local resource = blockType.resource('datadog_cloud_configuration_rule', name),
      _: resource._(block, {
        enabled: build.template(block.enabled),
        group_by: build.template(std.get(block, 'group_by', null)),
        id: build.template(std.get(block, 'id', null)),
        message: build.template(block.message),
        name: build.template(block.name),
        notifications: build.template(std.get(block, 'notifications', null)),
        policy: build.template(block.policy),
        related_resource_types: build.template(std.get(block, 'related_resource_types', null)),
        resource_type: build.template(block.resource_type),
        severity: build.template(block.severity),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      enabled: resource.field(self._.blocks, 'enabled'),
      group_by: resource.field(self._.blocks, 'group_by'),
      id: resource.field(self._.blocks, 'id'),
      message: resource.field(self._.blocks, 'message'),
      name: resource.field(self._.blocks, 'name'),
      notifications: resource.field(self._.blocks, 'notifications'),
      policy: resource.field(self._.blocks, 'policy'),
      related_resource_types: resource.field(self._.blocks, 'related_resource_types'),
      resource_type: resource.field(self._.blocks, 'resource_type'),
      severity: resource.field(self._.blocks, 'severity'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    cloud_workload_security_agent_rule(name, block): {
      local resource = blockType.resource('datadog_cloud_workload_security_agent_rule', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        enabled: build.template(std.get(block, 'enabled', null)),
        expression: build.template(block.expression),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
      }),
      description: resource.field(self._.blocks, 'description'),
      enabled: resource.field(self._.blocks, 'enabled'),
      expression: resource.field(self._.blocks, 'expression'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
    },
    csm_threats_agent_rule(name, block): {
      local resource = blockType.resource('datadog_csm_threats_agent_rule', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        enabled: build.template(block.enabled),
        expression: build.template(block.expression),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
      }),
      description: resource.field(self._.blocks, 'description'),
      enabled: resource.field(self._.blocks, 'enabled'),
      expression: resource.field(self._.blocks, 'expression'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
    },
    dashboard(name, block): {
      local resource = blockType.resource('datadog_dashboard', name),
      _: resource._(block, {
        dashboard_lists: build.template(std.get(block, 'dashboard_lists', null)),
        dashboard_lists_removed: build.template(std.get(block, 'dashboard_lists_removed', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        is_read_only: build.template(std.get(block, 'is_read_only', null)),
        layout_type: build.template(block.layout_type),
        notify_list: build.template(std.get(block, 'notify_list', null)),
        reflow_type: build.template(std.get(block, 'reflow_type', null)),
        restricted_roles: build.template(std.get(block, 'restricted_roles', null)),
        tags: build.template(std.get(block, 'tags', null)),
        title: build.template(block.title),
        url: build.template(std.get(block, 'url', null)),
      }),
      dashboard_lists: resource.field(self._.blocks, 'dashboard_lists'),
      dashboard_lists_removed: resource.field(self._.blocks, 'dashboard_lists_removed'),
      description: resource.field(self._.blocks, 'description'),
      id: resource.field(self._.blocks, 'id'),
      is_read_only: resource.field(self._.blocks, 'is_read_only'),
      layout_type: resource.field(self._.blocks, 'layout_type'),
      notify_list: resource.field(self._.blocks, 'notify_list'),
      reflow_type: resource.field(self._.blocks, 'reflow_type'),
      restricted_roles: resource.field(self._.blocks, 'restricted_roles'),
      tags: resource.field(self._.blocks, 'tags'),
      title: resource.field(self._.blocks, 'title'),
      url: resource.field(self._.blocks, 'url'),
    },
    dashboard_json(name, block): {
      local resource = blockType.resource('datadog_dashboard_json', name),
      _: resource._(block, {
        dashboard: build.template(block.dashboard),
        dashboard_lists: build.template(std.get(block, 'dashboard_lists', null)),
        dashboard_lists_removed: build.template(std.get(block, 'dashboard_lists_removed', null)),
        id: build.template(std.get(block, 'id', null)),
        url: build.template(std.get(block, 'url', null)),
      }),
      dashboard: resource.field(self._.blocks, 'dashboard'),
      dashboard_lists: resource.field(self._.blocks, 'dashboard_lists'),
      dashboard_lists_removed: resource.field(self._.blocks, 'dashboard_lists_removed'),
      id: resource.field(self._.blocks, 'id'),
      url: resource.field(self._.blocks, 'url'),
    },
    dashboard_list(name, block): {
      local resource = blockType.resource('datadog_dashboard_list', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
      }),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
    },
    domain_allowlist(name, block): {
      local resource = blockType.resource('datadog_domain_allowlist', name),
      _: resource._(block, {
        domains: build.template(block.domains),
        enabled: build.template(block.enabled),
        id: build.template(std.get(block, 'id', null)),
      }),
      domains: resource.field(self._.blocks, 'domains'),
      enabled: resource.field(self._.blocks, 'enabled'),
      id: resource.field(self._.blocks, 'id'),
    },
    downtime(name, block): {
      local resource = blockType.resource('datadog_downtime', name),
      _: resource._(block, {
        active: build.template(std.get(block, 'active', null)),
        active_child_id: build.template(std.get(block, 'active_child_id', null)),
        disabled: build.template(std.get(block, 'disabled', null)),
        end: build.template(std.get(block, 'end', null)),
        end_date: build.template(std.get(block, 'end_date', null)),
        id: build.template(std.get(block, 'id', null)),
        message: build.template(std.get(block, 'message', null)),
        monitor_id: build.template(std.get(block, 'monitor_id', null)),
        monitor_tags: build.template(std.get(block, 'monitor_tags', null)),
        mute_first_recovery_notification: build.template(std.get(block, 'mute_first_recovery_notification', null)),
        scope: build.template(block.scope),
        start: build.template(std.get(block, 'start', null)),
        start_date: build.template(std.get(block, 'start_date', null)),
        timezone: build.template(std.get(block, 'timezone', null)),
      }),
      active: resource.field(self._.blocks, 'active'),
      active_child_id: resource.field(self._.blocks, 'active_child_id'),
      disabled: resource.field(self._.blocks, 'disabled'),
      end: resource.field(self._.blocks, 'end'),
      end_date: resource.field(self._.blocks, 'end_date'),
      id: resource.field(self._.blocks, 'id'),
      message: resource.field(self._.blocks, 'message'),
      monitor_id: resource.field(self._.blocks, 'monitor_id'),
      monitor_tags: resource.field(self._.blocks, 'monitor_tags'),
      mute_first_recovery_notification: resource.field(self._.blocks, 'mute_first_recovery_notification'),
      scope: resource.field(self._.blocks, 'scope'),
      start: resource.field(self._.blocks, 'start'),
      start_date: resource.field(self._.blocks, 'start_date'),
      timezone: resource.field(self._.blocks, 'timezone'),
    },
    downtime_schedule(name, block): {
      local resource = blockType.resource('datadog_downtime_schedule', name),
      _: resource._(block, {
        display_timezone: build.template(std.get(block, 'display_timezone', null)),
        id: build.template(std.get(block, 'id', null)),
        message: build.template(std.get(block, 'message', null)),
        mute_first_recovery_notification: build.template(std.get(block, 'mute_first_recovery_notification', null)),
        notify_end_states: build.template(std.get(block, 'notify_end_states', null)),
        notify_end_types: build.template(std.get(block, 'notify_end_types', null)),
        scope: build.template(block.scope),
      }),
      display_timezone: resource.field(self._.blocks, 'display_timezone'),
      id: resource.field(self._.blocks, 'id'),
      message: resource.field(self._.blocks, 'message'),
      mute_first_recovery_notification: resource.field(self._.blocks, 'mute_first_recovery_notification'),
      notify_end_states: resource.field(self._.blocks, 'notify_end_states'),
      notify_end_types: resource.field(self._.blocks, 'notify_end_types'),
      scope: resource.field(self._.blocks, 'scope'),
    },
    integration_aws(name, block): {
      local resource = blockType.resource('datadog_integration_aws', name),
      _: resource._(block, {
        access_key_id: build.template(std.get(block, 'access_key_id', null)),
        account_id: build.template(std.get(block, 'account_id', null)),
        account_specific_namespace_rules: build.template(std.get(block, 'account_specific_namespace_rules', null)),
        cspm_resource_collection_enabled: build.template(std.get(block, 'cspm_resource_collection_enabled', null)),
        excluded_regions: build.template(std.get(block, 'excluded_regions', null)),
        extended_resource_collection_enabled: build.template(std.get(block, 'extended_resource_collection_enabled', null)),
        external_id: build.template(std.get(block, 'external_id', null)),
        filter_tags: build.template(std.get(block, 'filter_tags', null)),
        host_tags: build.template(std.get(block, 'host_tags', null)),
        id: build.template(std.get(block, 'id', null)),
        metrics_collection_enabled: build.template(std.get(block, 'metrics_collection_enabled', null)),
        resource_collection_enabled: build.template(std.get(block, 'resource_collection_enabled', null)),
        role_name: build.template(std.get(block, 'role_name', null)),
        secret_access_key: build.template(std.get(block, 'secret_access_key', null)),
      }),
      access_key_id: resource.field(self._.blocks, 'access_key_id'),
      account_id: resource.field(self._.blocks, 'account_id'),
      account_specific_namespace_rules: resource.field(self._.blocks, 'account_specific_namespace_rules'),
      cspm_resource_collection_enabled: resource.field(self._.blocks, 'cspm_resource_collection_enabled'),
      excluded_regions: resource.field(self._.blocks, 'excluded_regions'),
      extended_resource_collection_enabled: resource.field(self._.blocks, 'extended_resource_collection_enabled'),
      external_id: resource.field(self._.blocks, 'external_id'),
      filter_tags: resource.field(self._.blocks, 'filter_tags'),
      host_tags: resource.field(self._.blocks, 'host_tags'),
      id: resource.field(self._.blocks, 'id'),
      metrics_collection_enabled: resource.field(self._.blocks, 'metrics_collection_enabled'),
      resource_collection_enabled: resource.field(self._.blocks, 'resource_collection_enabled'),
      role_name: resource.field(self._.blocks, 'role_name'),
      secret_access_key: resource.field(self._.blocks, 'secret_access_key'),
    },
    integration_aws_account(name, block): {
      local resource = blockType.resource('datadog_integration_aws_account', name),
      _: resource._(block, {
        account_tags: build.template(std.get(block, 'account_tags', null)),
        aws_account_id: build.template(block.aws_account_id),
        aws_partition: build.template(block.aws_partition),
        id: build.template(std.get(block, 'id', null)),
      }),
      account_tags: resource.field(self._.blocks, 'account_tags'),
      aws_account_id: resource.field(self._.blocks, 'aws_account_id'),
      aws_partition: resource.field(self._.blocks, 'aws_partition'),
      id: resource.field(self._.blocks, 'id'),
    },
    integration_aws_event_bridge(name, block): {
      local resource = blockType.resource('datadog_integration_aws_event_bridge', name),
      _: resource._(block, {
        account_id: build.template(block.account_id),
        create_event_bus: build.template(std.get(block, 'create_event_bus', null)),
        event_generator_name: build.template(block.event_generator_name),
        id: build.template(std.get(block, 'id', null)),
        region: build.template(block.region),
      }),
      account_id: resource.field(self._.blocks, 'account_id'),
      create_event_bus: resource.field(self._.blocks, 'create_event_bus'),
      event_generator_name: resource.field(self._.blocks, 'event_generator_name'),
      id: resource.field(self._.blocks, 'id'),
      region: resource.field(self._.blocks, 'region'),
    },
    integration_aws_external_id(name, block): {
      local resource = blockType.resource('datadog_integration_aws_external_id', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
    },
    integration_aws_lambda_arn(name, block): {
      local resource = blockType.resource('datadog_integration_aws_lambda_arn', name),
      _: resource._(block, {
        account_id: build.template(block.account_id),
        id: build.template(std.get(block, 'id', null)),
        lambda_arn: build.template(block.lambda_arn),
      }),
      account_id: resource.field(self._.blocks, 'account_id'),
      id: resource.field(self._.blocks, 'id'),
      lambda_arn: resource.field(self._.blocks, 'lambda_arn'),
    },
    integration_aws_log_collection(name, block): {
      local resource = blockType.resource('datadog_integration_aws_log_collection', name),
      _: resource._(block, {
        account_id: build.template(block.account_id),
        id: build.template(std.get(block, 'id', null)),
        services: build.template(block.services),
      }),
      account_id: resource.field(self._.blocks, 'account_id'),
      id: resource.field(self._.blocks, 'id'),
      services: resource.field(self._.blocks, 'services'),
    },
    integration_aws_tag_filter(name, block): {
      local resource = blockType.resource('datadog_integration_aws_tag_filter', name),
      _: resource._(block, {
        account_id: build.template(block.account_id),
        id: build.template(std.get(block, 'id', null)),
        namespace: build.template(block.namespace),
        tag_filter_str: build.template(block.tag_filter_str),
      }),
      account_id: resource.field(self._.blocks, 'account_id'),
      id: resource.field(self._.blocks, 'id'),
      namespace: resource.field(self._.blocks, 'namespace'),
      tag_filter_str: resource.field(self._.blocks, 'tag_filter_str'),
    },
    integration_azure(name, block): {
      local resource = blockType.resource('datadog_integration_azure', name),
      _: resource._(block, {
        app_service_plan_filters: build.template(std.get(block, 'app_service_plan_filters', null)),
        automute: build.template(std.get(block, 'automute', null)),
        client_id: build.template(block.client_id),
        client_secret: build.template(block.client_secret),
        container_app_filters: build.template(std.get(block, 'container_app_filters', null)),
        cspm_enabled: build.template(std.get(block, 'cspm_enabled', null)),
        custom_metrics_enabled: build.template(std.get(block, 'custom_metrics_enabled', null)),
        host_filters: build.template(std.get(block, 'host_filters', null)),
        id: build.template(std.get(block, 'id', null)),
        metrics_enabled: build.template(std.get(block, 'metrics_enabled', null)),
        metrics_enabled_default: build.template(std.get(block, 'metrics_enabled_default', null)),
        resource_collection_enabled: build.template(std.get(block, 'resource_collection_enabled', null)),
        resource_provider_configs: build.template(std.get(block, 'resource_provider_configs', null)),
        tenant_name: build.template(block.tenant_name),
        usage_metrics_enabled: build.template(std.get(block, 'usage_metrics_enabled', null)),
      }),
      app_service_plan_filters: resource.field(self._.blocks, 'app_service_plan_filters'),
      automute: resource.field(self._.blocks, 'automute'),
      client_id: resource.field(self._.blocks, 'client_id'),
      client_secret: resource.field(self._.blocks, 'client_secret'),
      container_app_filters: resource.field(self._.blocks, 'container_app_filters'),
      cspm_enabled: resource.field(self._.blocks, 'cspm_enabled'),
      custom_metrics_enabled: resource.field(self._.blocks, 'custom_metrics_enabled'),
      host_filters: resource.field(self._.blocks, 'host_filters'),
      id: resource.field(self._.blocks, 'id'),
      metrics_enabled: resource.field(self._.blocks, 'metrics_enabled'),
      metrics_enabled_default: resource.field(self._.blocks, 'metrics_enabled_default'),
      resource_collection_enabled: resource.field(self._.blocks, 'resource_collection_enabled'),
      resource_provider_configs: resource.field(self._.blocks, 'resource_provider_configs'),
      tenant_name: resource.field(self._.blocks, 'tenant_name'),
      usage_metrics_enabled: resource.field(self._.blocks, 'usage_metrics_enabled'),
    },
    integration_cloudflare_account(name, block): {
      local resource = blockType.resource('datadog_integration_cloudflare_account', name),
      _: resource._(block, {
        api_key: build.template(block.api_key),
        email: build.template(std.get(block, 'email', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        resources: build.template(std.get(block, 'resources', null)),
      }),
      api_key: resource.field(self._.blocks, 'api_key'),
      email: resource.field(self._.blocks, 'email'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      resources: resource.field(self._.blocks, 'resources'),
    },
    integration_confluent_account(name, block): {
      local resource = blockType.resource('datadog_integration_confluent_account', name),
      _: resource._(block, {
        api_key: build.template(block.api_key),
        api_secret: build.template(block.api_secret),
        id: build.template(std.get(block, 'id', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      api_key: resource.field(self._.blocks, 'api_key'),
      api_secret: resource.field(self._.blocks, 'api_secret'),
      id: resource.field(self._.blocks, 'id'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    integration_confluent_resource(name, block): {
      local resource = blockType.resource('datadog_integration_confluent_resource', name),
      _: resource._(block, {
        account_id: build.template(block.account_id),
        enable_custom_metrics: build.template(std.get(block, 'enable_custom_metrics', null)),
        id: build.template(std.get(block, 'id', null)),
        resource_id: build.template(block.resource_id),
        resource_type: build.template(std.get(block, 'resource_type', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      account_id: resource.field(self._.blocks, 'account_id'),
      enable_custom_metrics: resource.field(self._.blocks, 'enable_custom_metrics'),
      id: resource.field(self._.blocks, 'id'),
      resource_id: resource.field(self._.blocks, 'resource_id'),
      resource_type: resource.field(self._.blocks, 'resource_type'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    integration_fastly_account(name, block): {
      local resource = blockType.resource('datadog_integration_fastly_account', name),
      _: resource._(block, {
        api_key: build.template(block.api_key),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
      }),
      api_key: resource.field(self._.blocks, 'api_key'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
    },
    integration_fastly_service(name, block): {
      local resource = blockType.resource('datadog_integration_fastly_service', name),
      _: resource._(block, {
        account_id: build.template(std.get(block, 'account_id', null)),
        id: build.template(std.get(block, 'id', null)),
        service_id: build.template(block.service_id),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      account_id: resource.field(self._.blocks, 'account_id'),
      id: resource.field(self._.blocks, 'id'),
      service_id: resource.field(self._.blocks, 'service_id'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    integration_gcp(name, block): {
      local resource = blockType.resource('datadog_integration_gcp', name),
      _: resource._(block, {
        automute: build.template(std.get(block, 'automute', null)),
        client_email: build.template(block.client_email),
        client_id: build.template(block.client_id),
        cloud_run_revision_filters: build.template(std.get(block, 'cloud_run_revision_filters', null)),
        cspm_resource_collection_enabled: build.template(std.get(block, 'cspm_resource_collection_enabled', null)),
        host_filters: build.template(std.get(block, 'host_filters', null)),
        id: build.template(std.get(block, 'id', null)),
        is_resource_change_collection_enabled: build.template(std.get(block, 'is_resource_change_collection_enabled', null)),
        is_security_command_center_enabled: build.template(std.get(block, 'is_security_command_center_enabled', null)),
        private_key: build.template(block.private_key),
        private_key_id: build.template(block.private_key_id),
        project_id: build.template(block.project_id),
        resource_collection_enabled: build.template(std.get(block, 'resource_collection_enabled', null)),
      }),
      automute: resource.field(self._.blocks, 'automute'),
      client_email: resource.field(self._.blocks, 'client_email'),
      client_id: resource.field(self._.blocks, 'client_id'),
      cloud_run_revision_filters: resource.field(self._.blocks, 'cloud_run_revision_filters'),
      cspm_resource_collection_enabled: resource.field(self._.blocks, 'cspm_resource_collection_enabled'),
      host_filters: resource.field(self._.blocks, 'host_filters'),
      id: resource.field(self._.blocks, 'id'),
      is_resource_change_collection_enabled: resource.field(self._.blocks, 'is_resource_change_collection_enabled'),
      is_security_command_center_enabled: resource.field(self._.blocks, 'is_security_command_center_enabled'),
      private_key: resource.field(self._.blocks, 'private_key'),
      private_key_id: resource.field(self._.blocks, 'private_key_id'),
      project_id: resource.field(self._.blocks, 'project_id'),
      resource_collection_enabled: resource.field(self._.blocks, 'resource_collection_enabled'),
    },
    integration_gcp_sts(name, block): {
      local resource = blockType.resource('datadog_integration_gcp_sts', name),
      _: resource._(block, {
        account_tags: build.template(std.get(block, 'account_tags', null)),
        automute: build.template(std.get(block, 'automute', null)),
        client_email: build.template(block.client_email),
        cloud_run_revision_filters: build.template(std.get(block, 'cloud_run_revision_filters', null)),
        delegate_account_email: build.template(std.get(block, 'delegate_account_email', null)),
        host_filters: build.template(std.get(block, 'host_filters', null)),
        id: build.template(std.get(block, 'id', null)),
        is_cspm_enabled: build.template(std.get(block, 'is_cspm_enabled', null)),
        is_resource_change_collection_enabled: build.template(std.get(block, 'is_resource_change_collection_enabled', null)),
        is_security_command_center_enabled: build.template(std.get(block, 'is_security_command_center_enabled', null)),
        metric_namespace_configs: build.template(std.get(block, 'metric_namespace_configs', null)),
        resource_collection_enabled: build.template(std.get(block, 'resource_collection_enabled', null)),
      }),
      account_tags: resource.field(self._.blocks, 'account_tags'),
      automute: resource.field(self._.blocks, 'automute'),
      client_email: resource.field(self._.blocks, 'client_email'),
      cloud_run_revision_filters: resource.field(self._.blocks, 'cloud_run_revision_filters'),
      delegate_account_email: resource.field(self._.blocks, 'delegate_account_email'),
      host_filters: resource.field(self._.blocks, 'host_filters'),
      id: resource.field(self._.blocks, 'id'),
      is_cspm_enabled: resource.field(self._.blocks, 'is_cspm_enabled'),
      is_resource_change_collection_enabled: resource.field(self._.blocks, 'is_resource_change_collection_enabled'),
      is_security_command_center_enabled: resource.field(self._.blocks, 'is_security_command_center_enabled'),
      metric_namespace_configs: resource.field(self._.blocks, 'metric_namespace_configs'),
      resource_collection_enabled: resource.field(self._.blocks, 'resource_collection_enabled'),
    },
    integration_ms_teams_tenant_based_handle(name, block): {
      local resource = blockType.resource('datadog_integration_ms_teams_tenant_based_handle', name),
      _: resource._(block, {
        channel_name: build.template(block.channel_name),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        team_name: build.template(block.team_name),
        tenant_name: build.template(block.tenant_name),
      }),
      channel_name: resource.field(self._.blocks, 'channel_name'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      team_name: resource.field(self._.blocks, 'team_name'),
      tenant_name: resource.field(self._.blocks, 'tenant_name'),
    },
    integration_ms_teams_workflows_webhook_handle(name, block): {
      local resource = blockType.resource('datadog_integration_ms_teams_workflows_webhook_handle', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        url: build.template(block.url),
      }),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      url: resource.field(self._.blocks, 'url'),
    },
    integration_opsgenie_service_object(name, block): {
      local resource = blockType.resource('datadog_integration_opsgenie_service_object', name),
      _: resource._(block, {
        custom_url: build.template(std.get(block, 'custom_url', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        opsgenie_api_key: build.template(block.opsgenie_api_key),
        region: build.template(block.region),
      }),
      custom_url: resource.field(self._.blocks, 'custom_url'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      opsgenie_api_key: resource.field(self._.blocks, 'opsgenie_api_key'),
      region: resource.field(self._.blocks, 'region'),
    },
    integration_pagerduty(name, block): {
      local resource = blockType.resource('datadog_integration_pagerduty', name),
      _: resource._(block, {
        api_token: build.template(std.get(block, 'api_token', null)),
        id: build.template(std.get(block, 'id', null)),
        schedules: build.template(std.get(block, 'schedules', null)),
        subdomain: build.template(block.subdomain),
      }),
      api_token: resource.field(self._.blocks, 'api_token'),
      id: resource.field(self._.blocks, 'id'),
      schedules: resource.field(self._.blocks, 'schedules'),
      subdomain: resource.field(self._.blocks, 'subdomain'),
    },
    integration_pagerduty_service_object(name, block): {
      local resource = blockType.resource('datadog_integration_pagerduty_service_object', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        service_key: build.template(block.service_key),
        service_name: build.template(block.service_name),
      }),
      id: resource.field(self._.blocks, 'id'),
      service_key: resource.field(self._.blocks, 'service_key'),
      service_name: resource.field(self._.blocks, 'service_name'),
    },
    integration_slack_channel(name, block): {
      local resource = blockType.resource('datadog_integration_slack_channel', name),
      _: resource._(block, {
        account_name: build.template(block.account_name),
        channel_name: build.template(block.channel_name),
        id: build.template(std.get(block, 'id', null)),
      }),
      account_name: resource.field(self._.blocks, 'account_name'),
      channel_name: resource.field(self._.blocks, 'channel_name'),
      id: resource.field(self._.blocks, 'id'),
    },
    ip_allowlist(name, block): {
      local resource = blockType.resource('datadog_ip_allowlist', name),
      _: resource._(block, {
        enabled: build.template(block.enabled),
        id: build.template(std.get(block, 'id', null)),
      }),
      enabled: resource.field(self._.blocks, 'enabled'),
      id: resource.field(self._.blocks, 'id'),
    },
    logs_archive(name, block): {
      local resource = blockType.resource('datadog_logs_archive', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        include_tags: build.template(std.get(block, 'include_tags', null)),
        name: build.template(block.name),
        query: build.template(block.query),
        rehydration_max_scan_size_in_gb: build.template(std.get(block, 'rehydration_max_scan_size_in_gb', null)),
        rehydration_tags: build.template(std.get(block, 'rehydration_tags', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      include_tags: resource.field(self._.blocks, 'include_tags'),
      name: resource.field(self._.blocks, 'name'),
      query: resource.field(self._.blocks, 'query'),
      rehydration_max_scan_size_in_gb: resource.field(self._.blocks, 'rehydration_max_scan_size_in_gb'),
      rehydration_tags: resource.field(self._.blocks, 'rehydration_tags'),
    },
    logs_archive_order(name, block): {
      local resource = blockType.resource('datadog_logs_archive_order', name),
      _: resource._(block, {
        archive_ids: build.template(std.get(block, 'archive_ids', null)),
        id: build.template(std.get(block, 'id', null)),
      }),
      archive_ids: resource.field(self._.blocks, 'archive_ids'),
      id: resource.field(self._.blocks, 'id'),
    },
    logs_custom_destination(name, block): {
      local resource = blockType.resource('datadog_logs_custom_destination', name),
      _: resource._(block, {
        enabled: build.template(std.get(block, 'enabled', null)),
        forward_tags: build.template(std.get(block, 'forward_tags', null)),
        forward_tags_restriction_list: build.template(std.get(block, 'forward_tags_restriction_list', null)),
        forward_tags_restriction_list_type: build.template(std.get(block, 'forward_tags_restriction_list_type', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        query: build.template(std.get(block, 'query', null)),
      }),
      enabled: resource.field(self._.blocks, 'enabled'),
      forward_tags: resource.field(self._.blocks, 'forward_tags'),
      forward_tags_restriction_list: resource.field(self._.blocks, 'forward_tags_restriction_list'),
      forward_tags_restriction_list_type: resource.field(self._.blocks, 'forward_tags_restriction_list_type'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      query: resource.field(self._.blocks, 'query'),
    },
    logs_custom_pipeline(name, block): {
      local resource = blockType.resource('datadog_logs_custom_pipeline', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        is_enabled: build.template(std.get(block, 'is_enabled', null)),
        name: build.template(block.name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      description: resource.field(self._.blocks, 'description'),
      id: resource.field(self._.blocks, 'id'),
      is_enabled: resource.field(self._.blocks, 'is_enabled'),
      name: resource.field(self._.blocks, 'name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    logs_index(name, block): {
      local resource = blockType.resource('datadog_logs_index', name),
      _: resource._(block, {
        daily_limit: build.template(std.get(block, 'daily_limit', null)),
        daily_limit_warning_threshold_percentage: build.template(std.get(block, 'daily_limit_warning_threshold_percentage', null)),
        disable_daily_limit: build.template(std.get(block, 'disable_daily_limit', null)),
        flex_retention_days: build.template(std.get(block, 'flex_retention_days', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        retention_days: build.template(std.get(block, 'retention_days', null)),
      }),
      daily_limit: resource.field(self._.blocks, 'daily_limit'),
      daily_limit_warning_threshold_percentage: resource.field(self._.blocks, 'daily_limit_warning_threshold_percentage'),
      disable_daily_limit: resource.field(self._.blocks, 'disable_daily_limit'),
      flex_retention_days: resource.field(self._.blocks, 'flex_retention_days'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      retention_days: resource.field(self._.blocks, 'retention_days'),
    },
    logs_index_order(name, block): {
      local resource = blockType.resource('datadog_logs_index_order', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        indexes: build.template(block.indexes),
        name: build.template(std.get(block, 'name', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      indexes: resource.field(self._.blocks, 'indexes'),
      name: resource.field(self._.blocks, 'name'),
    },
    logs_integration_pipeline(name, block): {
      local resource = blockType.resource('datadog_logs_integration_pipeline', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        is_enabled: build.template(std.get(block, 'is_enabled', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      is_enabled: resource.field(self._.blocks, 'is_enabled'),
    },
    logs_metric(name, block): {
      local resource = blockType.resource('datadog_logs_metric', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
      }),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
    },
    logs_pipeline_order(name, block): {
      local resource = blockType.resource('datadog_logs_pipeline_order', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        pipelines: build.template(block.pipelines),
      }),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      pipelines: resource.field(self._.blocks, 'pipelines'),
    },
    metric_metadata(name, block): {
      local resource = blockType.resource('datadog_metric_metadata', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        metric: build.template(block.metric),
        per_unit: build.template(std.get(block, 'per_unit', null)),
        short_name: build.template(std.get(block, 'short_name', null)),
        statsd_interval: build.template(std.get(block, 'statsd_interval', null)),
        type: build.template(std.get(block, 'type', null)),
        unit: build.template(std.get(block, 'unit', null)),
      }),
      description: resource.field(self._.blocks, 'description'),
      id: resource.field(self._.blocks, 'id'),
      metric: resource.field(self._.blocks, 'metric'),
      per_unit: resource.field(self._.blocks, 'per_unit'),
      short_name: resource.field(self._.blocks, 'short_name'),
      statsd_interval: resource.field(self._.blocks, 'statsd_interval'),
      type: resource.field(self._.blocks, 'type'),
      unit: resource.field(self._.blocks, 'unit'),
    },
    metric_tag_configuration(name, block): {
      local resource = blockType.resource('datadog_metric_tag_configuration', name),
      _: resource._(block, {
        exclude_tags_mode: build.template(std.get(block, 'exclude_tags_mode', null)),
        id: build.template(std.get(block, 'id', null)),
        include_percentiles: build.template(std.get(block, 'include_percentiles', null)),
        metric_name: build.template(block.metric_name),
        metric_type: build.template(block.metric_type),
        tags: build.template(block.tags),
      }),
      exclude_tags_mode: resource.field(self._.blocks, 'exclude_tags_mode'),
      id: resource.field(self._.blocks, 'id'),
      include_percentiles: resource.field(self._.blocks, 'include_percentiles'),
      metric_name: resource.field(self._.blocks, 'metric_name'),
      metric_type: resource.field(self._.blocks, 'metric_type'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    monitor(name, block): {
      local resource = blockType.resource('datadog_monitor', name),
      _: resource._(block, {
        enable_logs_sample: build.template(std.get(block, 'enable_logs_sample', null)),
        enable_samples: build.template(std.get(block, 'enable_samples', null)),
        escalation_message: build.template(std.get(block, 'escalation_message', null)),
        evaluation_delay: build.template(std.get(block, 'evaluation_delay', null)),
        force_delete: build.template(std.get(block, 'force_delete', null)),
        group_retention_duration: build.template(std.get(block, 'group_retention_duration', null)),
        groupby_simple_monitor: build.template(std.get(block, 'groupby_simple_monitor', null)),
        id: build.template(std.get(block, 'id', null)),
        include_tags: build.template(std.get(block, 'include_tags', null)),
        locked: build.template(std.get(block, 'locked', null)),
        message: build.template(block.message),
        name: build.template(block.name),
        new_group_delay: build.template(std.get(block, 'new_group_delay', null)),
        new_host_delay: build.template(std.get(block, 'new_host_delay', null)),
        no_data_timeframe: build.template(std.get(block, 'no_data_timeframe', null)),
        notification_preset_name: build.template(std.get(block, 'notification_preset_name', null)),
        notify_audit: build.template(std.get(block, 'notify_audit', null)),
        notify_by: build.template(std.get(block, 'notify_by', null)),
        notify_no_data: build.template(std.get(block, 'notify_no_data', null)),
        on_missing_data: build.template(std.get(block, 'on_missing_data', null)),
        priority: build.template(std.get(block, 'priority', null)),
        query: build.template(block.query),
        renotify_interval: build.template(std.get(block, 'renotify_interval', null)),
        renotify_occurrences: build.template(std.get(block, 'renotify_occurrences', null)),
        renotify_statuses: build.template(std.get(block, 'renotify_statuses', null)),
        require_full_window: build.template(std.get(block, 'require_full_window', null)),
        restricted_roles: build.template(std.get(block, 'restricted_roles', null)),
        tags: build.template(std.get(block, 'tags', null)),
        timeout_h: build.template(std.get(block, 'timeout_h', null)),
        type: build.template(block.type),
        validate: build.template(std.get(block, 'validate', null)),
      }),
      enable_logs_sample: resource.field(self._.blocks, 'enable_logs_sample'),
      enable_samples: resource.field(self._.blocks, 'enable_samples'),
      escalation_message: resource.field(self._.blocks, 'escalation_message'),
      evaluation_delay: resource.field(self._.blocks, 'evaluation_delay'),
      force_delete: resource.field(self._.blocks, 'force_delete'),
      group_retention_duration: resource.field(self._.blocks, 'group_retention_duration'),
      groupby_simple_monitor: resource.field(self._.blocks, 'groupby_simple_monitor'),
      id: resource.field(self._.blocks, 'id'),
      include_tags: resource.field(self._.blocks, 'include_tags'),
      locked: resource.field(self._.blocks, 'locked'),
      message: resource.field(self._.blocks, 'message'),
      name: resource.field(self._.blocks, 'name'),
      new_group_delay: resource.field(self._.blocks, 'new_group_delay'),
      new_host_delay: resource.field(self._.blocks, 'new_host_delay'),
      no_data_timeframe: resource.field(self._.blocks, 'no_data_timeframe'),
      notification_preset_name: resource.field(self._.blocks, 'notification_preset_name'),
      notify_audit: resource.field(self._.blocks, 'notify_audit'),
      notify_by: resource.field(self._.blocks, 'notify_by'),
      notify_no_data: resource.field(self._.blocks, 'notify_no_data'),
      on_missing_data: resource.field(self._.blocks, 'on_missing_data'),
      priority: resource.field(self._.blocks, 'priority'),
      query: resource.field(self._.blocks, 'query'),
      renotify_interval: resource.field(self._.blocks, 'renotify_interval'),
      renotify_occurrences: resource.field(self._.blocks, 'renotify_occurrences'),
      renotify_statuses: resource.field(self._.blocks, 'renotify_statuses'),
      require_full_window: resource.field(self._.blocks, 'require_full_window'),
      restricted_roles: resource.field(self._.blocks, 'restricted_roles'),
      tags: resource.field(self._.blocks, 'tags'),
      timeout_h: resource.field(self._.blocks, 'timeout_h'),
      type: resource.field(self._.blocks, 'type'),
      validate: resource.field(self._.blocks, 'validate'),
    },
    monitor_config_policy(name, block): {
      local resource = blockType.resource('datadog_monitor_config_policy', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        policy_type: build.template(block.policy_type),
      }),
      id: resource.field(self._.blocks, 'id'),
      policy_type: resource.field(self._.blocks, 'policy_type'),
    },
    monitor_json(name, block): {
      local resource = blockType.resource('datadog_monitor_json', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        monitor: build.template(block.monitor),
        url: build.template(std.get(block, 'url', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      monitor: resource.field(self._.blocks, 'monitor'),
      url: resource.field(self._.blocks, 'url'),
    },
    openapi_api(name, block): {
      local resource = blockType.resource('datadog_openapi_api', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        spec: build.template(block.spec),
      }),
      id: resource.field(self._.blocks, 'id'),
      spec: resource.field(self._.blocks, 'spec'),
    },
    organization_settings(name, block): {
      local resource = blockType.resource('datadog_organization_settings', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        public_id: build.template(std.get(block, 'public_id', null)),
        security_contacts: build.template(std.get(block, 'security_contacts', null)),
      }),
      description: resource.field(self._.blocks, 'description'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      public_id: resource.field(self._.blocks, 'public_id'),
      security_contacts: resource.field(self._.blocks, 'security_contacts'),
    },
    powerpack(name, block): {
      local resource = blockType.resource('datadog_powerpack', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        live_span: build.template(std.get(block, 'live_span', null)),
        name: build.template(std.get(block, 'name', null)),
        show_title: build.template(std.get(block, 'show_title', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      description: resource.field(self._.blocks, 'description'),
      id: resource.field(self._.blocks, 'id'),
      live_span: resource.field(self._.blocks, 'live_span'),
      name: resource.field(self._.blocks, 'name'),
      show_title: resource.field(self._.blocks, 'show_title'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    restriction_policy(name, block): {
      local resource = blockType.resource('datadog_restriction_policy', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        resource_id: build.template(block.resource_id),
      }),
      id: resource.field(self._.blocks, 'id'),
      resource_id: resource.field(self._.blocks, 'resource_id'),
    },
    role(name, block): {
      local resource = blockType.resource('datadog_role', name),
      _: resource._(block, {
        default_permissions_opt_out: build.template(std.get(block, 'default_permissions_opt_out', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        user_count: build.template(std.get(block, 'user_count', null)),
        validate: build.template(std.get(block, 'validate', null)),
      }),
      default_permissions_opt_out: resource.field(self._.blocks, 'default_permissions_opt_out'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      user_count: resource.field(self._.blocks, 'user_count'),
      validate: resource.field(self._.blocks, 'validate'),
    },
    rum_application(name, block): {
      local resource = blockType.resource('datadog_rum_application', name),
      _: resource._(block, {
        client_token: build.template(std.get(block, 'client_token', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        type: build.template(std.get(block, 'type', null)),
      }),
      client_token: resource.field(self._.blocks, 'client_token'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      type: resource.field(self._.blocks, 'type'),
    },
    rum_metric(name, block): {
      local resource = blockType.resource('datadog_rum_metric', name),
      _: resource._(block, {
        event_type: build.template(block.event_type),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
      }),
      event_type: resource.field(self._.blocks, 'event_type'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
    },
    security_monitoring_default_rule(name, block): {
      local resource = blockType.resource('datadog_security_monitoring_default_rule', name),
      _: resource._(block, {
        custom_tags: build.template(std.get(block, 'custom_tags', null)),
        enabled: build.template(std.get(block, 'enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        type: build.template(std.get(block, 'type', null)),
      }),
      custom_tags: resource.field(self._.blocks, 'custom_tags'),
      enabled: resource.field(self._.blocks, 'enabled'),
      id: resource.field(self._.blocks, 'id'),
      type: resource.field(self._.blocks, 'type'),
    },
    security_monitoring_filter(name, block): {
      local resource = blockType.resource('datadog_security_monitoring_filter', name),
      _: resource._(block, {
        filtered_data_type: build.template(std.get(block, 'filtered_data_type', null)),
        id: build.template(std.get(block, 'id', null)),
        is_enabled: build.template(block.is_enabled),
        name: build.template(block.name),
        query: build.template(block.query),
        version: build.template(std.get(block, 'version', null)),
      }),
      filtered_data_type: resource.field(self._.blocks, 'filtered_data_type'),
      id: resource.field(self._.blocks, 'id'),
      is_enabled: resource.field(self._.blocks, 'is_enabled'),
      name: resource.field(self._.blocks, 'name'),
      query: resource.field(self._.blocks, 'query'),
      version: resource.field(self._.blocks, 'version'),
    },
    security_monitoring_rule(name, block): {
      local resource = blockType.resource('datadog_security_monitoring_rule', name),
      _: resource._(block, {
        enabled: build.template(std.get(block, 'enabled', null)),
        group_signals_by: build.template(std.get(block, 'group_signals_by', null)),
        has_extended_title: build.template(std.get(block, 'has_extended_title', null)),
        id: build.template(std.get(block, 'id', null)),
        message: build.template(block.message),
        name: build.template(block.name),
        tags: build.template(std.get(block, 'tags', null)),
        type: build.template(std.get(block, 'type', null)),
        validate: build.template(std.get(block, 'validate', null)),
      }),
      enabled: resource.field(self._.blocks, 'enabled'),
      group_signals_by: resource.field(self._.blocks, 'group_signals_by'),
      has_extended_title: resource.field(self._.blocks, 'has_extended_title'),
      id: resource.field(self._.blocks, 'id'),
      message: resource.field(self._.blocks, 'message'),
      name: resource.field(self._.blocks, 'name'),
      tags: resource.field(self._.blocks, 'tags'),
      type: resource.field(self._.blocks, 'type'),
      validate: resource.field(self._.blocks, 'validate'),
    },
    security_monitoring_suppression(name, block): {
      local resource = blockType.resource('datadog_security_monitoring_suppression', name),
      _: resource._(block, {
        data_exclusion_query: build.template(std.get(block, 'data_exclusion_query', null)),
        description: build.template(std.get(block, 'description', null)),
        enabled: build.template(block.enabled),
        expiration_date: build.template(std.get(block, 'expiration_date', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        rule_query: build.template(block.rule_query),
        start_date: build.template(std.get(block, 'start_date', null)),
        suppression_query: build.template(std.get(block, 'suppression_query', null)),
      }),
      data_exclusion_query: resource.field(self._.blocks, 'data_exclusion_query'),
      description: resource.field(self._.blocks, 'description'),
      enabled: resource.field(self._.blocks, 'enabled'),
      expiration_date: resource.field(self._.blocks, 'expiration_date'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      rule_query: resource.field(self._.blocks, 'rule_query'),
      start_date: resource.field(self._.blocks, 'start_date'),
      suppression_query: resource.field(self._.blocks, 'suppression_query'),
    },
    security_notification_rule(name, block): {
      local resource = blockType.resource('datadog_security_notification_rule', name),
      _: resource._(block, {
        created_at: build.template(std.get(block, 'created_at', null)),
        created_by_handle: build.template(std.get(block, 'created_by_handle', null)),
        created_by_name: build.template(std.get(block, 'created_by_name', null)),
        enabled: build.template(std.get(block, 'enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        modified_at: build.template(std.get(block, 'modified_at', null)),
        modified_by_handle: build.template(std.get(block, 'modified_by_handle', null)),
        modified_by_name: build.template(std.get(block, 'modified_by_name', null)),
        name: build.template(block.name),
        targets: build.template(block.targets),
        time_aggregation: build.template(std.get(block, 'time_aggregation', null)),
        version: build.template(std.get(block, 'version', null)),
      }),
      created_at: resource.field(self._.blocks, 'created_at'),
      created_by_handle: resource.field(self._.blocks, 'created_by_handle'),
      created_by_name: resource.field(self._.blocks, 'created_by_name'),
      enabled: resource.field(self._.blocks, 'enabled'),
      id: resource.field(self._.blocks, 'id'),
      modified_at: resource.field(self._.blocks, 'modified_at'),
      modified_by_handle: resource.field(self._.blocks, 'modified_by_handle'),
      modified_by_name: resource.field(self._.blocks, 'modified_by_name'),
      name: resource.field(self._.blocks, 'name'),
      targets: resource.field(self._.blocks, 'targets'),
      time_aggregation: resource.field(self._.blocks, 'time_aggregation'),
      version: resource.field(self._.blocks, 'version'),
    },
    sensitive_data_scanner_group(name, block): {
      local resource = blockType.resource('datadog_sensitive_data_scanner_group', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        is_enabled: build.template(block.is_enabled),
        name: build.template(block.name),
        product_list: build.template(block.product_list),
      }),
      description: resource.field(self._.blocks, 'description'),
      id: resource.field(self._.blocks, 'id'),
      is_enabled: resource.field(self._.blocks, 'is_enabled'),
      name: resource.field(self._.blocks, 'name'),
      product_list: resource.field(self._.blocks, 'product_list'),
    },
    sensitive_data_scanner_group_order(name, block): {
      local resource = blockType.resource('datadog_sensitive_data_scanner_group_order', name),
      _: resource._(block, {
        group_ids: build.template(block.group_ids),
        id: build.template(std.get(block, 'id', null)),
      }),
      group_ids: resource.field(self._.blocks, 'group_ids'),
      id: resource.field(self._.blocks, 'id'),
    },
    sensitive_data_scanner_rule(name, block): {
      local resource = blockType.resource('datadog_sensitive_data_scanner_rule', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        excluded_namespaces: build.template(std.get(block, 'excluded_namespaces', null)),
        group_id: build.template(block.group_id),
        id: build.template(std.get(block, 'id', null)),
        is_enabled: build.template(std.get(block, 'is_enabled', null)),
        name: build.template(std.get(block, 'name', null)),
        namespaces: build.template(std.get(block, 'namespaces', null)),
        pattern: build.template(std.get(block, 'pattern', null)),
        priority: build.template(std.get(block, 'priority', null)),
        standard_pattern_id: build.template(std.get(block, 'standard_pattern_id', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      description: resource.field(self._.blocks, 'description'),
      excluded_namespaces: resource.field(self._.blocks, 'excluded_namespaces'),
      group_id: resource.field(self._.blocks, 'group_id'),
      id: resource.field(self._.blocks, 'id'),
      is_enabled: resource.field(self._.blocks, 'is_enabled'),
      name: resource.field(self._.blocks, 'name'),
      namespaces: resource.field(self._.blocks, 'namespaces'),
      pattern: resource.field(self._.blocks, 'pattern'),
      priority: resource.field(self._.blocks, 'priority'),
      standard_pattern_id: resource.field(self._.blocks, 'standard_pattern_id'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    service_account(name, block): {
      local resource = blockType.resource('datadog_service_account', name),
      _: resource._(block, {
        disabled: build.template(std.get(block, 'disabled', null)),
        email: build.template(block.email),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        roles: build.template(std.get(block, 'roles', null)),
      }),
      disabled: resource.field(self._.blocks, 'disabled'),
      email: resource.field(self._.blocks, 'email'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      roles: resource.field(self._.blocks, 'roles'),
    },
    service_account_application_key(name, block): {
      local resource = blockType.resource('datadog_service_account_application_key', name),
      _: resource._(block, {
        created_at: build.template(std.get(block, 'created_at', null)),
        id: build.template(std.get(block, 'id', null)),
        key: build.template(std.get(block, 'key', null)),
        last4: build.template(std.get(block, 'last4', null)),
        name: build.template(block.name),
        scopes: build.template(std.get(block, 'scopes', null)),
        service_account_id: build.template(block.service_account_id),
      }),
      created_at: resource.field(self._.blocks, 'created_at'),
      id: resource.field(self._.blocks, 'id'),
      key: resource.field(self._.blocks, 'key'),
      last4: resource.field(self._.blocks, 'last4'),
      name: resource.field(self._.blocks, 'name'),
      scopes: resource.field(self._.blocks, 'scopes'),
      service_account_id: resource.field(self._.blocks, 'service_account_id'),
    },
    service_definition_yaml(name, block): {
      local resource = blockType.resource('datadog_service_definition_yaml', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        service_definition: build.template(block.service_definition),
      }),
      id: resource.field(self._.blocks, 'id'),
      service_definition: resource.field(self._.blocks, 'service_definition'),
    },
    service_level_objective(name, block): {
      local resource = blockType.resource('datadog_service_level_objective', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        force_delete: build.template(std.get(block, 'force_delete', null)),
        groups: build.template(std.get(block, 'groups', null)),
        id: build.template(std.get(block, 'id', null)),
        monitor_ids: build.template(std.get(block, 'monitor_ids', null)),
        name: build.template(block.name),
        tags: build.template(std.get(block, 'tags', null)),
        target_threshold: build.template(std.get(block, 'target_threshold', null)),
        timeframe: build.template(std.get(block, 'timeframe', null)),
        type: build.template(block.type),
        validate: build.template(std.get(block, 'validate', null)),
        warning_threshold: build.template(std.get(block, 'warning_threshold', null)),
      }),
      description: resource.field(self._.blocks, 'description'),
      force_delete: resource.field(self._.blocks, 'force_delete'),
      groups: resource.field(self._.blocks, 'groups'),
      id: resource.field(self._.blocks, 'id'),
      monitor_ids: resource.field(self._.blocks, 'monitor_ids'),
      name: resource.field(self._.blocks, 'name'),
      tags: resource.field(self._.blocks, 'tags'),
      target_threshold: resource.field(self._.blocks, 'target_threshold'),
      timeframe: resource.field(self._.blocks, 'timeframe'),
      type: resource.field(self._.blocks, 'type'),
      validate: resource.field(self._.blocks, 'validate'),
      warning_threshold: resource.field(self._.blocks, 'warning_threshold'),
    },
    slo_correction(name, block): {
      local resource = blockType.resource('datadog_slo_correction', name),
      _: resource._(block, {
        category: build.template(block.category),
        description: build.template(std.get(block, 'description', null)),
        duration: build.template(std.get(block, 'duration', null)),
        end: build.template(std.get(block, 'end', null)),
        id: build.template(std.get(block, 'id', null)),
        rrule: build.template(std.get(block, 'rrule', null)),
        slo_id: build.template(block.slo_id),
        start: build.template(block.start),
        timezone: build.template(std.get(block, 'timezone', null)),
      }),
      category: resource.field(self._.blocks, 'category'),
      description: resource.field(self._.blocks, 'description'),
      duration: resource.field(self._.blocks, 'duration'),
      end: resource.field(self._.blocks, 'end'),
      id: resource.field(self._.blocks, 'id'),
      rrule: resource.field(self._.blocks, 'rrule'),
      slo_id: resource.field(self._.blocks, 'slo_id'),
      start: resource.field(self._.blocks, 'start'),
      timezone: resource.field(self._.blocks, 'timezone'),
    },
    software_catalog(name, block): {
      local resource = blockType.resource('datadog_software_catalog', name),
      _: resource._(block, {
        entity: build.template(block.entity),
        id: build.template(std.get(block, 'id', null)),
      }),
      entity: resource.field(self._.blocks, 'entity'),
      id: resource.field(self._.blocks, 'id'),
    },
    spans_metric(name, block): {
      local resource = blockType.resource('datadog_spans_metric', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
      }),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
    },
    synthetics_concurrency_cap(name, block): {
      local resource = blockType.resource('datadog_synthetics_concurrency_cap', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        on_demand_concurrency_cap: build.template(block.on_demand_concurrency_cap),
      }),
      id: resource.field(self._.blocks, 'id'),
      on_demand_concurrency_cap: resource.field(self._.blocks, 'on_demand_concurrency_cap'),
    },
    synthetics_global_variable(name, block): {
      local resource = blockType.resource('datadog_synthetics_global_variable', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        is_fido: build.template(std.get(block, 'is_fido', null)),
        is_totp: build.template(std.get(block, 'is_totp', null)),
        name: build.template(block.name),
        parse_test_id: build.template(std.get(block, 'parse_test_id', null)),
        restricted_roles: build.template(std.get(block, 'restricted_roles', null)),
        secure: build.template(std.get(block, 'secure', null)),
        tags: build.template(std.get(block, 'tags', null)),
        value: build.template(std.get(block, 'value', null)),
      }),
      description: resource.field(self._.blocks, 'description'),
      id: resource.field(self._.blocks, 'id'),
      is_fido: resource.field(self._.blocks, 'is_fido'),
      is_totp: resource.field(self._.blocks, 'is_totp'),
      name: resource.field(self._.blocks, 'name'),
      parse_test_id: resource.field(self._.blocks, 'parse_test_id'),
      restricted_roles: resource.field(self._.blocks, 'restricted_roles'),
      secure: resource.field(self._.blocks, 'secure'),
      tags: resource.field(self._.blocks, 'tags'),
      value: resource.field(self._.blocks, 'value'),
    },
    synthetics_private_location(name, block): {
      local resource = blockType.resource('datadog_synthetics_private_location', name),
      _: resource._(block, {
        config: build.template(std.get(block, 'config', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      config: resource.field(self._.blocks, 'config'),
      description: resource.field(self._.blocks, 'description'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    synthetics_test(name, block): {
      local resource = blockType.resource('datadog_synthetics_test', name),
      _: resource._(block, {
        config_initial_application_arguments: build.template(std.get(block, 'config_initial_application_arguments', null)),
        device_ids: build.template(std.get(block, 'device_ids', null)),
        force_delete_dependencies: build.template(std.get(block, 'force_delete_dependencies', null)),
        id: build.template(std.get(block, 'id', null)),
        locations: build.template(block.locations),
        message: build.template(std.get(block, 'message', null)),
        monitor_id: build.template(std.get(block, 'monitor_id', null)),
        name: build.template(block.name),
        request_headers: build.template(std.get(block, 'request_headers', null)),
        request_metadata: build.template(std.get(block, 'request_metadata', null)),
        request_query: build.template(std.get(block, 'request_query', null)),
        set_cookie: build.template(std.get(block, 'set_cookie', null)),
        status: build.template(block.status),
        subtype: build.template(std.get(block, 'subtype', null)),
        tags: build.template(std.get(block, 'tags', null)),
        type: build.template(block.type),
        variables_from_script: build.template(std.get(block, 'variables_from_script', null)),
      }),
      config_initial_application_arguments: resource.field(self._.blocks, 'config_initial_application_arguments'),
      device_ids: resource.field(self._.blocks, 'device_ids'),
      force_delete_dependencies: resource.field(self._.blocks, 'force_delete_dependencies'),
      id: resource.field(self._.blocks, 'id'),
      locations: resource.field(self._.blocks, 'locations'),
      message: resource.field(self._.blocks, 'message'),
      monitor_id: resource.field(self._.blocks, 'monitor_id'),
      name: resource.field(self._.blocks, 'name'),
      request_headers: resource.field(self._.blocks, 'request_headers'),
      request_metadata: resource.field(self._.blocks, 'request_metadata'),
      request_query: resource.field(self._.blocks, 'request_query'),
      set_cookie: resource.field(self._.blocks, 'set_cookie'),
      status: resource.field(self._.blocks, 'status'),
      subtype: resource.field(self._.blocks, 'subtype'),
      tags: resource.field(self._.blocks, 'tags'),
      type: resource.field(self._.blocks, 'type'),
      variables_from_script: resource.field(self._.blocks, 'variables_from_script'),
    },
    team(name, block): {
      local resource = blockType.resource('datadog_team', name),
      _: resource._(block, {
        description: build.template(block.description),
        handle: build.template(block.handle),
        id: build.template(std.get(block, 'id', null)),
        link_count: build.template(std.get(block, 'link_count', null)),
        name: build.template(block.name),
        summary: build.template(std.get(block, 'summary', null)),
        user_count: build.template(std.get(block, 'user_count', null)),
      }),
      description: resource.field(self._.blocks, 'description'),
      handle: resource.field(self._.blocks, 'handle'),
      id: resource.field(self._.blocks, 'id'),
      link_count: resource.field(self._.blocks, 'link_count'),
      name: resource.field(self._.blocks, 'name'),
      summary: resource.field(self._.blocks, 'summary'),
      user_count: resource.field(self._.blocks, 'user_count'),
    },
    team_link(name, block): {
      local resource = blockType.resource('datadog_team_link', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        label: build.template(block.label),
        position: build.template(std.get(block, 'position', null)),
        team_id: build.template(block.team_id),
        url: build.template(block.url),
      }),
      id: resource.field(self._.blocks, 'id'),
      label: resource.field(self._.blocks, 'label'),
      position: resource.field(self._.blocks, 'position'),
      team_id: resource.field(self._.blocks, 'team_id'),
      url: resource.field(self._.blocks, 'url'),
    },
    team_membership(name, block): {
      local resource = blockType.resource('datadog_team_membership', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        role: build.template(std.get(block, 'role', null)),
        team_id: build.template(block.team_id),
        user_id: build.template(block.user_id),
      }),
      id: resource.field(self._.blocks, 'id'),
      role: resource.field(self._.blocks, 'role'),
      team_id: resource.field(self._.blocks, 'team_id'),
      user_id: resource.field(self._.blocks, 'user_id'),
    },
    team_permission_setting(name, block): {
      local resource = blockType.resource('datadog_team_permission_setting', name),
      _: resource._(block, {
        action: build.template(block.action),
        id: build.template(std.get(block, 'id', null)),
        team_id: build.template(block.team_id),
        value: build.template(block.value),
      }),
      action: resource.field(self._.blocks, 'action'),
      id: resource.field(self._.blocks, 'id'),
      team_id: resource.field(self._.blocks, 'team_id'),
      value: resource.field(self._.blocks, 'value'),
    },
    user(name, block): {
      local resource = blockType.resource('datadog_user', name),
      _: resource._(block, {
        disabled: build.template(std.get(block, 'disabled', null)),
        email: build.template(block.email),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        roles: build.template(std.get(block, 'roles', null)),
        send_user_invitation: build.template(std.get(block, 'send_user_invitation', null)),
        user_invitation_id: build.template(std.get(block, 'user_invitation_id', null)),
        verified: build.template(std.get(block, 'verified', null)),
      }),
      disabled: resource.field(self._.blocks, 'disabled'),
      email: resource.field(self._.blocks, 'email'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      roles: resource.field(self._.blocks, 'roles'),
      send_user_invitation: resource.field(self._.blocks, 'send_user_invitation'),
      user_invitation_id: resource.field(self._.blocks, 'user_invitation_id'),
      verified: resource.field(self._.blocks, 'verified'),
    },
    user_role(name, block): {
      local resource = blockType.resource('datadog_user_role', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        role_id: build.template(block.role_id),
        user_id: build.template(block.user_id),
      }),
      id: resource.field(self._.blocks, 'id'),
      role_id: resource.field(self._.blocks, 'role_id'),
      user_id: resource.field(self._.blocks, 'user_id'),
    },
    webhook(name, block): {
      local resource = blockType.resource('datadog_webhook', name),
      _: resource._(block, {
        custom_headers: build.template(std.get(block, 'custom_headers', null)),
        encode_as: build.template(std.get(block, 'encode_as', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        payload: build.template(std.get(block, 'payload', null)),
        url: build.template(block.url),
      }),
      custom_headers: resource.field(self._.blocks, 'custom_headers'),
      encode_as: resource.field(self._.blocks, 'encode_as'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      payload: resource.field(self._.blocks, 'payload'),
      url: resource.field(self._.blocks, 'url'),
    },
    webhook_custom_variable(name, block): {
      local resource = blockType.resource('datadog_webhook_custom_variable', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        is_secret: build.template(block.is_secret),
        name: build.template(block.name),
        value: build.template(block.value),
      }),
      id: resource.field(self._.blocks, 'id'),
      is_secret: resource.field(self._.blocks, 'is_secret'),
      name: resource.field(self._.blocks, 'name'),
      value: resource.field(self._.blocks, 'value'),
    },
    workflow_automation(name, block): {
      local resource = blockType.resource('datadog_workflow_automation', name),
      _: resource._(block, {
        description: build.template(block.description),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        published: build.template(block.published),
        spec_json: build.template(block.spec_json),
        tags: build.template(block.tags),
        webhook_secret: build.template(std.get(block, 'webhook_secret', null)),
      }),
      description: resource.field(self._.blocks, 'description'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      published: resource.field(self._.blocks, 'published'),
      spec_json: resource.field(self._.blocks, 'spec_json'),
      tags: resource.field(self._.blocks, 'tags'),
      webhook_secret: resource.field(self._.blocks, 'webhook_secret'),
    },
  },
  data: {
    local blockType = provider.blockType('data'),
    action_connection(name, block): {
      local resource = blockType.resource('datadog_action_connection', name),
      _: resource._(block, {
        id: build.template(block.id),
        name: build.template(std.get(block, 'name', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
    },
    api_key(name, block): {
      local resource = blockType.resource('datadog_api_key', name),
      _: resource._(block, {
        exact_match: build.template(std.get(block, 'exact_match', null)),
        id: build.template(std.get(block, 'id', null)),
        key: build.template(std.get(block, 'key', null)),
        name: build.template(std.get(block, 'name', null)),
        remote_config_read_enabled: build.template(std.get(block, 'remote_config_read_enabled', null)),
      }),
      exact_match: resource.field(self._.blocks, 'exact_match'),
      id: resource.field(self._.blocks, 'id'),
      key: resource.field(self._.blocks, 'key'),
      name: resource.field(self._.blocks, 'name'),
      remote_config_read_enabled: resource.field(self._.blocks, 'remote_config_read_enabled'),
    },
    apm_retention_filters_order(name, block): {
      local resource = blockType.resource('datadog_apm_retention_filters_order', name),
      _: resource._(block, {
        filter_ids: build.template(std.get(block, 'filter_ids', null)),
        id: build.template(std.get(block, 'id', null)),
      }),
      filter_ids: resource.field(self._.blocks, 'filter_ids'),
      id: resource.field(self._.blocks, 'id'),
    },
    application_key(name, block): {
      local resource = blockType.resource('datadog_application_key', name),
      _: resource._(block, {
        exact_match: build.template(std.get(block, 'exact_match', null)),
        id: build.template(std.get(block, 'id', null)),
        key: build.template(std.get(block, 'key', null)),
        name: build.template(std.get(block, 'name', null)),
      }),
      exact_match: resource.field(self._.blocks, 'exact_match'),
      id: resource.field(self._.blocks, 'id'),
      key: resource.field(self._.blocks, 'key'),
      name: resource.field(self._.blocks, 'name'),
    },
    cloud_workload_security_agent_rules(name, block): {
      local resource = blockType.resource('datadog_cloud_workload_security_agent_rules', name),
      _: resource._(block, {
        agent_rules: build.template(std.get(block, 'agent_rules', null)),
        id: build.template(std.get(block, 'id', null)),
      }),
      agent_rules: resource.field(self._.blocks, 'agent_rules'),
      id: resource.field(self._.blocks, 'id'),
    },
    csm_threats_agent_rules(name, block): {
      local resource = blockType.resource('datadog_csm_threats_agent_rules', name),
      _: resource._(block, {
        agent_rules: build.template(std.get(block, 'agent_rules', null)),
        agent_rules_ids: build.template(std.get(block, 'agent_rules_ids', null)),
        id: build.template(std.get(block, 'id', null)),
      }),
      agent_rules: resource.field(self._.blocks, 'agent_rules'),
      agent_rules_ids: resource.field(self._.blocks, 'agent_rules_ids'),
      id: resource.field(self._.blocks, 'id'),
    },
    dashboard(name, block): {
      local resource = blockType.resource('datadog_dashboard', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        title: build.template(std.get(block, 'title', null)),
        url: build.template(std.get(block, 'url', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      title: resource.field(self._.blocks, 'title'),
      url: resource.field(self._.blocks, 'url'),
    },
    dashboard_list(name, block): {
      local resource = blockType.resource('datadog_dashboard_list', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
      }),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
    },
    hosts(name, block): {
      local resource = blockType.resource('datadog_hosts', name),
      _: resource._(block, {
        filter: build.template(std.get(block, 'filter', null)),
        from: build.template(std.get(block, 'from', null)),
        host_list: build.template(std.get(block, 'host_list', null)),
        id: build.template(std.get(block, 'id', null)),
        include_muted_hosts_data: build.template(std.get(block, 'include_muted_hosts_data', null)),
        sort_dir: build.template(std.get(block, 'sort_dir', null)),
        sort_field: build.template(std.get(block, 'sort_field', null)),
        total_matching: build.template(std.get(block, 'total_matching', null)),
        total_returned: build.template(std.get(block, 'total_returned', null)),
      }),
      filter: resource.field(self._.blocks, 'filter'),
      from: resource.field(self._.blocks, 'from'),
      host_list: resource.field(self._.blocks, 'host_list'),
      id: resource.field(self._.blocks, 'id'),
      include_muted_hosts_data: resource.field(self._.blocks, 'include_muted_hosts_data'),
      sort_dir: resource.field(self._.blocks, 'sort_dir'),
      sort_field: resource.field(self._.blocks, 'sort_field'),
      total_matching: resource.field(self._.blocks, 'total_matching'),
      total_returned: resource.field(self._.blocks, 'total_returned'),
    },
    integration_aws_available_logs_services(name, block): {
      local resource = blockType.resource('datadog_integration_aws_available_logs_services', name),
      _: resource._(block, {
        aws_logs_services: build.template(std.get(block, 'aws_logs_services', null)),
        id: build.template(std.get(block, 'id', null)),
      }),
      aws_logs_services: resource.field(self._.blocks, 'aws_logs_services'),
      id: resource.field(self._.blocks, 'id'),
    },
    integration_aws_available_namespaces(name, block): {
      local resource = blockType.resource('datadog_integration_aws_available_namespaces', name),
      _: resource._(block, {
        aws_namespaces: build.template(std.get(block, 'aws_namespaces', null)),
        id: build.template(std.get(block, 'id', null)),
      }),
      aws_namespaces: resource.field(self._.blocks, 'aws_namespaces'),
      id: resource.field(self._.blocks, 'id'),
    },
    integration_aws_logs_services(name, block): {
      local resource = blockType.resource('datadog_integration_aws_logs_services', name),
      _: resource._(block, {
        aws_logs_services: build.template(std.get(block, 'aws_logs_services', null)),
        id: build.template(std.get(block, 'id', null)),
      }),
      aws_logs_services: resource.field(self._.blocks, 'aws_logs_services'),
      id: resource.field(self._.blocks, 'id'),
    },
    integration_aws_namespace_rules(name, block): {
      local resource = blockType.resource('datadog_integration_aws_namespace_rules', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        namespace_rules: build.template(std.get(block, 'namespace_rules', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      namespace_rules: resource.field(self._.blocks, 'namespace_rules'),
    },
    ip_ranges(name, block): {
      local resource = blockType.resource('datadog_ip_ranges', name),
      _: resource._(block, {
        agents_ipv4: build.template(std.get(block, 'agents_ipv4', null)),
        agents_ipv6: build.template(std.get(block, 'agents_ipv6', null)),
        api_ipv4: build.template(std.get(block, 'api_ipv4', null)),
        api_ipv6: build.template(std.get(block, 'api_ipv6', null)),
        apm_ipv4: build.template(std.get(block, 'apm_ipv4', null)),
        apm_ipv6: build.template(std.get(block, 'apm_ipv6', null)),
        global_ipv4: build.template(std.get(block, 'global_ipv4', null)),
        global_ipv6: build.template(std.get(block, 'global_ipv6', null)),
        id: build.template(std.get(block, 'id', null)),
        logs_ipv4: build.template(std.get(block, 'logs_ipv4', null)),
        logs_ipv6: build.template(std.get(block, 'logs_ipv6', null)),
        orchestrator_ipv4: build.template(std.get(block, 'orchestrator_ipv4', null)),
        orchestrator_ipv6: build.template(std.get(block, 'orchestrator_ipv6', null)),
        process_ipv4: build.template(std.get(block, 'process_ipv4', null)),
        process_ipv6: build.template(std.get(block, 'process_ipv6', null)),
        synthetics_ipv4: build.template(std.get(block, 'synthetics_ipv4', null)),
        synthetics_ipv4_by_location: build.template(std.get(block, 'synthetics_ipv4_by_location', null)),
        synthetics_ipv6: build.template(std.get(block, 'synthetics_ipv6', null)),
        synthetics_ipv6_by_location: build.template(std.get(block, 'synthetics_ipv6_by_location', null)),
        webhooks_ipv4: build.template(std.get(block, 'webhooks_ipv4', null)),
        webhooks_ipv6: build.template(std.get(block, 'webhooks_ipv6', null)),
      }),
      agents_ipv4: resource.field(self._.blocks, 'agents_ipv4'),
      agents_ipv6: resource.field(self._.blocks, 'agents_ipv6'),
      api_ipv4: resource.field(self._.blocks, 'api_ipv4'),
      api_ipv6: resource.field(self._.blocks, 'api_ipv6'),
      apm_ipv4: resource.field(self._.blocks, 'apm_ipv4'),
      apm_ipv6: resource.field(self._.blocks, 'apm_ipv6'),
      global_ipv4: resource.field(self._.blocks, 'global_ipv4'),
      global_ipv6: resource.field(self._.blocks, 'global_ipv6'),
      id: resource.field(self._.blocks, 'id'),
      logs_ipv4: resource.field(self._.blocks, 'logs_ipv4'),
      logs_ipv6: resource.field(self._.blocks, 'logs_ipv6'),
      orchestrator_ipv4: resource.field(self._.blocks, 'orchestrator_ipv4'),
      orchestrator_ipv6: resource.field(self._.blocks, 'orchestrator_ipv6'),
      process_ipv4: resource.field(self._.blocks, 'process_ipv4'),
      process_ipv6: resource.field(self._.blocks, 'process_ipv6'),
      synthetics_ipv4: resource.field(self._.blocks, 'synthetics_ipv4'),
      synthetics_ipv4_by_location: resource.field(self._.blocks, 'synthetics_ipv4_by_location'),
      synthetics_ipv6: resource.field(self._.blocks, 'synthetics_ipv6'),
      synthetics_ipv6_by_location: resource.field(self._.blocks, 'synthetics_ipv6_by_location'),
      webhooks_ipv4: resource.field(self._.blocks, 'webhooks_ipv4'),
      webhooks_ipv6: resource.field(self._.blocks, 'webhooks_ipv6'),
    },
    logs_archives_order(name, block): {
      local resource = blockType.resource('datadog_logs_archives_order', name),
      _: resource._(block, {
        archive_ids: build.template(std.get(block, 'archive_ids', null)),
        id: build.template(std.get(block, 'id', null)),
      }),
      archive_ids: resource.field(self._.blocks, 'archive_ids'),
      id: resource.field(self._.blocks, 'id'),
    },
    logs_indexes(name, block): {
      local resource = blockType.resource('datadog_logs_indexes', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        logs_indexes: build.template(std.get(block, 'logs_indexes', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      logs_indexes: resource.field(self._.blocks, 'logs_indexes'),
    },
    logs_indexes_order(name, block): {
      local resource = blockType.resource('datadog_logs_indexes_order', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        index_names: build.template(std.get(block, 'index_names', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      index_names: resource.field(self._.blocks, 'index_names'),
    },
    logs_pipelines(name, block): {
      local resource = blockType.resource('datadog_logs_pipelines', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        is_read_only: build.template(std.get(block, 'is_read_only', null)),
        logs_pipelines: build.template(std.get(block, 'logs_pipelines', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      is_read_only: resource.field(self._.blocks, 'is_read_only'),
      logs_pipelines: resource.field(self._.blocks, 'logs_pipelines'),
    },
    logs_pipelines_order(name, block): {
      local resource = blockType.resource('datadog_logs_pipelines_order', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        pipeline_ids: build.template(std.get(block, 'pipeline_ids', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      pipeline_ids: resource.field(self._.blocks, 'pipeline_ids'),
    },
    monitor(name, block): {
      local resource = blockType.resource('datadog_monitor', name),
      _: resource._(block, {
        enable_logs_sample: build.template(std.get(block, 'enable_logs_sample', null)),
        enable_samples: build.template(std.get(block, 'enable_samples', null)),
        escalation_message: build.template(std.get(block, 'escalation_message', null)),
        evaluation_delay: build.template(std.get(block, 'evaluation_delay', null)),
        group_retention_duration: build.template(std.get(block, 'group_retention_duration', null)),
        groupby_simple_monitor: build.template(std.get(block, 'groupby_simple_monitor', null)),
        id: build.template(std.get(block, 'id', null)),
        include_tags: build.template(std.get(block, 'include_tags', null)),
        locked: build.template(std.get(block, 'locked', null)),
        message: build.template(std.get(block, 'message', null)),
        monitor_tags_filter: build.template(std.get(block, 'monitor_tags_filter', null)),
        monitor_threshold_windows: build.template(std.get(block, 'monitor_threshold_windows', null)),
        monitor_thresholds: build.template(std.get(block, 'monitor_thresholds', null)),
        name: build.template(std.get(block, 'name', null)),
        name_filter: build.template(std.get(block, 'name_filter', null)),
        new_group_delay: build.template(std.get(block, 'new_group_delay', null)),
        new_host_delay: build.template(std.get(block, 'new_host_delay', null)),
        no_data_timeframe: build.template(std.get(block, 'no_data_timeframe', null)),
        notification_preset_name: build.template(std.get(block, 'notification_preset_name', null)),
        notify_audit: build.template(std.get(block, 'notify_audit', null)),
        notify_by: build.template(std.get(block, 'notify_by', null)),
        notify_no_data: build.template(std.get(block, 'notify_no_data', null)),
        on_missing_data: build.template(std.get(block, 'on_missing_data', null)),
        query: build.template(std.get(block, 'query', null)),
        renotify_interval: build.template(std.get(block, 'renotify_interval', null)),
        renotify_occurrences: build.template(std.get(block, 'renotify_occurrences', null)),
        renotify_statuses: build.template(std.get(block, 'renotify_statuses', null)),
        require_full_window: build.template(std.get(block, 'require_full_window', null)),
        restricted_roles: build.template(std.get(block, 'restricted_roles', null)),
        scheduling_options: build.template(std.get(block, 'scheduling_options', null)),
        tags: build.template(std.get(block, 'tags', null)),
        tags_filter: build.template(std.get(block, 'tags_filter', null)),
        timeout_h: build.template(std.get(block, 'timeout_h', null)),
        type: build.template(std.get(block, 'type', null)),
      }),
      enable_logs_sample: resource.field(self._.blocks, 'enable_logs_sample'),
      enable_samples: resource.field(self._.blocks, 'enable_samples'),
      escalation_message: resource.field(self._.blocks, 'escalation_message'),
      evaluation_delay: resource.field(self._.blocks, 'evaluation_delay'),
      group_retention_duration: resource.field(self._.blocks, 'group_retention_duration'),
      groupby_simple_monitor: resource.field(self._.blocks, 'groupby_simple_monitor'),
      id: resource.field(self._.blocks, 'id'),
      include_tags: resource.field(self._.blocks, 'include_tags'),
      locked: resource.field(self._.blocks, 'locked'),
      message: resource.field(self._.blocks, 'message'),
      monitor_tags_filter: resource.field(self._.blocks, 'monitor_tags_filter'),
      monitor_threshold_windows: resource.field(self._.blocks, 'monitor_threshold_windows'),
      monitor_thresholds: resource.field(self._.blocks, 'monitor_thresholds'),
      name: resource.field(self._.blocks, 'name'),
      name_filter: resource.field(self._.blocks, 'name_filter'),
      new_group_delay: resource.field(self._.blocks, 'new_group_delay'),
      new_host_delay: resource.field(self._.blocks, 'new_host_delay'),
      no_data_timeframe: resource.field(self._.blocks, 'no_data_timeframe'),
      notification_preset_name: resource.field(self._.blocks, 'notification_preset_name'),
      notify_audit: resource.field(self._.blocks, 'notify_audit'),
      notify_by: resource.field(self._.blocks, 'notify_by'),
      notify_no_data: resource.field(self._.blocks, 'notify_no_data'),
      on_missing_data: resource.field(self._.blocks, 'on_missing_data'),
      query: resource.field(self._.blocks, 'query'),
      renotify_interval: resource.field(self._.blocks, 'renotify_interval'),
      renotify_occurrences: resource.field(self._.blocks, 'renotify_occurrences'),
      renotify_statuses: resource.field(self._.blocks, 'renotify_statuses'),
      require_full_window: resource.field(self._.blocks, 'require_full_window'),
      restricted_roles: resource.field(self._.blocks, 'restricted_roles'),
      scheduling_options: resource.field(self._.blocks, 'scheduling_options'),
      tags: resource.field(self._.blocks, 'tags'),
      tags_filter: resource.field(self._.blocks, 'tags_filter'),
      timeout_h: resource.field(self._.blocks, 'timeout_h'),
      type: resource.field(self._.blocks, 'type'),
    },
    monitor_config_policies(name, block): {
      local resource = blockType.resource('datadog_monitor_config_policies', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        monitor_config_policies: build.template(std.get(block, 'monitor_config_policies', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      monitor_config_policies: resource.field(self._.blocks, 'monitor_config_policies'),
    },
    monitors(name, block): {
      local resource = blockType.resource('datadog_monitors', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        monitor_tags_filter: build.template(std.get(block, 'monitor_tags_filter', null)),
        monitors: build.template(std.get(block, 'monitors', null)),
        name_filter: build.template(std.get(block, 'name_filter', null)),
        tags_filter: build.template(std.get(block, 'tags_filter', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      monitor_tags_filter: resource.field(self._.blocks, 'monitor_tags_filter'),
      monitors: resource.field(self._.blocks, 'monitors'),
      name_filter: resource.field(self._.blocks, 'name_filter'),
      tags_filter: resource.field(self._.blocks, 'tags_filter'),
    },
    permissions(name, block): {
      local resource = blockType.resource('datadog_permissions', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        include_restricted: build.template(std.get(block, 'include_restricted', null)),
        permissions: build.template(std.get(block, 'permissions', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      include_restricted: resource.field(self._.blocks, 'include_restricted'),
      permissions: resource.field(self._.blocks, 'permissions'),
    },
    powerpack(name, block): {
      local resource = blockType.resource('datadog_powerpack', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
      }),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
    },
    role(name, block): {
      local resource = blockType.resource('datadog_role', name),
      _: resource._(block, {
        filter: build.template(block.filter),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        user_count: build.template(std.get(block, 'user_count', null)),
      }),
      filter: resource.field(self._.blocks, 'filter'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      user_count: resource.field(self._.blocks, 'user_count'),
    },
    role_users(name, block): {
      local resource = blockType.resource('datadog_role_users', name),
      _: resource._(block, {
        exact_match: build.template(std.get(block, 'exact_match', null)),
        filter: build.template(std.get(block, 'filter', null)),
        id: build.template(std.get(block, 'id', null)),
        role_id: build.template(block.role_id),
        role_users: build.template(std.get(block, 'role_users', null)),
      }),
      exact_match: resource.field(self._.blocks, 'exact_match'),
      filter: resource.field(self._.blocks, 'filter'),
      id: resource.field(self._.blocks, 'id'),
      role_id: resource.field(self._.blocks, 'role_id'),
      role_users: resource.field(self._.blocks, 'role_users'),
    },
    roles(name, block): {
      local resource = blockType.resource('datadog_roles', name),
      _: resource._(block, {
        filter: build.template(std.get(block, 'filter', null)),
        id: build.template(std.get(block, 'id', null)),
        roles: build.template(std.get(block, 'roles', null)),
      }),
      filter: resource.field(self._.blocks, 'filter'),
      id: resource.field(self._.blocks, 'id'),
      roles: resource.field(self._.blocks, 'roles'),
    },
    rum_application(name, block): {
      local resource = blockType.resource('datadog_rum_application', name),
      _: resource._(block, {
        client_token: build.template(std.get(block, 'client_token', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        name_filter: build.template(std.get(block, 'name_filter', null)),
        type: build.template(std.get(block, 'type', null)),
        type_filter: build.template(std.get(block, 'type_filter', null)),
      }),
      client_token: resource.field(self._.blocks, 'client_token'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      name_filter: resource.field(self._.blocks, 'name_filter'),
      type: resource.field(self._.blocks, 'type'),
      type_filter: resource.field(self._.blocks, 'type_filter'),
    },
    security_monitoring_filters(name, block): {
      local resource = blockType.resource('datadog_security_monitoring_filters', name),
      _: resource._(block, {
        filters: build.template(std.get(block, 'filters', null)),
        filters_ids: build.template(std.get(block, 'filters_ids', null)),
        id: build.template(std.get(block, 'id', null)),
      }),
      filters: resource.field(self._.blocks, 'filters'),
      filters_ids: resource.field(self._.blocks, 'filters_ids'),
      id: resource.field(self._.blocks, 'id'),
    },
    security_monitoring_rules(name, block): {
      local resource = blockType.resource('datadog_security_monitoring_rules', name),
      _: resource._(block, {
        default_only_filter: build.template(std.get(block, 'default_only_filter', null)),
        id: build.template(std.get(block, 'id', null)),
        name_filter: build.template(std.get(block, 'name_filter', null)),
        rule_ids: build.template(std.get(block, 'rule_ids', null)),
        rules: build.template(std.get(block, 'rules', null)),
        tags_filter: build.template(std.get(block, 'tags_filter', null)),
        user_only_filter: build.template(std.get(block, 'user_only_filter', null)),
      }),
      default_only_filter: resource.field(self._.blocks, 'default_only_filter'),
      id: resource.field(self._.blocks, 'id'),
      name_filter: resource.field(self._.blocks, 'name_filter'),
      rule_ids: resource.field(self._.blocks, 'rule_ids'),
      rules: resource.field(self._.blocks, 'rules'),
      tags_filter: resource.field(self._.blocks, 'tags_filter'),
      user_only_filter: resource.field(self._.blocks, 'user_only_filter'),
    },
    security_monitoring_suppressions(name, block): {
      local resource = blockType.resource('datadog_security_monitoring_suppressions', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        suppression_ids: build.template(std.get(block, 'suppression_ids', null)),
        suppressions: build.template(std.get(block, 'suppressions', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      suppression_ids: resource.field(self._.blocks, 'suppression_ids'),
      suppressions: resource.field(self._.blocks, 'suppressions'),
    },
    sensitive_data_scanner_group_order(name, block): {
      local resource = blockType.resource('datadog_sensitive_data_scanner_group_order', name),
      _: resource._(block, {
        group_ids: build.template(std.get(block, 'group_ids', null)),
        id: build.template(std.get(block, 'id', null)),
      }),
      group_ids: resource.field(self._.blocks, 'group_ids'),
      id: resource.field(self._.blocks, 'id'),
    },
    sensitive_data_scanner_standard_pattern(name, block): {
      local resource = blockType.resource('datadog_sensitive_data_scanner_standard_pattern', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        filter: build.template(block.filter),
        id: build.template(std.get(block, 'id', null)),
        included_keywords: build.template(std.get(block, 'included_keywords', null)),
        name: build.template(std.get(block, 'name', null)),
        pattern: build.template(std.get(block, 'pattern', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      description: resource.field(self._.blocks, 'description'),
      filter: resource.field(self._.blocks, 'filter'),
      id: resource.field(self._.blocks, 'id'),
      included_keywords: resource.field(self._.blocks, 'included_keywords'),
      name: resource.field(self._.blocks, 'name'),
      pattern: resource.field(self._.blocks, 'pattern'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    service_account(name, block): {
      local resource = blockType.resource('datadog_service_account', name),
      _: resource._(block, {
        disabled: build.template(std.get(block, 'disabled', null)),
        email: build.template(std.get(block, 'email', null)),
        exact_match: build.template(std.get(block, 'exact_match', null)),
        filter: build.template(std.get(block, 'filter', null)),
        filter_status: build.template(std.get(block, 'filter_status', null)),
        handle: build.template(std.get(block, 'handle', null)),
        icon: build.template(std.get(block, 'icon', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        roles: build.template(std.get(block, 'roles', null)),
        status: build.template(std.get(block, 'status', null)),
        title: build.template(std.get(block, 'title', null)),
        verified: build.template(std.get(block, 'verified', null)),
      }),
      disabled: resource.field(self._.blocks, 'disabled'),
      email: resource.field(self._.blocks, 'email'),
      exact_match: resource.field(self._.blocks, 'exact_match'),
      filter: resource.field(self._.blocks, 'filter'),
      filter_status: resource.field(self._.blocks, 'filter_status'),
      handle: resource.field(self._.blocks, 'handle'),
      icon: resource.field(self._.blocks, 'icon'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      roles: resource.field(self._.blocks, 'roles'),
      status: resource.field(self._.blocks, 'status'),
      title: resource.field(self._.blocks, 'title'),
      verified: resource.field(self._.blocks, 'verified'),
    },
    service_level_objective(name, block): {
      local resource = blockType.resource('datadog_service_level_objective', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        metrics_query: build.template(std.get(block, 'metrics_query', null)),
        name: build.template(std.get(block, 'name', null)),
        name_query: build.template(std.get(block, 'name_query', null)),
        query: build.template(std.get(block, 'query', null)),
        tags_query: build.template(std.get(block, 'tags_query', null)),
        target_threshold: build.template(std.get(block, 'target_threshold', null)),
        timeframe: build.template(std.get(block, 'timeframe', null)),
        type: build.template(std.get(block, 'type', null)),
        warning_threshold: build.template(std.get(block, 'warning_threshold', null)),
      }),
      description: resource.field(self._.blocks, 'description'),
      id: resource.field(self._.blocks, 'id'),
      metrics_query: resource.field(self._.blocks, 'metrics_query'),
      name: resource.field(self._.blocks, 'name'),
      name_query: resource.field(self._.blocks, 'name_query'),
      query: resource.field(self._.blocks, 'query'),
      tags_query: resource.field(self._.blocks, 'tags_query'),
      target_threshold: resource.field(self._.blocks, 'target_threshold'),
      timeframe: resource.field(self._.blocks, 'timeframe'),
      type: resource.field(self._.blocks, 'type'),
      warning_threshold: resource.field(self._.blocks, 'warning_threshold'),
    },
    service_level_objectives(name, block): {
      local resource = blockType.resource('datadog_service_level_objectives', name),
      _: resource._(block, {
        error_on_empty_result: build.template(std.get(block, 'error_on_empty_result', null)),
        id: build.template(std.get(block, 'id', null)),
        ids: build.template(std.get(block, 'ids', null)),
        metrics_query: build.template(std.get(block, 'metrics_query', null)),
        name_query: build.template(std.get(block, 'name_query', null)),
        query: build.template(std.get(block, 'query', null)),
        slos: build.template(std.get(block, 'slos', null)),
        tags_query: build.template(std.get(block, 'tags_query', null)),
      }),
      error_on_empty_result: resource.field(self._.blocks, 'error_on_empty_result'),
      id: resource.field(self._.blocks, 'id'),
      ids: resource.field(self._.blocks, 'ids'),
      metrics_query: resource.field(self._.blocks, 'metrics_query'),
      name_query: resource.field(self._.blocks, 'name_query'),
      query: resource.field(self._.blocks, 'query'),
      slos: resource.field(self._.blocks, 'slos'),
      tags_query: resource.field(self._.blocks, 'tags_query'),
    },
    synthetics_global_variable(name, block): {
      local resource = blockType.resource('datadog_synthetics_global_variable', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      tags: resource.field(self._.blocks, 'tags'),
    },
    synthetics_locations(name, block): {
      local resource = blockType.resource('datadog_synthetics_locations', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        locations: build.template(std.get(block, 'locations', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      locations: resource.field(self._.blocks, 'locations'),
    },
    synthetics_test(name, block): {
      local resource = blockType.resource('datadog_synthetics_test', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        tags: build.template(std.get(block, 'tags', null)),
        test_id: build.template(block.test_id),
        url: build.template(std.get(block, 'url', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      tags: resource.field(self._.blocks, 'tags'),
      test_id: resource.field(self._.blocks, 'test_id'),
      url: resource.field(self._.blocks, 'url'),
    },
    team(name, block): {
      local resource = blockType.resource('datadog_team', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        filter_keyword: build.template(std.get(block, 'filter_keyword', null)),
        handle: build.template(std.get(block, 'handle', null)),
        id: build.template(std.get(block, 'id', null)),
        link_count: build.template(std.get(block, 'link_count', null)),
        name: build.template(std.get(block, 'name', null)),
        summary: build.template(std.get(block, 'summary', null)),
        team_id: build.template(std.get(block, 'team_id', null)),
        user_count: build.template(std.get(block, 'user_count', null)),
      }),
      description: resource.field(self._.blocks, 'description'),
      filter_keyword: resource.field(self._.blocks, 'filter_keyword'),
      handle: resource.field(self._.blocks, 'handle'),
      id: resource.field(self._.blocks, 'id'),
      link_count: resource.field(self._.blocks, 'link_count'),
      name: resource.field(self._.blocks, 'name'),
      summary: resource.field(self._.blocks, 'summary'),
      team_id: resource.field(self._.blocks, 'team_id'),
      user_count: resource.field(self._.blocks, 'user_count'),
    },
    team_memberships(name, block): {
      local resource = blockType.resource('datadog_team_memberships', name),
      _: resource._(block, {
        exact_match: build.template(std.get(block, 'exact_match', null)),
        filter_keyword: build.template(std.get(block, 'filter_keyword', null)),
        id: build.template(std.get(block, 'id', null)),
        team_id: build.template(block.team_id),
        team_memberships: build.template(std.get(block, 'team_memberships', null)),
      }),
      exact_match: resource.field(self._.blocks, 'exact_match'),
      filter_keyword: resource.field(self._.blocks, 'filter_keyword'),
      id: resource.field(self._.blocks, 'id'),
      team_id: resource.field(self._.blocks, 'team_id'),
      team_memberships: resource.field(self._.blocks, 'team_memberships'),
    },
    teams(name, block): {
      local resource = blockType.resource('datadog_teams', name),
      _: resource._(block, {
        filter_keyword: build.template(std.get(block, 'filter_keyword', null)),
        filter_me: build.template(std.get(block, 'filter_me', null)),
        id: build.template(std.get(block, 'id', null)),
      }),
      filter_keyword: resource.field(self._.blocks, 'filter_keyword'),
      filter_me: resource.field(self._.blocks, 'filter_me'),
      id: resource.field(self._.blocks, 'id'),
    },
    user(name, block): {
      local resource = blockType.resource('datadog_user', name),
      _: resource._(block, {
        created_at: build.template(std.get(block, 'created_at', null)),
        disabled: build.template(std.get(block, 'disabled', null)),
        email: build.template(std.get(block, 'email', null)),
        exact_match: build.template(std.get(block, 'exact_match', null)),
        filter: build.template(block.filter),
        handle: build.template(std.get(block, 'handle', null)),
        icon: build.template(std.get(block, 'icon', null)),
        id: build.template(std.get(block, 'id', null)),
        mfa_enabled: build.template(std.get(block, 'mfa_enabled', null)),
        modified_at: build.template(std.get(block, 'modified_at', null)),
        name: build.template(std.get(block, 'name', null)),
        service_account: build.template(std.get(block, 'service_account', null)),
        status: build.template(std.get(block, 'status', null)),
        title: build.template(std.get(block, 'title', null)),
        verified: build.template(std.get(block, 'verified', null)),
      }),
      created_at: resource.field(self._.blocks, 'created_at'),
      disabled: resource.field(self._.blocks, 'disabled'),
      email: resource.field(self._.blocks, 'email'),
      exact_match: resource.field(self._.blocks, 'exact_match'),
      filter: resource.field(self._.blocks, 'filter'),
      handle: resource.field(self._.blocks, 'handle'),
      icon: resource.field(self._.blocks, 'icon'),
      id: resource.field(self._.blocks, 'id'),
      mfa_enabled: resource.field(self._.blocks, 'mfa_enabled'),
      modified_at: resource.field(self._.blocks, 'modified_at'),
      name: resource.field(self._.blocks, 'name'),
      service_account: resource.field(self._.blocks, 'service_account'),
      status: resource.field(self._.blocks, 'status'),
      title: resource.field(self._.blocks, 'title'),
      verified: resource.field(self._.blocks, 'verified'),
    },
    users(name, block): {
      local resource = blockType.resource('datadog_users', name),
      _: resource._(block, {
        filter: build.template(std.get(block, 'filter', null)),
        filter_status: build.template(std.get(block, 'filter_status', null)),
        id: build.template(std.get(block, 'id', null)),
        users: build.template(std.get(block, 'users', null)),
      }),
      filter: resource.field(self._.blocks, 'filter'),
      filter_status: resource.field(self._.blocks, 'filter_status'),
      id: resource.field(self._.blocks, 'id'),
      users: resource.field(self._.blocks, 'users'),
    },
    workflow_automation(name, block): {
      local resource = blockType.resource('datadog_workflow_automation', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        id: build.template(block.id),
        name: build.template(std.get(block, 'name', null)),
        published: build.template(std.get(block, 'published', null)),
        spec_json: build.template(std.get(block, 'spec_json', null)),
        tags: build.template(std.get(block, 'tags', null)),
      }),
      description: resource.field(self._.blocks, 'description'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      published: resource.field(self._.blocks, 'published'),
      spec_json: resource.field(self._.blocks, 'spec_json'),
      tags: resource.field(self._.blocks, 'tags'),
    },
  },
};

local providerWithConfiguration = provider(null, null) + {
  withConfiguration(alias, block): provider(block, {
    alias: alias,
    api_key: build.template(std.get(block, 'api_key', null)),
    api_url: build.template(std.get(block, 'api_url', null)),
    app_key: build.template(std.get(block, 'app_key', null)),
    http_client_retry_backoff_base: build.template(std.get(block, 'http_client_retry_backoff_base', null)),
    http_client_retry_backoff_multiplier: build.template(std.get(block, 'http_client_retry_backoff_multiplier', null)),
    http_client_retry_enabled: build.template(std.get(block, 'http_client_retry_enabled', null)),
    http_client_retry_max_retries: build.template(std.get(block, 'http_client_retry_max_retries', null)),
    http_client_retry_timeout: build.template(std.get(block, 'http_client_retry_timeout', null)),
    validate: build.template(std.get(block, 'validate', null)),
  }),
};

providerWithConfiguration
