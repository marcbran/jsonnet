local build = {
  expression(val):
    if std.type(val) == 'object' then
      if std.objectHas(val, '_') then
        if std.objectHas(val._, 'ref')
        then val._.ref
        else '"%s"' % [val._.str]
      else '{%s}' % [std.join(',', std.map(function(key) '%s:%s' % [self.expression(key), self.expression(val[key])], std.objectFields(val)))]
    else if std.type(val) == 'array' then '[%s]' % [std.join(',', std.map(function(element) self.expression(element), val))]
    else if std.type(val) == 'string' then '"%s"' % [val]
    else '"%s"' % [val],
  template(val):
    if std.type(val) == 'object' then
      if std.objectHas(val, '_') then
        if std.objectHas(val._, 'ref')
        then std.strReplace(self.string(val), '\n', '\\n')
        else val._.str
      else std.mapWithKey(function(key, value) self.template(value), val)
    else if std.type(val) == 'array' then std.map(function(element) self.template(element), val)
    else if std.type(val) == 'string' then std.strReplace(self.string(val), '\n', '\\n')
    else val,
  string(val):
    if std.type(val) == 'object' then
      if std.objectHas(val, '_') then
        if std.objectHas(val._, 'ref')
        then '${%s}' % [val._.ref]
        else val._.str
      else '${%s}' % [self.expression(val)]
    else if std.type(val) == 'array' then '${%s}' % [self.expression(val)]
    else if std.type(val) == 'string' then val
    else val,
  blocks(val):
    if std.type(val) == 'object' then
      if std.objectHas(val, '_') then
        if std.objectHas(val._, 'blocks')
        then val._.blocks
        else
          if std.objectHas(val._, 'block')
          then { [val._.ref]: val._.block }
          else {}
      else std.foldl(
        function(acc, val) std.mergePatch(acc, val),
        std.map(function(key) build.blocks(val[key]), std.objectFields(val)),
        {}
      )
    else
      if std.type(val) == 'array' then std.foldl(
        function(acc, val) std.mergePatch(acc, val),
        std.map(function(element) build.blocks(element), val),
        {}
      )
      else {},
};
local providerTemplate(provider, requirements, rawConfiguration, configuration) = {
  local providerRequirements = { ['terraform.required_providers.%s' % [provider]]: requirements },
  local providerAlias = if configuration == null then null else std.get(configuration, 'alias', null),
  local providerConfiguration = if configuration == null then { _: { refBlock: {}, blocks: [] } } else {
    _: {
      local _ = self,
      ref: '%s.%s' % [provider, configuration.alias],
      refBlock: {
        provider: _.ref,
      },
      block: {
        provider: {
          provider: std.prune(configuration),
        },
      },
      blocks: build.blocks(rawConfiguration) + {
        [_.ref]: _.block,
      },
    },
  },
  blockType(blockType): {
    local blockTypePath = if blockType == 'resource' then [] else ['data'],
    resource(type, name): {
      local resourceType = std.substr(type, std.length(provider) + 1, std.length(type)),
      local resourcePath = blockTypePath + [type, name],
      _(rawBlock, block): {
        local _ = self,
        local metaBlock = {
          depends_on: build.template(std.get(rawBlock, 'depends_on', null)),
          count: build.template(std.get(rawBlock, 'count', null)),
          for_each: build.template(std.get(rawBlock, 'for_each', null)),
        },
        type: if std.objectHas(rawBlock, 'for_each') then 'map' else if std.objectHas(rawBlock, 'count') then 'list' else 'object',
        provider: provider,
        providerAlias: providerAlias,
        resourceType: resourceType,
        name: name,
        ref: std.join('.', resourcePath),
        block: {
          [blockType]: {
            [type]: {
              [name]: std.prune(providerConfiguration._.refBlock + metaBlock + block),
            },
          },
        },
        blocks: build.blocks([providerConfiguration] + [rawBlock]) + providerRequirements + { [_.ref]: _.block },
      },
      field(blocks, fieldName): {
        local fieldPath = resourcePath + [fieldName],
        _: {
          ref: std.join('.', fieldPath),
          blocks: blocks,
        },
      },
    },
  },
  func(name, parameters=[]): {
    local parameterString = std.join(', ', [build.expression(parameter) for parameter in parameters]),
    _: {
      ref: 'provider::%s::%s(%s)' % [provider, name, parameterString],
      blocks: build.blocks([providerConfiguration] + [parameters]) + providerRequirements,
    },
  },
};
local provider(rawConfiguration, configuration) = {
  local requirements = {
    source: 'registry.terraform.io/goauthentik/authentik',
    version: '2025.8.0',
  },
  local provider = providerTemplate('authentik', requirements, rawConfiguration, configuration),
  resource: {
    local blockType = provider.blockType('resource'),
    application(name, block): {
      local resource = blockType.resource('authentik_application', name),
      _: resource._(block, {
        backchannel_providers: build.template(std.get(block, 'backchannel_providers', null)),
        group: build.template(std.get(block, 'group', null)),
        id: build.template(std.get(block, 'id', null)),
        meta_description: build.template(std.get(block, 'meta_description', null)),
        meta_icon: build.template(std.get(block, 'meta_icon', null)),
        meta_launch_url: build.template(std.get(block, 'meta_launch_url', null)),
        meta_publisher: build.template(std.get(block, 'meta_publisher', null)),
        name: build.template(block.name),
        open_in_new_tab: build.template(std.get(block, 'open_in_new_tab', null)),
        policy_engine_mode: build.template(std.get(block, 'policy_engine_mode', null)),
        protocol_provider: build.template(std.get(block, 'protocol_provider', null)),
        slug: build.template(block.slug),
        uuid: build.template(std.get(block, 'uuid', null)),
      }),
      backchannel_providers: resource.field(self._.blocks, 'backchannel_providers'),
      group: resource.field(self._.blocks, 'group'),
      id: resource.field(self._.blocks, 'id'),
      meta_description: resource.field(self._.blocks, 'meta_description'),
      meta_icon: resource.field(self._.blocks, 'meta_icon'),
      meta_launch_url: resource.field(self._.blocks, 'meta_launch_url'),
      meta_publisher: resource.field(self._.blocks, 'meta_publisher'),
      name: resource.field(self._.blocks, 'name'),
      open_in_new_tab: resource.field(self._.blocks, 'open_in_new_tab'),
      policy_engine_mode: resource.field(self._.blocks, 'policy_engine_mode'),
      protocol_provider: resource.field(self._.blocks, 'protocol_provider'),
      slug: resource.field(self._.blocks, 'slug'),
      uuid: resource.field(self._.blocks, 'uuid'),
    },
    application_entitlement(name, block): {
      local resource = blockType.resource('authentik_application_entitlement', name),
      _: resource._(block, {
        application: build.template(block.application),
        attributes: build.template(std.get(block, 'attributes', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
      }),
      application: resource.field(self._.blocks, 'application'),
      attributes: resource.field(self._.blocks, 'attributes'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
    },
    blueprint(name, block): {
      local resource = blockType.resource('authentik_blueprint', name),
      _: resource._(block, {
        content: build.template(std.get(block, 'content', null)),
        context: build.template(std.get(block, 'context', null)),
        enabled: build.template(std.get(block, 'enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        path: build.template(std.get(block, 'path', null)),
      }),
      content: resource.field(self._.blocks, 'content'),
      context: resource.field(self._.blocks, 'context'),
      enabled: resource.field(self._.blocks, 'enabled'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      path: resource.field(self._.blocks, 'path'),
    },
    brand(name, block): {
      local resource = blockType.resource('authentik_brand', name),
      _: resource._(block, {
        attributes: build.template(std.get(block, 'attributes', null)),
        branding_custom_css: build.template(std.get(block, 'branding_custom_css', null)),
        branding_default_flow_background: build.template(std.get(block, 'branding_default_flow_background', null)),
        branding_favicon: build.template(std.get(block, 'branding_favicon', null)),
        branding_logo: build.template(std.get(block, 'branding_logo', null)),
        branding_title: build.template(std.get(block, 'branding_title', null)),
        client_certificates: build.template(std.get(block, 'client_certificates', null)),
        default: build.template(std.get(block, 'default', null)),
        default_application: build.template(std.get(block, 'default_application', null)),
        domain: build.template(block.domain),
        flow_authentication: build.template(std.get(block, 'flow_authentication', null)),
        flow_device_code: build.template(std.get(block, 'flow_device_code', null)),
        flow_invalidation: build.template(std.get(block, 'flow_invalidation', null)),
        flow_recovery: build.template(std.get(block, 'flow_recovery', null)),
        flow_unenrollment: build.template(std.get(block, 'flow_unenrollment', null)),
        flow_user_settings: build.template(std.get(block, 'flow_user_settings', null)),
        id: build.template(std.get(block, 'id', null)),
        web_certificate: build.template(std.get(block, 'web_certificate', null)),
      }),
      attributes: resource.field(self._.blocks, 'attributes'),
      branding_custom_css: resource.field(self._.blocks, 'branding_custom_css'),
      branding_default_flow_background: resource.field(self._.blocks, 'branding_default_flow_background'),
      branding_favicon: resource.field(self._.blocks, 'branding_favicon'),
      branding_logo: resource.field(self._.blocks, 'branding_logo'),
      branding_title: resource.field(self._.blocks, 'branding_title'),
      client_certificates: resource.field(self._.blocks, 'client_certificates'),
      default: resource.field(self._.blocks, 'default'),
      default_application: resource.field(self._.blocks, 'default_application'),
      domain: resource.field(self._.blocks, 'domain'),
      flow_authentication: resource.field(self._.blocks, 'flow_authentication'),
      flow_device_code: resource.field(self._.blocks, 'flow_device_code'),
      flow_invalidation: resource.field(self._.blocks, 'flow_invalidation'),
      flow_recovery: resource.field(self._.blocks, 'flow_recovery'),
      flow_unenrollment: resource.field(self._.blocks, 'flow_unenrollment'),
      flow_user_settings: resource.field(self._.blocks, 'flow_user_settings'),
      id: resource.field(self._.blocks, 'id'),
      web_certificate: resource.field(self._.blocks, 'web_certificate'),
    },
    certificate_key_pair(name, block): {
      local resource = blockType.resource('authentik_certificate_key_pair', name),
      _: resource._(block, {
        certificate_data: build.template(block.certificate_data),
        id: build.template(std.get(block, 'id', null)),
        key_data: build.template(std.get(block, 'key_data', null)),
        name: build.template(block.name),
      }),
      certificate_data: resource.field(self._.blocks, 'certificate_data'),
      id: resource.field(self._.blocks, 'id'),
      key_data: resource.field(self._.blocks, 'key_data'),
      name: resource.field(self._.blocks, 'name'),
    },
    enterprise_license(name, block): {
      local resource = blockType.resource('authentik_enterprise_license', name),
      _: resource._(block, {
        expiry: build.template(std.get(block, 'expiry', null)),
        external_users: build.template(std.get(block, 'external_users', null)),
        id: build.template(std.get(block, 'id', null)),
        internal_users: build.template(std.get(block, 'internal_users', null)),
        key: build.template(block.key),
        name: build.template(std.get(block, 'name', null)),
      }),
      expiry: resource.field(self._.blocks, 'expiry'),
      external_users: resource.field(self._.blocks, 'external_users'),
      id: resource.field(self._.blocks, 'id'),
      internal_users: resource.field(self._.blocks, 'internal_users'),
      key: resource.field(self._.blocks, 'key'),
      name: resource.field(self._.blocks, 'name'),
    },
    event_rule(name, block): {
      local resource = blockType.resource('authentik_event_rule', name),
      _: resource._(block, {
        destination_event_user: build.template(std.get(block, 'destination_event_user', null)),
        destination_group: build.template(std.get(block, 'destination_group', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        severity: build.template(std.get(block, 'severity', null)),
        transports: build.template(block.transports),
      }),
      destination_event_user: resource.field(self._.blocks, 'destination_event_user'),
      destination_group: resource.field(self._.blocks, 'destination_group'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      severity: resource.field(self._.blocks, 'severity'),
      transports: resource.field(self._.blocks, 'transports'),
    },
    event_transport(name, block): {
      local resource = blockType.resource('authentik_event_transport', name),
      _: resource._(block, {
        email_subject_prefix: build.template(std.get(block, 'email_subject_prefix', null)),
        email_template: build.template(std.get(block, 'email_template', null)),
        id: build.template(std.get(block, 'id', null)),
        mode: build.template(block.mode),
        name: build.template(block.name),
        send_once: build.template(std.get(block, 'send_once', null)),
        webhook_mapping_body: build.template(std.get(block, 'webhook_mapping_body', null)),
        webhook_mapping_headers: build.template(std.get(block, 'webhook_mapping_headers', null)),
        webhook_url: build.template(std.get(block, 'webhook_url', null)),
      }),
      email_subject_prefix: resource.field(self._.blocks, 'email_subject_prefix'),
      email_template: resource.field(self._.blocks, 'email_template'),
      id: resource.field(self._.blocks, 'id'),
      mode: resource.field(self._.blocks, 'mode'),
      name: resource.field(self._.blocks, 'name'),
      send_once: resource.field(self._.blocks, 'send_once'),
      webhook_mapping_body: resource.field(self._.blocks, 'webhook_mapping_body'),
      webhook_mapping_headers: resource.field(self._.blocks, 'webhook_mapping_headers'),
      webhook_url: resource.field(self._.blocks, 'webhook_url'),
    },
    flow(name, block): {
      local resource = blockType.resource('authentik_flow', name),
      _: resource._(block, {
        authentication: build.template(std.get(block, 'authentication', null)),
        background: build.template(std.get(block, 'background', null)),
        compatibility_mode: build.template(std.get(block, 'compatibility_mode', null)),
        denied_action: build.template(std.get(block, 'denied_action', null)),
        designation: build.template(block.designation),
        id: build.template(std.get(block, 'id', null)),
        layout: build.template(std.get(block, 'layout', null)),
        name: build.template(block.name),
        policy_engine_mode: build.template(std.get(block, 'policy_engine_mode', null)),
        slug: build.template(block.slug),
        title: build.template(block.title),
        uuid: build.template(std.get(block, 'uuid', null)),
      }),
      authentication: resource.field(self._.blocks, 'authentication'),
      background: resource.field(self._.blocks, 'background'),
      compatibility_mode: resource.field(self._.blocks, 'compatibility_mode'),
      denied_action: resource.field(self._.blocks, 'denied_action'),
      designation: resource.field(self._.blocks, 'designation'),
      id: resource.field(self._.blocks, 'id'),
      layout: resource.field(self._.blocks, 'layout'),
      name: resource.field(self._.blocks, 'name'),
      policy_engine_mode: resource.field(self._.blocks, 'policy_engine_mode'),
      slug: resource.field(self._.blocks, 'slug'),
      title: resource.field(self._.blocks, 'title'),
      uuid: resource.field(self._.blocks, 'uuid'),
    },
    flow_stage_binding(name, block): {
      local resource = blockType.resource('authentik_flow_stage_binding', name),
      _: resource._(block, {
        evaluate_on_plan: build.template(std.get(block, 'evaluate_on_plan', null)),
        id: build.template(std.get(block, 'id', null)),
        invalid_response_action: build.template(std.get(block, 'invalid_response_action', null)),
        order: build.template(block.order),
        policy_engine_mode: build.template(std.get(block, 'policy_engine_mode', null)),
        re_evaluate_policies: build.template(std.get(block, 're_evaluate_policies', null)),
        stage: build.template(block.stage),
        target: build.template(block.target),
      }),
      evaluate_on_plan: resource.field(self._.blocks, 'evaluate_on_plan'),
      id: resource.field(self._.blocks, 'id'),
      invalid_response_action: resource.field(self._.blocks, 'invalid_response_action'),
      order: resource.field(self._.blocks, 'order'),
      policy_engine_mode: resource.field(self._.blocks, 'policy_engine_mode'),
      re_evaluate_policies: resource.field(self._.blocks, 're_evaluate_policies'),
      stage: resource.field(self._.blocks, 'stage'),
      target: resource.field(self._.blocks, 'target'),
    },
    group(name, block): {
      local resource = blockType.resource('authentik_group', name),
      _: resource._(block, {
        attributes: build.template(std.get(block, 'attributes', null)),
        id: build.template(std.get(block, 'id', null)),
        is_superuser: build.template(std.get(block, 'is_superuser', null)),
        name: build.template(block.name),
        parent: build.template(std.get(block, 'parent', null)),
        roles: build.template(std.get(block, 'roles', null)),
        users: build.template(std.get(block, 'users', null)),
      }),
      attributes: resource.field(self._.blocks, 'attributes'),
      id: resource.field(self._.blocks, 'id'),
      is_superuser: resource.field(self._.blocks, 'is_superuser'),
      name: resource.field(self._.blocks, 'name'),
      parent: resource.field(self._.blocks, 'parent'),
      roles: resource.field(self._.blocks, 'roles'),
      users: resource.field(self._.blocks, 'users'),
    },
    outpost(name, block): {
      local resource = blockType.resource('authentik_outpost', name),
      _: resource._(block, {
        config: build.template(std.get(block, 'config', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        protocol_providers: build.template(block.protocol_providers),
        service_connection: build.template(std.get(block, 'service_connection', null)),
        type: build.template(std.get(block, 'type', null)),
      }),
      config: resource.field(self._.blocks, 'config'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      protocol_providers: resource.field(self._.blocks, 'protocol_providers'),
      service_connection: resource.field(self._.blocks, 'service_connection'),
      type: resource.field(self._.blocks, 'type'),
    },
    policy_binding(name, block): {
      local resource = blockType.resource('authentik_policy_binding', name),
      _: resource._(block, {
        enabled: build.template(std.get(block, 'enabled', null)),
        failure_result: build.template(std.get(block, 'failure_result', null)),
        group: build.template(std.get(block, 'group', null)),
        id: build.template(std.get(block, 'id', null)),
        negate: build.template(std.get(block, 'negate', null)),
        order: build.template(block.order),
        policy: build.template(std.get(block, 'policy', null)),
        target: build.template(block.target),
        timeout: build.template(std.get(block, 'timeout', null)),
        user: build.template(std.get(block, 'user', null)),
      }),
      enabled: resource.field(self._.blocks, 'enabled'),
      failure_result: resource.field(self._.blocks, 'failure_result'),
      group: resource.field(self._.blocks, 'group'),
      id: resource.field(self._.blocks, 'id'),
      negate: resource.field(self._.blocks, 'negate'),
      order: resource.field(self._.blocks, 'order'),
      policy: resource.field(self._.blocks, 'policy'),
      target: resource.field(self._.blocks, 'target'),
      timeout: resource.field(self._.blocks, 'timeout'),
      user: resource.field(self._.blocks, 'user'),
    },
    policy_dummy(name, block): {
      local resource = blockType.resource('authentik_policy_dummy', name),
      _: resource._(block, {
        execution_logging: build.template(std.get(block, 'execution_logging', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        result: build.template(std.get(block, 'result', null)),
        wait_max: build.template(std.get(block, 'wait_max', null)),
        wait_min: build.template(std.get(block, 'wait_min', null)),
      }),
      execution_logging: resource.field(self._.blocks, 'execution_logging'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      result: resource.field(self._.blocks, 'result'),
      wait_max: resource.field(self._.blocks, 'wait_max'),
      wait_min: resource.field(self._.blocks, 'wait_min'),
    },
    policy_event_matcher(name, block): {
      local resource = blockType.resource('authentik_policy_event_matcher', name),
      _: resource._(block, {
        action: build.template(std.get(block, 'action', null)),
        app: build.template(std.get(block, 'app', null)),
        client_ip: build.template(std.get(block, 'client_ip', null)),
        execution_logging: build.template(std.get(block, 'execution_logging', null)),
        id: build.template(std.get(block, 'id', null)),
        model: build.template(std.get(block, 'model', null)),
        name: build.template(block.name),
      }),
      action: resource.field(self._.blocks, 'action'),
      app: resource.field(self._.blocks, 'app'),
      client_ip: resource.field(self._.blocks, 'client_ip'),
      execution_logging: resource.field(self._.blocks, 'execution_logging'),
      id: resource.field(self._.blocks, 'id'),
      model: resource.field(self._.blocks, 'model'),
      name: resource.field(self._.blocks, 'name'),
    },
    policy_expiry(name, block): {
      local resource = blockType.resource('authentik_policy_expiry', name),
      _: resource._(block, {
        days: build.template(block.days),
        deny_only: build.template(std.get(block, 'deny_only', null)),
        execution_logging: build.template(std.get(block, 'execution_logging', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
      }),
      days: resource.field(self._.blocks, 'days'),
      deny_only: resource.field(self._.blocks, 'deny_only'),
      execution_logging: resource.field(self._.blocks, 'execution_logging'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
    },
    policy_expression(name, block): {
      local resource = blockType.resource('authentik_policy_expression', name),
      _: resource._(block, {
        execution_logging: build.template(std.get(block, 'execution_logging', null)),
        expression: build.template(block.expression),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
      }),
      execution_logging: resource.field(self._.blocks, 'execution_logging'),
      expression: resource.field(self._.blocks, 'expression'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
    },
    policy_geoip(name, block): {
      local resource = blockType.resource('authentik_policy_geoip', name),
      _: resource._(block, {
        asns: build.template(std.get(block, 'asns', null)),
        check_history_distance: build.template(std.get(block, 'check_history_distance', null)),
        check_impossible_travel: build.template(std.get(block, 'check_impossible_travel', null)),
        countries: build.template(std.get(block, 'countries', null)),
        distance_tolerance_km: build.template(std.get(block, 'distance_tolerance_km', null)),
        execution_logging: build.template(std.get(block, 'execution_logging', null)),
        history_login_count: build.template(std.get(block, 'history_login_count', null)),
        history_max_distance_km: build.template(std.get(block, 'history_max_distance_km', null)),
        id: build.template(std.get(block, 'id', null)),
        impossible_tolerance_km: build.template(std.get(block, 'impossible_tolerance_km', null)),
        name: build.template(block.name),
      }),
      asns: resource.field(self._.blocks, 'asns'),
      check_history_distance: resource.field(self._.blocks, 'check_history_distance'),
      check_impossible_travel: resource.field(self._.blocks, 'check_impossible_travel'),
      countries: resource.field(self._.blocks, 'countries'),
      distance_tolerance_km: resource.field(self._.blocks, 'distance_tolerance_km'),
      execution_logging: resource.field(self._.blocks, 'execution_logging'),
      history_login_count: resource.field(self._.blocks, 'history_login_count'),
      history_max_distance_km: resource.field(self._.blocks, 'history_max_distance_km'),
      id: resource.field(self._.blocks, 'id'),
      impossible_tolerance_km: resource.field(self._.blocks, 'impossible_tolerance_km'),
      name: resource.field(self._.blocks, 'name'),
    },
    policy_password(name, block): {
      local resource = blockType.resource('authentik_policy_password', name),
      _: resource._(block, {
        amount_digits: build.template(std.get(block, 'amount_digits', null)),
        amount_lowercase: build.template(std.get(block, 'amount_lowercase', null)),
        amount_symbols: build.template(std.get(block, 'amount_symbols', null)),
        amount_uppercase: build.template(std.get(block, 'amount_uppercase', null)),
        check_have_i_been_pwned: build.template(std.get(block, 'check_have_i_been_pwned', null)),
        check_static_rules: build.template(std.get(block, 'check_static_rules', null)),
        check_zxcvbn: build.template(std.get(block, 'check_zxcvbn', null)),
        error_message: build.template(block.error_message),
        execution_logging: build.template(std.get(block, 'execution_logging', null)),
        hibp_allowed_count: build.template(std.get(block, 'hibp_allowed_count', null)),
        id: build.template(std.get(block, 'id', null)),
        length_min: build.template(std.get(block, 'length_min', null)),
        name: build.template(block.name),
        password_field: build.template(std.get(block, 'password_field', null)),
        symbol_charset: build.template(std.get(block, 'symbol_charset', null)),
        zxcvbn_score_threshold: build.template(std.get(block, 'zxcvbn_score_threshold', null)),
      }),
      amount_digits: resource.field(self._.blocks, 'amount_digits'),
      amount_lowercase: resource.field(self._.blocks, 'amount_lowercase'),
      amount_symbols: resource.field(self._.blocks, 'amount_symbols'),
      amount_uppercase: resource.field(self._.blocks, 'amount_uppercase'),
      check_have_i_been_pwned: resource.field(self._.blocks, 'check_have_i_been_pwned'),
      check_static_rules: resource.field(self._.blocks, 'check_static_rules'),
      check_zxcvbn: resource.field(self._.blocks, 'check_zxcvbn'),
      error_message: resource.field(self._.blocks, 'error_message'),
      execution_logging: resource.field(self._.blocks, 'execution_logging'),
      hibp_allowed_count: resource.field(self._.blocks, 'hibp_allowed_count'),
      id: resource.field(self._.blocks, 'id'),
      length_min: resource.field(self._.blocks, 'length_min'),
      name: resource.field(self._.blocks, 'name'),
      password_field: resource.field(self._.blocks, 'password_field'),
      symbol_charset: resource.field(self._.blocks, 'symbol_charset'),
      zxcvbn_score_threshold: resource.field(self._.blocks, 'zxcvbn_score_threshold'),
    },
    policy_reputation(name, block): {
      local resource = blockType.resource('authentik_policy_reputation', name),
      _: resource._(block, {
        check_ip: build.template(std.get(block, 'check_ip', null)),
        check_username: build.template(std.get(block, 'check_username', null)),
        execution_logging: build.template(std.get(block, 'execution_logging', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        threshold: build.template(std.get(block, 'threshold', null)),
      }),
      check_ip: resource.field(self._.blocks, 'check_ip'),
      check_username: resource.field(self._.blocks, 'check_username'),
      execution_logging: resource.field(self._.blocks, 'execution_logging'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      threshold: resource.field(self._.blocks, 'threshold'),
    },
    policy_unique_password(name, block): {
      local resource = blockType.resource('authentik_policy_unique_password', name),
      _: resource._(block, {
        execution_logging: build.template(std.get(block, 'execution_logging', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        num_historical_passwords: build.template(std.get(block, 'num_historical_passwords', null)),
        password_field: build.template(std.get(block, 'password_field', null)),
      }),
      execution_logging: resource.field(self._.blocks, 'execution_logging'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      num_historical_passwords: resource.field(self._.blocks, 'num_historical_passwords'),
      password_field: resource.field(self._.blocks, 'password_field'),
    },
    property_mapping_google_workspace(name, block): {
      local resource = blockType.resource('authentik_property_mapping_google_workspace', name),
      _: resource._(block, {
        expression: build.template(block.expression),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
      }),
      expression: resource.field(self._.blocks, 'expression'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
    },
    property_mapping_ldap(name, block): {
      local resource = blockType.resource('authentik_property_mapping_ldap', name),
      _: resource._(block, {
        expression: build.template(block.expression),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
      }),
      expression: resource.field(self._.blocks, 'expression'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
    },
    property_mapping_microsoft_entra(name, block): {
      local resource = blockType.resource('authentik_property_mapping_microsoft_entra', name),
      _: resource._(block, {
        expression: build.template(block.expression),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
      }),
      expression: resource.field(self._.blocks, 'expression'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
    },
    property_mapping_notification(name, block): {
      local resource = blockType.resource('authentik_property_mapping_notification', name),
      _: resource._(block, {
        expression: build.template(block.expression),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
      }),
      expression: resource.field(self._.blocks, 'expression'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
    },
    property_mapping_provider_google_workspace(name, block): {
      local resource = blockType.resource('authentik_property_mapping_provider_google_workspace', name),
      _: resource._(block, {
        expression: build.template(block.expression),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
      }),
      expression: resource.field(self._.blocks, 'expression'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
    },
    property_mapping_provider_microsoft_entra(name, block): {
      local resource = blockType.resource('authentik_property_mapping_provider_microsoft_entra', name),
      _: resource._(block, {
        expression: build.template(block.expression),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
      }),
      expression: resource.field(self._.blocks, 'expression'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
    },
    property_mapping_provider_rac(name, block): {
      local resource = blockType.resource('authentik_property_mapping_provider_rac', name),
      _: resource._(block, {
        expression: build.template(std.get(block, 'expression', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        settings: build.template(std.get(block, 'settings', null)),
      }),
      expression: resource.field(self._.blocks, 'expression'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      settings: resource.field(self._.blocks, 'settings'),
    },
    property_mapping_provider_radius(name, block): {
      local resource = blockType.resource('authentik_property_mapping_provider_radius', name),
      _: resource._(block, {
        expression: build.template(block.expression),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
      }),
      expression: resource.field(self._.blocks, 'expression'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
    },
    property_mapping_provider_saml(name, block): {
      local resource = blockType.resource('authentik_property_mapping_provider_saml', name),
      _: resource._(block, {
        expression: build.template(block.expression),
        friendly_name: build.template(std.get(block, 'friendly_name', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        saml_name: build.template(block.saml_name),
      }),
      expression: resource.field(self._.blocks, 'expression'),
      friendly_name: resource.field(self._.blocks, 'friendly_name'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      saml_name: resource.field(self._.blocks, 'saml_name'),
    },
    property_mapping_provider_scim(name, block): {
      local resource = blockType.resource('authentik_property_mapping_provider_scim', name),
      _: resource._(block, {
        expression: build.template(block.expression),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
      }),
      expression: resource.field(self._.blocks, 'expression'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
    },
    property_mapping_provider_scope(name, block): {
      local resource = blockType.resource('authentik_property_mapping_provider_scope', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        expression: build.template(block.expression),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        scope_name: build.template(block.scope_name),
      }),
      description: resource.field(self._.blocks, 'description'),
      expression: resource.field(self._.blocks, 'expression'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      scope_name: resource.field(self._.blocks, 'scope_name'),
    },
    property_mapping_rac(name, block): {
      local resource = blockType.resource('authentik_property_mapping_rac', name),
      _: resource._(block, {
        expression: build.template(std.get(block, 'expression', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        settings: build.template(std.get(block, 'settings', null)),
      }),
      expression: resource.field(self._.blocks, 'expression'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      settings: resource.field(self._.blocks, 'settings'),
    },
    property_mapping_radius(name, block): {
      local resource = blockType.resource('authentik_property_mapping_radius', name),
      _: resource._(block, {
        expression: build.template(block.expression),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
      }),
      expression: resource.field(self._.blocks, 'expression'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
    },
    property_mapping_saml(name, block): {
      local resource = blockType.resource('authentik_property_mapping_saml', name),
      _: resource._(block, {
        expression: build.template(block.expression),
        friendly_name: build.template(std.get(block, 'friendly_name', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        saml_name: build.template(block.saml_name),
      }),
      expression: resource.field(self._.blocks, 'expression'),
      friendly_name: resource.field(self._.blocks, 'friendly_name'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      saml_name: resource.field(self._.blocks, 'saml_name'),
    },
    property_mapping_scim(name, block): {
      local resource = blockType.resource('authentik_property_mapping_scim', name),
      _: resource._(block, {
        expression: build.template(block.expression),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
      }),
      expression: resource.field(self._.blocks, 'expression'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
    },
    property_mapping_source_kerberos(name, block): {
      local resource = blockType.resource('authentik_property_mapping_source_kerberos', name),
      _: resource._(block, {
        expression: build.template(block.expression),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
      }),
      expression: resource.field(self._.blocks, 'expression'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
    },
    property_mapping_source_ldap(name, block): {
      local resource = blockType.resource('authentik_property_mapping_source_ldap', name),
      _: resource._(block, {
        expression: build.template(block.expression),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
      }),
      expression: resource.field(self._.blocks, 'expression'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
    },
    property_mapping_source_oauth(name, block): {
      local resource = blockType.resource('authentik_property_mapping_source_oauth', name),
      _: resource._(block, {
        expression: build.template(block.expression),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
      }),
      expression: resource.field(self._.blocks, 'expression'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
    },
    property_mapping_source_plex(name, block): {
      local resource = blockType.resource('authentik_property_mapping_source_plex', name),
      _: resource._(block, {
        expression: build.template(block.expression),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
      }),
      expression: resource.field(self._.blocks, 'expression'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
    },
    property_mapping_source_saml(name, block): {
      local resource = blockType.resource('authentik_property_mapping_source_saml', name),
      _: resource._(block, {
        expression: build.template(block.expression),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
      }),
      expression: resource.field(self._.blocks, 'expression'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
    },
    property_mapping_source_scim(name, block): {
      local resource = blockType.resource('authentik_property_mapping_source_scim', name),
      _: resource._(block, {
        expression: build.template(block.expression),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
      }),
      expression: resource.field(self._.blocks, 'expression'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
    },
    provider_google_workspace(name, block): {
      local resource = blockType.resource('authentik_provider_google_workspace', name),
      _: resource._(block, {
        credentials: build.template(std.get(block, 'credentials', null)),
        default_group_email_domain: build.template(block.default_group_email_domain),
        delegated_subject: build.template(std.get(block, 'delegated_subject', null)),
        dry_run: build.template(std.get(block, 'dry_run', null)),
        exclude_users_service_account: build.template(std.get(block, 'exclude_users_service_account', null)),
        filter_group: build.template(std.get(block, 'filter_group', null)),
        group_delete_action: build.template(std.get(block, 'group_delete_action', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        property_mappings: build.template(std.get(block, 'property_mappings', null)),
        property_mappings_group: build.template(std.get(block, 'property_mappings_group', null)),
        user_delete_action: build.template(std.get(block, 'user_delete_action', null)),
      }),
      credentials: resource.field(self._.blocks, 'credentials'),
      default_group_email_domain: resource.field(self._.blocks, 'default_group_email_domain'),
      delegated_subject: resource.field(self._.blocks, 'delegated_subject'),
      dry_run: resource.field(self._.blocks, 'dry_run'),
      exclude_users_service_account: resource.field(self._.blocks, 'exclude_users_service_account'),
      filter_group: resource.field(self._.blocks, 'filter_group'),
      group_delete_action: resource.field(self._.blocks, 'group_delete_action'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      property_mappings: resource.field(self._.blocks, 'property_mappings'),
      property_mappings_group: resource.field(self._.blocks, 'property_mappings_group'),
      user_delete_action: resource.field(self._.blocks, 'user_delete_action'),
    },
    provider_ldap(name, block): {
      local resource = blockType.resource('authentik_provider_ldap', name),
      _: resource._(block, {
        base_dn: build.template(block.base_dn),
        bind_flow: build.template(block.bind_flow),
        bind_mode: build.template(std.get(block, 'bind_mode', null)),
        certificate: build.template(std.get(block, 'certificate', null)),
        gid_start_number: build.template(std.get(block, 'gid_start_number', null)),
        id: build.template(std.get(block, 'id', null)),
        mfa_support: build.template(std.get(block, 'mfa_support', null)),
        name: build.template(block.name),
        search_mode: build.template(std.get(block, 'search_mode', null)),
        tls_server_name: build.template(std.get(block, 'tls_server_name', null)),
        uid_start_number: build.template(std.get(block, 'uid_start_number', null)),
        unbind_flow: build.template(block.unbind_flow),
      }),
      base_dn: resource.field(self._.blocks, 'base_dn'),
      bind_flow: resource.field(self._.blocks, 'bind_flow'),
      bind_mode: resource.field(self._.blocks, 'bind_mode'),
      certificate: resource.field(self._.blocks, 'certificate'),
      gid_start_number: resource.field(self._.blocks, 'gid_start_number'),
      id: resource.field(self._.blocks, 'id'),
      mfa_support: resource.field(self._.blocks, 'mfa_support'),
      name: resource.field(self._.blocks, 'name'),
      search_mode: resource.field(self._.blocks, 'search_mode'),
      tls_server_name: resource.field(self._.blocks, 'tls_server_name'),
      uid_start_number: resource.field(self._.blocks, 'uid_start_number'),
      unbind_flow: resource.field(self._.blocks, 'unbind_flow'),
    },
    provider_microsoft_entra(name, block): {
      local resource = blockType.resource('authentik_provider_microsoft_entra', name),
      _: resource._(block, {
        client_id: build.template(block.client_id),
        client_secret: build.template(block.client_secret),
        dry_run: build.template(std.get(block, 'dry_run', null)),
        exclude_users_service_account: build.template(std.get(block, 'exclude_users_service_account', null)),
        filter_group: build.template(std.get(block, 'filter_group', null)),
        group_delete_action: build.template(std.get(block, 'group_delete_action', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        property_mappings: build.template(std.get(block, 'property_mappings', null)),
        property_mappings_group: build.template(std.get(block, 'property_mappings_group', null)),
        tenant_id: build.template(block.tenant_id),
        user_delete_action: build.template(std.get(block, 'user_delete_action', null)),
      }),
      client_id: resource.field(self._.blocks, 'client_id'),
      client_secret: resource.field(self._.blocks, 'client_secret'),
      dry_run: resource.field(self._.blocks, 'dry_run'),
      exclude_users_service_account: resource.field(self._.blocks, 'exclude_users_service_account'),
      filter_group: resource.field(self._.blocks, 'filter_group'),
      group_delete_action: resource.field(self._.blocks, 'group_delete_action'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      property_mappings: resource.field(self._.blocks, 'property_mappings'),
      property_mappings_group: resource.field(self._.blocks, 'property_mappings_group'),
      tenant_id: resource.field(self._.blocks, 'tenant_id'),
      user_delete_action: resource.field(self._.blocks, 'user_delete_action'),
    },
    provider_oauth2(name, block): {
      local resource = blockType.resource('authentik_provider_oauth2', name),
      _: resource._(block, {
        access_code_validity: build.template(std.get(block, 'access_code_validity', null)),
        access_token_validity: build.template(std.get(block, 'access_token_validity', null)),
        allowed_redirect_uris: build.template(std.get(block, 'allowed_redirect_uris', null)),
        authentication_flow: build.template(std.get(block, 'authentication_flow', null)),
        authorization_flow: build.template(block.authorization_flow),
        backchannel_logout_uri: build.template(std.get(block, 'backchannel_logout_uri', null)),
        client_id: build.template(block.client_id),
        client_secret: build.template(std.get(block, 'client_secret', null)),
        client_type: build.template(std.get(block, 'client_type', null)),
        encryption_key: build.template(std.get(block, 'encryption_key', null)),
        id: build.template(std.get(block, 'id', null)),
        include_claims_in_id_token: build.template(std.get(block, 'include_claims_in_id_token', null)),
        invalidation_flow: build.template(block.invalidation_flow),
        issuer_mode: build.template(std.get(block, 'issuer_mode', null)),
        jwks_sources: build.template(std.get(block, 'jwks_sources', null)),
        jwt_federation_providers: build.template(std.get(block, 'jwt_federation_providers', null)),
        jwt_federation_sources: build.template(std.get(block, 'jwt_federation_sources', null)),
        name: build.template(block.name),
        property_mappings: build.template(std.get(block, 'property_mappings', null)),
        refresh_token_validity: build.template(std.get(block, 'refresh_token_validity', null)),
        signing_key: build.template(std.get(block, 'signing_key', null)),
        sub_mode: build.template(std.get(block, 'sub_mode', null)),
      }),
      access_code_validity: resource.field(self._.blocks, 'access_code_validity'),
      access_token_validity: resource.field(self._.blocks, 'access_token_validity'),
      allowed_redirect_uris: resource.field(self._.blocks, 'allowed_redirect_uris'),
      authentication_flow: resource.field(self._.blocks, 'authentication_flow'),
      authorization_flow: resource.field(self._.blocks, 'authorization_flow'),
      backchannel_logout_uri: resource.field(self._.blocks, 'backchannel_logout_uri'),
      client_id: resource.field(self._.blocks, 'client_id'),
      client_secret: resource.field(self._.blocks, 'client_secret'),
      client_type: resource.field(self._.blocks, 'client_type'),
      encryption_key: resource.field(self._.blocks, 'encryption_key'),
      id: resource.field(self._.blocks, 'id'),
      include_claims_in_id_token: resource.field(self._.blocks, 'include_claims_in_id_token'),
      invalidation_flow: resource.field(self._.blocks, 'invalidation_flow'),
      issuer_mode: resource.field(self._.blocks, 'issuer_mode'),
      jwks_sources: resource.field(self._.blocks, 'jwks_sources'),
      jwt_federation_providers: resource.field(self._.blocks, 'jwt_federation_providers'),
      jwt_federation_sources: resource.field(self._.blocks, 'jwt_federation_sources'),
      name: resource.field(self._.blocks, 'name'),
      property_mappings: resource.field(self._.blocks, 'property_mappings'),
      refresh_token_validity: resource.field(self._.blocks, 'refresh_token_validity'),
      signing_key: resource.field(self._.blocks, 'signing_key'),
      sub_mode: resource.field(self._.blocks, 'sub_mode'),
    },
    provider_proxy(name, block): {
      local resource = blockType.resource('authentik_provider_proxy', name),
      _: resource._(block, {
        access_token_validity: build.template(std.get(block, 'access_token_validity', null)),
        authentication_flow: build.template(std.get(block, 'authentication_flow', null)),
        authorization_flow: build.template(block.authorization_flow),
        basic_auth_enabled: build.template(std.get(block, 'basic_auth_enabled', null)),
        basic_auth_password_attribute: build.template(std.get(block, 'basic_auth_password_attribute', null)),
        basic_auth_username_attribute: build.template(std.get(block, 'basic_auth_username_attribute', null)),
        client_id: build.template(std.get(block, 'client_id', null)),
        cookie_domain: build.template(std.get(block, 'cookie_domain', null)),
        external_host: build.template(block.external_host),
        id: build.template(std.get(block, 'id', null)),
        intercept_header_auth: build.template(std.get(block, 'intercept_header_auth', null)),
        internal_host: build.template(std.get(block, 'internal_host', null)),
        internal_host_ssl_validation: build.template(std.get(block, 'internal_host_ssl_validation', null)),
        invalidation_flow: build.template(block.invalidation_flow),
        jwks_sources: build.template(std.get(block, 'jwks_sources', null)),
        jwt_federation_providers: build.template(std.get(block, 'jwt_federation_providers', null)),
        jwt_federation_sources: build.template(std.get(block, 'jwt_federation_sources', null)),
        mode: build.template(std.get(block, 'mode', null)),
        name: build.template(block.name),
        property_mappings: build.template(std.get(block, 'property_mappings', null)),
        refresh_token_validity: build.template(std.get(block, 'refresh_token_validity', null)),
        skip_path_regex: build.template(std.get(block, 'skip_path_regex', null)),
      }),
      access_token_validity: resource.field(self._.blocks, 'access_token_validity'),
      authentication_flow: resource.field(self._.blocks, 'authentication_flow'),
      authorization_flow: resource.field(self._.blocks, 'authorization_flow'),
      basic_auth_enabled: resource.field(self._.blocks, 'basic_auth_enabled'),
      basic_auth_password_attribute: resource.field(self._.blocks, 'basic_auth_password_attribute'),
      basic_auth_username_attribute: resource.field(self._.blocks, 'basic_auth_username_attribute'),
      client_id: resource.field(self._.blocks, 'client_id'),
      cookie_domain: resource.field(self._.blocks, 'cookie_domain'),
      external_host: resource.field(self._.blocks, 'external_host'),
      id: resource.field(self._.blocks, 'id'),
      intercept_header_auth: resource.field(self._.blocks, 'intercept_header_auth'),
      internal_host: resource.field(self._.blocks, 'internal_host'),
      internal_host_ssl_validation: resource.field(self._.blocks, 'internal_host_ssl_validation'),
      invalidation_flow: resource.field(self._.blocks, 'invalidation_flow'),
      jwks_sources: resource.field(self._.blocks, 'jwks_sources'),
      jwt_federation_providers: resource.field(self._.blocks, 'jwt_federation_providers'),
      jwt_federation_sources: resource.field(self._.blocks, 'jwt_federation_sources'),
      mode: resource.field(self._.blocks, 'mode'),
      name: resource.field(self._.blocks, 'name'),
      property_mappings: resource.field(self._.blocks, 'property_mappings'),
      refresh_token_validity: resource.field(self._.blocks, 'refresh_token_validity'),
      skip_path_regex: resource.field(self._.blocks, 'skip_path_regex'),
    },
    provider_rac(name, block): {
      local resource = blockType.resource('authentik_provider_rac', name),
      _: resource._(block, {
        authentication_flow: build.template(std.get(block, 'authentication_flow', null)),
        authorization_flow: build.template(block.authorization_flow),
        connection_expiry: build.template(std.get(block, 'connection_expiry', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        property_mappings: build.template(std.get(block, 'property_mappings', null)),
        settings: build.template(std.get(block, 'settings', null)),
      }),
      authentication_flow: resource.field(self._.blocks, 'authentication_flow'),
      authorization_flow: resource.field(self._.blocks, 'authorization_flow'),
      connection_expiry: resource.field(self._.blocks, 'connection_expiry'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      property_mappings: resource.field(self._.blocks, 'property_mappings'),
      settings: resource.field(self._.blocks, 'settings'),
    },
    provider_radius(name, block): {
      local resource = blockType.resource('authentik_provider_radius', name),
      _: resource._(block, {
        authorization_flow: build.template(block.authorization_flow),
        client_networks: build.template(std.get(block, 'client_networks', null)),
        id: build.template(std.get(block, 'id', null)),
        invalidation_flow: build.template(block.invalidation_flow),
        mfa_support: build.template(std.get(block, 'mfa_support', null)),
        name: build.template(block.name),
        property_mappings: build.template(std.get(block, 'property_mappings', null)),
        shared_secret: build.template(block.shared_secret),
      }),
      authorization_flow: resource.field(self._.blocks, 'authorization_flow'),
      client_networks: resource.field(self._.blocks, 'client_networks'),
      id: resource.field(self._.blocks, 'id'),
      invalidation_flow: resource.field(self._.blocks, 'invalidation_flow'),
      mfa_support: resource.field(self._.blocks, 'mfa_support'),
      name: resource.field(self._.blocks, 'name'),
      property_mappings: resource.field(self._.blocks, 'property_mappings'),
      shared_secret: resource.field(self._.blocks, 'shared_secret'),
    },
    provider_saml(name, block): {
      local resource = blockType.resource('authentik_provider_saml', name),
      _: resource._(block, {
        acs_url: build.template(block.acs_url),
        assertion_valid_not_before: build.template(std.get(block, 'assertion_valid_not_before', null)),
        assertion_valid_not_on_or_after: build.template(std.get(block, 'assertion_valid_not_on_or_after', null)),
        audience: build.template(std.get(block, 'audience', null)),
        authentication_flow: build.template(std.get(block, 'authentication_flow', null)),
        authn_context_class_ref_mapping: build.template(std.get(block, 'authn_context_class_ref_mapping', null)),
        authorization_flow: build.template(block.authorization_flow),
        default_relay_state: build.template(std.get(block, 'default_relay_state', null)),
        digest_algorithm: build.template(std.get(block, 'digest_algorithm', null)),
        encryption_kp: build.template(std.get(block, 'encryption_kp', null)),
        id: build.template(std.get(block, 'id', null)),
        invalidation_flow: build.template(block.invalidation_flow),
        issuer: build.template(std.get(block, 'issuer', null)),
        name: build.template(block.name),
        name_id_mapping: build.template(std.get(block, 'name_id_mapping', null)),
        property_mappings: build.template(std.get(block, 'property_mappings', null)),
        session_valid_not_on_or_after: build.template(std.get(block, 'session_valid_not_on_or_after', null)),
        sign_assertion: build.template(std.get(block, 'sign_assertion', null)),
        sign_response: build.template(std.get(block, 'sign_response', null)),
        signature_algorithm: build.template(std.get(block, 'signature_algorithm', null)),
        signing_kp: build.template(std.get(block, 'signing_kp', null)),
        sp_binding: build.template(std.get(block, 'sp_binding', null)),
        url_slo_post: build.template(std.get(block, 'url_slo_post', null)),
        url_slo_redirect: build.template(std.get(block, 'url_slo_redirect', null)),
        url_sso_init: build.template(std.get(block, 'url_sso_init', null)),
        url_sso_post: build.template(std.get(block, 'url_sso_post', null)),
        url_sso_redirect: build.template(std.get(block, 'url_sso_redirect', null)),
        verification_kp: build.template(std.get(block, 'verification_kp', null)),
      }),
      acs_url: resource.field(self._.blocks, 'acs_url'),
      assertion_valid_not_before: resource.field(self._.blocks, 'assertion_valid_not_before'),
      assertion_valid_not_on_or_after: resource.field(self._.blocks, 'assertion_valid_not_on_or_after'),
      audience: resource.field(self._.blocks, 'audience'),
      authentication_flow: resource.field(self._.blocks, 'authentication_flow'),
      authn_context_class_ref_mapping: resource.field(self._.blocks, 'authn_context_class_ref_mapping'),
      authorization_flow: resource.field(self._.blocks, 'authorization_flow'),
      default_relay_state: resource.field(self._.blocks, 'default_relay_state'),
      digest_algorithm: resource.field(self._.blocks, 'digest_algorithm'),
      encryption_kp: resource.field(self._.blocks, 'encryption_kp'),
      id: resource.field(self._.blocks, 'id'),
      invalidation_flow: resource.field(self._.blocks, 'invalidation_flow'),
      issuer: resource.field(self._.blocks, 'issuer'),
      name: resource.field(self._.blocks, 'name'),
      name_id_mapping: resource.field(self._.blocks, 'name_id_mapping'),
      property_mappings: resource.field(self._.blocks, 'property_mappings'),
      session_valid_not_on_or_after: resource.field(self._.blocks, 'session_valid_not_on_or_after'),
      sign_assertion: resource.field(self._.blocks, 'sign_assertion'),
      sign_response: resource.field(self._.blocks, 'sign_response'),
      signature_algorithm: resource.field(self._.blocks, 'signature_algorithm'),
      signing_kp: resource.field(self._.blocks, 'signing_kp'),
      sp_binding: resource.field(self._.blocks, 'sp_binding'),
      url_slo_post: resource.field(self._.blocks, 'url_slo_post'),
      url_slo_redirect: resource.field(self._.blocks, 'url_slo_redirect'),
      url_sso_init: resource.field(self._.blocks, 'url_sso_init'),
      url_sso_post: resource.field(self._.blocks, 'url_sso_post'),
      url_sso_redirect: resource.field(self._.blocks, 'url_sso_redirect'),
      verification_kp: resource.field(self._.blocks, 'verification_kp'),
    },
    provider_scim(name, block): {
      local resource = blockType.resource('authentik_provider_scim', name),
      _: resource._(block, {
        compatibility_mode: build.template(std.get(block, 'compatibility_mode', null)),
        dry_run: build.template(std.get(block, 'dry_run', null)),
        exclude_users_service_account: build.template(std.get(block, 'exclude_users_service_account', null)),
        filter_group: build.template(std.get(block, 'filter_group', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        property_mappings: build.template(std.get(block, 'property_mappings', null)),
        property_mappings_group: build.template(std.get(block, 'property_mappings_group', null)),
        token: build.template(block.token),
        url: build.template(block.url),
      }),
      compatibility_mode: resource.field(self._.blocks, 'compatibility_mode'),
      dry_run: resource.field(self._.blocks, 'dry_run'),
      exclude_users_service_account: resource.field(self._.blocks, 'exclude_users_service_account'),
      filter_group: resource.field(self._.blocks, 'filter_group'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      property_mappings: resource.field(self._.blocks, 'property_mappings'),
      property_mappings_group: resource.field(self._.blocks, 'property_mappings_group'),
      token: resource.field(self._.blocks, 'token'),
      url: resource.field(self._.blocks, 'url'),
    },
    provider_ssf(name, block): {
      local resource = blockType.resource('authentik_provider_ssf', name),
      _: resource._(block, {
        event_retention: build.template(std.get(block, 'event_retention', null)),
        id: build.template(std.get(block, 'id', null)),
        jwt_federation_providers: build.template(std.get(block, 'jwt_federation_providers', null)),
        name: build.template(block.name),
        signing_key: build.template(std.get(block, 'signing_key', null)),
      }),
      event_retention: resource.field(self._.blocks, 'event_retention'),
      id: resource.field(self._.blocks, 'id'),
      jwt_federation_providers: resource.field(self._.blocks, 'jwt_federation_providers'),
      name: resource.field(self._.blocks, 'name'),
      signing_key: resource.field(self._.blocks, 'signing_key'),
    },
    rac_endpoint(name, block): {
      local resource = blockType.resource('authentik_rac_endpoint', name),
      _: resource._(block, {
        host: build.template(block.host),
        id: build.template(std.get(block, 'id', null)),
        maximum_connections: build.template(std.get(block, 'maximum_connections', null)),
        name: build.template(block.name),
        property_mappings: build.template(std.get(block, 'property_mappings', null)),
        protocol: build.template(block.protocol),
        protocol_provider: build.template(block.protocol_provider),
        settings: build.template(std.get(block, 'settings', null)),
      }),
      host: resource.field(self._.blocks, 'host'),
      id: resource.field(self._.blocks, 'id'),
      maximum_connections: resource.field(self._.blocks, 'maximum_connections'),
      name: resource.field(self._.blocks, 'name'),
      property_mappings: resource.field(self._.blocks, 'property_mappings'),
      protocol: resource.field(self._.blocks, 'protocol'),
      protocol_provider: resource.field(self._.blocks, 'protocol_provider'),
      settings: resource.field(self._.blocks, 'settings'),
    },
    rbac_initial_permissions(name, block): {
      local resource = blockType.resource('authentik_rbac_initial_permissions', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        mode: build.template(block.mode),
        name: build.template(block.name),
        permissions: build.template(block.permissions),
        role: build.template(block.role),
      }),
      id: resource.field(self._.blocks, 'id'),
      mode: resource.field(self._.blocks, 'mode'),
      name: resource.field(self._.blocks, 'name'),
      permissions: resource.field(self._.blocks, 'permissions'),
      role: resource.field(self._.blocks, 'role'),
    },
    rbac_permission_role(name, block): {
      local resource = blockType.resource('authentik_rbac_permission_role', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        model: build.template(std.get(block, 'model', null)),
        object_id: build.template(std.get(block, 'object_id', null)),
        permission: build.template(block.permission),
        role: build.template(block.role),
      }),
      id: resource.field(self._.blocks, 'id'),
      model: resource.field(self._.blocks, 'model'),
      object_id: resource.field(self._.blocks, 'object_id'),
      permission: resource.field(self._.blocks, 'permission'),
      role: resource.field(self._.blocks, 'role'),
    },
    rbac_permission_user(name, block): {
      local resource = blockType.resource('authentik_rbac_permission_user', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        model: build.template(std.get(block, 'model', null)),
        object_id: build.template(std.get(block, 'object_id', null)),
        permission: build.template(block.permission),
        user: build.template(block.user),
      }),
      id: resource.field(self._.blocks, 'id'),
      model: resource.field(self._.blocks, 'model'),
      object_id: resource.field(self._.blocks, 'object_id'),
      permission: resource.field(self._.blocks, 'permission'),
      user: resource.field(self._.blocks, 'user'),
    },
    rbac_role(name, block): {
      local resource = blockType.resource('authentik_rbac_role', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
      }),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
    },
    scope_mapping(name, block): {
      local resource = blockType.resource('authentik_scope_mapping', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        expression: build.template(block.expression),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        scope_name: build.template(block.scope_name),
      }),
      description: resource.field(self._.blocks, 'description'),
      expression: resource.field(self._.blocks, 'expression'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      scope_name: resource.field(self._.blocks, 'scope_name'),
    },
    service_connection_docker(name, block): {
      local resource = blockType.resource('authentik_service_connection_docker', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        'local': build.template(std.get(block, 'local', null)),
        name: build.template(block.name),
        tls_authentication: build.template(std.get(block, 'tls_authentication', null)),
        tls_verification: build.template(std.get(block, 'tls_verification', null)),
        url: build.template(std.get(block, 'url', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      'local': resource.field(self._.blocks, 'local'),
      name: resource.field(self._.blocks, 'name'),
      tls_authentication: resource.field(self._.blocks, 'tls_authentication'),
      tls_verification: resource.field(self._.blocks, 'tls_verification'),
      url: resource.field(self._.blocks, 'url'),
    },
    service_connection_kubernetes(name, block): {
      local resource = blockType.resource('authentik_service_connection_kubernetes', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        kubeconfig: build.template(std.get(block, 'kubeconfig', null)),
        'local': build.template(std.get(block, 'local', null)),
        name: build.template(block.name),
        verify_ssl: build.template(std.get(block, 'verify_ssl', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      kubeconfig: resource.field(self._.blocks, 'kubeconfig'),
      'local': resource.field(self._.blocks, 'local'),
      name: resource.field(self._.blocks, 'name'),
      verify_ssl: resource.field(self._.blocks, 'verify_ssl'),
    },
    source_kerberos(name, block): {
      local resource = blockType.resource('authentik_source_kerberos', name),
      _: resource._(block, {
        authentication_flow: build.template(std.get(block, 'authentication_flow', null)),
        enabled: build.template(std.get(block, 'enabled', null)),
        enrollment_flow: build.template(std.get(block, 'enrollment_flow', null)),
        group_matching_mode: build.template(std.get(block, 'group_matching_mode', null)),
        id: build.template(std.get(block, 'id', null)),
        krb5_conf: build.template(std.get(block, 'krb5_conf', null)),
        name: build.template(block.name),
        password_login_update_internal_password: build.template(std.get(block, 'password_login_update_internal_password', null)),
        policy_engine_mode: build.template(std.get(block, 'policy_engine_mode', null)),
        realm: build.template(block.realm),
        slug: build.template(block.slug),
        spnego_ccache: build.template(std.get(block, 'spnego_ccache', null)),
        spnego_keytab: build.template(std.get(block, 'spnego_keytab', null)),
        spnego_server_name: build.template(std.get(block, 'spnego_server_name', null)),
        sync_ccache: build.template(std.get(block, 'sync_ccache', null)),
        sync_keytab: build.template(std.get(block, 'sync_keytab', null)),
        sync_password: build.template(std.get(block, 'sync_password', null)),
        sync_principal: build.template(std.get(block, 'sync_principal', null)),
        sync_users: build.template(std.get(block, 'sync_users', null)),
        sync_users_password: build.template(std.get(block, 'sync_users_password', null)),
        user_matching_mode: build.template(std.get(block, 'user_matching_mode', null)),
        user_path_template: build.template(std.get(block, 'user_path_template', null)),
        uuid: build.template(std.get(block, 'uuid', null)),
      }),
      authentication_flow: resource.field(self._.blocks, 'authentication_flow'),
      enabled: resource.field(self._.blocks, 'enabled'),
      enrollment_flow: resource.field(self._.blocks, 'enrollment_flow'),
      group_matching_mode: resource.field(self._.blocks, 'group_matching_mode'),
      id: resource.field(self._.blocks, 'id'),
      krb5_conf: resource.field(self._.blocks, 'krb5_conf'),
      name: resource.field(self._.blocks, 'name'),
      password_login_update_internal_password: resource.field(self._.blocks, 'password_login_update_internal_password'),
      policy_engine_mode: resource.field(self._.blocks, 'policy_engine_mode'),
      realm: resource.field(self._.blocks, 'realm'),
      slug: resource.field(self._.blocks, 'slug'),
      spnego_ccache: resource.field(self._.blocks, 'spnego_ccache'),
      spnego_keytab: resource.field(self._.blocks, 'spnego_keytab'),
      spnego_server_name: resource.field(self._.blocks, 'spnego_server_name'),
      sync_ccache: resource.field(self._.blocks, 'sync_ccache'),
      sync_keytab: resource.field(self._.blocks, 'sync_keytab'),
      sync_password: resource.field(self._.blocks, 'sync_password'),
      sync_principal: resource.field(self._.blocks, 'sync_principal'),
      sync_users: resource.field(self._.blocks, 'sync_users'),
      sync_users_password: resource.field(self._.blocks, 'sync_users_password'),
      user_matching_mode: resource.field(self._.blocks, 'user_matching_mode'),
      user_path_template: resource.field(self._.blocks, 'user_path_template'),
      uuid: resource.field(self._.blocks, 'uuid'),
    },
    source_ldap(name, block): {
      local resource = blockType.resource('authentik_source_ldap', name),
      _: resource._(block, {
        additional_group_dn: build.template(std.get(block, 'additional_group_dn', null)),
        additional_user_dn: build.template(std.get(block, 'additional_user_dn', null)),
        base_dn: build.template(block.base_dn),
        bind_cn: build.template(block.bind_cn),
        bind_password: build.template(block.bind_password),
        delete_not_found_objects: build.template(std.get(block, 'delete_not_found_objects', null)),
        enabled: build.template(std.get(block, 'enabled', null)),
        group_membership_field: build.template(std.get(block, 'group_membership_field', null)),
        group_object_filter: build.template(std.get(block, 'group_object_filter', null)),
        id: build.template(std.get(block, 'id', null)),
        lookup_groups_from_user: build.template(std.get(block, 'lookup_groups_from_user', null)),
        name: build.template(block.name),
        object_uniqueness_field: build.template(std.get(block, 'object_uniqueness_field', null)),
        password_login_update_internal_password: build.template(std.get(block, 'password_login_update_internal_password', null)),
        property_mappings: build.template(std.get(block, 'property_mappings', null)),
        property_mappings_group: build.template(std.get(block, 'property_mappings_group', null)),
        server_uri: build.template(block.server_uri),
        slug: build.template(block.slug),
        sni: build.template(std.get(block, 'sni', null)),
        start_tls: build.template(std.get(block, 'start_tls', null)),
        sync_groups: build.template(std.get(block, 'sync_groups', null)),
        sync_parent_group: build.template(std.get(block, 'sync_parent_group', null)),
        sync_users: build.template(std.get(block, 'sync_users', null)),
        sync_users_password: build.template(std.get(block, 'sync_users_password', null)),
        user_membership_attribute: build.template(std.get(block, 'user_membership_attribute', null)),
        user_object_filter: build.template(std.get(block, 'user_object_filter', null)),
        user_path_template: build.template(std.get(block, 'user_path_template', null)),
        uuid: build.template(std.get(block, 'uuid', null)),
      }),
      additional_group_dn: resource.field(self._.blocks, 'additional_group_dn'),
      additional_user_dn: resource.field(self._.blocks, 'additional_user_dn'),
      base_dn: resource.field(self._.blocks, 'base_dn'),
      bind_cn: resource.field(self._.blocks, 'bind_cn'),
      bind_password: resource.field(self._.blocks, 'bind_password'),
      delete_not_found_objects: resource.field(self._.blocks, 'delete_not_found_objects'),
      enabled: resource.field(self._.blocks, 'enabled'),
      group_membership_field: resource.field(self._.blocks, 'group_membership_field'),
      group_object_filter: resource.field(self._.blocks, 'group_object_filter'),
      id: resource.field(self._.blocks, 'id'),
      lookup_groups_from_user: resource.field(self._.blocks, 'lookup_groups_from_user'),
      name: resource.field(self._.blocks, 'name'),
      object_uniqueness_field: resource.field(self._.blocks, 'object_uniqueness_field'),
      password_login_update_internal_password: resource.field(self._.blocks, 'password_login_update_internal_password'),
      property_mappings: resource.field(self._.blocks, 'property_mappings'),
      property_mappings_group: resource.field(self._.blocks, 'property_mappings_group'),
      server_uri: resource.field(self._.blocks, 'server_uri'),
      slug: resource.field(self._.blocks, 'slug'),
      sni: resource.field(self._.blocks, 'sni'),
      start_tls: resource.field(self._.blocks, 'start_tls'),
      sync_groups: resource.field(self._.blocks, 'sync_groups'),
      sync_parent_group: resource.field(self._.blocks, 'sync_parent_group'),
      sync_users: resource.field(self._.blocks, 'sync_users'),
      sync_users_password: resource.field(self._.blocks, 'sync_users_password'),
      user_membership_attribute: resource.field(self._.blocks, 'user_membership_attribute'),
      user_object_filter: resource.field(self._.blocks, 'user_object_filter'),
      user_path_template: resource.field(self._.blocks, 'user_path_template'),
      uuid: resource.field(self._.blocks, 'uuid'),
    },
    source_oauth(name, block): {
      local resource = blockType.resource('authentik_source_oauth', name),
      _: resource._(block, {
        access_token_url: build.template(std.get(block, 'access_token_url', null)),
        additional_scopes: build.template(std.get(block, 'additional_scopes', null)),
        authentication_flow: build.template(std.get(block, 'authentication_flow', null)),
        authorization_code_auth_method: build.template(std.get(block, 'authorization_code_auth_method', null)),
        authorization_url: build.template(std.get(block, 'authorization_url', null)),
        callback_uri: build.template(std.get(block, 'callback_uri', null)),
        consumer_key: build.template(block.consumer_key),
        consumer_secret: build.template(block.consumer_secret),
        enabled: build.template(std.get(block, 'enabled', null)),
        enrollment_flow: build.template(std.get(block, 'enrollment_flow', null)),
        group_matching_mode: build.template(std.get(block, 'group_matching_mode', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        oidc_jwks: build.template(std.get(block, 'oidc_jwks', null)),
        oidc_jwks_url: build.template(std.get(block, 'oidc_jwks_url', null)),
        oidc_well_known_url: build.template(std.get(block, 'oidc_well_known_url', null)),
        policy_engine_mode: build.template(std.get(block, 'policy_engine_mode', null)),
        profile_url: build.template(std.get(block, 'profile_url', null)),
        property_mappings: build.template(std.get(block, 'property_mappings', null)),
        property_mappings_group: build.template(std.get(block, 'property_mappings_group', null)),
        provider_type: build.template(block.provider_type),
        request_token_url: build.template(std.get(block, 'request_token_url', null)),
        slug: build.template(block.slug),
        user_matching_mode: build.template(std.get(block, 'user_matching_mode', null)),
        user_path_template: build.template(std.get(block, 'user_path_template', null)),
        uuid: build.template(std.get(block, 'uuid', null)),
      }),
      access_token_url: resource.field(self._.blocks, 'access_token_url'),
      additional_scopes: resource.field(self._.blocks, 'additional_scopes'),
      authentication_flow: resource.field(self._.blocks, 'authentication_flow'),
      authorization_code_auth_method: resource.field(self._.blocks, 'authorization_code_auth_method'),
      authorization_url: resource.field(self._.blocks, 'authorization_url'),
      callback_uri: resource.field(self._.blocks, 'callback_uri'),
      consumer_key: resource.field(self._.blocks, 'consumer_key'),
      consumer_secret: resource.field(self._.blocks, 'consumer_secret'),
      enabled: resource.field(self._.blocks, 'enabled'),
      enrollment_flow: resource.field(self._.blocks, 'enrollment_flow'),
      group_matching_mode: resource.field(self._.blocks, 'group_matching_mode'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      oidc_jwks: resource.field(self._.blocks, 'oidc_jwks'),
      oidc_jwks_url: resource.field(self._.blocks, 'oidc_jwks_url'),
      oidc_well_known_url: resource.field(self._.blocks, 'oidc_well_known_url'),
      policy_engine_mode: resource.field(self._.blocks, 'policy_engine_mode'),
      profile_url: resource.field(self._.blocks, 'profile_url'),
      property_mappings: resource.field(self._.blocks, 'property_mappings'),
      property_mappings_group: resource.field(self._.blocks, 'property_mappings_group'),
      provider_type: resource.field(self._.blocks, 'provider_type'),
      request_token_url: resource.field(self._.blocks, 'request_token_url'),
      slug: resource.field(self._.blocks, 'slug'),
      user_matching_mode: resource.field(self._.blocks, 'user_matching_mode'),
      user_path_template: resource.field(self._.blocks, 'user_path_template'),
      uuid: resource.field(self._.blocks, 'uuid'),
    },
    source_plex(name, block): {
      local resource = blockType.resource('authentik_source_plex', name),
      _: resource._(block, {
        allow_friends: build.template(std.get(block, 'allow_friends', null)),
        allowed_servers: build.template(std.get(block, 'allowed_servers', null)),
        authentication_flow: build.template(std.get(block, 'authentication_flow', null)),
        client_id: build.template(block.client_id),
        enabled: build.template(std.get(block, 'enabled', null)),
        enrollment_flow: build.template(std.get(block, 'enrollment_flow', null)),
        group_matching_mode: build.template(std.get(block, 'group_matching_mode', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        plex_token: build.template(block.plex_token),
        policy_engine_mode: build.template(std.get(block, 'policy_engine_mode', null)),
        slug: build.template(block.slug),
        user_matching_mode: build.template(std.get(block, 'user_matching_mode', null)),
        user_path_template: build.template(std.get(block, 'user_path_template', null)),
        uuid: build.template(std.get(block, 'uuid', null)),
      }),
      allow_friends: resource.field(self._.blocks, 'allow_friends'),
      allowed_servers: resource.field(self._.blocks, 'allowed_servers'),
      authentication_flow: resource.field(self._.blocks, 'authentication_flow'),
      client_id: resource.field(self._.blocks, 'client_id'),
      enabled: resource.field(self._.blocks, 'enabled'),
      enrollment_flow: resource.field(self._.blocks, 'enrollment_flow'),
      group_matching_mode: resource.field(self._.blocks, 'group_matching_mode'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      plex_token: resource.field(self._.blocks, 'plex_token'),
      policy_engine_mode: resource.field(self._.blocks, 'policy_engine_mode'),
      slug: resource.field(self._.blocks, 'slug'),
      user_matching_mode: resource.field(self._.blocks, 'user_matching_mode'),
      user_path_template: resource.field(self._.blocks, 'user_path_template'),
      uuid: resource.field(self._.blocks, 'uuid'),
    },
    source_saml(name, block): {
      local resource = blockType.resource('authentik_source_saml', name),
      _: resource._(block, {
        allow_idp_initiated: build.template(std.get(block, 'allow_idp_initiated', null)),
        authentication_flow: build.template(std.get(block, 'authentication_flow', null)),
        binding_type: build.template(std.get(block, 'binding_type', null)),
        digest_algorithm: build.template(std.get(block, 'digest_algorithm', null)),
        enabled: build.template(std.get(block, 'enabled', null)),
        encryption_kp: build.template(std.get(block, 'encryption_kp', null)),
        enrollment_flow: build.template(std.get(block, 'enrollment_flow', null)),
        group_matching_mode: build.template(std.get(block, 'group_matching_mode', null)),
        id: build.template(std.get(block, 'id', null)),
        issuer: build.template(std.get(block, 'issuer', null)),
        metadata: build.template(std.get(block, 'metadata', null)),
        name: build.template(block.name),
        name_id_policy: build.template(std.get(block, 'name_id_policy', null)),
        policy_engine_mode: build.template(std.get(block, 'policy_engine_mode', null)),
        pre_authentication_flow: build.template(block.pre_authentication_flow),
        signature_algorithm: build.template(std.get(block, 'signature_algorithm', null)),
        signing_kp: build.template(std.get(block, 'signing_kp', null)),
        slo_url: build.template(std.get(block, 'slo_url', null)),
        slug: build.template(block.slug),
        sso_url: build.template(block.sso_url),
        temporary_user_delete_after: build.template(std.get(block, 'temporary_user_delete_after', null)),
        user_matching_mode: build.template(std.get(block, 'user_matching_mode', null)),
        user_path_template: build.template(std.get(block, 'user_path_template', null)),
        uuid: build.template(std.get(block, 'uuid', null)),
        verification_kp: build.template(std.get(block, 'verification_kp', null)),
      }),
      allow_idp_initiated: resource.field(self._.blocks, 'allow_idp_initiated'),
      authentication_flow: resource.field(self._.blocks, 'authentication_flow'),
      binding_type: resource.field(self._.blocks, 'binding_type'),
      digest_algorithm: resource.field(self._.blocks, 'digest_algorithm'),
      enabled: resource.field(self._.blocks, 'enabled'),
      encryption_kp: resource.field(self._.blocks, 'encryption_kp'),
      enrollment_flow: resource.field(self._.blocks, 'enrollment_flow'),
      group_matching_mode: resource.field(self._.blocks, 'group_matching_mode'),
      id: resource.field(self._.blocks, 'id'),
      issuer: resource.field(self._.blocks, 'issuer'),
      metadata: resource.field(self._.blocks, 'metadata'),
      name: resource.field(self._.blocks, 'name'),
      name_id_policy: resource.field(self._.blocks, 'name_id_policy'),
      policy_engine_mode: resource.field(self._.blocks, 'policy_engine_mode'),
      pre_authentication_flow: resource.field(self._.blocks, 'pre_authentication_flow'),
      signature_algorithm: resource.field(self._.blocks, 'signature_algorithm'),
      signing_kp: resource.field(self._.blocks, 'signing_kp'),
      slo_url: resource.field(self._.blocks, 'slo_url'),
      slug: resource.field(self._.blocks, 'slug'),
      sso_url: resource.field(self._.blocks, 'sso_url'),
      temporary_user_delete_after: resource.field(self._.blocks, 'temporary_user_delete_after'),
      user_matching_mode: resource.field(self._.blocks, 'user_matching_mode'),
      user_path_template: resource.field(self._.blocks, 'user_path_template'),
      uuid: resource.field(self._.blocks, 'uuid'),
      verification_kp: resource.field(self._.blocks, 'verification_kp'),
    },
    stage_authenticator_duo(name, block): {
      local resource = blockType.resource('authentik_stage_authenticator_duo', name),
      _: resource._(block, {
        admin_integration_key: build.template(std.get(block, 'admin_integration_key', null)),
        admin_secret_key: build.template(std.get(block, 'admin_secret_key', null)),
        api_hostname: build.template(block.api_hostname),
        client_id: build.template(block.client_id),
        client_secret: build.template(block.client_secret),
        configure_flow: build.template(std.get(block, 'configure_flow', null)),
        friendly_name: build.template(std.get(block, 'friendly_name', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
      }),
      admin_integration_key: resource.field(self._.blocks, 'admin_integration_key'),
      admin_secret_key: resource.field(self._.blocks, 'admin_secret_key'),
      api_hostname: resource.field(self._.blocks, 'api_hostname'),
      client_id: resource.field(self._.blocks, 'client_id'),
      client_secret: resource.field(self._.blocks, 'client_secret'),
      configure_flow: resource.field(self._.blocks, 'configure_flow'),
      friendly_name: resource.field(self._.blocks, 'friendly_name'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
    },
    stage_authenticator_email(name, block): {
      local resource = blockType.resource('authentik_stage_authenticator_email', name),
      _: resource._(block, {
        configure_flow: build.template(std.get(block, 'configure_flow', null)),
        friendly_name: build.template(std.get(block, 'friendly_name', null)),
        from_address: build.template(std.get(block, 'from_address', null)),
        host: build.template(std.get(block, 'host', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        password: build.template(std.get(block, 'password', null)),
        port: build.template(std.get(block, 'port', null)),
        subject: build.template(std.get(block, 'subject', null)),
        template: build.template(std.get(block, 'template', null)),
        timeout: build.template(std.get(block, 'timeout', null)),
        token_expiry: build.template(std.get(block, 'token_expiry', null)),
        use_global_settings: build.template(std.get(block, 'use_global_settings', null)),
        use_ssl: build.template(std.get(block, 'use_ssl', null)),
        use_tls: build.template(std.get(block, 'use_tls', null)),
        username: build.template(std.get(block, 'username', null)),
      }),
      configure_flow: resource.field(self._.blocks, 'configure_flow'),
      friendly_name: resource.field(self._.blocks, 'friendly_name'),
      from_address: resource.field(self._.blocks, 'from_address'),
      host: resource.field(self._.blocks, 'host'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      password: resource.field(self._.blocks, 'password'),
      port: resource.field(self._.blocks, 'port'),
      subject: resource.field(self._.blocks, 'subject'),
      template: resource.field(self._.blocks, 'template'),
      timeout: resource.field(self._.blocks, 'timeout'),
      token_expiry: resource.field(self._.blocks, 'token_expiry'),
      use_global_settings: resource.field(self._.blocks, 'use_global_settings'),
      use_ssl: resource.field(self._.blocks, 'use_ssl'),
      use_tls: resource.field(self._.blocks, 'use_tls'),
      username: resource.field(self._.blocks, 'username'),
    },
    stage_authenticator_endpoint_gdtc(name, block): {
      local resource = blockType.resource('authentik_stage_authenticator_endpoint_gdtc', name),
      _: resource._(block, {
        configure_flow: build.template(std.get(block, 'configure_flow', null)),
        credentials: build.template(block.credentials),
        friendly_name: build.template(std.get(block, 'friendly_name', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
      }),
      configure_flow: resource.field(self._.blocks, 'configure_flow'),
      credentials: resource.field(self._.blocks, 'credentials'),
      friendly_name: resource.field(self._.blocks, 'friendly_name'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
    },
    stage_authenticator_sms(name, block): {
      local resource = blockType.resource('authentik_stage_authenticator_sms', name),
      _: resource._(block, {
        account_sid: build.template(block.account_sid),
        auth: build.template(block.auth),
        auth_password: build.template(std.get(block, 'auth_password', null)),
        auth_type: build.template(std.get(block, 'auth_type', null)),
        configure_flow: build.template(std.get(block, 'configure_flow', null)),
        friendly_name: build.template(std.get(block, 'friendly_name', null)),
        from_number: build.template(block.from_number),
        id: build.template(std.get(block, 'id', null)),
        mapping: build.template(std.get(block, 'mapping', null)),
        name: build.template(block.name),
        sms_provider: build.template(std.get(block, 'sms_provider', null)),
        verify_only: build.template(std.get(block, 'verify_only', null)),
      }),
      account_sid: resource.field(self._.blocks, 'account_sid'),
      auth: resource.field(self._.blocks, 'auth'),
      auth_password: resource.field(self._.blocks, 'auth_password'),
      auth_type: resource.field(self._.blocks, 'auth_type'),
      configure_flow: resource.field(self._.blocks, 'configure_flow'),
      friendly_name: resource.field(self._.blocks, 'friendly_name'),
      from_number: resource.field(self._.blocks, 'from_number'),
      id: resource.field(self._.blocks, 'id'),
      mapping: resource.field(self._.blocks, 'mapping'),
      name: resource.field(self._.blocks, 'name'),
      sms_provider: resource.field(self._.blocks, 'sms_provider'),
      verify_only: resource.field(self._.blocks, 'verify_only'),
    },
    stage_authenticator_static(name, block): {
      local resource = blockType.resource('authentik_stage_authenticator_static', name),
      _: resource._(block, {
        configure_flow: build.template(std.get(block, 'configure_flow', null)),
        friendly_name: build.template(std.get(block, 'friendly_name', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        token_count: build.template(std.get(block, 'token_count', null)),
        token_length: build.template(std.get(block, 'token_length', null)),
      }),
      configure_flow: resource.field(self._.blocks, 'configure_flow'),
      friendly_name: resource.field(self._.blocks, 'friendly_name'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      token_count: resource.field(self._.blocks, 'token_count'),
      token_length: resource.field(self._.blocks, 'token_length'),
    },
    stage_authenticator_totp(name, block): {
      local resource = blockType.resource('authentik_stage_authenticator_totp', name),
      _: resource._(block, {
        configure_flow: build.template(std.get(block, 'configure_flow', null)),
        digits: build.template(std.get(block, 'digits', null)),
        friendly_name: build.template(std.get(block, 'friendly_name', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
      }),
      configure_flow: resource.field(self._.blocks, 'configure_flow'),
      digits: resource.field(self._.blocks, 'digits'),
      friendly_name: resource.field(self._.blocks, 'friendly_name'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
    },
    stage_authenticator_validate(name, block): {
      local resource = blockType.resource('authentik_stage_authenticator_validate', name),
      _: resource._(block, {
        configuration_stages: build.template(std.get(block, 'configuration_stages', null)),
        device_classes: build.template(std.get(block, 'device_classes', null)),
        id: build.template(std.get(block, 'id', null)),
        last_auth_threshold: build.template(std.get(block, 'last_auth_threshold', null)),
        name: build.template(block.name),
        not_configured_action: build.template(block.not_configured_action),
        webauthn_allowed_device_types: build.template(std.get(block, 'webauthn_allowed_device_types', null)),
        webauthn_user_verification: build.template(std.get(block, 'webauthn_user_verification', null)),
      }),
      configuration_stages: resource.field(self._.blocks, 'configuration_stages'),
      device_classes: resource.field(self._.blocks, 'device_classes'),
      id: resource.field(self._.blocks, 'id'),
      last_auth_threshold: resource.field(self._.blocks, 'last_auth_threshold'),
      name: resource.field(self._.blocks, 'name'),
      not_configured_action: resource.field(self._.blocks, 'not_configured_action'),
      webauthn_allowed_device_types: resource.field(self._.blocks, 'webauthn_allowed_device_types'),
      webauthn_user_verification: resource.field(self._.blocks, 'webauthn_user_verification'),
    },
    stage_authenticator_webauthn(name, block): {
      local resource = blockType.resource('authentik_stage_authenticator_webauthn', name),
      _: resource._(block, {
        authenticator_attachment: build.template(std.get(block, 'authenticator_attachment', null)),
        configure_flow: build.template(std.get(block, 'configure_flow', null)),
        device_type_restrictions: build.template(std.get(block, 'device_type_restrictions', null)),
        friendly_name: build.template(std.get(block, 'friendly_name', null)),
        id: build.template(std.get(block, 'id', null)),
        max_attempts: build.template(std.get(block, 'max_attempts', null)),
        name: build.template(block.name),
        resident_key_requirement: build.template(std.get(block, 'resident_key_requirement', null)),
        user_verification: build.template(std.get(block, 'user_verification', null)),
      }),
      authenticator_attachment: resource.field(self._.blocks, 'authenticator_attachment'),
      configure_flow: resource.field(self._.blocks, 'configure_flow'),
      device_type_restrictions: resource.field(self._.blocks, 'device_type_restrictions'),
      friendly_name: resource.field(self._.blocks, 'friendly_name'),
      id: resource.field(self._.blocks, 'id'),
      max_attempts: resource.field(self._.blocks, 'max_attempts'),
      name: resource.field(self._.blocks, 'name'),
      resident_key_requirement: resource.field(self._.blocks, 'resident_key_requirement'),
      user_verification: resource.field(self._.blocks, 'user_verification'),
    },
    stage_captcha(name, block): {
      local resource = blockType.resource('authentik_stage_captcha', name),
      _: resource._(block, {
        api_url: build.template(std.get(block, 'api_url', null)),
        error_on_invalid_score: build.template(std.get(block, 'error_on_invalid_score', null)),
        id: build.template(std.get(block, 'id', null)),
        interactive: build.template(std.get(block, 'interactive', null)),
        js_url: build.template(std.get(block, 'js_url', null)),
        name: build.template(block.name),
        private_key: build.template(block.private_key),
        public_key: build.template(block.public_key),
        score_max_threshold: build.template(std.get(block, 'score_max_threshold', null)),
        score_min_threshold: build.template(std.get(block, 'score_min_threshold', null)),
      }),
      api_url: resource.field(self._.blocks, 'api_url'),
      error_on_invalid_score: resource.field(self._.blocks, 'error_on_invalid_score'),
      id: resource.field(self._.blocks, 'id'),
      interactive: resource.field(self._.blocks, 'interactive'),
      js_url: resource.field(self._.blocks, 'js_url'),
      name: resource.field(self._.blocks, 'name'),
      private_key: resource.field(self._.blocks, 'private_key'),
      public_key: resource.field(self._.blocks, 'public_key'),
      score_max_threshold: resource.field(self._.blocks, 'score_max_threshold'),
      score_min_threshold: resource.field(self._.blocks, 'score_min_threshold'),
    },
    stage_consent(name, block): {
      local resource = blockType.resource('authentik_stage_consent', name),
      _: resource._(block, {
        consent_expire_in: build.template(std.get(block, 'consent_expire_in', null)),
        id: build.template(std.get(block, 'id', null)),
        mode: build.template(std.get(block, 'mode', null)),
        name: build.template(block.name),
      }),
      consent_expire_in: resource.field(self._.blocks, 'consent_expire_in'),
      id: resource.field(self._.blocks, 'id'),
      mode: resource.field(self._.blocks, 'mode'),
      name: resource.field(self._.blocks, 'name'),
    },
    stage_deny(name, block): {
      local resource = blockType.resource('authentik_stage_deny', name),
      _: resource._(block, {
        deny_message: build.template(std.get(block, 'deny_message', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
      }),
      deny_message: resource.field(self._.blocks, 'deny_message'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
    },
    stage_dummy(name, block): {
      local resource = blockType.resource('authentik_stage_dummy', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
      }),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
    },
    stage_email(name, block): {
      local resource = blockType.resource('authentik_stage_email', name),
      _: resource._(block, {
        activate_user_on_success: build.template(std.get(block, 'activate_user_on_success', null)),
        from_address: build.template(std.get(block, 'from_address', null)),
        host: build.template(std.get(block, 'host', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        password: build.template(std.get(block, 'password', null)),
        port: build.template(std.get(block, 'port', null)),
        recovery_cache_timeout: build.template(std.get(block, 'recovery_cache_timeout', null)),
        recovery_max_attempts: build.template(std.get(block, 'recovery_max_attempts', null)),
        subject: build.template(std.get(block, 'subject', null)),
        template: build.template(std.get(block, 'template', null)),
        timeout: build.template(std.get(block, 'timeout', null)),
        token_expiry: build.template(std.get(block, 'token_expiry', null)),
        use_global_settings: build.template(std.get(block, 'use_global_settings', null)),
        use_ssl: build.template(std.get(block, 'use_ssl', null)),
        use_tls: build.template(std.get(block, 'use_tls', null)),
        username: build.template(std.get(block, 'username', null)),
      }),
      activate_user_on_success: resource.field(self._.blocks, 'activate_user_on_success'),
      from_address: resource.field(self._.blocks, 'from_address'),
      host: resource.field(self._.blocks, 'host'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      password: resource.field(self._.blocks, 'password'),
      port: resource.field(self._.blocks, 'port'),
      recovery_cache_timeout: resource.field(self._.blocks, 'recovery_cache_timeout'),
      recovery_max_attempts: resource.field(self._.blocks, 'recovery_max_attempts'),
      subject: resource.field(self._.blocks, 'subject'),
      template: resource.field(self._.blocks, 'template'),
      timeout: resource.field(self._.blocks, 'timeout'),
      token_expiry: resource.field(self._.blocks, 'token_expiry'),
      use_global_settings: resource.field(self._.blocks, 'use_global_settings'),
      use_ssl: resource.field(self._.blocks, 'use_ssl'),
      use_tls: resource.field(self._.blocks, 'use_tls'),
      username: resource.field(self._.blocks, 'username'),
    },
    stage_identification(name, block): {
      local resource = blockType.resource('authentik_stage_identification', name),
      _: resource._(block, {
        captcha_stage: build.template(std.get(block, 'captcha_stage', null)),
        case_insensitive_matching: build.template(std.get(block, 'case_insensitive_matching', null)),
        enable_remember_me: build.template(std.get(block, 'enable_remember_me', null)),
        enrollment_flow: build.template(std.get(block, 'enrollment_flow', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        password_stage: build.template(std.get(block, 'password_stage', null)),
        passwordless_flow: build.template(std.get(block, 'passwordless_flow', null)),
        pretend_user_exists: build.template(std.get(block, 'pretend_user_exists', null)),
        recovery_flow: build.template(std.get(block, 'recovery_flow', null)),
        show_matched_user: build.template(std.get(block, 'show_matched_user', null)),
        show_source_labels: build.template(std.get(block, 'show_source_labels', null)),
        sources: build.template(std.get(block, 'sources', null)),
        user_fields: build.template(std.get(block, 'user_fields', null)),
      }),
      captcha_stage: resource.field(self._.blocks, 'captcha_stage'),
      case_insensitive_matching: resource.field(self._.blocks, 'case_insensitive_matching'),
      enable_remember_me: resource.field(self._.blocks, 'enable_remember_me'),
      enrollment_flow: resource.field(self._.blocks, 'enrollment_flow'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      password_stage: resource.field(self._.blocks, 'password_stage'),
      passwordless_flow: resource.field(self._.blocks, 'passwordless_flow'),
      pretend_user_exists: resource.field(self._.blocks, 'pretend_user_exists'),
      recovery_flow: resource.field(self._.blocks, 'recovery_flow'),
      show_matched_user: resource.field(self._.blocks, 'show_matched_user'),
      show_source_labels: resource.field(self._.blocks, 'show_source_labels'),
      sources: resource.field(self._.blocks, 'sources'),
      user_fields: resource.field(self._.blocks, 'user_fields'),
    },
    stage_invitation(name, block): {
      local resource = blockType.resource('authentik_stage_invitation', name),
      _: resource._(block, {
        continue_flow_without_invitation: build.template(std.get(block, 'continue_flow_without_invitation', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
      }),
      continue_flow_without_invitation: resource.field(self._.blocks, 'continue_flow_without_invitation'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
    },
    stage_mutual_tls(name, block): {
      local resource = blockType.resource('authentik_stage_mutual_tls', name),
      _: resource._(block, {
        cert_attribute: build.template(std.get(block, 'cert_attribute', null)),
        certificate_authorities: build.template(std.get(block, 'certificate_authorities', null)),
        id: build.template(std.get(block, 'id', null)),
        mode: build.template(std.get(block, 'mode', null)),
        name: build.template(block.name),
        user_attribute: build.template(std.get(block, 'user_attribute', null)),
      }),
      cert_attribute: resource.field(self._.blocks, 'cert_attribute'),
      certificate_authorities: resource.field(self._.blocks, 'certificate_authorities'),
      id: resource.field(self._.blocks, 'id'),
      mode: resource.field(self._.blocks, 'mode'),
      name: resource.field(self._.blocks, 'name'),
      user_attribute: resource.field(self._.blocks, 'user_attribute'),
    },
    stage_password(name, block): {
      local resource = blockType.resource('authentik_stage_password', name),
      _: resource._(block, {
        allow_show_password: build.template(std.get(block, 'allow_show_password', null)),
        backends: build.template(block.backends),
        configure_flow: build.template(std.get(block, 'configure_flow', null)),
        failed_attempts_before_cancel: build.template(std.get(block, 'failed_attempts_before_cancel', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
      }),
      allow_show_password: resource.field(self._.blocks, 'allow_show_password'),
      backends: resource.field(self._.blocks, 'backends'),
      configure_flow: resource.field(self._.blocks, 'configure_flow'),
      failed_attempts_before_cancel: resource.field(self._.blocks, 'failed_attempts_before_cancel'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
    },
    stage_prompt(name, block): {
      local resource = blockType.resource('authentik_stage_prompt', name),
      _: resource._(block, {
        fields: build.template(block.fields),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        validation_policies: build.template(std.get(block, 'validation_policies', null)),
      }),
      fields: resource.field(self._.blocks, 'fields'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      validation_policies: resource.field(self._.blocks, 'validation_policies'),
    },
    stage_prompt_field(name, block): {
      local resource = blockType.resource('authentik_stage_prompt_field', name),
      _: resource._(block, {
        field_key: build.template(block.field_key),
        id: build.template(std.get(block, 'id', null)),
        initial_value: build.template(std.get(block, 'initial_value', null)),
        initial_value_expression: build.template(std.get(block, 'initial_value_expression', null)),
        label: build.template(block.label),
        name: build.template(block.name),
        order: build.template(std.get(block, 'order', null)),
        placeholder: build.template(std.get(block, 'placeholder', null)),
        placeholder_expression: build.template(std.get(block, 'placeholder_expression', null)),
        required: build.template(std.get(block, 'required', null)),
        sub_text: build.template(std.get(block, 'sub_text', null)),
        type: build.template(block.type),
      }),
      field_key: resource.field(self._.blocks, 'field_key'),
      id: resource.field(self._.blocks, 'id'),
      initial_value: resource.field(self._.blocks, 'initial_value'),
      initial_value_expression: resource.field(self._.blocks, 'initial_value_expression'),
      label: resource.field(self._.blocks, 'label'),
      name: resource.field(self._.blocks, 'name'),
      order: resource.field(self._.blocks, 'order'),
      placeholder: resource.field(self._.blocks, 'placeholder'),
      placeholder_expression: resource.field(self._.blocks, 'placeholder_expression'),
      required: resource.field(self._.blocks, 'required'),
      sub_text: resource.field(self._.blocks, 'sub_text'),
      type: resource.field(self._.blocks, 'type'),
    },
    stage_redirect(name, block): {
      local resource = blockType.resource('authentik_stage_redirect', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        keep_context: build.template(std.get(block, 'keep_context', null)),
        mode: build.template(std.get(block, 'mode', null)),
        name: build.template(block.name),
        target_flow: build.template(std.get(block, 'target_flow', null)),
        target_static: build.template(std.get(block, 'target_static', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      keep_context: resource.field(self._.blocks, 'keep_context'),
      mode: resource.field(self._.blocks, 'mode'),
      name: resource.field(self._.blocks, 'name'),
      target_flow: resource.field(self._.blocks, 'target_flow'),
      target_static: resource.field(self._.blocks, 'target_static'),
    },
    stage_source(name, block): {
      local resource = blockType.resource('authentik_stage_source', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        resume_timeout: build.template(std.get(block, 'resume_timeout', null)),
        source: build.template(std.get(block, 'source', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      resume_timeout: resource.field(self._.blocks, 'resume_timeout'),
      source: resource.field(self._.blocks, 'source'),
    },
    stage_user_delete(name, block): {
      local resource = blockType.resource('authentik_stage_user_delete', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
      }),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
    },
    stage_user_login(name, block): {
      local resource = blockType.resource('authentik_stage_user_login', name),
      _: resource._(block, {
        geoip_binding: build.template(std.get(block, 'geoip_binding', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        network_binding: build.template(std.get(block, 'network_binding', null)),
        remember_device: build.template(std.get(block, 'remember_device', null)),
        remember_me_offset: build.template(std.get(block, 'remember_me_offset', null)),
        session_duration: build.template(std.get(block, 'session_duration', null)),
        terminate_other_sessions: build.template(std.get(block, 'terminate_other_sessions', null)),
      }),
      geoip_binding: resource.field(self._.blocks, 'geoip_binding'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      network_binding: resource.field(self._.blocks, 'network_binding'),
      remember_device: resource.field(self._.blocks, 'remember_device'),
      remember_me_offset: resource.field(self._.blocks, 'remember_me_offset'),
      session_duration: resource.field(self._.blocks, 'session_duration'),
      terminate_other_sessions: resource.field(self._.blocks, 'terminate_other_sessions'),
    },
    stage_user_logout(name, block): {
      local resource = blockType.resource('authentik_stage_user_logout', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
      }),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
    },
    stage_user_write(name, block): {
      local resource = blockType.resource('authentik_stage_user_write', name),
      _: resource._(block, {
        create_users_as_inactive: build.template(std.get(block, 'create_users_as_inactive', null)),
        create_users_group: build.template(std.get(block, 'create_users_group', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        user_creation_mode: build.template(std.get(block, 'user_creation_mode', null)),
        user_path_template: build.template(std.get(block, 'user_path_template', null)),
        user_type: build.template(std.get(block, 'user_type', null)),
      }),
      create_users_as_inactive: resource.field(self._.blocks, 'create_users_as_inactive'),
      create_users_group: resource.field(self._.blocks, 'create_users_group'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      user_creation_mode: resource.field(self._.blocks, 'user_creation_mode'),
      user_path_template: resource.field(self._.blocks, 'user_path_template'),
      user_type: resource.field(self._.blocks, 'user_type'),
    },
    system_settings(name, block): {
      local resource = blockType.resource('authentik_system_settings', name),
      _: resource._(block, {
        avatars: build.template(std.get(block, 'avatars', null)),
        default_token_duration: build.template(std.get(block, 'default_token_duration', null)),
        default_token_length: build.template(std.get(block, 'default_token_length', null)),
        default_user_change_email: build.template(std.get(block, 'default_user_change_email', null)),
        default_user_change_name: build.template(std.get(block, 'default_user_change_name', null)),
        default_user_change_username: build.template(std.get(block, 'default_user_change_username', null)),
        event_retention: build.template(std.get(block, 'event_retention', null)),
        flags: build.template(std.get(block, 'flags', null)),
        footer_links: build.template(std.get(block, 'footer_links', null)),
        gdpr_compliance: build.template(std.get(block, 'gdpr_compliance', null)),
        id: build.template(std.get(block, 'id', null)),
        impersonation: build.template(std.get(block, 'impersonation', null)),
        reputation_lower_limit: build.template(std.get(block, 'reputation_lower_limit', null)),
        reputation_upper_limit: build.template(std.get(block, 'reputation_upper_limit', null)),
      }),
      avatars: resource.field(self._.blocks, 'avatars'),
      default_token_duration: resource.field(self._.blocks, 'default_token_duration'),
      default_token_length: resource.field(self._.blocks, 'default_token_length'),
      default_user_change_email: resource.field(self._.blocks, 'default_user_change_email'),
      default_user_change_name: resource.field(self._.blocks, 'default_user_change_name'),
      default_user_change_username: resource.field(self._.blocks, 'default_user_change_username'),
      event_retention: resource.field(self._.blocks, 'event_retention'),
      flags: resource.field(self._.blocks, 'flags'),
      footer_links: resource.field(self._.blocks, 'footer_links'),
      gdpr_compliance: resource.field(self._.blocks, 'gdpr_compliance'),
      id: resource.field(self._.blocks, 'id'),
      impersonation: resource.field(self._.blocks, 'impersonation'),
      reputation_lower_limit: resource.field(self._.blocks, 'reputation_lower_limit'),
      reputation_upper_limit: resource.field(self._.blocks, 'reputation_upper_limit'),
    },
    token(name, block): {
      local resource = blockType.resource('authentik_token', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        expires: build.template(std.get(block, 'expires', null)),
        expires_in: build.template(std.get(block, 'expires_in', null)),
        expiring: build.template(std.get(block, 'expiring', null)),
        id: build.template(std.get(block, 'id', null)),
        identifier: build.template(block.identifier),
        intent: build.template(std.get(block, 'intent', null)),
        key: build.template(std.get(block, 'key', null)),
        retrieve_key: build.template(std.get(block, 'retrieve_key', null)),
        user: build.template(block.user),
      }),
      description: resource.field(self._.blocks, 'description'),
      expires: resource.field(self._.blocks, 'expires'),
      expires_in: resource.field(self._.blocks, 'expires_in'),
      expiring: resource.field(self._.blocks, 'expiring'),
      id: resource.field(self._.blocks, 'id'),
      identifier: resource.field(self._.blocks, 'identifier'),
      intent: resource.field(self._.blocks, 'intent'),
      key: resource.field(self._.blocks, 'key'),
      retrieve_key: resource.field(self._.blocks, 'retrieve_key'),
      user: resource.field(self._.blocks, 'user'),
    },
    user(name, block): {
      local resource = blockType.resource('authentik_user', name),
      _: resource._(block, {
        attributes: build.template(std.get(block, 'attributes', null)),
        email: build.template(std.get(block, 'email', null)),
        groups: build.template(std.get(block, 'groups', null)),
        id: build.template(std.get(block, 'id', null)),
        is_active: build.template(std.get(block, 'is_active', null)),
        name: build.template(std.get(block, 'name', null)),
        password: build.template(std.get(block, 'password', null)),
        path: build.template(std.get(block, 'path', null)),
        type: build.template(std.get(block, 'type', null)),
        username: build.template(block.username),
      }),
      attributes: resource.field(self._.blocks, 'attributes'),
      email: resource.field(self._.blocks, 'email'),
      groups: resource.field(self._.blocks, 'groups'),
      id: resource.field(self._.blocks, 'id'),
      is_active: resource.field(self._.blocks, 'is_active'),
      name: resource.field(self._.blocks, 'name'),
      password: resource.field(self._.blocks, 'password'),
      path: resource.field(self._.blocks, 'path'),
      type: resource.field(self._.blocks, 'type'),
      username: resource.field(self._.blocks, 'username'),
    },
  },
  data: {
    local blockType = provider.blockType('data'),
    brand(name, block): {
      local resource = blockType.resource('authentik_brand', name),
      _: resource._(block, {
        branding_custom_css: build.template(std.get(block, 'branding_custom_css', null)),
        branding_default_flow_background: build.template(std.get(block, 'branding_default_flow_background', null)),
        branding_favicon: build.template(std.get(block, 'branding_favicon', null)),
        branding_logo: build.template(std.get(block, 'branding_logo', null)),
        branding_title: build.template(std.get(block, 'branding_title', null)),
        client_certificates: build.template(std.get(block, 'client_certificates', null)),
        default: build.template(std.get(block, 'default', null)),
        default_application: build.template(std.get(block, 'default_application', null)),
        domain: build.template(std.get(block, 'domain', null)),
        flow_authentication: build.template(std.get(block, 'flow_authentication', null)),
        flow_device_code: build.template(std.get(block, 'flow_device_code', null)),
        flow_invalidation: build.template(std.get(block, 'flow_invalidation', null)),
        flow_recovery: build.template(std.get(block, 'flow_recovery', null)),
        flow_unenrollment: build.template(std.get(block, 'flow_unenrollment', null)),
        flow_user_settings: build.template(std.get(block, 'flow_user_settings', null)),
        id: build.template(std.get(block, 'id', null)),
        web_certificate: build.template(std.get(block, 'web_certificate', null)),
      }),
      branding_custom_css: resource.field(self._.blocks, 'branding_custom_css'),
      branding_default_flow_background: resource.field(self._.blocks, 'branding_default_flow_background'),
      branding_favicon: resource.field(self._.blocks, 'branding_favicon'),
      branding_logo: resource.field(self._.blocks, 'branding_logo'),
      branding_title: resource.field(self._.blocks, 'branding_title'),
      client_certificates: resource.field(self._.blocks, 'client_certificates'),
      default: resource.field(self._.blocks, 'default'),
      default_application: resource.field(self._.blocks, 'default_application'),
      domain: resource.field(self._.blocks, 'domain'),
      flow_authentication: resource.field(self._.blocks, 'flow_authentication'),
      flow_device_code: resource.field(self._.blocks, 'flow_device_code'),
      flow_invalidation: resource.field(self._.blocks, 'flow_invalidation'),
      flow_recovery: resource.field(self._.blocks, 'flow_recovery'),
      flow_unenrollment: resource.field(self._.blocks, 'flow_unenrollment'),
      flow_user_settings: resource.field(self._.blocks, 'flow_user_settings'),
      id: resource.field(self._.blocks, 'id'),
      web_certificate: resource.field(self._.blocks, 'web_certificate'),
    },
    certificate_key_pair(name, block): {
      local resource = blockType.resource('authentik_certificate_key_pair', name),
      _: resource._(block, {
        certificate_data: build.template(std.get(block, 'certificate_data', null)),
        expiry: build.template(std.get(block, 'expiry', null)),
        fetch_certificate: build.template(std.get(block, 'fetch_certificate', null)),
        fetch_key: build.template(std.get(block, 'fetch_key', null)),
        fingerprint1: build.template(std.get(block, 'fingerprint1', null)),
        fingerprint256: build.template(std.get(block, 'fingerprint256', null)),
        id: build.template(std.get(block, 'id', null)),
        key_data: build.template(std.get(block, 'key_data', null)),
        name: build.template(block.name),
        subject: build.template(std.get(block, 'subject', null)),
      }),
      certificate_data: resource.field(self._.blocks, 'certificate_data'),
      expiry: resource.field(self._.blocks, 'expiry'),
      fetch_certificate: resource.field(self._.blocks, 'fetch_certificate'),
      fetch_key: resource.field(self._.blocks, 'fetch_key'),
      fingerprint1: resource.field(self._.blocks, 'fingerprint1'),
      fingerprint256: resource.field(self._.blocks, 'fingerprint256'),
      id: resource.field(self._.blocks, 'id'),
      key_data: resource.field(self._.blocks, 'key_data'),
      name: resource.field(self._.blocks, 'name'),
      subject: resource.field(self._.blocks, 'subject'),
    },
    flow(name, block): {
      local resource = blockType.resource('authentik_flow', name),
      _: resource._(block, {
        authentication: build.template(std.get(block, 'authentication', null)),
        designation: build.template(std.get(block, 'designation', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        slug: build.template(std.get(block, 'slug', null)),
        title: build.template(std.get(block, 'title', null)),
      }),
      authentication: resource.field(self._.blocks, 'authentication'),
      designation: resource.field(self._.blocks, 'designation'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      slug: resource.field(self._.blocks, 'slug'),
      title: resource.field(self._.blocks, 'title'),
    },
    group(name, block): {
      local resource = blockType.resource('authentik_group', name),
      _: resource._(block, {
        attributes: build.template(std.get(block, 'attributes', null)),
        id: build.template(std.get(block, 'id', null)),
        include_users: build.template(std.get(block, 'include_users', null)),
        is_superuser: build.template(std.get(block, 'is_superuser', null)),
        name: build.template(std.get(block, 'name', null)),
        num_pk: build.template(std.get(block, 'num_pk', null)),
        parent: build.template(std.get(block, 'parent', null)),
        parent_name: build.template(std.get(block, 'parent_name', null)),
        pk: build.template(std.get(block, 'pk', null)),
        users: build.template(std.get(block, 'users', null)),
        users_obj: build.template(std.get(block, 'users_obj', null)),
      }),
      attributes: resource.field(self._.blocks, 'attributes'),
      id: resource.field(self._.blocks, 'id'),
      include_users: resource.field(self._.blocks, 'include_users'),
      is_superuser: resource.field(self._.blocks, 'is_superuser'),
      name: resource.field(self._.blocks, 'name'),
      num_pk: resource.field(self._.blocks, 'num_pk'),
      parent: resource.field(self._.blocks, 'parent'),
      parent_name: resource.field(self._.blocks, 'parent_name'),
      pk: resource.field(self._.blocks, 'pk'),
      users: resource.field(self._.blocks, 'users'),
      users_obj: resource.field(self._.blocks, 'users_obj'),
    },
    groups(name, block): {
      local resource = blockType.resource('authentik_groups', name),
      _: resource._(block, {
        attributes: build.template(std.get(block, 'attributes', null)),
        groups: build.template(std.get(block, 'groups', null)),
        id: build.template(std.get(block, 'id', null)),
        include_users: build.template(std.get(block, 'include_users', null)),
        is_superuser: build.template(std.get(block, 'is_superuser', null)),
        members_by_pk: build.template(std.get(block, 'members_by_pk', null)),
        members_by_username: build.template(std.get(block, 'members_by_username', null)),
        name: build.template(std.get(block, 'name', null)),
        ordering: build.template(std.get(block, 'ordering', null)),
        search: build.template(std.get(block, 'search', null)),
      }),
      attributes: resource.field(self._.blocks, 'attributes'),
      groups: resource.field(self._.blocks, 'groups'),
      id: resource.field(self._.blocks, 'id'),
      include_users: resource.field(self._.blocks, 'include_users'),
      is_superuser: resource.field(self._.blocks, 'is_superuser'),
      members_by_pk: resource.field(self._.blocks, 'members_by_pk'),
      members_by_username: resource.field(self._.blocks, 'members_by_username'),
      name: resource.field(self._.blocks, 'name'),
      ordering: resource.field(self._.blocks, 'ordering'),
      search: resource.field(self._.blocks, 'search'),
    },
    property_mapping_provider_rac(name, block): {
      local resource = blockType.resource('authentik_property_mapping_provider_rac', name),
      _: resource._(block, {
        expression: build.template(std.get(block, 'expression', null)),
        id: build.template(std.get(block, 'id', null)),
        ids: build.template(std.get(block, 'ids', null)),
        managed: build.template(std.get(block, 'managed', null)),
        managed_list: build.template(std.get(block, 'managed_list', null)),
        name: build.template(std.get(block, 'name', null)),
        settings: build.template(std.get(block, 'settings', null)),
      }),
      expression: resource.field(self._.blocks, 'expression'),
      id: resource.field(self._.blocks, 'id'),
      ids: resource.field(self._.blocks, 'ids'),
      managed: resource.field(self._.blocks, 'managed'),
      managed_list: resource.field(self._.blocks, 'managed_list'),
      name: resource.field(self._.blocks, 'name'),
      settings: resource.field(self._.blocks, 'settings'),
    },
    property_mapping_provider_radius(name, block): {
      local resource = blockType.resource('authentik_property_mapping_provider_radius', name),
      _: resource._(block, {
        expression: build.template(std.get(block, 'expression', null)),
        id: build.template(std.get(block, 'id', null)),
        ids: build.template(std.get(block, 'ids', null)),
        managed: build.template(std.get(block, 'managed', null)),
        managed_list: build.template(std.get(block, 'managed_list', null)),
        name: build.template(std.get(block, 'name', null)),
      }),
      expression: resource.field(self._.blocks, 'expression'),
      id: resource.field(self._.blocks, 'id'),
      ids: resource.field(self._.blocks, 'ids'),
      managed: resource.field(self._.blocks, 'managed'),
      managed_list: resource.field(self._.blocks, 'managed_list'),
      name: resource.field(self._.blocks, 'name'),
    },
    property_mapping_provider_saml(name, block): {
      local resource = blockType.resource('authentik_property_mapping_provider_saml', name),
      _: resource._(block, {
        expression: build.template(std.get(block, 'expression', null)),
        friendly_name: build.template(std.get(block, 'friendly_name', null)),
        id: build.template(std.get(block, 'id', null)),
        ids: build.template(std.get(block, 'ids', null)),
        managed: build.template(std.get(block, 'managed', null)),
        managed_list: build.template(std.get(block, 'managed_list', null)),
        name: build.template(std.get(block, 'name', null)),
        saml_name: build.template(std.get(block, 'saml_name', null)),
      }),
      expression: resource.field(self._.blocks, 'expression'),
      friendly_name: resource.field(self._.blocks, 'friendly_name'),
      id: resource.field(self._.blocks, 'id'),
      ids: resource.field(self._.blocks, 'ids'),
      managed: resource.field(self._.blocks, 'managed'),
      managed_list: resource.field(self._.blocks, 'managed_list'),
      name: resource.field(self._.blocks, 'name'),
      saml_name: resource.field(self._.blocks, 'saml_name'),
    },
    property_mapping_provider_scim(name, block): {
      local resource = blockType.resource('authentik_property_mapping_provider_scim', name),
      _: resource._(block, {
        expression: build.template(std.get(block, 'expression', null)),
        id: build.template(std.get(block, 'id', null)),
        ids: build.template(std.get(block, 'ids', null)),
        managed: build.template(std.get(block, 'managed', null)),
        managed_list: build.template(std.get(block, 'managed_list', null)),
        name: build.template(std.get(block, 'name', null)),
      }),
      expression: resource.field(self._.blocks, 'expression'),
      id: resource.field(self._.blocks, 'id'),
      ids: resource.field(self._.blocks, 'ids'),
      managed: resource.field(self._.blocks, 'managed'),
      managed_list: resource.field(self._.blocks, 'managed_list'),
      name: resource.field(self._.blocks, 'name'),
    },
    property_mapping_provider_scope(name, block): {
      local resource = blockType.resource('authentik_property_mapping_provider_scope', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        expression: build.template(std.get(block, 'expression', null)),
        id: build.template(std.get(block, 'id', null)),
        ids: build.template(std.get(block, 'ids', null)),
        managed: build.template(std.get(block, 'managed', null)),
        managed_list: build.template(std.get(block, 'managed_list', null)),
        name: build.template(std.get(block, 'name', null)),
        scope_name: build.template(std.get(block, 'scope_name', null)),
      }),
      description: resource.field(self._.blocks, 'description'),
      expression: resource.field(self._.blocks, 'expression'),
      id: resource.field(self._.blocks, 'id'),
      ids: resource.field(self._.blocks, 'ids'),
      managed: resource.field(self._.blocks, 'managed'),
      managed_list: resource.field(self._.blocks, 'managed_list'),
      name: resource.field(self._.blocks, 'name'),
      scope_name: resource.field(self._.blocks, 'scope_name'),
    },
    property_mapping_source_ldap(name, block): {
      local resource = blockType.resource('authentik_property_mapping_source_ldap', name),
      _: resource._(block, {
        expression: build.template(std.get(block, 'expression', null)),
        id: build.template(std.get(block, 'id', null)),
        ids: build.template(std.get(block, 'ids', null)),
        managed: build.template(std.get(block, 'managed', null)),
        managed_list: build.template(std.get(block, 'managed_list', null)),
        name: build.template(std.get(block, 'name', null)),
      }),
      expression: resource.field(self._.blocks, 'expression'),
      id: resource.field(self._.blocks, 'id'),
      ids: resource.field(self._.blocks, 'ids'),
      managed: resource.field(self._.blocks, 'managed'),
      managed_list: resource.field(self._.blocks, 'managed_list'),
      name: resource.field(self._.blocks, 'name'),
    },
    provider_oauth2_config(name, block): {
      local resource = blockType.resource('authentik_provider_oauth2_config', name),
      _: resource._(block, {
        authorize_url: build.template(std.get(block, 'authorize_url', null)),
        id: build.template(std.get(block, 'id', null)),
        issuer_url: build.template(std.get(block, 'issuer_url', null)),
        jwks_url: build.template(std.get(block, 'jwks_url', null)),
        logout_url: build.template(std.get(block, 'logout_url', null)),
        name: build.template(std.get(block, 'name', null)),
        provider_id: build.template(std.get(block, 'provider_id', null)),
        provider_info_url: build.template(std.get(block, 'provider_info_url', null)),
        token_url: build.template(std.get(block, 'token_url', null)),
        user_info_url: build.template(std.get(block, 'user_info_url', null)),
      }),
      authorize_url: resource.field(self._.blocks, 'authorize_url'),
      id: resource.field(self._.blocks, 'id'),
      issuer_url: resource.field(self._.blocks, 'issuer_url'),
      jwks_url: resource.field(self._.blocks, 'jwks_url'),
      logout_url: resource.field(self._.blocks, 'logout_url'),
      name: resource.field(self._.blocks, 'name'),
      provider_id: resource.field(self._.blocks, 'provider_id'),
      provider_info_url: resource.field(self._.blocks, 'provider_info_url'),
      token_url: resource.field(self._.blocks, 'token_url'),
      user_info_url: resource.field(self._.blocks, 'user_info_url'),
    },
    provider_saml_metadata(name, block): {
      local resource = blockType.resource('authentik_provider_saml_metadata', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        metadata: build.template(std.get(block, 'metadata', null)),
        name: build.template(std.get(block, 'name', null)),
        provider_id: build.template(std.get(block, 'provider_id', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      metadata: resource.field(self._.blocks, 'metadata'),
      name: resource.field(self._.blocks, 'name'),
      provider_id: resource.field(self._.blocks, 'provider_id'),
    },
    rbac_permission(name, block): {
      local resource = blockType.resource('authentik_rbac_permission', name),
      _: resource._(block, {
        app: build.template(std.get(block, 'app', null)),
        codename: build.template(block.codename),
        id: build.template(std.get(block, 'id', null)),
        model: build.template(std.get(block, 'model', null)),
      }),
      app: resource.field(self._.blocks, 'app'),
      codename: resource.field(self._.blocks, 'codename'),
      id: resource.field(self._.blocks, 'id'),
      model: resource.field(self._.blocks, 'model'),
    },
    service_connection_kubernetes(name, block): {
      local resource = blockType.resource('authentik_service_connection_kubernetes', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        kubeconfig: build.template(std.get(block, 'kubeconfig', null)),
        'local': build.template(std.get(block, 'local', null)),
        name: build.template(block.name),
        verify_ssl: build.template(std.get(block, 'verify_ssl', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      kubeconfig: resource.field(self._.blocks, 'kubeconfig'),
      'local': resource.field(self._.blocks, 'local'),
      name: resource.field(self._.blocks, 'name'),
      verify_ssl: resource.field(self._.blocks, 'verify_ssl'),
    },
    source(name, block): {
      local resource = blockType.resource('authentik_source', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        managed: build.template(std.get(block, 'managed', null)),
        name: build.template(std.get(block, 'name', null)),
        slug: build.template(std.get(block, 'slug', null)),
        uuid: build.template(std.get(block, 'uuid', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      managed: resource.field(self._.blocks, 'managed'),
      name: resource.field(self._.blocks, 'name'),
      slug: resource.field(self._.blocks, 'slug'),
      uuid: resource.field(self._.blocks, 'uuid'),
    },
    stage(name, block): {
      local resource = blockType.resource('authentik_stage', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
    },
    user(name, block): {
      local resource = blockType.resource('authentik_user', name),
      _: resource._(block, {
        attributes: build.template(std.get(block, 'attributes', null)),
        avatar: build.template(std.get(block, 'avatar', null)),
        date_joined: build.template(std.get(block, 'date_joined', null)),
        email: build.template(std.get(block, 'email', null)),
        groups: build.template(std.get(block, 'groups', null)),
        id: build.template(std.get(block, 'id', null)),
        is_active: build.template(std.get(block, 'is_active', null)),
        is_superuser: build.template(std.get(block, 'is_superuser', null)),
        last_login: build.template(std.get(block, 'last_login', null)),
        name: build.template(std.get(block, 'name', null)),
        path: build.template(std.get(block, 'path', null)),
        pk: build.template(std.get(block, 'pk', null)),
        type: build.template(std.get(block, 'type', null)),
        uid: build.template(std.get(block, 'uid', null)),
        username: build.template(std.get(block, 'username', null)),
        uuid: build.template(std.get(block, 'uuid', null)),
      }),
      attributes: resource.field(self._.blocks, 'attributes'),
      avatar: resource.field(self._.blocks, 'avatar'),
      date_joined: resource.field(self._.blocks, 'date_joined'),
      email: resource.field(self._.blocks, 'email'),
      groups: resource.field(self._.blocks, 'groups'),
      id: resource.field(self._.blocks, 'id'),
      is_active: resource.field(self._.blocks, 'is_active'),
      is_superuser: resource.field(self._.blocks, 'is_superuser'),
      last_login: resource.field(self._.blocks, 'last_login'),
      name: resource.field(self._.blocks, 'name'),
      path: resource.field(self._.blocks, 'path'),
      pk: resource.field(self._.blocks, 'pk'),
      type: resource.field(self._.blocks, 'type'),
      uid: resource.field(self._.blocks, 'uid'),
      username: resource.field(self._.blocks, 'username'),
      uuid: resource.field(self._.blocks, 'uuid'),
    },
    users(name, block): {
      local resource = blockType.resource('authentik_users', name),
      _: resource._(block, {
        attributes: build.template(std.get(block, 'attributes', null)),
        email: build.template(std.get(block, 'email', null)),
        groups_by_name: build.template(std.get(block, 'groups_by_name', null)),
        groups_by_pk: build.template(std.get(block, 'groups_by_pk', null)),
        id: build.template(std.get(block, 'id', null)),
        is_active: build.template(std.get(block, 'is_active', null)),
        is_superuser: build.template(std.get(block, 'is_superuser', null)),
        name: build.template(std.get(block, 'name', null)),
        ordering: build.template(std.get(block, 'ordering', null)),
        path: build.template(std.get(block, 'path', null)),
        path_startswith: build.template(std.get(block, 'path_startswith', null)),
        search: build.template(std.get(block, 'search', null)),
        username: build.template(std.get(block, 'username', null)),
        users: build.template(std.get(block, 'users', null)),
        uuid: build.template(std.get(block, 'uuid', null)),
      }),
      attributes: resource.field(self._.blocks, 'attributes'),
      email: resource.field(self._.blocks, 'email'),
      groups_by_name: resource.field(self._.blocks, 'groups_by_name'),
      groups_by_pk: resource.field(self._.blocks, 'groups_by_pk'),
      id: resource.field(self._.blocks, 'id'),
      is_active: resource.field(self._.blocks, 'is_active'),
      is_superuser: resource.field(self._.blocks, 'is_superuser'),
      name: resource.field(self._.blocks, 'name'),
      ordering: resource.field(self._.blocks, 'ordering'),
      path: resource.field(self._.blocks, 'path'),
      path_startswith: resource.field(self._.blocks, 'path_startswith'),
      search: resource.field(self._.blocks, 'search'),
      username: resource.field(self._.blocks, 'username'),
      users: resource.field(self._.blocks, 'users'),
      uuid: resource.field(self._.blocks, 'uuid'),
    },
    webauthn_device_type(name, block): {
      local resource = blockType.resource('authentik_webauthn_device_type', name),
      _: resource._(block, {
        aaguid: build.template(std.get(block, 'aaguid', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
      }),
      aaguid: resource.field(self._.blocks, 'aaguid'),
      description: resource.field(self._.blocks, 'description'),
      id: resource.field(self._.blocks, 'id'),
    },
  },
};
local providerWithConfiguration = provider(null, null) + {
  withConfiguration(alias, block): provider(block, {
    alias: alias,
    headers: build.template(std.get(block, 'headers', null)),
    insecure: build.template(std.get(block, 'insecure', null)),
    token: build.template(block.token),
    url: build.template(block.url),
  }),
};
providerWithConfiguration
