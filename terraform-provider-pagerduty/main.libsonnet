local build = {
  expression(val):
    if std.type(val) == 'object' then
      if std.objectHas(val, '_')
      then
        if std.objectHas(val._, 'ref')
        then val._.ref
        else '"%s"' % [val._.str]
      else '{%s}' % [std.join(',', std.map(function(key) '%s:%s' % [self.expression(key), self.expression(val[key])], std.objectFields(val)))]
    else if std.type(val) == 'array' then '[%s]' % [std.join(',', std.map(function(element) self.expression(element), val))]
    else if std.type(val) == 'string' then '"%s"' % [val]
    else '"%s"' % [val],
  template(val):
    if std.type(val) == 'object' then
      if std.objectHas(val, '_')
      then
        if std.objectHas(val._, 'ref')
        then std.strReplace(self.string(val), '\n', '\\n')
        else val._.str
      else std.mapWithKey(function(key, value) self.template(value), val)
    else if std.type(val) == 'array' then std.map(function(element) self.template(element), val)
    else if std.type(val) == 'string' then std.strReplace(self.string(val), '\n', '\\n')
    else val,
  string(val):
    if std.type(val) == 'object' then
      if std.objectHas(val, '_')
      then
        if std.objectHas(val._, 'ref')
        then '${%s}' % [val._.ref]
        else val._.str
      else '${%s}' % [self.expression(val)]
    else if std.type(val) == 'array' then '${%s}' % [self.expression(val)]
    else if std.type(val) == 'string' then val
    else val,
  blocks(val):
    if std.type(val) == 'object'
    then
      if std.objectHas(val, '_')
      then
        if std.objectHas(val._, 'blocks')
        then val._.blocks
        else
          if std.objectHas(val._, 'block')
          then { [val._.ref]: val._.block }
          else {}
      else std.foldl(function(acc, val) std.mergePatch(acc, val), std.map(function(key) build.blocks(val[key]), std.objectFields(val)), {})
    else if std.type(val) == 'array'
    then std.foldl(function(acc, val) std.mergePatch(acc, val), std.map(function(element) build.blocks(element), val), {})
    else {},
};

local providerTemplate(provider, requirements, rawConfiguration, configuration) = {
  local providerRequirements = {
    ['terraform.required_providers.%s' % [provider]]: requirements,
  },
  local providerAlias = if configuration == null then null else std.get(configuration, 'alias', null),
  local providerConfiguration =
    if configuration == null then { _: { refBlock: {}, blocks: [] } } else {
      _: {
        local _ = self,
        ref: '%s.%s' % [provider, configuration.alias],
        refBlock: {
          provider: _.ref,
        },
        block: {
          provider: {
            [provider]: std.prune(configuration),
          },
        },
        blocks: build.blocks(rawConfiguration) + {
          [_.ref]: _.block,
        },
      },
    },
  blockType(blockType): {
    local blockTypePath = if blockType == 'resource' then [] else ['data'],
    resource(type, name): {
      local resourceType = std.substr(type, std.length(provider) + 1, std.length(type)),
      local resourcePath = blockTypePath + [type, name],
      _(rawBlock, block): {
        local _ = self,
        local metaBlock = {
          depends_on: build.template(std.get(rawBlock, 'depends_on', null)),
          count: build.template(std.get(rawBlock, 'count', null)),
          for_each: build.template(std.get(rawBlock, 'for_each', null)),
        },
        type: if std.objectHas(rawBlock, 'for_each') then 'map' else if std.objectHas(rawBlock, 'count') then 'list' else 'object',
        provider: provider,
        providerAlias: providerAlias,
        resourceType: resourceType,
        name: name,
        ref: std.join('.', resourcePath),
        block: {
          [blockType]: {
            [type]: {
              [name]: std.prune(providerConfiguration._.refBlock + metaBlock + block),
            },
          },
        },
        blocks: build.blocks([providerConfiguration] + [rawBlock]) + providerRequirements + {
          [_.ref]: _.block,
        },
      },
      field(blocks, fieldName): {
        local fieldPath = resourcePath + [fieldName],
        _: {
          ref: std.join('.', fieldPath),
          blocks: blocks,
        },
      },
    },
  },
  func(name, parameters=[]): {
    local parameterString = std.join(', ', [build.expression(parameter) for parameter in parameters]),
    _: {
      ref: 'provider::%s::%s(%s)' % [provider, name, parameterString],
      blocks: build.blocks([providerConfiguration] + [parameters]) + providerRequirements,
    },
  },
};

local provider(rawConfiguration, configuration) = {
  local requirements = {
    source: 'registry.terraform.io/pagerduty/pagerduty',
    version: '3.26.0',
  },
  local provider = providerTemplate('pagerduty', requirements, rawConfiguration, configuration),
  resource: {
    local blockType = provider.blockType('resource'),
    addon(name, block): {
      local resource = blockType.resource('pagerduty_addon', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        src: build.template(block.src),
      }),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      src: resource.field(self._.blocks, 'src'),
    },
    alert_grouping_setting(name, block): {
      local resource = blockType.resource('pagerduty_alert_grouping_setting', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        services: build.template(block.services),
        type: build.template(block.type),
      }),
      description: resource.field(self._.blocks, 'description'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      services: resource.field(self._.blocks, 'services'),
      type: resource.field(self._.blocks, 'type'),
    },
    automation_actions_action(name, block): {
      local resource = blockType.resource('pagerduty_automation_actions_action', name),
      _: resource._(block, {
        action_classification: build.template(std.get(block, 'action_classification', null)),
        action_type: build.template(block.action_type),
        allow_invocation_from_event_orchestration: build.template(std.get(block, 'allow_invocation_from_event_orchestration', null)),
        allow_invocation_manually: build.template(std.get(block, 'allow_invocation_manually', null)),
        creation_time: build.template(std.get(block, 'creation_time', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        map_to_all_services: build.template(std.get(block, 'map_to_all_services', null)),
        modify_time: build.template(std.get(block, 'modify_time', null)),
        name: build.template(block.name),
        only_invocable_on_unresolved_incidents: build.template(std.get(block, 'only_invocable_on_unresolved_incidents', null)),
        runner_id: build.template(std.get(block, 'runner_id', null)),
        runner_type: build.template(std.get(block, 'runner_type', null)),
        type: build.template(std.get(block, 'type', null)),
      }),
      action_classification: resource.field(self._.blocks, 'action_classification'),
      action_type: resource.field(self._.blocks, 'action_type'),
      allow_invocation_from_event_orchestration: resource.field(self._.blocks, 'allow_invocation_from_event_orchestration'),
      allow_invocation_manually: resource.field(self._.blocks, 'allow_invocation_manually'),
      creation_time: resource.field(self._.blocks, 'creation_time'),
      description: resource.field(self._.blocks, 'description'),
      id: resource.field(self._.blocks, 'id'),
      map_to_all_services: resource.field(self._.blocks, 'map_to_all_services'),
      modify_time: resource.field(self._.blocks, 'modify_time'),
      name: resource.field(self._.blocks, 'name'),
      only_invocable_on_unresolved_incidents: resource.field(self._.blocks, 'only_invocable_on_unresolved_incidents'),
      runner_id: resource.field(self._.blocks, 'runner_id'),
      runner_type: resource.field(self._.blocks, 'runner_type'),
      type: resource.field(self._.blocks, 'type'),
    },
    automation_actions_action_service_association(name, block): {
      local resource = blockType.resource('pagerduty_automation_actions_action_service_association', name),
      _: resource._(block, {
        action_id: build.template(block.action_id),
        id: build.template(std.get(block, 'id', null)),
        service_id: build.template(block.service_id),
      }),
      action_id: resource.field(self._.blocks, 'action_id'),
      id: resource.field(self._.blocks, 'id'),
      service_id: resource.field(self._.blocks, 'service_id'),
    },
    automation_actions_action_team_association(name, block): {
      local resource = blockType.resource('pagerduty_automation_actions_action_team_association', name),
      _: resource._(block, {
        action_id: build.template(block.action_id),
        id: build.template(std.get(block, 'id', null)),
        team_id: build.template(block.team_id),
      }),
      action_id: resource.field(self._.blocks, 'action_id'),
      id: resource.field(self._.blocks, 'id'),
      team_id: resource.field(self._.blocks, 'team_id'),
    },
    automation_actions_runner(name, block): {
      local resource = blockType.resource('pagerduty_automation_actions_runner', name),
      _: resource._(block, {
        creation_time: build.template(std.get(block, 'creation_time', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        last_seen: build.template(std.get(block, 'last_seen', null)),
        name: build.template(block.name),
        runbook_api_key: build.template(std.get(block, 'runbook_api_key', null)),
        runbook_base_uri: build.template(std.get(block, 'runbook_base_uri', null)),
        runner_type: build.template(block.runner_type),
        type: build.template(std.get(block, 'type', null)),
      }),
      creation_time: resource.field(self._.blocks, 'creation_time'),
      description: resource.field(self._.blocks, 'description'),
      id: resource.field(self._.blocks, 'id'),
      last_seen: resource.field(self._.blocks, 'last_seen'),
      name: resource.field(self._.blocks, 'name'),
      runbook_api_key: resource.field(self._.blocks, 'runbook_api_key'),
      runbook_base_uri: resource.field(self._.blocks, 'runbook_base_uri'),
      runner_type: resource.field(self._.blocks, 'runner_type'),
      type: resource.field(self._.blocks, 'type'),
    },
    automation_actions_runner_team_association(name, block): {
      local resource = blockType.resource('pagerduty_automation_actions_runner_team_association', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        runner_id: build.template(block.runner_id),
        team_id: build.template(block.team_id),
      }),
      id: resource.field(self._.blocks, 'id'),
      runner_id: resource.field(self._.blocks, 'runner_id'),
      team_id: resource.field(self._.blocks, 'team_id'),
    },
    business_service(name, block): {
      local resource = blockType.resource('pagerduty_business_service', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        html_url: build.template(std.get(block, 'html_url', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        point_of_contact: build.template(std.get(block, 'point_of_contact', null)),
        'self': build.template(std.get(block, 'self', null)),
        summary: build.template(std.get(block, 'summary', null)),
        team: build.template(std.get(block, 'team', null)),
        type: build.template(std.get(block, 'type', null)),
      }),
      description: resource.field(self._.blocks, 'description'),
      html_url: resource.field(self._.blocks, 'html_url'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      point_of_contact: resource.field(self._.blocks, 'point_of_contact'),
      'self': resource.field(self._.blocks, 'self'),
      summary: resource.field(self._.blocks, 'summary'),
      team: resource.field(self._.blocks, 'team'),
      type: resource.field(self._.blocks, 'type'),
    },
    business_service_subscriber(name, block): {
      local resource = blockType.resource('pagerduty_business_service_subscriber', name),
      _: resource._(block, {
        business_service_id: build.template(block.business_service_id),
        id: build.template(std.get(block, 'id', null)),
        subscriber_id: build.template(block.subscriber_id),
        subscriber_type: build.template(block.subscriber_type),
      }),
      business_service_id: resource.field(self._.blocks, 'business_service_id'),
      id: resource.field(self._.blocks, 'id'),
      subscriber_id: resource.field(self._.blocks, 'subscriber_id'),
      subscriber_type: resource.field(self._.blocks, 'subscriber_type'),
    },
    escalation_policy(name, block): {
      local resource = blockType.resource('pagerduty_escalation_policy', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        num_loops: build.template(std.get(block, 'num_loops', null)),
        teams: build.template(std.get(block, 'teams', null)),
      }),
      description: resource.field(self._.blocks, 'description'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      num_loops: resource.field(self._.blocks, 'num_loops'),
      teams: resource.field(self._.blocks, 'teams'),
    },
    event_orchestration(name, block): {
      local resource = blockType.resource('pagerduty_event_orchestration', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        routes: build.template(std.get(block, 'routes', null)),
        team: build.template(std.get(block, 'team', null)),
      }),
      description: resource.field(self._.blocks, 'description'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      routes: resource.field(self._.blocks, 'routes'),
      team: resource.field(self._.blocks, 'team'),
    },
    event_orchestration_global(name, block): {
      local resource = blockType.resource('pagerduty_event_orchestration_global', name),
      _: resource._(block, {
        event_orchestration: build.template(block.event_orchestration),
        id: build.template(std.get(block, 'id', null)),
      }),
      event_orchestration: resource.field(self._.blocks, 'event_orchestration'),
      id: resource.field(self._.blocks, 'id'),
    },
    event_orchestration_global_cache_variable(name, block): {
      local resource = blockType.resource('pagerduty_event_orchestration_global_cache_variable', name),
      _: resource._(block, {
        disabled: build.template(std.get(block, 'disabled', null)),
        event_orchestration: build.template(block.event_orchestration),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
      }),
      disabled: resource.field(self._.blocks, 'disabled'),
      event_orchestration: resource.field(self._.blocks, 'event_orchestration'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
    },
    event_orchestration_integration(name, block): {
      local resource = blockType.resource('pagerduty_event_orchestration_integration', name),
      _: resource._(block, {
        event_orchestration: build.template(block.event_orchestration),
        id: build.template(std.get(block, 'id', null)),
        label: build.template(block.label),
        parameters: build.template(std.get(block, 'parameters', null)),
      }),
      event_orchestration: resource.field(self._.blocks, 'event_orchestration'),
      id: resource.field(self._.blocks, 'id'),
      label: resource.field(self._.blocks, 'label'),
      parameters: resource.field(self._.blocks, 'parameters'),
    },
    event_orchestration_router(name, block): {
      local resource = blockType.resource('pagerduty_event_orchestration_router', name),
      _: resource._(block, {
        event_orchestration: build.template(block.event_orchestration),
        id: build.template(std.get(block, 'id', null)),
      }),
      event_orchestration: resource.field(self._.blocks, 'event_orchestration'),
      id: resource.field(self._.blocks, 'id'),
    },
    event_orchestration_service(name, block): {
      local resource = blockType.resource('pagerduty_event_orchestration_service', name),
      _: resource._(block, {
        enable_event_orchestration_for_service: build.template(std.get(block, 'enable_event_orchestration_for_service', null)),
        id: build.template(std.get(block, 'id', null)),
        service: build.template(block.service),
      }),
      enable_event_orchestration_for_service: resource.field(self._.blocks, 'enable_event_orchestration_for_service'),
      id: resource.field(self._.blocks, 'id'),
      service: resource.field(self._.blocks, 'service'),
    },
    event_orchestration_service_cache_variable(name, block): {
      local resource = blockType.resource('pagerduty_event_orchestration_service_cache_variable', name),
      _: resource._(block, {
        disabled: build.template(std.get(block, 'disabled', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        service: build.template(block.service),
      }),
      disabled: resource.field(self._.blocks, 'disabled'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      service: resource.field(self._.blocks, 'service'),
    },
    event_orchestration_unrouted(name, block): {
      local resource = blockType.resource('pagerduty_event_orchestration_unrouted', name),
      _: resource._(block, {
        event_orchestration: build.template(block.event_orchestration),
        id: build.template(std.get(block, 'id', null)),
      }),
      event_orchestration: resource.field(self._.blocks, 'event_orchestration'),
      id: resource.field(self._.blocks, 'id'),
    },
    event_rule(name, block): {
      local resource = blockType.resource('pagerduty_event_rule', name),
      _: resource._(block, {
        action_json: build.template(block.action_json),
        advanced_condition_json: build.template(std.get(block, 'advanced_condition_json', null)),
        catch_all: build.template(std.get(block, 'catch_all', null)),
        condition_json: build.template(block.condition_json),
        id: build.template(std.get(block, 'id', null)),
      }),
      action_json: resource.field(self._.blocks, 'action_json'),
      advanced_condition_json: resource.field(self._.blocks, 'advanced_condition_json'),
      catch_all: resource.field(self._.blocks, 'catch_all'),
      condition_json: resource.field(self._.blocks, 'condition_json'),
      id: resource.field(self._.blocks, 'id'),
    },
    extension(name, block): {
      local resource = blockType.resource('pagerduty_extension', name),
      _: resource._(block, {
        config: build.template(std.get(block, 'config', null)),
        endpoint_url: build.template(std.get(block, 'endpoint_url', null)),
        extension_objects: build.template(block.extension_objects),
        extension_schema: build.template(block.extension_schema),
        html_url: build.template(std.get(block, 'html_url', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        summary: build.template(std.get(block, 'summary', null)),
        type: build.template(std.get(block, 'type', null)),
      }),
      config: resource.field(self._.blocks, 'config'),
      endpoint_url: resource.field(self._.blocks, 'endpoint_url'),
      extension_objects: resource.field(self._.blocks, 'extension_objects'),
      extension_schema: resource.field(self._.blocks, 'extension_schema'),
      html_url: resource.field(self._.blocks, 'html_url'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      summary: resource.field(self._.blocks, 'summary'),
      type: resource.field(self._.blocks, 'type'),
    },
    extension_servicenow(name, block): {
      local resource = blockType.resource('pagerduty_extension_servicenow', name),
      _: resource._(block, {
        endpoint_url: build.template(std.get(block, 'endpoint_url', null)),
        extension_objects: build.template(block.extension_objects),
        extension_schema: build.template(block.extension_schema),
        html_url: build.template(std.get(block, 'html_url', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        referer: build.template(block.referer),
        snow_password: build.template(block.snow_password),
        snow_user: build.template(block.snow_user),
        summary: build.template(std.get(block, 'summary', null)),
        sync_options: build.template(block.sync_options),
        target: build.template(block.target),
        task_type: build.template(block.task_type),
        type: build.template(std.get(block, 'type', null)),
      }),
      endpoint_url: resource.field(self._.blocks, 'endpoint_url'),
      extension_objects: resource.field(self._.blocks, 'extension_objects'),
      extension_schema: resource.field(self._.blocks, 'extension_schema'),
      html_url: resource.field(self._.blocks, 'html_url'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      referer: resource.field(self._.blocks, 'referer'),
      snow_password: resource.field(self._.blocks, 'snow_password'),
      snow_user: resource.field(self._.blocks, 'snow_user'),
      summary: resource.field(self._.blocks, 'summary'),
      sync_options: resource.field(self._.blocks, 'sync_options'),
      target: resource.field(self._.blocks, 'target'),
      task_type: resource.field(self._.blocks, 'task_type'),
      type: resource.field(self._.blocks, 'type'),
    },
    incident_custom_field(name, block): {
      local resource = blockType.resource('pagerduty_incident_custom_field', name),
      _: resource._(block, {
        data_type: build.template(block.data_type),
        default_value: build.template(std.get(block, 'default_value', null)),
        description: build.template(std.get(block, 'description', null)),
        display_name: build.template(block.display_name),
        field_type: build.template(block.field_type),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
      }),
      data_type: resource.field(self._.blocks, 'data_type'),
      default_value: resource.field(self._.blocks, 'default_value'),
      description: resource.field(self._.blocks, 'description'),
      display_name: resource.field(self._.blocks, 'display_name'),
      field_type: resource.field(self._.blocks, 'field_type'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
    },
    incident_custom_field_option(name, block): {
      local resource = blockType.resource('pagerduty_incident_custom_field_option', name),
      _: resource._(block, {
        data_type: build.template(block.data_type),
        field: build.template(block.field),
        id: build.template(std.get(block, 'id', null)),
        value: build.template(block.value),
      }),
      data_type: resource.field(self._.blocks, 'data_type'),
      field: resource.field(self._.blocks, 'field'),
      id: resource.field(self._.blocks, 'id'),
      value: resource.field(self._.blocks, 'value'),
    },
    incident_type(name, block): {
      local resource = blockType.resource('pagerduty_incident_type', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        display_name: build.template(block.display_name),
        enabled: build.template(std.get(block, 'enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        parent_type: build.template(block.parent_type),
        type: build.template(std.get(block, 'type', null)),
      }),
      description: resource.field(self._.blocks, 'description'),
      display_name: resource.field(self._.blocks, 'display_name'),
      enabled: resource.field(self._.blocks, 'enabled'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      parent_type: resource.field(self._.blocks, 'parent_type'),
      type: resource.field(self._.blocks, 'type'),
    },
    incident_type_custom_field(name, block): {
      local resource = blockType.resource('pagerduty_incident_type_custom_field', name),
      _: resource._(block, {
        data_type: build.template(block.data_type),
        default_value: build.template(std.get(block, 'default_value', null)),
        description: build.template(std.get(block, 'description', null)),
        display_name: build.template(block.display_name),
        enabled: build.template(std.get(block, 'enabled', null)),
        field_options: build.template(std.get(block, 'field_options', null)),
        field_type: build.template(std.get(block, 'field_type', null)),
        id: build.template(std.get(block, 'id', null)),
        incident_type: build.template(block.incident_type),
        name: build.template(block.name),
        'self': build.template(std.get(block, 'self', null)),
        summary: build.template(std.get(block, 'summary', null)),
        type: build.template(std.get(block, 'type', null)),
      }),
      data_type: resource.field(self._.blocks, 'data_type'),
      default_value: resource.field(self._.blocks, 'default_value'),
      description: resource.field(self._.blocks, 'description'),
      display_name: resource.field(self._.blocks, 'display_name'),
      enabled: resource.field(self._.blocks, 'enabled'),
      field_options: resource.field(self._.blocks, 'field_options'),
      field_type: resource.field(self._.blocks, 'field_type'),
      id: resource.field(self._.blocks, 'id'),
      incident_type: resource.field(self._.blocks, 'incident_type'),
      name: resource.field(self._.blocks, 'name'),
      'self': resource.field(self._.blocks, 'self'),
      summary: resource.field(self._.blocks, 'summary'),
      type: resource.field(self._.blocks, 'type'),
    },
    incident_workflow(name, block): {
      local resource = blockType.resource('pagerduty_incident_workflow', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        is_enabled: build.template(std.get(block, 'is_enabled', null)),
        name: build.template(block.name),
        team: build.template(std.get(block, 'team', null)),
      }),
      description: resource.field(self._.blocks, 'description'),
      id: resource.field(self._.blocks, 'id'),
      is_enabled: resource.field(self._.blocks, 'is_enabled'),
      name: resource.field(self._.blocks, 'name'),
      team: resource.field(self._.blocks, 'team'),
    },
    incident_workflow_trigger(name, block): {
      local resource = blockType.resource('pagerduty_incident_workflow_trigger', name),
      _: resource._(block, {
        condition: build.template(std.get(block, 'condition', null)),
        id: build.template(std.get(block, 'id', null)),
        services: build.template(std.get(block, 'services', null)),
        subscribed_to_all_services: build.template(block.subscribed_to_all_services),
        type: build.template(block.type),
        workflow: build.template(block.workflow),
      }),
      condition: resource.field(self._.blocks, 'condition'),
      id: resource.field(self._.blocks, 'id'),
      services: resource.field(self._.blocks, 'services'),
      subscribed_to_all_services: resource.field(self._.blocks, 'subscribed_to_all_services'),
      type: resource.field(self._.blocks, 'type'),
      workflow: resource.field(self._.blocks, 'workflow'),
    },
    jira_cloud_account_mapping_rule(name, block): {
      local resource = blockType.resource('pagerduty_jira_cloud_account_mapping_rule', name),
      _: resource._(block, {
        account_mapping: build.template(block.account_mapping),
        autocreate_jql_disabled_reason: build.template(std.get(block, 'autocreate_jql_disabled_reason', null)),
        autocreate_jql_disabled_until: build.template(std.get(block, 'autocreate_jql_disabled_until', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
      }),
      account_mapping: resource.field(self._.blocks, 'account_mapping'),
      autocreate_jql_disabled_reason: resource.field(self._.blocks, 'autocreate_jql_disabled_reason'),
      autocreate_jql_disabled_until: resource.field(self._.blocks, 'autocreate_jql_disabled_until'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
    },
    maintenance_window(name, block): {
      local resource = blockType.resource('pagerduty_maintenance_window', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        end_time: build.template(block.end_time),
        id: build.template(std.get(block, 'id', null)),
        services: build.template(block.services),
        start_time: build.template(block.start_time),
      }),
      description: resource.field(self._.blocks, 'description'),
      end_time: resource.field(self._.blocks, 'end_time'),
      id: resource.field(self._.blocks, 'id'),
      services: resource.field(self._.blocks, 'services'),
      start_time: resource.field(self._.blocks, 'start_time'),
    },
    response_play(name, block): {
      local resource = blockType.resource('pagerduty_response_play', name),
      _: resource._(block, {
        conference_number: build.template(std.get(block, 'conference_number', null)),
        conference_url: build.template(std.get(block, 'conference_url', null)),
        description: build.template(std.get(block, 'description', null)),
        from: build.template(block.from),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        responders_message: build.template(std.get(block, 'responders_message', null)),
        runnability: build.template(std.get(block, 'runnability', null)),
        subscribers_message: build.template(std.get(block, 'subscribers_message', null)),
        team: build.template(std.get(block, 'team', null)),
        type: build.template(std.get(block, 'type', null)),
      }),
      conference_number: resource.field(self._.blocks, 'conference_number'),
      conference_url: resource.field(self._.blocks, 'conference_url'),
      description: resource.field(self._.blocks, 'description'),
      from: resource.field(self._.blocks, 'from'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      responders_message: resource.field(self._.blocks, 'responders_message'),
      runnability: resource.field(self._.blocks, 'runnability'),
      subscribers_message: resource.field(self._.blocks, 'subscribers_message'),
      team: resource.field(self._.blocks, 'team'),
      type: resource.field(self._.blocks, 'type'),
    },
    ruleset(name, block): {
      local resource = blockType.resource('pagerduty_ruleset', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        routing_keys: build.template(std.get(block, 'routing_keys', null)),
        type: build.template(std.get(block, 'type', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      routing_keys: resource.field(self._.blocks, 'routing_keys'),
      type: resource.field(self._.blocks, 'type'),
    },
    ruleset_rule(name, block): {
      local resource = blockType.resource('pagerduty_ruleset_rule', name),
      _: resource._(block, {
        catch_all: build.template(std.get(block, 'catch_all', null)),
        disabled: build.template(std.get(block, 'disabled', null)),
        id: build.template(std.get(block, 'id', null)),
        position: build.template(std.get(block, 'position', null)),
        ruleset: build.template(block.ruleset),
      }),
      catch_all: resource.field(self._.blocks, 'catch_all'),
      disabled: resource.field(self._.blocks, 'disabled'),
      id: resource.field(self._.blocks, 'id'),
      position: resource.field(self._.blocks, 'position'),
      ruleset: resource.field(self._.blocks, 'ruleset'),
    },
    schedule(name, block): {
      local resource = blockType.resource('pagerduty_schedule', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        final_schedule: build.template(std.get(block, 'final_schedule', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        overflow: build.template(std.get(block, 'overflow', null)),
        teams: build.template(std.get(block, 'teams', null)),
        time_zone: build.template(block.time_zone),
      }),
      description: resource.field(self._.blocks, 'description'),
      final_schedule: resource.field(self._.blocks, 'final_schedule'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      overflow: resource.field(self._.blocks, 'overflow'),
      teams: resource.field(self._.blocks, 'teams'),
      time_zone: resource.field(self._.blocks, 'time_zone'),
    },
    service(name, block): {
      local resource = blockType.resource('pagerduty_service', name),
      _: resource._(block, {
        acknowledgement_timeout: build.template(std.get(block, 'acknowledgement_timeout', null)),
        alert_creation: build.template(std.get(block, 'alert_creation', null)),
        alert_grouping: build.template(std.get(block, 'alert_grouping', null)),
        alert_grouping_timeout: build.template(std.get(block, 'alert_grouping_timeout', null)),
        auto_resolve_timeout: build.template(std.get(block, 'auto_resolve_timeout', null)),
        created_at: build.template(std.get(block, 'created_at', null)),
        description: build.template(std.get(block, 'description', null)),
        escalation_policy: build.template(block.escalation_policy),
        html_url: build.template(std.get(block, 'html_url', null)),
        id: build.template(std.get(block, 'id', null)),
        last_incident_timestamp: build.template(std.get(block, 'last_incident_timestamp', null)),
        name: build.template(block.name),
        response_play: build.template(std.get(block, 'response_play', null)),
        status: build.template(std.get(block, 'status', null)),
        type: build.template(std.get(block, 'type', null)),
      }),
      acknowledgement_timeout: resource.field(self._.blocks, 'acknowledgement_timeout'),
      alert_creation: resource.field(self._.blocks, 'alert_creation'),
      alert_grouping: resource.field(self._.blocks, 'alert_grouping'),
      alert_grouping_timeout: resource.field(self._.blocks, 'alert_grouping_timeout'),
      auto_resolve_timeout: resource.field(self._.blocks, 'auto_resolve_timeout'),
      created_at: resource.field(self._.blocks, 'created_at'),
      description: resource.field(self._.blocks, 'description'),
      escalation_policy: resource.field(self._.blocks, 'escalation_policy'),
      html_url: resource.field(self._.blocks, 'html_url'),
      id: resource.field(self._.blocks, 'id'),
      last_incident_timestamp: resource.field(self._.blocks, 'last_incident_timestamp'),
      name: resource.field(self._.blocks, 'name'),
      response_play: resource.field(self._.blocks, 'response_play'),
      status: resource.field(self._.blocks, 'status'),
      type: resource.field(self._.blocks, 'type'),
    },
    service_custom_field(name, block): {
      local resource = blockType.resource('pagerduty_service_custom_field', name),
      _: resource._(block, {
        data_type: build.template(block.data_type),
        default_value: build.template(std.get(block, 'default_value', null)),
        description: build.template(std.get(block, 'description', null)),
        display_name: build.template(block.display_name),
        enabled: build.template(std.get(block, 'enabled', null)),
        field_type: build.template(block.field_type),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        'self': build.template(std.get(block, 'self', null)),
        summary: build.template(std.get(block, 'summary', null)),
        type: build.template(std.get(block, 'type', null)),
      }),
      data_type: resource.field(self._.blocks, 'data_type'),
      default_value: resource.field(self._.blocks, 'default_value'),
      description: resource.field(self._.blocks, 'description'),
      display_name: resource.field(self._.blocks, 'display_name'),
      enabled: resource.field(self._.blocks, 'enabled'),
      field_type: resource.field(self._.blocks, 'field_type'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      'self': resource.field(self._.blocks, 'self'),
      summary: resource.field(self._.blocks, 'summary'),
      type: resource.field(self._.blocks, 'type'),
    },
    service_custom_field_value(name, block): {
      local resource = blockType.resource('pagerduty_service_custom_field_value', name),
      _: resource._(block, {
        custom_fields: build.template(block.custom_fields),
        id: build.template(std.get(block, 'id', null)),
        service_id: build.template(block.service_id),
      }),
      custom_fields: resource.field(self._.blocks, 'custom_fields'),
      id: resource.field(self._.blocks, 'id'),
      service_id: resource.field(self._.blocks, 'service_id'),
    },
    service_dependency(name, block): {
      local resource = blockType.resource('pagerduty_service_dependency', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
    },
    service_event_rule(name, block): {
      local resource = blockType.resource('pagerduty_service_event_rule', name),
      _: resource._(block, {
        disabled: build.template(std.get(block, 'disabled', null)),
        id: build.template(std.get(block, 'id', null)),
        position: build.template(std.get(block, 'position', null)),
        service: build.template(block.service),
      }),
      disabled: resource.field(self._.blocks, 'disabled'),
      id: resource.field(self._.blocks, 'id'),
      position: resource.field(self._.blocks, 'position'),
      service: resource.field(self._.blocks, 'service'),
    },
    service_integration(name, block): {
      local resource = blockType.resource('pagerduty_service_integration', name),
      _: resource._(block, {
        email_filter_mode: build.template(std.get(block, 'email_filter_mode', null)),
        email_incident_creation: build.template(std.get(block, 'email_incident_creation', null)),
        email_parsing_fallback: build.template(std.get(block, 'email_parsing_fallback', null)),
        html_url: build.template(std.get(block, 'html_url', null)),
        id: build.template(std.get(block, 'id', null)),
        integration_email: build.template(std.get(block, 'integration_email', null)),
        integration_key: build.template(std.get(block, 'integration_key', null)),
        name: build.template(std.get(block, 'name', null)),
        service: build.template(block.service),
        type: build.template(std.get(block, 'type', null)),
        vendor: build.template(std.get(block, 'vendor', null)),
      }),
      email_filter_mode: resource.field(self._.blocks, 'email_filter_mode'),
      email_incident_creation: resource.field(self._.blocks, 'email_incident_creation'),
      email_parsing_fallback: resource.field(self._.blocks, 'email_parsing_fallback'),
      html_url: resource.field(self._.blocks, 'html_url'),
      id: resource.field(self._.blocks, 'id'),
      integration_email: resource.field(self._.blocks, 'integration_email'),
      integration_key: resource.field(self._.blocks, 'integration_key'),
      name: resource.field(self._.blocks, 'name'),
      service: resource.field(self._.blocks, 'service'),
      type: resource.field(self._.blocks, 'type'),
      vendor: resource.field(self._.blocks, 'vendor'),
    },
    slack_connection(name, block): {
      local resource = blockType.resource('pagerduty_slack_connection', name),
      _: resource._(block, {
        channel_id: build.template(block.channel_id),
        channel_name: build.template(std.get(block, 'channel_name', null)),
        id: build.template(std.get(block, 'id', null)),
        notification_type: build.template(block.notification_type),
        source_id: build.template(block.source_id),
        source_name: build.template(std.get(block, 'source_name', null)),
        source_type: build.template(block.source_type),
        workspace_id: build.template(block.workspace_id),
      }),
      channel_id: resource.field(self._.blocks, 'channel_id'),
      channel_name: resource.field(self._.blocks, 'channel_name'),
      id: resource.field(self._.blocks, 'id'),
      notification_type: resource.field(self._.blocks, 'notification_type'),
      source_id: resource.field(self._.blocks, 'source_id'),
      source_name: resource.field(self._.blocks, 'source_name'),
      source_type: resource.field(self._.blocks, 'source_type'),
      workspace_id: resource.field(self._.blocks, 'workspace_id'),
    },
    tag(name, block): {
      local resource = blockType.resource('pagerduty_tag', name),
      _: resource._(block, {
        html_url: build.template(std.get(block, 'html_url', null)),
        id: build.template(std.get(block, 'id', null)),
        label: build.template(block.label),
        summary: build.template(std.get(block, 'summary', null)),
      }),
      html_url: resource.field(self._.blocks, 'html_url'),
      id: resource.field(self._.blocks, 'id'),
      label: resource.field(self._.blocks, 'label'),
      summary: resource.field(self._.blocks, 'summary'),
    },
    tag_assignment(name, block): {
      local resource = blockType.resource('pagerduty_tag_assignment', name),
      _: resource._(block, {
        entity_id: build.template(block.entity_id),
        entity_type: build.template(block.entity_type),
        id: build.template(std.get(block, 'id', null)),
        tag_id: build.template(block.tag_id),
      }),
      entity_id: resource.field(self._.blocks, 'entity_id'),
      entity_type: resource.field(self._.blocks, 'entity_type'),
      id: resource.field(self._.blocks, 'id'),
      tag_id: resource.field(self._.blocks, 'tag_id'),
    },
    team(name, block): {
      local resource = blockType.resource('pagerduty_team', name),
      _: resource._(block, {
        default_role: build.template(std.get(block, 'default_role', null)),
        description: build.template(std.get(block, 'description', null)),
        html_url: build.template(std.get(block, 'html_url', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        parent: build.template(std.get(block, 'parent', null)),
      }),
      default_role: resource.field(self._.blocks, 'default_role'),
      description: resource.field(self._.blocks, 'description'),
      html_url: resource.field(self._.blocks, 'html_url'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      parent: resource.field(self._.blocks, 'parent'),
    },
    team_membership(name, block): {
      local resource = blockType.resource('pagerduty_team_membership', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        role: build.template(std.get(block, 'role', null)),
        team_id: build.template(block.team_id),
        user_id: build.template(block.user_id),
      }),
      id: resource.field(self._.blocks, 'id'),
      role: resource.field(self._.blocks, 'role'),
      team_id: resource.field(self._.blocks, 'team_id'),
      user_id: resource.field(self._.blocks, 'user_id'),
    },
    user(name, block): {
      local resource = blockType.resource('pagerduty_user', name),
      _: resource._(block, {
        avatar_url: build.template(std.get(block, 'avatar_url', null)),
        color: build.template(std.get(block, 'color', null)),
        description: build.template(std.get(block, 'description', null)),
        email: build.template(block.email),
        html_url: build.template(std.get(block, 'html_url', null)),
        id: build.template(std.get(block, 'id', null)),
        invitation_sent: build.template(std.get(block, 'invitation_sent', null)),
        job_title: build.template(std.get(block, 'job_title', null)),
        license: build.template(std.get(block, 'license', null)),
        name: build.template(block.name),
        role: build.template(std.get(block, 'role', null)),
        teams: build.template(std.get(block, 'teams', null)),
        time_zone: build.template(std.get(block, 'time_zone', null)),
      }),
      avatar_url: resource.field(self._.blocks, 'avatar_url'),
      color: resource.field(self._.blocks, 'color'),
      description: resource.field(self._.blocks, 'description'),
      email: resource.field(self._.blocks, 'email'),
      html_url: resource.field(self._.blocks, 'html_url'),
      id: resource.field(self._.blocks, 'id'),
      invitation_sent: resource.field(self._.blocks, 'invitation_sent'),
      job_title: resource.field(self._.blocks, 'job_title'),
      license: resource.field(self._.blocks, 'license'),
      name: resource.field(self._.blocks, 'name'),
      role: resource.field(self._.blocks, 'role'),
      teams: resource.field(self._.blocks, 'teams'),
      time_zone: resource.field(self._.blocks, 'time_zone'),
    },
    user_contact_method(name, block): {
      local resource = blockType.resource('pagerduty_user_contact_method', name),
      _: resource._(block, {
        address: build.template(block.address),
        blacklisted: build.template(std.get(block, 'blacklisted', null)),
        country_code: build.template(std.get(block, 'country_code', null)),
        enabled: build.template(std.get(block, 'enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        label: build.template(block.label),
        send_short_email: build.template(std.get(block, 'send_short_email', null)),
        type: build.template(block.type),
        user_id: build.template(block.user_id),
      }),
      address: resource.field(self._.blocks, 'address'),
      blacklisted: resource.field(self._.blocks, 'blacklisted'),
      country_code: resource.field(self._.blocks, 'country_code'),
      enabled: resource.field(self._.blocks, 'enabled'),
      id: resource.field(self._.blocks, 'id'),
      label: resource.field(self._.blocks, 'label'),
      send_short_email: resource.field(self._.blocks, 'send_short_email'),
      type: resource.field(self._.blocks, 'type'),
      user_id: resource.field(self._.blocks, 'user_id'),
    },
    user_handoff_notification_rule(name, block): {
      local resource = blockType.resource('pagerduty_user_handoff_notification_rule', name),
      _: resource._(block, {
        handoff_type: build.template(std.get(block, 'handoff_type', null)),
        id: build.template(std.get(block, 'id', null)),
        notify_advance_in_minutes: build.template(block.notify_advance_in_minutes),
        user_id: build.template(block.user_id),
      }),
      handoff_type: resource.field(self._.blocks, 'handoff_type'),
      id: resource.field(self._.blocks, 'id'),
      notify_advance_in_minutes: resource.field(self._.blocks, 'notify_advance_in_minutes'),
      user_id: resource.field(self._.blocks, 'user_id'),
    },
    user_notification_rule(name, block): {
      local resource = blockType.resource('pagerduty_user_notification_rule', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        start_delay_in_minutes: build.template(block.start_delay_in_minutes),
        urgency: build.template(block.urgency),
        user_id: build.template(block.user_id),
      }),
      id: resource.field(self._.blocks, 'id'),
      start_delay_in_minutes: resource.field(self._.blocks, 'start_delay_in_minutes'),
      urgency: resource.field(self._.blocks, 'urgency'),
      user_id: resource.field(self._.blocks, 'user_id'),
    },
    webhook_subscription(name, block): {
      local resource = blockType.resource('pagerduty_webhook_subscription', name),
      _: resource._(block, {
        active: build.template(std.get(block, 'active', null)),
        description: build.template(std.get(block, 'description', null)),
        events: build.template(block.events),
        id: build.template(std.get(block, 'id', null)),
        type: build.template(std.get(block, 'type', null)),
      }),
      active: resource.field(self._.blocks, 'active'),
      description: resource.field(self._.blocks, 'description'),
      events: resource.field(self._.blocks, 'events'),
      id: resource.field(self._.blocks, 'id'),
      type: resource.field(self._.blocks, 'type'),
    },
  },
  data: {
    local blockType = provider.blockType('data'),
    alert_grouping_setting(name, block): {
      local resource = blockType.resource('pagerduty_alert_grouping_setting', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        services: build.template(std.get(block, 'services', null)),
        type: build.template(std.get(block, 'type', null)),
      }),
      description: resource.field(self._.blocks, 'description'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      services: resource.field(self._.blocks, 'services'),
      type: resource.field(self._.blocks, 'type'),
    },
    automation_actions_action(name, block): {
      local resource = blockType.resource('pagerduty_automation_actions_action', name),
      _: resource._(block, {
        action_classification: build.template(std.get(block, 'action_classification', null)),
        action_data_reference: build.template(std.get(block, 'action_data_reference', null)),
        action_type: build.template(std.get(block, 'action_type', null)),
        allow_invocation_from_event_orchestration: build.template(std.get(block, 'allow_invocation_from_event_orchestration', null)),
        allow_invocation_manually: build.template(std.get(block, 'allow_invocation_manually', null)),
        creation_time: build.template(std.get(block, 'creation_time', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(block.id),
        map_to_all_services: build.template(std.get(block, 'map_to_all_services', null)),
        modify_time: build.template(std.get(block, 'modify_time', null)),
        name: build.template(std.get(block, 'name', null)),
        only_invocable_on_unresolved_incidents: build.template(std.get(block, 'only_invocable_on_unresolved_incidents', null)),
        runner_id: build.template(std.get(block, 'runner_id', null)),
        runner_type: build.template(std.get(block, 'runner_type', null)),
        type: build.template(std.get(block, 'type', null)),
      }),
      action_classification: resource.field(self._.blocks, 'action_classification'),
      action_data_reference: resource.field(self._.blocks, 'action_data_reference'),
      action_type: resource.field(self._.blocks, 'action_type'),
      allow_invocation_from_event_orchestration: resource.field(self._.blocks, 'allow_invocation_from_event_orchestration'),
      allow_invocation_manually: resource.field(self._.blocks, 'allow_invocation_manually'),
      creation_time: resource.field(self._.blocks, 'creation_time'),
      description: resource.field(self._.blocks, 'description'),
      id: resource.field(self._.blocks, 'id'),
      map_to_all_services: resource.field(self._.blocks, 'map_to_all_services'),
      modify_time: resource.field(self._.blocks, 'modify_time'),
      name: resource.field(self._.blocks, 'name'),
      only_invocable_on_unresolved_incidents: resource.field(self._.blocks, 'only_invocable_on_unresolved_incidents'),
      runner_id: resource.field(self._.blocks, 'runner_id'),
      runner_type: resource.field(self._.blocks, 'runner_type'),
      type: resource.field(self._.blocks, 'type'),
    },
    automation_actions_runner(name, block): {
      local resource = blockType.resource('pagerduty_automation_actions_runner', name),
      _: resource._(block, {
        creation_time: build.template(std.get(block, 'creation_time', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(block.id),
        last_seen: build.template(std.get(block, 'last_seen', null)),
        name: build.template(std.get(block, 'name', null)),
        runbook_base_uri: build.template(std.get(block, 'runbook_base_uri', null)),
        runner_type: build.template(std.get(block, 'runner_type', null)),
        type: build.template(std.get(block, 'type', null)),
      }),
      creation_time: resource.field(self._.blocks, 'creation_time'),
      description: resource.field(self._.blocks, 'description'),
      id: resource.field(self._.blocks, 'id'),
      last_seen: resource.field(self._.blocks, 'last_seen'),
      name: resource.field(self._.blocks, 'name'),
      runbook_base_uri: resource.field(self._.blocks, 'runbook_base_uri'),
      runner_type: resource.field(self._.blocks, 'runner_type'),
      type: resource.field(self._.blocks, 'type'),
    },
    business_service(name, block): {
      local resource = blockType.resource('pagerduty_business_service', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        type: build.template(std.get(block, 'type', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      type: resource.field(self._.blocks, 'type'),
    },
    escalation_policy(name, block): {
      local resource = blockType.resource('pagerduty_escalation_policy', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        teams: build.template(std.get(block, 'teams', null)),
      }),
      description: resource.field(self._.blocks, 'description'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      teams: resource.field(self._.blocks, 'teams'),
    },
    event_orchestration(name, block): {
      local resource = blockType.resource('pagerduty_event_orchestration', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
      }),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
    },
    event_orchestration_global_cache_variable(name, block): {
      local resource = blockType.resource('pagerduty_event_orchestration_global_cache_variable', name),
      _: resource._(block, {
        condition: build.template(std.get(block, 'condition', null)),
        configuration: build.template(std.get(block, 'configuration', null)),
        disabled: build.template(std.get(block, 'disabled', null)),
        event_orchestration: build.template(block.event_orchestration),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
      }),
      condition: resource.field(self._.blocks, 'condition'),
      configuration: resource.field(self._.blocks, 'configuration'),
      disabled: resource.field(self._.blocks, 'disabled'),
      event_orchestration: resource.field(self._.blocks, 'event_orchestration'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
    },
    event_orchestration_integration(name, block): {
      local resource = blockType.resource('pagerduty_event_orchestration_integration', name),
      _: resource._(block, {
        event_orchestration: build.template(block.event_orchestration),
        id: build.template(std.get(block, 'id', null)),
        label: build.template(std.get(block, 'label', null)),
        parameters: build.template(std.get(block, 'parameters', null)),
      }),
      event_orchestration: resource.field(self._.blocks, 'event_orchestration'),
      id: resource.field(self._.blocks, 'id'),
      label: resource.field(self._.blocks, 'label'),
      parameters: resource.field(self._.blocks, 'parameters'),
    },
    event_orchestration_service_cache_variable(name, block): {
      local resource = blockType.resource('pagerduty_event_orchestration_service_cache_variable', name),
      _: resource._(block, {
        condition: build.template(std.get(block, 'condition', null)),
        configuration: build.template(std.get(block, 'configuration', null)),
        disabled: build.template(std.get(block, 'disabled', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        service: build.template(block.service),
      }),
      condition: resource.field(self._.blocks, 'condition'),
      configuration: resource.field(self._.blocks, 'configuration'),
      disabled: resource.field(self._.blocks, 'disabled'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      service: resource.field(self._.blocks, 'service'),
    },
    event_orchestrations(name, block): {
      local resource = blockType.resource('pagerduty_event_orchestrations', name),
      _: resource._(block, {
        event_orchestrations: build.template(std.get(block, 'event_orchestrations', null)),
        id: build.template(std.get(block, 'id', null)),
        name_filter: build.template(block.name_filter),
      }),
      event_orchestrations: resource.field(self._.blocks, 'event_orchestrations'),
      id: resource.field(self._.blocks, 'id'),
      name_filter: resource.field(self._.blocks, 'name_filter'),
    },
    extension_schema(name, block): {
      local resource = blockType.resource('pagerduty_extension_schema', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        type: build.template(std.get(block, 'type', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      type: resource.field(self._.blocks, 'type'),
    },
    incident_custom_field(name, block): {
      local resource = blockType.resource('pagerduty_incident_custom_field', name),
      _: resource._(block, {
        data_type: build.template(std.get(block, 'data_type', null)),
        description: build.template(std.get(block, 'description', null)),
        display_name: build.template(std.get(block, 'display_name', null)),
        field_type: build.template(std.get(block, 'field_type', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
      }),
      data_type: resource.field(self._.blocks, 'data_type'),
      description: resource.field(self._.blocks, 'description'),
      display_name: resource.field(self._.blocks, 'display_name'),
      field_type: resource.field(self._.blocks, 'field_type'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
    },
    incident_type(name, block): {
      local resource = blockType.resource('pagerduty_incident_type', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        display_name: build.template(block.display_name),
        enabled: build.template(std.get(block, 'enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        parent_type: build.template(std.get(block, 'parent_type', null)),
        type: build.template(std.get(block, 'type', null)),
      }),
      description: resource.field(self._.blocks, 'description'),
      display_name: resource.field(self._.blocks, 'display_name'),
      enabled: resource.field(self._.blocks, 'enabled'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      parent_type: resource.field(self._.blocks, 'parent_type'),
      type: resource.field(self._.blocks, 'type'),
    },
    incident_type_custom_field(name, block): {
      local resource = blockType.resource('pagerduty_incident_type_custom_field', name),
      _: resource._(block, {
        data_type: build.template(std.get(block, 'data_type', null)),
        default_value: build.template(std.get(block, 'default_value', null)),
        description: build.template(std.get(block, 'description', null)),
        display_name: build.template(block.display_name),
        enabled: build.template(std.get(block, 'enabled', null)),
        field_options: build.template(std.get(block, 'field_options', null)),
        field_type: build.template(std.get(block, 'field_type', null)),
        id: build.template(std.get(block, 'id', null)),
        incident_type: build.template(block.incident_type),
        name: build.template(std.get(block, 'name', null)),
        'self': build.template(std.get(block, 'self', null)),
        summary: build.template(std.get(block, 'summary', null)),
        type: build.template(std.get(block, 'type', null)),
      }),
      data_type: resource.field(self._.blocks, 'data_type'),
      default_value: resource.field(self._.blocks, 'default_value'),
      description: resource.field(self._.blocks, 'description'),
      display_name: resource.field(self._.blocks, 'display_name'),
      enabled: resource.field(self._.blocks, 'enabled'),
      field_options: resource.field(self._.blocks, 'field_options'),
      field_type: resource.field(self._.blocks, 'field_type'),
      id: resource.field(self._.blocks, 'id'),
      incident_type: resource.field(self._.blocks, 'incident_type'),
      name: resource.field(self._.blocks, 'name'),
      'self': resource.field(self._.blocks, 'self'),
      summary: resource.field(self._.blocks, 'summary'),
      type: resource.field(self._.blocks, 'type'),
    },
    incident_workflow(name, block): {
      local resource = blockType.resource('pagerduty_incident_workflow', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
      }),
      description: resource.field(self._.blocks, 'description'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
    },
    jira_cloud_account_mapping(name, block): {
      local resource = blockType.resource('pagerduty_jira_cloud_account_mapping', name),
      _: resource._(block, {
        base_url: build.template(std.get(block, 'base_url', null)),
        id: build.template(std.get(block, 'id', null)),
        subdomain: build.template(block.subdomain),
      }),
      base_url: resource.field(self._.blocks, 'base_url'),
      id: resource.field(self._.blocks, 'id'),
      subdomain: resource.field(self._.blocks, 'subdomain'),
    },
    license(name, block): {
      local resource = blockType.resource('pagerduty_license', name),
      _: resource._(block, {
        allocations_available: build.template(std.get(block, 'allocations_available', null)),
        current_value: build.template(std.get(block, 'current_value', null)),
        description: build.template(std.get(block, 'description', null)),
        html_url: build.template(std.get(block, 'html_url', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        role_group: build.template(std.get(block, 'role_group', null)),
        'self': build.template(std.get(block, 'self', null)),
        summary: build.template(std.get(block, 'summary', null)),
        type: build.template(std.get(block, 'type', null)),
        valid_roles: build.template(std.get(block, 'valid_roles', null)),
      }),
      allocations_available: resource.field(self._.blocks, 'allocations_available'),
      current_value: resource.field(self._.blocks, 'current_value'),
      description: resource.field(self._.blocks, 'description'),
      html_url: resource.field(self._.blocks, 'html_url'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      role_group: resource.field(self._.blocks, 'role_group'),
      'self': resource.field(self._.blocks, 'self'),
      summary: resource.field(self._.blocks, 'summary'),
      type: resource.field(self._.blocks, 'type'),
      valid_roles: resource.field(self._.blocks, 'valid_roles'),
    },
    licenses(name, block): {
      local resource = blockType.resource('pagerduty_licenses', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        licenses: build.template(std.get(block, 'licenses', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      licenses: resource.field(self._.blocks, 'licenses'),
    },
    priority(name, block): {
      local resource = blockType.resource('pagerduty_priority', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
      }),
      description: resource.field(self._.blocks, 'description'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
    },
    ruleset(name, block): {
      local resource = blockType.resource('pagerduty_ruleset', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        routing_keys: build.template(std.get(block, 'routing_keys', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      routing_keys: resource.field(self._.blocks, 'routing_keys'),
    },
    schedule(name, block): {
      local resource = blockType.resource('pagerduty_schedule', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
      }),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
    },
    service(name, block): {
      local resource = blockType.resource('pagerduty_service', name),
      _: resource._(block, {
        acknowledgement_timeout: build.template(std.get(block, 'acknowledgement_timeout', null)),
        alert_creation: build.template(std.get(block, 'alert_creation', null)),
        auto_resolve_timeout: build.template(std.get(block, 'auto_resolve_timeout', null)),
        description: build.template(std.get(block, 'description', null)),
        escalation_policy: build.template(std.get(block, 'escalation_policy', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        teams: build.template(std.get(block, 'teams', null)),
        type: build.template(std.get(block, 'type', null)),
      }),
      acknowledgement_timeout: resource.field(self._.blocks, 'acknowledgement_timeout'),
      alert_creation: resource.field(self._.blocks, 'alert_creation'),
      auto_resolve_timeout: resource.field(self._.blocks, 'auto_resolve_timeout'),
      description: resource.field(self._.blocks, 'description'),
      escalation_policy: resource.field(self._.blocks, 'escalation_policy'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      teams: resource.field(self._.blocks, 'teams'),
      type: resource.field(self._.blocks, 'type'),
    },
    service_custom_field(name, block): {
      local resource = blockType.resource('pagerduty_service_custom_field', name),
      _: resource._(block, {
        data_type: build.template(std.get(block, 'data_type', null)),
        default_value: build.template(std.get(block, 'default_value', null)),
        description: build.template(std.get(block, 'description', null)),
        display_name: build.template(block.display_name),
        enabled: build.template(std.get(block, 'enabled', null)),
        field_options: build.template(std.get(block, 'field_options', null)),
        field_type: build.template(std.get(block, 'field_type', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(std.get(block, 'name', null)),
        'self': build.template(std.get(block, 'self', null)),
        summary: build.template(std.get(block, 'summary', null)),
        type: build.template(std.get(block, 'type', null)),
      }),
      data_type: resource.field(self._.blocks, 'data_type'),
      default_value: resource.field(self._.blocks, 'default_value'),
      description: resource.field(self._.blocks, 'description'),
      display_name: resource.field(self._.blocks, 'display_name'),
      enabled: resource.field(self._.blocks, 'enabled'),
      field_options: resource.field(self._.blocks, 'field_options'),
      field_type: resource.field(self._.blocks, 'field_type'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      'self': resource.field(self._.blocks, 'self'),
      summary: resource.field(self._.blocks, 'summary'),
      type: resource.field(self._.blocks, 'type'),
    },
    service_custom_field_value(name, block): {
      local resource = blockType.resource('pagerduty_service_custom_field_value', name),
      _: resource._(block, {
        custom_fields: build.template(std.get(block, 'custom_fields', null)),
        id: build.template(std.get(block, 'id', null)),
        service_id: build.template(block.service_id),
      }),
      custom_fields: resource.field(self._.blocks, 'custom_fields'),
      id: resource.field(self._.blocks, 'id'),
      service_id: resource.field(self._.blocks, 'service_id'),
    },
    service_integration(name, block): {
      local resource = blockType.resource('pagerduty_service_integration', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        integration_key: build.template(std.get(block, 'integration_key', null)),
        integration_summary: build.template(block.integration_summary),
        service_name: build.template(block.service_name),
      }),
      id: resource.field(self._.blocks, 'id'),
      integration_key: resource.field(self._.blocks, 'integration_key'),
      integration_summary: resource.field(self._.blocks, 'integration_summary'),
      service_name: resource.field(self._.blocks, 'service_name'),
    },
    standards(name, block): {
      local resource = blockType.resource('pagerduty_standards', name),
      _: resource._(block, {
        resource_type: build.template(std.get(block, 'resource_type', null)),
        standards: build.template(std.get(block, 'standards', null)),
      }),
      resource_type: resource.field(self._.blocks, 'resource_type'),
      standards: resource.field(self._.blocks, 'standards'),
    },
    standards_resource_scores(name, block): {
      local resource = blockType.resource('pagerduty_standards_resource_scores', name),
      _: resource._(block, {
        id: build.template(block.id),
        resource_type: build.template(block.resource_type),
        score: build.template(std.get(block, 'score', null)),
        standards: build.template(std.get(block, 'standards', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      resource_type: resource.field(self._.blocks, 'resource_type'),
      score: resource.field(self._.blocks, 'score'),
      standards: resource.field(self._.blocks, 'standards'),
    },
    standards_resources_scores(name, block): {
      local resource = blockType.resource('pagerduty_standards_resources_scores', name),
      _: resource._(block, {
        ids: build.template(block.ids),
        resource_type: build.template(block.resource_type),
        resources: build.template(std.get(block, 'resources', null)),
      }),
      ids: resource.field(self._.blocks, 'ids'),
      resource_type: resource.field(self._.blocks, 'resource_type'),
      resources: resource.field(self._.blocks, 'resources'),
    },
    tag(name, block): {
      local resource = blockType.resource('pagerduty_tag', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        label: build.template(block.label),
      }),
      id: resource.field(self._.blocks, 'id'),
      label: resource.field(self._.blocks, 'label'),
    },
    team(name, block): {
      local resource = blockType.resource('pagerduty_team', name),
      _: resource._(block, {
        default_role: build.template(std.get(block, 'default_role', null)),
        description: build.template(std.get(block, 'description', null)),
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        parent: build.template(std.get(block, 'parent', null)),
      }),
      default_role: resource.field(self._.blocks, 'default_role'),
      description: resource.field(self._.blocks, 'description'),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      parent: resource.field(self._.blocks, 'parent'),
    },
    team_members(name, block): {
      local resource = blockType.resource('pagerduty_team_members', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        members: build.template(std.get(block, 'members', null)),
        team_id: build.template(block.team_id),
      }),
      id: resource.field(self._.blocks, 'id'),
      members: resource.field(self._.blocks, 'members'),
      team_id: resource.field(self._.blocks, 'team_id'),
    },
    teams(name, block): {
      local resource = blockType.resource('pagerduty_teams', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        query: build.template(std.get(block, 'query', null)),
        teams: build.template(std.get(block, 'teams', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      query: resource.field(self._.blocks, 'query'),
      teams: resource.field(self._.blocks, 'teams'),
    },
    user(name, block): {
      local resource = blockType.resource('pagerduty_user', name),
      _: resource._(block, {
        description: build.template(std.get(block, 'description', null)),
        email: build.template(block.email),
        id: build.template(std.get(block, 'id', null)),
        job_title: build.template(std.get(block, 'job_title', null)),
        name: build.template(std.get(block, 'name', null)),
        role: build.template(std.get(block, 'role', null)),
        time_zone: build.template(std.get(block, 'time_zone', null)),
      }),
      description: resource.field(self._.blocks, 'description'),
      email: resource.field(self._.blocks, 'email'),
      id: resource.field(self._.blocks, 'id'),
      job_title: resource.field(self._.blocks, 'job_title'),
      name: resource.field(self._.blocks, 'name'),
      role: resource.field(self._.blocks, 'role'),
      time_zone: resource.field(self._.blocks, 'time_zone'),
    },
    user_contact_method(name, block): {
      local resource = blockType.resource('pagerduty_user_contact_method', name),
      _: resource._(block, {
        address: build.template(std.get(block, 'address', null)),
        blacklisted: build.template(std.get(block, 'blacklisted', null)),
        country_code: build.template(std.get(block, 'country_code', null)),
        device_type: build.template(std.get(block, 'device_type', null)),
        enabled: build.template(std.get(block, 'enabled', null)),
        id: build.template(std.get(block, 'id', null)),
        label: build.template(block.label),
        send_short_email: build.template(std.get(block, 'send_short_email', null)),
        type: build.template(block.type),
        user_id: build.template(block.user_id),
      }),
      address: resource.field(self._.blocks, 'address'),
      blacklisted: resource.field(self._.blocks, 'blacklisted'),
      country_code: resource.field(self._.blocks, 'country_code'),
      device_type: resource.field(self._.blocks, 'device_type'),
      enabled: resource.field(self._.blocks, 'enabled'),
      id: resource.field(self._.blocks, 'id'),
      label: resource.field(self._.blocks, 'label'),
      send_short_email: resource.field(self._.blocks, 'send_short_email'),
      type: resource.field(self._.blocks, 'type'),
      user_id: resource.field(self._.blocks, 'user_id'),
    },
    users(name, block): {
      local resource = blockType.resource('pagerduty_users', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        team_ids: build.template(std.get(block, 'team_ids', null)),
        users: build.template(std.get(block, 'users', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      team_ids: resource.field(self._.blocks, 'team_ids'),
      users: resource.field(self._.blocks, 'users'),
    },
    vendor(name, block): {
      local resource = blockType.resource('pagerduty_vendor', name),
      _: resource._(block, {
        id: build.template(std.get(block, 'id', null)),
        name: build.template(block.name),
        type: build.template(std.get(block, 'type', null)),
      }),
      id: resource.field(self._.blocks, 'id'),
      name: resource.field(self._.blocks, 'name'),
      type: resource.field(self._.blocks, 'type'),
    },
  },
};

local providerWithConfiguration = provider(null, null) + {
  withConfiguration(alias, block): provider(block, {
    alias: alias,
    api_url_override: build.template(std.get(block, 'api_url_override', null)),
    insecure_tls: build.template(std.get(block, 'insecure_tls', null)),
    service_region: build.template(std.get(block, 'service_region', null)),
    skip_credentials_validation: build.template(std.get(block, 'skip_credentials_validation', null)),
    token: build.template(std.get(block, 'token', null)),
    user_token: build.template(std.get(block, 'user_token', null)),
  }),
};

providerWithConfiguration
